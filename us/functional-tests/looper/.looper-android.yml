inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - pr: disabled
      - push:
          manualOnly: true

      - manual:
          name: Run Android Example Test
          call: run_tests(TEST_TAGS = 'example-test', SAUCE_APP = 'storage:filename=glass-development-latest.apk', DEPENDENCY_PROFILE = 'looper-prod')

# Run E2E flows on Prod on development build
      - manual:
          name: Run Functional Cart Flows- All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'fn-test', DEPENDENCY_PROFILE = 'looper-prod')

      - manual:
          name: Run Functional Checkout Flows- All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'prod-functional-checkout', DEPENDENCY_PROFILE = 'looper-prod-checkout-release')

      # - cron:
      #     spec: "0 11,17,23 * * 3-7"
      #     call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'prod-e2e', DEPENDENCY_PROFILE = 'looper-prod')


  - spec: us/release-latest
    scheduling: concurrent

    triggers:
      - pr: disabled
      - push:
          manualOnly: true

      - manual:
          name: Run Functional Cart Flows- All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'fn-test', DEPENDENCY_PROFILE = 'looper-prod')
      
      - manual:
          name: Run Functional Checkout Flows - All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'prod-functional-checkout', DEPENDENCY_PROFILE = 'looper-prod-checkout-release')


      # - cron:
      #     spec: "0 11,17,23 * * 3-7"
      #     call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'prod-e2e', DEPENDENCY_PROFILE = 'looper-prod')



envs:
  global:
    variables:
      MARKET: us
      APP_PLATFORM: android
      # SLACK_CHANNEL: r2-glass-test-result # Add your own team's test result slack channel. Also, make sure to add looperbot app to channel.
      # TESTRAIL_PROJECT_ID: 133 # OPTIONAL: If used, a new Testrail plan id will be generated on this project id for each looper run.
      # TESTRAIL_PLAN_ID: '' # OPTIONAL: Declare global var TESTRAIL_PLAN_ID to be used in test configs
      # SKIP_SLACK_TEST_RUN: passed # OPTIONAL: Set value to skip posting slack message for test runs using condition "all" or "passed"

  env_android_prod_parameters:
    variables:
      DEPENDENCY_FILE_NAME: us/functional-tests/dependencies/android/android-default.yaml
      # DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      # SLACK_CHANNEL: 
      # SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
      #         *App Build*: ${SAUCE_APP}\n
      #         *Build Link*: ${BUILD_URL}\n
      #         *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
      #         *Report Link*: ${REPORT_URL}"


flows:
  run_tests:
    - call: build(env_android_prod_parameters)
  
  run_prod_regression_base:
    - call: build(env_android_prod_parameters)


  run_prod_regression_flows:
    try:
      - parallel(failsafe):
        - call: run_prod_regression_base(POST_TO_ES = true, TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    # finally:
    #   - call: post_slack_test_plan


  post_to_anivia:
    try:
      - shell: node us/scripts/generate-sm-report.js
    catch:
      - echo "Unable to post results to Anivia - $flowErrorMessage"

parameters:
  - SAUCE_APP_FILE_NAME: {type: string, defaultValue: "storage:filename=", label: "OPTIONAL: Add file name of the feature build uploaded to sauce labs"}

