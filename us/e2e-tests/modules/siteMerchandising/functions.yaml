functions:

  - name: us.functions.homePage.validateStoryLink
    platform: android
    flow:
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.homePage.newCampaignLink
            - name: direction
              string: down
            - name: scrollPosition
              string: center
            - name: scrollLimit
              string: 25
      - if:
          identifier:
            present:
              - identifier: us.mappings.homePage.newCampaignLink
          then:
            - storeIn:
                key: homePagePass
                value: '"story": "${campaignName}"'
            - storeIn:
                key: storyStatus
                value: PASS
            - takeScreenshot: 
                fileLabel: homepage_story_${id}
            - arithmetic:
                expression: $ssCount + 1
                storeIn: ssCount
            - storeIn:
                key: itemScreenshotDetails
                value: '"${REPORT_PATH}/homepage_story_${id}_${ssCount}_${APPIUM_SESSION_ID}.png"'
            - if:
                condition: ${itemScreenshotsArray} == null
                then:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotDetails}
                else:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotsArray}, ${itemScreenshotDetails}
          else:           
            - storeIn:
                key: homePagePass
                value: '"story": "${campaignName}"'
            - storeIn:
                key: storyStatus
                value: FAIL
            - storeIn:
                key: testStatus
                value: failed
            # - failTest:
            #     message: "Failed - Campaign with name ${campaignName} UNAVAIABLE IN HOME PAGE"

  - name: us.functions.homePage.validateStoryLink
    platform: ios
    flow:
      - loop:
          begin: 0
          end: 17
          mode: increment
          storeIndex: i
          flow:
            - try:
                flow:
                  - verifyIdentifier:
                      timeout: 0
                      present:
                        - identifier: us.mappings.homePage.newCampaignLink
                  - log: Story link found
                  - break: true
                catch:
                  flow:
                    - scroll:
                        direction: down
                        #withinIdentifier: ModuleViewController.collectionView
                        wait: 1000
            # - if:
            #     identifier:
            #       present:
            #         - identifier: us.mappings.homePage.newCampaignLink
            #     then:
            #       - log: Story link found
            #       - break: true
            #     else:
            #       - scroll:
            #           direction: down
      - if:
          identifier:
            present:
              - identifier: us.mappings.homePage.newCampaignLink
          then:
            - storeIn:
                key: homePagePass
                value: '"story": "${campaignName}"'
            - storeIn:
                key: storyStatus
                value: PASS
            - takeScreenshot: 
                fileLabel: homepage_story_${id}
            - arithmetic:
                expression: $ssCount + 1
                storeIn: ssCount
            - storeIn:
                key: itemScreenshotDetails
                value: '"${REPORT_PATH}/homepage_story_${id}_${ssCount}_${APPIUM_SESSION_ID}.png"'
            - if:
                condition: ${itemScreenshotsArray} == null
                then:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotDetails}
                else:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotsArray}, ${itemScreenshotDetails}
          else:           
            - storeIn:
                key: homePagePass
                value: '"story": "${campaignName}"'
            - storeIn:
                key: storyStatus
                value: FAIL
            - storeIn:
                key: testStatus
                value: failed
            # - failTest:
            #     message: "Failed - Story with name ${campaignName} UNAVAIABLE IN HOME PAGE"

  # Open Item Page & fetch item Name
  # ---------------Params---------------
  # [mandatory]       ${itemId} - itemId of the item to open page through deeplink
  # ---------------Output---------------
  # ${itemName} - Stores the fetched ItemName in this variable
  - name: us.functions.itemPage.fetchItemName
    platform: android
    flow:
      # Deeplink into itempage page
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: walmart://ip/${itemId}
      - try:
          flow:
            - sleep:
                duration: 1000
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.itemPage.itemName
                then:
                  - log: Item name displayed
                else:
                  - sleep:
                      duration: 3000
                  - if:
                      identifier:
                        notPresent:
                          - identifier: us.mappings.itemPage.itemName
                      then:
                        - scroll:
                            direction: down
                            untilIdentifier: us.mappings.itemPage.itemName
            - getString:
                identifier: us.mappings.itemPage.itemName
                attribute: text
                storeIn: itemName
          catch:
            flow:
              - storeIn:
                  key: itemName
                  value: error

  - name: us.functions.itemPage.fetchItemName
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.tabBar.search
      - click:
          identifier: us.mappings.tabBar.search
          doubleClick: true
      - verifyIdentifier:
          present:
            - identifier: us.mappings.home.searchBar
      - click:
          identifier: us.mappings.home.searchBar
          wait: 3000
      - enterText:
          identifier: us.mappings.home.searchBar
          string: ${itemId}
          pressEnter: true

      - if:
          identifier:
            present:
              - identifier: us.mappings.browsePage.firstItemDetails
          then:
            - getString:
                identifier: us.mappings.browsePage.firstItemDetails
                attribute: name
                storeIn: itemName
            # - executeNode:
            #     file: us/e2e-tests/helpers/stringParsingSM.js
            #     args:
            #       - value: ${itemName}
            #       - value: replace
            #     getResponse:
            #       storeIn: itemName
          else:
            - storeIn:
                key: itemName
                value: error
            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: walmart://home

  # Fetched item name from item page for array of items
  # ---------------Params---------------
  # [mandatory]       ${listOfItems} - array of itemIds for fetching itemNames
  # ---------------Output---------------
  # ${listOfItemDetails} - Stores array of fetched itemNames in this variable in JSON format
  - name: us.functions.itemPage.fetchItemNamesOfList
    platform: android
    flow:
      - storeIn:
          key: totalItemsCount
          value: 0
      - storeIn:
          key: listOfItemDetails
          value: ''
      - storeIn:
          key: itemIdDetails
          value: '"-1":"na"'
      - loop:
          each: ${listOfItems}
          storeIndex: itemCount
          storeElement: itemId
          flow:
            - arithmetic:
                expression: $totalItemsCount + 1
                storeIn: totalItemsCount
            - executeFunction:
                name: us.functions.itemPage.fetchItemName
            # - executeNode:
            #     file: us/e2e-tests/helpers/stringParsingSM.js
            #     args:
            #       - value: ${itemName}
            #       - value: replaceOnly
            #     getResponse:
            #       storeIn: itemName
            - storeIn:
                key: listOfItemDetails
                value: ${listOfItemDetails}${itemName}####
            - storeIn:
                key: itemIdDetails
                value: '$itemIdDetails, "${totalItemsCount}":${itemId}'
      # - storeIn:
      #     key: listOfItemDetails
      #     value: '{ ${listOfItemDetails} }'
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${listOfItemDetails}
            - value: storeDetails
          getResponse:
            storeIn: listOfItemDetails
      - storeIn:
          key: itemIdDetails
          value: '{ ${itemIdDetails} }'

  - name: us.functions.itemPage.fetchItemNamesOfList
    platform: ios
    flow:
      - storeIn:
          key: totalItemsCount
          value: 0
      - storeIn:
          key: listOfItemDetails
          value: ''
      - storeIn:
          key: itemIdDetails
          value: '"-1":"na"'
      - loop:
          each: ${listOfItems}
          storeIndex: i
          storeElement: itemId
          flow:
            - arithmetic:
                expression: $totalItemsCount + 1
                storeIn: totalItemsCount
            # - executeFunction:
            #     name: us.functions.itemPage.fetchItemName

            # - verifyIdentifier:
            #     present:
            #       - identifier: us.mappings.tabBar.search
            # - click:
            #     identifier: us.mappings.tabBar.search
            #     doubleClick: true
            # - verifyIdentifier:
            #     present:
            #       - identifier: us.mappings.home.searchBar
            # - click:
            #     identifier: us.mappings.home.searchBar
            #     wait: 3000
            # - enterText:
            #     identifier: us.mappings.home.searchBar
            #     string: ${itemId}
            #     pressEnter: true
            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: walmart://search/?query=${itemId}

            - if:
                identifier:
                  present:
                    - identifier: us.mappings.browsePage.firstItemDetails
                then:
                  - getString:
                      identifier: us.mappings.search.excludeSponsoredFromSearchResult
                      attribute: label
                      storeIn: itemName
                  # - executeNode:
                  #     file: us/e2e-tests/helpers/stringParsingSM.js
                  #     args:
                  #       - value: ${itemName}
                  #       - value: replace
                  #     getResponse:
                  #       storeIn: itemName
                else:
                  - log: "item not available in search, deeplinking to item page"
                  - executeFunction:
                      name: us.functions.global.navigation.goToDeepLink
                      params:
                        - name: deepLinkUrl
                          string: walmart://ip/${itemId}
                  - if:
                      identifier:
                        present:
                          - identifier:  us.mappings.itemPage.itemName
                      then:
                        - getString:
                            identifier: us.mappings.itemPage.itemName
                            attribute: label
                            storeIn: itemName
                        - log: ${itemName}
                        - click:
                            identifier: us.mappings.item.closeButton
                      else:
                          - storeIn:
                              key: itemName
                              value: error
                          - executeFunction:
                              name: us.functions.global.navigation.goToDeepLink
                              params:
                                - name: deepLinkUrl
                                  string: walmart://home
            # - storeIn:
            #     key: listOfItemDetails
            #     value: '$listOfItemDetails, "${totalItemsCount}":"${itemName}"'
            - storeIn:
                key: itemIdDetails
                value: '$itemIdDetails, "${totalItemsCount}":${itemId}'
            - storeIn:
                key: listOfItemDetails
                value: ${listOfItemDetails}${itemName}####
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${listOfItemDetails}
            - value: storeDetails
          getResponse:
            storeIn: listOfItemDetails      
      # - storeIn:
      #     key: listOfItemDetails
      #     value: '{ ${listOfItemDetails} }'
      - storeIn:
          key: itemIdDetails
          value: '{ ${itemIdDetails} }'
      # - log: ${listOfItemDetails}

  - name: us.functions.browsePage.fetchItemName
    platform: android
    flow:
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: ${identifier}
            - name: direction
              string: ${direction}
            - name: scrollPosition
              string: center
      - if:
          identifier:
            present:
              - identifier: us.mappings.browsePage.nextSearchTile
          then:
            - executeFunction:
                name: us.functions.browsePage.skipSearchTileInItemLists
                params:
                  - name: identifier
                    string: us.mappings.browsePage.searchNextItem
          else:
            - log: Normal item
      - getString:
          identifier: ${identifier}
          attribute: content-desc
          storeIn: itemName

  - name: us.functions.browsePage.fetchItemNameMosaicGrid
    platform: android
    flow:
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: ${identifier}
            - name: direction
              string: ${direction}
      - if:
          identifier:
            present:
              - identifier: us.mappings.browsePage.nextSearchTile
          then:
            - executeFunction:
                name: us.functions.browsePage.skipSearchTileInItemLists
                params:
                  - name: identifier
                    string: us.mappings.browsePage.searchNextItem
          else:
            - log: Normal item
      - try:
          flow:
            - getString:
                identifier: ${identifier}
                attribute: content-desc
                storeIn: itemName
          catch:
            flow:
              - executeFunction:
                  name: us.functions.utils.scrollIfNotVisible
                  params:
                    - name: identifier
                      string: us.mappings.browsePage.changeInLayoutTitle
                    - name: direction
                      string: up
              # - log: breaking the loop due to change in layout
              # - break: true
              - storeIn:
                  key: itemType
                  value: normalGrid
              - storeIn:
                  key: direction
                  value: down
              - verifyIdentifier:
                  present:
                    - identifier: us.mappings.browsePage.changeInLayoutTitle
              - log: change in layout from mosaicGrid to normalGrid
              - getString:
                  identifier: us.mappings.browsePage.changeInLayoutFirstItem
                  attribute: content-desc
                  storeIn: itemName

  - name: us.functions.browsePage.fetchItemName
    platform: ios
    flow:
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: ${identifier}
            - name: direction
              string: down
            # - name: scrollPosition
            #   string: center
      - getString:
          identifier: ${fetchIdentifier}
          attribute: label
          storeIn: itemName

  - name: us.functions.browsePage.skipSearchTileInItemLists
    platform: android
    flow:
      - log: Skipping search tile, checking for next item
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: ${identifier}
            - name: direction
              string: down
            - name: scrollPosition
              string: center

  - name: us.functions.browsePage.getItemNameInitialisation
    platform: android
    flow:
      - storeIn:
          key: listOfItemDisplayed
          value: ''
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.browsePage.itemDisplayType
            - name: direction
              string: down
            - name: scrollPosition
              string: center
            - name: scrollLimit
              string: 10
      - if:
          identifier:
            present:
              - identifier: us.mappings.browsePage.listOrGridDisplayType
          then:
              - storeIn:
                  key: itemDisplayType
                  value: listOrGrid
              - storeIn:
                  key: direction
                  value: down
              - if:
                  identifier:
                    present:
                      - identifier: us.mappings.browsePage.mosaicGridDisplay
                  then:
                    - storeIn:
                        key: itemType
                        value: mosaicGrid
                  else:
                    - storeIn:
                        key: scrollPosition
                        value: center

          else:
            - storeIn:
                key: itemDisplayType
                value: carousel
            - storeIn:
                key: direction
                value: left
            - storeIn:
                key: scrollPosition
                value: center

  - name: us.functions.browsePage.fetchDisplayedItemNames
    platform: android
    flow:
      - executeFunction:
          name: us.functions.browsePage.getItemNameInitialisation
      - loop:
          begin: 1
          end: 17
          storeIndex: itemCount
          mode: increment
          flow:
            - if:
                condition: ${itemCount} <= 1
                then:
                  - getString:
                      identifier: us.mappings.browsePage.firstItemDetails
                      attribute: content-desc
                      storeIn: itemName
            - if:
                condition: ${itemCount} > 1
                then:
                  - if:
                      condition: ${itemDisplayType} == 'listOrGrid'
                      then:
                        - if:
                            condition: ${itemType} == 'mosaicGrid'
                            then:
                              - executeFunction:
                                  name: us.functions.browsePage.fetchItemNameMosaicGrid
                                  params:
                                    - name: identifier
                                      string: us.mappings.browsePage.nextItemDetailsMosaicGrid
                            else:
                              - executeFunction:
                                  name: us.functions.browsePage.fetchItemName
                                  params:
                                    - name: identifier
                                      string: us.mappings.browsePage.nextItemDetails
                      else:
                        - if:
                            condition: ${itemCount} == 7
                            then:
                              - break: true
                        - executeFunction:
                            name: us.functions.browsePage.fetchItemName
                            params:
                              - name: identifier
                                string: us.mappings.browsePage.nextItemCarouselItemName
                              - name: identifierScope
                                string: us.mappings.browsePage.itemCarouselScrollView
            - takeScreenshot: 
                fileLabel: item_${id}
            - storeIn:
                key: oldItemName
                value: ${itemName}
            - executeNode:
                file: us/e2e-tests/helpers/stringParsingSM.js
                args:
                  - value: ${itemName}
                  - value: split
                getResponse:
                  storeIn: itemName
            # - if:
            #     identifier:
            #       present:
            #         - identifier: us.mappings.browsePage.currentSelectedItemSponseredDetails
            #     then:
            #       - log: Skipping as this is sponsered item
            #     else:
            #       - executeNode:
            #           file: us/e2e-tests/helpers/stringParsingSM.js
            #           args:
            #             - value: ${oldItemName}
            #             - value: replaceOnly
            #           getResponse:
            #             storeIn: oldItemName
            #       - storeIn:
            #           key: listOfItemDisplayed
            #           value: '$listOfItemDisplayed, "${oldItemName}":${itemCount}'
            - storeIn:
                key: listOfItemDisplayed
                value: ${listOfItemDisplayed}${oldItemName}####

            - storeIn:
                key: oldItemName
                value: NA
      # - storeIn:
      #     key: listOfItemDisplayed
      #     value: '{ ${listOfItemDisplayed} }'
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${listOfItemDisplayed}
            - value: getNames
          getResponse:
            storeIn: listOfItemDisplayed
      - log: New data - ${listOfItemDisplayed}

  - name: us.mappings.utils.validateItemPresence
    flow:
      - executeNode:
          file: us/e2e-tests/helpers/validateDetailsForSM.js
          args:
            - value: validate
            - value: ${listOfItemDetails}
            - value: ${itemIdDetails}
            - value: ${listOfItemDisplayed}
            - value: ${REPORT_PATH}
            - value: ${id}
            - value: ${APPIUM_SESSION_ID}
            - value: ${ssCount}
            - value: ${itemScreenshotsArray}
            - value: ${storyStatus}
            - value: ${deepLinkStatus}
            - value: ${onlyItemValidation}
          getResponse:
            storeIn: itemStatus
      - storeIn:
          key: itemValidated
          value: true
      # checking if it is variant test case else skipping 
      - if:
          condition: ${variantItemsDetails}
          then:
          # making skeleton array with failed baseItemID and its corresponding variant items
            - log: ${variantItemsIds}
            - executeNode:
                file: us/e2e-tests/helpers/validateDetailsForVariantSM.js
                args:
                  - value: validate
                  - value: ${itemStatus}
                  - value: ${variantItemsIds}
                getResponse:
                  storeIn: skeletonArray
            # Checking if there are any failed baseItemID else skipping
            - if:
                condition: ${skeletonArray} == 'no_failed_items'
                then:
                  - log: no failed items for the baseitem given,skipping Variant check
                else:
                # Fetching the variant items to single string from the skeletonArray
                  - executeNode:
                      file: us/e2e-tests/helpers/validateDetailsForVariantSM.js
                      args:
                        - value: fetchItems
                        - value: ${skeletonArray}
                      getResponse:
                        storeIn: FailedItems
                  - log: ${FailedItems}
                  # Fetching the details of variant items 
                  - executeFunction:
                      name: us.functions.utils.getR2Array
                      params:
                        - name: data
                          string: ${FailedItems}
                  - executeFunction:
                      name: us.functions.itemPage.fetchItemNamesOfList
                      params:
                        - name: listOfItems
                          string: ${r2Array}
                  # Comparing the details of variant items to storyPage value true is given at last args so only the details of item will be stored
                  - executeNode:
                      file: us/e2e-tests/helpers/validateDetailsForSM.js
                      args:
                        - value: validate
                        - value: ${listOfItemDetails}
                        - value: ${itemIdDetails}
                        - value: ${listOfItemDisplayed}
                        - value: ${REPORT_PATH}
                        - value: ${id}
                        - value: ${APPIUM_SESSION_ID}
                        - value: ${ssCount}
                        - value: ${itemScreenshotsArray}
                        - value: ${storyStatus}
                        - value: ${deepLinkStatus}
                        - value: ${onlyItemValidation}
                        - value: true
                      getResponse:
                        storeIn: itemStatusVariant
                  - storeIn:
                      key: itemValidated
                      value: true
                  - log: ${itemStatusVariant}
                  # updating the variant items details with skeloton array 
                  - executeNode:
                      file: us/e2e-tests/helpers/validateDetailsForVariantSM.js
                      args:
                        - value: finalUpdate
                        - value: ${skeletonArray}
                        - value: ${itemStatusVariant}
                      getResponse:
                        storeIn: updatedSkeleton
                  - log: ${updatedSkeleton}
                  # merging the items status with variant item results to give updated itemStatus.
                  - executeNode:
                      file: us/e2e-tests/helpers/validateDetailsForVariantSM.js
                      args:
                        - value: merging
                        - value: ${itemStatus}
                        - value: ${updatedSkeleton}
                      getResponse:
                        storeIn: itemStatus
                  - log: ${itemStatus}
                  # Setting it true for comparing overall Status
                  - storeIn:
                      key: NeedToCompare
                      value: true

  - name: us.functions.utils.sm.afterSteps
    flow:

      - if:
          condition: ${storyStatus} == 'FAIL'
          then:
            - storeIn:
                key: stepFailed
                value: '"Story validation"'
            - storeIn:
                key: overallStatus
                value: 'FAIL'
            - if:
                condition: ${deepLinkStatus} == 'FAIL'
                then:
                  - storeIn:
                      key: stepFailed
                      value: '${stepFailed}, "Deeplink validation"'
          else:
            - if:
                condition: ${deepLinkStatus} == 'FAIL'
                then:
                  - storeIn:
                      key: stepFailed
                      value: '"Deeplink validation"'
                  - storeIn:
                      key: overallStatus
                      value: 'FAIL'
                else:
                  - storeIn:
                      key: overallStatus
                      value: 'PASS'

      - if:
          condition: ${zone} == null
          then:
            - storeIn:
                key: zone
                value: 0

      - if:
          condition: ${homePagePass} == null
          then:
            - if:
                condition: ${onlyItemValidation} != true
                then:
                  - storeIn:
                      key: homePagePass
                      value: '"story": "Not executed due to issue"'
                  - storeIn:
                      key: itemScreenshotsArray
                      value: 'null'
                  - storeIn:
                      key: additionalAppLandingPages
                      value: 'null'
                  - storeIn:
                      key: finalStatus
                      value: 'null'
                  - failTest:
                      message: 'Execution issue, retrying'

      - if:
          condition: ${allItems} == 'NA' || ${allItems} == ' '
          then:
            - storeIn:
                key: allItems
                value: 'null'
      - if:
          condition: ${itemValidated}
          then:
            - if:
                condition: ${onlyItemValidation}
                then:
                  - storeIn:
                      key: finalStatus
                      value: '{"sheet":"${buildKey}","contentZone":${zone},"modulesInfo":[{"productType":"${productType}", "category":"${category}", "tempoModuleType":"${tempoModuleType}", "story": "${campaignName}", "appLandingPage":"${campaignDeepLink}", "items": [ ${allItems} ], ${itemStatus} }]}'
                else:
                  - storeIn:
                      key: finalStatus
                      value: '{"sheet":"${buildKey}","contentZone":${zone},"modulesInfo":[{"productType":"${productType}", "category":"${category}", "tempoModuleType":"${tempoModuleType}", ${homePagePass}, "items": [ ${allItems} ], "storyStatus":"${storyStatus}","appLandingPage":"${campaignDeepLink}","appLandingPageResults":[ ${appLandingPageResults} ],"additionalAppLandingPages":[ ${additionalAppLandingPages} ], ${itemStatus} }]}'
          else:
            - if:
                condition: ${onlyItemValidation}
                then:
                  - storeIn:
                      key: finalStatus
                      value: '{"sheet":"${buildKey}","contentZone":${zone},"modulesInfo":[{"productType":"${productType}", "category":"${category}", "tempoModuleType":"${tempoModuleType}", "story": "${campaignName}", "appLandingPage":"${campaignDeepLink}", "items": [ ${allItems} ], "itemResults":[null],"Overall status":"FAIL" }]}'
                else:
                  - if:
                      condition: ${stepFailed} == null
                      then:
                        - storeIn:
                            key: finalStatus
                            value: '{"sheet":"${buildKey}","contentZone":${zone},"modulesInfo":[{"productType":"${productType}", "category":"${category}", "tempoModuleType":"${tempoModuleType}", ${homePagePass}, "items": [ ${allItems} ], "storyStatus":"${storyStatus}","Failed step":[ null ],"Overall status":"${overallStatus}","appLandingPage":"${campaignDeepLink}","appLandingPageResults":[ ${appLandingPageResults} ],"additionalAppLandingPages":[ ${additionalAppLandingPages} ],"itemResults":[ ${itemStatusArray} ],"screenshot":[ ${itemScreenshotsArray} ]}]}'
                      else:
                        - storeIn:
                            key: finalStatus
                            value: '{"sheet":"${buildKey}","contentZone":${zone},"modulesInfo":[{"productType":"${productType}", "category":"${category}", "tempoModuleType":"${tempoModuleType}", ${homePagePass}, "items": [ ${allItems} ], "storyStatus":"${storyStatus}","Failed step":[ ${stepFailed} ],"Overall status":"${overallStatus}","appLandingPage":"${campaignDeepLink}","appLandingPageResults":[ ${appLandingPageResults} ],"additionalAppLandingPages":[ ${additionalAppLandingPages} ],"itemResults":[ ${itemStatusArray} ],"screenshot":[ ${itemScreenshotsArray} ]}]}'
       # condition to check the finalstatus to compare overall status or not for variant test case                  
      - if:
          condition: ${NeedToCompare}
          then:
            - executeNode:
                file: us/e2e-tests/helpers/validateDetailsForVariantSM.js
                args:
                  - value: compare
                  - value: ${finalStatus}
                getResponse:
                  storeIn: finalStatus
            - log: ${finalStatus}
          else:  
            - log: $finalStatus}
      - executeNode:
          file: us/e2e-tests/helpers/validateIfFileExists.js
          args:
            - value: 'sm-results-${id}.json'
          getResponse:
            storeIn: fileCreated
      - if:
          condition: ${fileCreated} != 'created'
          then:
            - createFile:
                file: ./sm-results-${id}.json
                string: $finalStatus
            - log: File created
          else:
            - log: File already existing

  - name: us.functions.browsePage.openStoryPage
    platform: android
    flow:
      - if:
          condition: ${altCampaignLinks} != 'not available'
          then:
            - executeFunction:
                name: us.functions.browsePage.otherStoryPages
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: ${campaignDeepLink}
      - sleep:
          duration: 10000
      - takeScreenshot: 
          fileLabel: storyPage_${id}
      - arithmetic:
          expression: $ssCount + 1
          storeIn: ssCount
      - storeIn:
          key: itemScreenshotDetails
          value: '"${REPORT_PATH}/storyPage_${id}_${ssCount}_${APPIUM_SESSION_ID}.png"'
      - if:
          condition: ${itemScreenshotsArray} == null
          then:
            - storeIn:
                key: itemScreenshotsArray
                value: ${itemScreenshotDetails}
          else:
            - storeIn:
                key: itemScreenshotsArray
                value: ${itemScreenshotsArray}, ${itemScreenshotDetails}
      - try:
          flow:
            - verifyIdentifier:
                notPresent:
                  - identifier: us.mappings.homePage.signInButton
                  - identifier: us.mappings.storyPage.errorTitle
                  - identifier: us.mappings.storyPage.errorMessage
                  - identifier: us.mappings.storyPage.errorButton
                  - identifier: us.mappings.storypage.errorButtonSecondary
            - storeIn:
                key: deepLinkStatus
                value: 'PASS'
            - storeIn:
                key: appLandingPageResults
                value: '{"landingPage":"${campaignDeepLink}", "status":"PASS", "image":${itemScreenshotDetails}}'
          catch:
            flow:
              - storeIn:
                  key: deepLinkStatus
                  value: 'FAIL'
              - storeIn:
                  key: appLandingPageResults
                  value: '{"landingPage":"${campaignDeepLink}", "status":"FAIL", "image":${itemScreenshotDetails}}'
              # - failTest:
              #     message: "Failed - Invalid deeplink URL - ${campaignDeepLink}"

  - name: us.functions.browsePage.otherStoryPages
    platform: android
    flow:
      - executeFunction:
          name: us.functions.utils.getR2Array
          params:
            - name: data
              string: ${altCampaignLinks}
      - loop:
          each: ${r2Array}
          storeIndex: linkCount
          storeElement: deepLinkData
          flow:
            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: ${deepLinkData}
            - sleep:
                duration: 10000
            - takeScreenshot:
                fileLabel: storyPage_alt_${id}
            - arithmetic:
                expression: $ssCount + 1
                storeIn: ssCount
            - storeIn:
                key: itemScreenshotDetails
                value: '"${REPORT_PATH}/storyPage_alt_${id}_${ssCount}_${APPIUM_SESSION_ID}.png"'
            - try:
                flow:
                  - verifyIdentifier:
                      notPresent:
                        - identifier: us.mappings.homePage.signInButton
                        - identifier: us.mappings.storyPage.errorTitle
                        - identifier: us.mappings.storyPage.errorMessage
                        - identifier: us.mappings.storyPage.errorButton
                        - identifier: us.mappings.storypage.errorButtonSecondary
                  - if:
                      condition: ${additionalAppLandingPages} == null
                      then:
                        - storeIn:
                            key: additionalAppLandingPages
                            value: '{"landingPage":"${deepLinkData}", "status":"PASS", "image":${itemScreenshotDetails}}'
                      else:
                        - storeIn:
                            key: additionalAppLandingPages
                            value: '${additionalAppLandingPages}, {"landingPage":"${deepLinkData}", "status":"PASS", "image":${itemScreenshotDetails}}'
                catch:
                  flow:
                    - if:
                        condition: ${additionalAppLandingPages} == null
                        then:
                          - storeIn:
                              key: additionalAppLandingPages
                              value: '{"landingPage":"${deepLinkData}", "status":"FAIL", "image":${itemScreenshotDetails}}'
                        else:
                          - storeIn:
                              key: additionalAppLandingPages
                              value: '${additionalAppLandingPages}, {"landingPage":"${deepLinkData}", "status":"FAIL", "image":${itemScreenshotDetails}}'

            - if:
                condition: ${itemScreenshotsArray} == null
                then:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotDetails}
                else:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotsArray}, ${itemScreenshotDetails}
            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: 'walmart://home'
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.homePage.signInButton
            - sleep:
                duration: 1000

  - name: us.functions.browsePage.openStoryPage
    platform: ios
    flow:
      - if:
          condition: ${altCampaignLinks} != 'not available'
          then:
            - executeFunction:
                name: us.functions.browsePage.otherStoryPages
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: ${campaignDeepLink}
      - sleep:
          duration: 10000
      - takeScreenshot: 
          fileLabel: storyPage_${id}
      - arithmetic:
          expression: $ssCount + 1
          storeIn: ssCount
      - storeIn:
          key: itemScreenshotDetails
          value: '"${REPORT_PATH}/storyPage_${id}_${ssCount}_${APPIUM_SESSION_ID}.png"'
      - if:
          condition: ${itemScreenshotsArray} == null
          then:
            - storeIn:
                key: itemScreenshotsArray
                value: ${itemScreenshotDetails}
          else:
            - storeIn:
                key: itemScreenshotsArray
                value: ${itemScreenshotsArray}, ${itemScreenshotDetails}
      - try:
          flow:
            - verifyIdentifier:
                notPresent:
                  - identifier: us.mappings.homePage.element
                  - identifier: us.mappings.storyPage.errorTitle
                  - identifier: us.mappings.storyPage.errorMessage
                  - identifier: us.mappings.storyPage.errorButton
                  - identifier: us.mappings.storypage.errorButtonSecondary
                  - identifier: us.mappings.storypage.errorNoSearch
            - storeIn:
                key: deepLinkStatus
                value: 'PASS'
            - storeIn:
                key: appLandingPageResults
                value: '{"landingPage":"${campaignDeepLink}", "status":"PASS", "image":${itemScreenshotDetails}}'
          catch:
            flow:
              - storeIn:
                  key: deepLinkStatus
                  value: 'FAIL'
              - storeIn:
                  key: appLandingPageResults
                  value: '{"landingPage":"${campaignDeepLink}", "status":"FAIL", "image":${itemScreenshotDetails}}'
              # - failTest:
              #     message: "Failed - Invalid deeplink URL - ${campaignDeepLink}"

  - name: us.functions.browsePage.otherStoryPages
    platform: ios
    flow:
      - executeFunction:
          name: us.functions.utils.getR2Array
          params:
            - name: data
              string: ${altCampaignLinks}
      - loop:
          each: ${r2Array}
          storeIndex: linkCount
          storeElement: deepLinkData
          flow:
            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: ${deepLinkData}
            - sleep:
                duration: 10000
            - takeScreenshot:
                fileLabel: storyPage_alt_${id}
            - arithmetic:
                expression: $ssCount + 1
                storeIn: ssCount
            - storeIn:
                key: itemScreenshotDetails
                value: '"${REPORT_PATH}/storyPage_alt_${id}_${ssCount}_${APPIUM_SESSION_ID}.png"'
            - try:
                flow:
                  - verifyIdentifier:
                      notPresent:
                        - identifier: us.mappings.homePage.element
                        - identifier: us.mappings.storyPage.errorTitle
                        - identifier: us.mappings.storyPage.errorMessage
                        - identifier: us.mappings.storyPage.errorButton
                        - identifier: us.mappings.storypage.errorButtonSecondary
                        - identifier: us.mappings.storypage.errorNoSearch
                  - if:
                      condition: ${additionalAppLandingPages} == null
                      then:
                        - storeIn:
                            key: additionalAppLandingPages
                            value: '{"landingPage":"${deepLinkData}", "status":"PASS", "image":${itemScreenshotDetails}}'
                      else:
                        - storeIn:
                            key: additionalAppLandingPages
                            value: '${additionalAppLandingPages}, {"landingPage":"${deepLinkData}", "status":"PASS", "image":${itemScreenshotDetails}}'
                catch:
                  flow:
                    - if:
                        condition: ${additionalAppLandingPages} == null
                        then:
                          - storeIn:
                              key: additionalAppLandingPages
                              value: '{"landingPage":"${deepLinkData}", "status":"FAIL", "image":${itemScreenshotDetails}}'
                        else:
                          - storeIn:
                              key: additionalAppLandingPages
                              value: '${additionalAppLandingPages}, {"landingPage":"${deepLinkData}", "status":"FAIL", "image":${itemScreenshotDetails}}'

            - if:
                condition: ${itemScreenshotsArray} == null
                then:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotDetails}
                else:
                  - storeIn:
                      key: itemScreenshotsArray
                      value: ${itemScreenshotsArray}, ${itemScreenshotDetails}
            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: 'walmart://home'
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.homePage.element
            - sleep:
                duration: 1000

  - name: us.functions.browsePage.getItemNameInitialisation
    platform: ios
    flow:
      - storeIn:
          key: listOfItemDisplayed
          value: ''
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.browsePage.itemDisplayType
            - name: direction
              string: down
            - name: scrollPosition
              string: center
            - name: limit
              string: 10
      - if:
          identifier:
            present:
              - identifier: us.mappings.browsePage.listOrGridDisplayType
          then:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.browsePage.gridDisplay
                then:
                  - if:
                      identifier:
                        present:
                          - identifier: us.mappings.browsePage.mosaicGridDisplay
                      then:
                        - storeIn:
                            key: itemDisplayType
                            value: mosaicGrid
                      else:
                        - storeIn:
                            key: itemDisplayType
                            value: grid
                else:
                  - storeIn:
                      key: itemDisplayType
                      value: list
            - getString:
                identifier: us.mappings.browsePage.listOrGridDisplayType
                attribute: name
                storeIn: itemIndex
            - executeNode:
                file: us/e2e-tests/helpers/stringParsingSM.js
                args:
                  - value: ${itemIndex}
                  - value: getIndex
                getResponse:
                  storeIn: itemIndex
          else:
            - storeIn:
                key: itemDisplayType
                value: carousel

  - name: us.functions.browsePage.fetchDisplayedItemNames
    platform: ios
    flow:
      - storeIn:
          key: testDataVar
          value: ''
      - executeFunction:
          name: us.functions.browsePage.getItemNameInitialisation
      - loop:
          begin: 1
          end: 17
          storeIndex: itemCount
          mode: increment
          flow:
            - arithmetic:
                expression: $itemCount - 1
                storeIn: index
            - if:
                condition: ${itemDisplayType} == 'listOrGrid'
                then:
                  - try:
                      flow:
                        - verifyIdentifier:
                            timeout: 0
                            visible:
                              - identifier: us.mappings.browsePage.listOrGridItemName
                                value: true
                      catch:
                        flow:
                          - scroll:
                              direction: down
                              untilIdentifier: us.mappings.browsePage.listOrGridNextItemName
                              position: center
                              scrollLimit: 5

                  - try:
                      flow: 
                        - getString:
                            identifier: us.mappings.browsePage.listOrGridItemName
                            attribute: label
                            storeIn: oldItemName
                        - takeScreenshot: 
                            fileLabel: item_${id}
                      catch:
                        flow:
                          - log: Skipping
                          - storeIn:
                              key: oldItemName
                              value: NA
                  # - executeFunction:
                  #     name: us.functions.utils.scrollIfNotVisible
                  #     params:
                  #       - name: identifier
                  #         string: us.mappings.browsePage.listOrGridItemName
                else:
                  - try:
                      flow:
                        - verifyIdentifier:
                            timeout: 0
                            visible:
                              - identifier: us.mappings.browsePage.itemCarouselItemName
                                value: true
                      catch:
                        flow:
                          - scroll:
                              direction: left
                              untilIdentifier: us.mappings.browsePage.itemCarouselNextItemName
                              # withinIdentifier: us.mappings.browsePage.itemCarouselScrollView
                          # - scroll:
                          #     direction: left
                          #     untilIdentifier: us.mappings.browsePage.itemCarouselItemName
                          #     withinIdentifier: us.mappings.browsePage.itemCarouselScrollView

                  - try:
                      flow: 
                        - getString:
                            identifier: us.mappings.browsePage.itemCarouselItemName
                            attribute: label
                            storeIn: oldItemName
                        - takeScreenshot: 
                            fileLabel: item_${id}
                      catch:
                        flow:
                          - log: Skipping
                          - storeIn:
                              key: oldItemName
                              value: NA
                  # - executeFunction:
                  #     name: us.functions.utils.scrollIfNotVisible
                  #     params:
                  #       - name: identifier
                  #         string: us.mappings.browsePage.itemCarouselItemName
                  #       - name: identifierScope
                  #         string: us.mappings.browsePage.itemCarouselScrollView
            # - try:
            #     flow: 
            #       - getString:
            #           identifier: ${identifier}
            #           attribute: label
            #           storeIn: oldItemName
            #       - takeScreenshot: 
            #           fileLabel: item_${id}
            #     catch:
            #       flow:
            #         - log: Skipping
            #         - storeIn:
            #             key: oldItemName
            #             value: NA

            # - try:
            #     flow:
            #       - verifyValue:
            #           identifier: ${oldItemName}
            #           contains: Sponsored
            #       - log: Skipping as this is sponsered item
            #     catch:
            #       flow:
            #         - storeIn:
            #             key: testDataVar
            #             value: ${testDataVar}${oldItemName}----
                    # - log: ${testDataVar}
                    # - executeNode:
                    #     file: us/e2e-tests/helpers/stringParsingSM.js
                    #     args:
                    #       - value: ${oldItemName}
                    #       - value: replace
                    #     getResponse:
                    #       storeIn: oldItemName
                    # - storeIn:
                    #     key: listOfItemDisplayed
                    #     value: '$listOfItemDisplayed, "${oldItemName}":${itemCount}'
            - storeIn:
                key: testDataVar
                value: ${testDataVar}${oldItemName}####
            # - log: ${testDataVar}

            - storeIn:
                key: oldItemName
                value: NA
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${testDataVar}
            - value: getNames
          getResponse:
            storeIn: testDataVar

      # - storeIn:
      #     key: listOfItemDisplayed
      #     value: '{ ${listOfItemDisplayed} }'
      - log: New data - ${testDataVar}
      # - log: Old data - ${listOfItemDisplayed}

  - name: us.functions.browsePage.fetchCarouselDisplayedItemNames
    platform: ios
    flow:
      - loop:
          begin: 1
          end: 7
          storeIndex: itemCount
          mode: increment
          flow:
            - arithmetic:
                expression: $itemCount - 1
                storeIn: index

            - try:
                flow:
                  - verifyIdentifier:
                      timeout: 0
                      visible:
                        - identifier: us.mappings.browsePage.itemCarouselItemName
                          value: true
                catch:
                  flow:
                    - scroll:
                        direction: left
                        untilIdentifier: us.mappings.browsePage.itemCarouselNextItemName
                        # withinIdentifier: us.mappings.browsePage.itemCarouselScrollView
                        wait: 1000

            - try:
                flow: 
                  - getString:
                      identifier: us.mappings.browsePage.itemCarouselItemName
                      attribute: label
                      storeIn: oldItemName
                  - takeScreenshot: 
                      fileLabel: item_${id}
                catch:
                  flow:
                    - log: Skipping
                    - storeIn:
                        key: oldItemName
                        value: NA

            - storeIn:
                key: listOfItemDisplayed
                value: ${listOfItemDisplayed}${oldItemName}####

            - storeIn:
                key: oldItemName
                value: NA
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${listOfItemDisplayed}
            - value: getNames
          getResponse:
            storeIn: listOfItemDisplayed
      - log: New data - ${listOfItemDisplayed}

  - name: us.functions.browsePage.fetchListDisplayedItemNames
    platform: ios
    flow:
      - loop:
          begin: 1
          end: 17
          storeIndex: itemCount
          mode: increment
          flow:
            - arithmetic:
                expression: $itemCount - 1
                storeIn: index

            - try:
                flow:
                  - verifyIdentifier:
                      timeout: 0
                      visible:
                        - identifier: us.mappings.browsePage.listOrGridItemName
                          value: true
                catch:
                  flow:
                    - scroll:
                        direction: down
                        untilIdentifier: us.mappings.browsePage.listOrGridNextItemName
                        #withinIdentifier: //XCUIElementTypeCollectionView[contains(@name, "SearchResultsViewController")]
                        wait: 2000
                        scrollLimit: 5

            - try:
                flow: 
                  - getString:
                      identifier: us.mappings.browsePage.listOrGridItemName
                      attribute: label
                      storeIn: oldItemName
                  - takeScreenshot: 
                      fileLabel: item_${id}
                catch:
                  flow:
                    - log: Skipping
                    - storeIn:
                        key: oldItemName
                        value: NA

            - storeIn:
                key: listOfItemDisplayed
                value: ${listOfItemDisplayed}${oldItemName}####

            - storeIn:
                key: oldItemName
                value: NA
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${listOfItemDisplayed}
            - value: getNames
          getResponse:
            storeIn: listOfItemDisplayed
      - log: New data - ${listOfItemDisplayed}    

  - name: us.functions.browsePage.fetchGridDisplayedItemNames
    platform: ios
    flow:
      - loop:
          begin: 1
          end: 17
          storeIndex: itemCount
          mode: increment
          flow:
            - arithmetic:
                expression: $itemCount - 1
                storeIn: index
            - try:
                flow:
                  - getString:
                      identifier: us.mappings.browsePage.gridItemName
                      attribute: label
                      storeIn: oldItemName
                  - takeScreenshot: 
                      fileLabel: item_${id}
                catch:
                  flow:
                    - arithmetic:
                        expression: $itemCount + 1
                        storeIn: indexNext
                    - arithmetic:
                        expression: $itemCount + 2
                        storeIn: indexAltNext
                    - scroll:
                        direction: down
                        untilIdentifier: us.mappings.browsePage.gridNextItemName
                        #withinIdentifier: //XCUIElementTypeCollectionView[contains(@name, "SearchResultsViewController")]
                        wait: 2000
                        scrollLimit: 5
                    - getString:
                        identifier: us.mappings.browsePage.gridItemName
                        attribute: label
                        storeIn: oldItemName
                    - takeScreenshot: 
                        fileLabel: item_${id}

            - storeIn:
                key: listOfItemDisplayed
                value: ${listOfItemDisplayed}${oldItemName}####

            - storeIn:
                key: oldItemName
                value: NA
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${listOfItemDisplayed}
            - value: getNames
          getResponse:
            storeIn: listOfItemDisplayed

      - log: New data - ${listOfItemDisplayed}

  - name: us.functions.browsePage.fetchMosaicGridDisplayedItemNames
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: //XCUIElementTypeCell[@name="MosaicGridTileTakeoverCell_tileTakeoverCell_position_0"] | //XCUIElementTypeCell[@name="MosaicGridCoordinator_listProductCell_indexPath_${itemIndex}_1"]
          then:
            - storeIn:
                key: beginIndex
                value: 2
             # This statement confirms the item tile identifier begin index starts with 1 or 2 for mosaic grid page 
            - if:
                identifier:
                  notPresent:
                    - identifier: us.mappings.browsePage.gridMosaicItemCheckingBeginIndex
                then:
                  - storeIn:
                      key: beginIndex
                      value: 3
          else:
            - storeIn:
                key: beginIndex
                value: 1
      - loop:
          begin: ${beginIndex}
          end: 17
          storeIndex: itemCount
          mode: increment
          flow:
            - arithmetic:
                expression: $itemCount - 1
                storeIn: index
            - try:
                flow:
                  - getString:
                      identifier: us.mappings.browsePage.gridMosaicItemName
                      attribute: label
                      storeIn: oldItemName
                  - takeScreenshot: 
                      fileLabel: item_${id}
                catch:
                  flow:
                    - scroll:
                        direction: down
                        untilIdentifier: //XCUIElementTypeCell[@name="MosaicGridTileTakeoverCell_tileTakeoverCell_position_${itemIndex}"] | //XCUIElementTypeCell[@name="MosaicGridBannerCell_banner_position_${itemIndex}"] | //*[contains(@name, "MosaicGridCoordinator_gridProductCell") and (contains(@name, "ProductCell_indexPath_${itemIndex}_${itemCount}"))]
                        scrollLimit: 5
                        position:  center
                    - if:
                        identifier:
                          present:
                            - identifier: us.mappings.browsePage.gridMosaicTileWithoutItems
                        then:
                          - log: Skipping 
                          - storeIn:
                              key: oldItemName
                              value: NA
                        else:
                          - try:
                              flow:
                                - getString:
                                    identifier: us.mappings.browsePage.gridMosaicItemName
                                    attribute: label
                                    storeIn: oldItemName
                                - takeScreenshot: 
                                    fileLabel: item_${id}
                              catch:
                                flow:
                                  - if:
                                      condition: ${index} > 8
                                      then:
                                        - log: Change in layout from mosaicGrid to normal grid 
                                        - break: true
                                      else:
                                        - failTest: 
                                            message: error fetching item at index ${index}                                                          

            - storeIn:
                key: listOfItemDisplayed
                value: ${listOfItemDisplayed}${oldItemName}####

            - storeIn:
                key: oldItemName
                value: NA
      - executeNode:
          file: us/e2e-tests/helpers/stringParsingSM.js
          args:
            - value: ${listOfItemDisplayed}
            - value: getNames
          getResponse:
            storeIn: listOfItemDisplayed

      - log: New data - ${listOfItemDisplayed}

  - name: us.functions.browsePage.deepLinkValidations
    platform: ios
    flow:
      - executeFunction:
          name: us.functions.utils.getR2Array
          params:
            - name: data
              string: ${deepLinkUrls}
      - loop:
          each: ${r2Array}
          storeIndex: linkCount
          storeElement: deepLinkData
          flow:
            - if:
                condition: ${inputLinks} == null
                then:
                  - storeIn:
                      key: inputLinks
                      value: '"${deepLinkData}"'
                else:
                  - storeIn:
                      key: inputLinks
                      value: '${inputLinks}, "${deepLinkData}"'
            - try:
                flow:
                  - executeNode:
                      file: us/e2e-tests/helpers/validateDeepLinkFormat.js
                      args:
                        - value: ${deepLinkData}
                      getResponse:
                        storeIn: deepLinkFormat
                  - log: ${deepLinkData}
                  - log: ${deepLinkFormat}
                  - verifyValue:
                      identifier: $deepLinkFormat
                      contains: 'valid'
                  - openLink: ${deepLinkData}
                  - executeFunction:
                      name: us.functions.global.navigation.openDeepLink
                  - sleep:
                      duration: 10000
                  - if:
                      identifier:
                        present:
                          - identifier: WelcomeView.emailField
                      then:
                        - log: Sign In required
                        - executeNode:
                            file: us/e2e-tests/helpers/getDeepLinkType.js
                            args:
                              - value: ${deepLinkData}
                            getResponse:
                              storeIn: deepLinkType
                        - if:
                            condition: ${deepLinkType} == 'wPlus'
                            then:
                              - executeFunction:
                                  name: us.functions.global.authentication.signInAccount
                                  params:
                                      - name: email
                                        string: paidannual8@cloudtest.org
                                      - name: password
                                        string: E2epassword
                            else:
                              - executeFunction:
                                  name: us.functions.global.authentication.signInAccount
                                  params:
                                      - name: email
                                        string: sm-prod@cloudtest.org
                                      - name: password
                                        string: E2epassword$
                  - verifyIdentifier:
                      notPresent:
                        # - identifier: us.mappings.homePage.element
                        - identifier: WelcomeView.emailField
                        - identifier: us.mappings.storyPage.errorTitle
                        - identifier: us.mappings.storyPage.errorMessage
                        - identifier: us.mappings.storyPage.errorButton
                        - identifier: us.mappings.storypage.errorButtonSecondary
                        - identifier: us.mappings.storypage.errorNoSearch
                  - if:
                      identifier:
                        present:
                          - identifier: us.mappings.homePage.element
                      then:
                        - verifyIdentifier:
                            visible:
                              - identifier: us.mappings.homePage.element
                                value: false
                      else:
                        - log: 'Deeplink loaded properly'                       
                  - if:
                      condition: ${deepLinkStatus} == null
                      then:
                        - storeIn:
                            key: deepLinkStatus
                            value: '{"${deepLinkData}":"PASS"}'
                      else:
                        - storeIn:
                            key: deepLinkStatus
                            value: '${deepLinkStatus}, {"${deepLinkData}":"PASS"}'
                catch:
                  flow:
                    - if:
                        condition: ${deepLinkStatus} == null
                        then:
                          - storeIn:
                              key: deepLinkStatus
                              value: '{"${deepLinkData}":"FAIL"}'
                        else:
                          - storeIn:
                              key: deepLinkStatus
                              value: '${deepLinkStatus}, {"${deepLinkData}":"FAIL"}'

            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: 'walmart://home'
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.homePage.element
            - sleep:
                duration: 1000

  - name: us.functions.browsePage.deepLinkValidations
    platform: android
    flow:
      - executeFunction:
          name: us.functions.utils.getR2Array
          params:
            - name: data
              string: ${deepLinkUrls}
      - loop:
          each: ${r2Array}
          storeIndex: linkCount
          storeElement: deepLinkData
          flow:
            - if:
                condition: ${inputLinks} == null
                then:
                  - storeIn:
                      key: inputLinks
                      value: '"${deepLinkData}"'
                else:
                  - storeIn:
                      key: inputLinks
                      value: '${inputLinks}, "${deepLinkData}"'
            - try:
                flow:
                  - executeNode:
                      file: us/e2e-tests/helpers/validateDeepLinkFormat.js
                      args:
                        - value: ${deepLinkData}
                      getResponse:
                        storeIn: deepLinkFormat
                  - verifyValue:
                      identifier: $deepLinkFormat
                      contains: 'valid'
                  - openLink: ${deepLinkData}
                  - sleep:
                      duration: 10000
                  - if:
                      identifier:
                        present:
                          - identifier: com.walmart.android.debug:id/auth_field_email
                      then:
                        - log: Sign In required
                        - executeNode:
                            file: us/e2e-tests/helpers/getDeepLinkType.js
                            args:
                              - value: ${deepLinkData}
                            getResponse:
                              storeIn: deepLinkType
                        - if:
                            condition: ${deepLinkType} == 'wPlus'
                            then:
                              - executeFunction:
                                  name: us.functions.global.authentication.signInAccount
                                  params:
                                      - name: email
                                        string: paidannual8@cloudtest.org
                                      - name: password
                                        string: E2epassword
                            else:
                              - executeFunction:
                                  name: us.functions.global.authentication.signInAccount
                                  params:
                                      - name: email
                                        string: sm-prod@cloudtest.org
                                      - name: password
                                        string: E2epassword$
                  - verifyIdentifier:
                      notPresent:
                        - identifier: com.walmart.android.debug:id/auth_field_email
                        - identifier: us.mappings.homePage.signInButton
                        - identifier: us.mappings.storyPage.errorTitle
                        - identifier: us.mappings.storyPage.errorMessage
                        - identifier: us.mappings.storyPage.errorButton
                        - identifier: us.mappings.storypage.errorButtonSecondary
                  - if:
                      condition: ${deepLinkStatus} == null
                      then:
                        - storeIn:
                            key: deepLinkStatus
                            value: '{"${deepLinkData}":"PASS"}'
                      else:
                        - storeIn:
                            key: deepLinkStatus
                            value: '${deepLinkStatus}, {"${deepLinkData}":"PASS"}'
                catch:
                  flow:
                    - if:
                        condition: ${deepLinkStatus} == null
                        then:
                          - storeIn:
                              key: deepLinkStatus
                              value: '{"${deepLinkData}":"FAIL"}'
                        else:
                          - storeIn:
                              key: deepLinkStatus
                              value: '${deepLinkStatus}, {"${deepLinkData}":"FAIL"}'
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.browsePage.navigateBack
                then:
                  - click:
                      identifier: us.mappings.browsePage.navigateBack
                  - sleep:
                      duration: 3000

            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: 'walmart://home'
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.homePage.signInButton
            - sleep:
                duration: 1000

  - name: us.functions.utils.sm-deep-link.afterSteps
    flow:
      - if:
          condition: ${moduleId} != null && ${inputLinks} != null
          then:
            - storeIn:
                key: finalStatus
                value: '{ "moduleId":"${moduleId}","link":[ ${inputLinks} ],"status": [ ${deepLinkStatus} ] }'
            - log: $finalStatus
            - executeNode:
                file: us/e2e-tests/helpers/validateIfFileExists.js
                args:
                  - value: 'sm-deep-link-results-${id}.json'
                getResponse:
                  storeIn: fileCreated
            - if:
                condition: ${fileCreated} != 'created'
                then:
                  - executeNode:
                      file: us/e2e-tests/helpers/removeFile.js
                      args:
                        - value: 'sm-deep-link-results-${id}.json'
                  - createFile:
                      file: ./sm-deep-link-results-${id}.json
                      string: $finalStatus
                  - log: File created
                else:
                  - log: File already existing
          else:
            - log: Skipping file creation
            - storeIn:
                key: inputLinks
                value: 'null'
            - storeIn:
                key: deepLinkStatus
                value: 'null'
            - failTest:
                message: Test failed (Retry available)
