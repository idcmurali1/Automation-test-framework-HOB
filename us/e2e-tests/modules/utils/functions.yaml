functions:

  - name: us.functions.utils.getR2FlowParameters
    flow:
      - storeIn:
          key: DATA_INPUT
          value: ${R2_FLOW_PARAMETERS}
      - log: $DATA_INPUT

  - name: us.functions.utils.verifyFile
    flow:
      - verifyFile:
          file: ./r2-start.json
          contains: '"startTest":true'
          timeout: 600000
          delete: true
          storeIn: FILE_CONTENTS
      - log: Data from file - $FILE_CONTENTS

  - name: us.functions.utils.createFile
    flow:
      - log: Creating r2-output.json
      - createFile:
          file: ./r2-output.json
          string: ${FILE_OUTPUT}

  - name: us.function.utils.getEnvironmentValue
    flow:
      - storeIn:
          key: executionStage
          value: Onboarding
      - storeIn:
          key: env
          value: us.data.env
      - getTimestamp:
          asDate: false
          storeIn: testStartTime

  - name: functions.utils.setPlatformInfo
    flow:
      - storeIn:
          key: executionStage
          value: Onboarding
      - storeIn:
          key: appPackage
          value: ${dependencies.general.appPackage}
      - if:
          condition: ${appPackage} == null
          then:
            - storeIn:
                key: platform
                value: iOS
          else:
            - storeIn:
                key: platform
                value: Android

  - name: us.functions.utils.getMappingValue
    flow:
      - storeIn:
          key: mappingData
          value: ${mappingVariable}

  ## Astro

  - name: us.functions.utils.astro.clearCart
    flow:
      - try:
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/customer/${custEmail}/clearcart
                requestMethod: DELETE
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                wait: 10000
                verifyResponseBodyContains:
                  - 'SUCCESS'
                verifyResponseCode: 200
                retriesOnFail: 5
                retryDelay: 2000
                getValue:
                  - key: astroStatus
                    storeIn: clearCartStatus
            - log: Cart cleared for ${custEmail}
          catch:
            flow:
              - if:
                  condition: ${clearCartStatus} != 'SUCCESS'
                  then:
                    - failTest:
                        message: "API_FAILURE - ASTRO - Cart not cleared"
  
  - name: us.functions.utils.astro.cancelOrder
    flow:
      - try:
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}/cancel?type=amend
                requestMethod: PUT
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                verifyResponseBodyContains:
                  - 'SUCCESS'
                verifyResponseCode: 200
                retryDelay: 2000
                requestBody: ${payload}
                getValue:
                  - key: astroStatus
                    storeIn: orderCancelationStatus
                  - key: astroDescription
                    storeIn: statusDescription
            - if:
                condition: ${orderCancelationStatus} == 'SUCCESS'
                then:
                  - log: ${orderNo}  order canceled
                  - break: true
                else:
                  - log: Retry after 10 secs
                  - sleep:
                      duration: 10000
      - if:
          condition: ${orderCancelationStatus} != 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - ${statusDescription}"

  - name: us.functions.utils.astro.getOrderStatus
    flow:
      - loop:
          begin: 0
          end: 4
          storeIndex: i
          mode: increment
          flow:
            - log: Get order status for ${orderNo}
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                requestMethod: GET
                # wait: 5000
                # verifyResponseCode: 200
                # verifyResponseBodyContains:
                #   - '"astroStatus":"SUCCESS"'
                # retriesOnFail: 3
                # retryDelay: 2000
                getValue:
                  - key: astroStatus
                    storeIn: getOrderStatus
                  - key: astroDescription
                    storeIn: statusDescription
            - if:
                condition: ${getOrderStatus} == 'SUCCESS'
                then:
                  - log: Order ${orderNo} found
                  - break: true
                else:
                  - log: Retry after 15 secs
                  - sleep:
                      duration: 15000
      - if:
          condition: ${getOrderStatus} != 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - ${statusDescription}"
          
  # [Utility to trigger order movement using Astro V3 API]
  # [mandatory] ${orderNo}    - Order number that has to be moved
  # [mandatory] ${orderType}  - Fulfillment type in the order to be moved
  # [mandatory] ${status}     - To which status the order needs to be moved
  - name: us.functions.utils.astro.triggerOrderMovement
    flow:
      - log: -------[START-TRIGGER UTILITY] - Order [ ${orderNo}-${orderType} ] movement to [ ${status} ] status-------
      - loop:
          begin: 1
          end: 4
          storeIndex: retryTriggerCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v3/teflon/order/${orderNo}
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                requestMethod: PUT
                verifyResponseCode: 200
                retriesOnFail: 3
                retryDelay: 180000
                requestBody: '{"fulfillmentGroups": [{"orderType":"$orderType","status": "$status"}]}'
                getValue:
                  - key: status
                    storeIn: responseTriggerStatus
                  - key: astroDescription
                    storeIn: failureReason
                  - key: astroDetails.description
                    storeIn: failureReasonDescription
            - if:
                condition: ${responseTriggerStatus} == 'SUCCESS'
                then:
                  - log: -------[END-TRIGGER UTILITY] - Order movement triggered successfully-------
                  - break: true
                else:
                  - if:
                      condition: ${altOrderType} != null
                      then:
                        - if:
                            condition: ${failureReason} == 'ORDER_FULFILLMENT_MISMATCH'
                            then:
                              - storeIn:
                                  key: orderType
                                  value: ${altOrderType}
                  #- log: ------------------------------------------------------------------------------------
                  - log: TRIGGER RETRY ${retryTriggerCount} - Triggering order movement again due to failure.
                  #- log: ------------------------------------------------------------------------------------
      - storeIn:
          key: altOrderType
          value: 'null'
      - if:
          condition: ${responseTriggerStatus} != 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - [ ${orderNo} ] Unable to trigger order movement ${failureReason} due to ${failureReasonDescription}"  

  # [Utility to validate order movement status using Astro V3 API]
  # [mandatory] ${orderNo}    - Order number that has to be moved
  # [mandatory] ${orderType}  - Fulfillment type in the order to be moved
  # [mandatory] ${status}     - To which status the order needs to be moved
  - name: us.functions.utils.astro.validateOrderMovement
    flow:
      - log: -------[START-VERIFY UTILITY] - Order [ ${orderNo}-${orderType} ] movement to [ ${status} ] status-------
      - loop:
          begin: 1
          end: 4
          storeIndex: retryValidationCount
          mode: increment
          flow:
            - sleep:
                duration: 10000
            - callAPI:
                url: http://astro.walmart.com/api/v3/db/astro/teflon/order?orderType=${orderType}&status=${status}&orderNo=${orderNo}
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                requestMethod: GET
                verifyResponseCode: 200
                retriesOnFail: 3
                retryDelay: 180000
                getResponse:
                  storeIn: orderResponse
                getValue:
                  - key: astroDetails[0].result
                    storeIn: responseValidationStatus
                  - key: astroDescription
                    storeIn: responseDetails
                  - key: astroDetails[0].eventErrors[0].failAt
                    storeIn: responseDetailsDetailed
                  - key: astroDetails[0].eventErrors[0].description
                    storeIn: responseDetailsDescription
            - if:
                condition: ${responseValidationStatus} == true
                then:
                  - break: true
                else:
                  #- log: -------------------------------------------------------------
                  - log: VERIFY RETRY - ${retryValidationCount} - Rechecking after 10s
                  #- log: -------------------------------------------------------------
                  - if:
                      condition: ${orderType} == 'FC_DELIVERY' || ${orderType} == 'MP_DELIVERY'
                      then:
                        - try:
                            flow:
                              - log: ${orderResponse}
                              - verifyValue:
                                  identifier: ${orderResponse}
                                  contains: _HOLD
                              - storeIn:
                                  key: orderBatchingHold
                                  value: true
                    # Utility to help release order batching hold
                              - if:
                                  condition: ${orderBatchingHold}
                                  then:
                                    - executeFunction:
                                        name: us.functions.utils.astro.releaseOrderHold
                                    - storeIn:
                                        key: orderBatchingHold
                                        value: false
                                    - break: true
                            catch:
                              flow:
                                - log: No order hold present
                            
      - log: -------[END-VERIFY UTILITY] - Order [ ${orderNo}-${orderType} ] movement to [ ${status} ] status-------

  # [Utility to move orders with one fulfillment type at a time]
  # [mandatory] ${orderNo}    - Order number that has to be moved
  # [mandatory] ${orderType}  - Fulfillment type in the order to be moved
  # [mandatory] ${status}     - To which status the order needs to be moved
  # -----------------------------------------------------------------------------------------------------------------------
  # Valid orderType-status combinations :
  # STORE_SCHEDULED_PICKUP/STORE_UNSCHEDULED_PICKUP - [PO Acknowledged/PO Pick Complete/PO Ready For Pickup/Customer Picked]
  # STORE_SCHEDULED_DELIVERY                        - [PO Acknowledged/PO Pick Complete/PO Out for Delivery/Delivered]
  # FC_DELIVERY/FC_DELIVERY_WPP                     - [Shipped/Delivered]
  # MP_DELIVERY/MP_WFS_DELIVERY                     - [PO Acknowledged/Shipped/Delivered]
  # -----------------------------------------------------------------------------------------------------------------------
  - name: us.functions.utils.astro.setOrderStatus
    flow:
      - log: -------[START-MOVE UTILITY] - Move order [ ${orderNo}-${orderType} ] to [ ${status} ] status-------

      # Fetch wait time constant set in mapping file
      - executeFunction:
          name: us.functions.utils.getMappingValue
          params:
            - name: mappingVariable
              string: us.data.sleep.time
      # Order movement loop [Total re-attempt - 3 times incase of failure in order movement]
      - loop:
          begin: 1
          end: 4
          storeIndex: retryMovementCount
          mode: increment
          flow:
            - log: ------------------------------------------------------------------------------------
            - log: Order movement attempt - ${retryMovementCount}
            - log: ------------------------------------------------------------------------------------

            - arithmetic:
                expression: ${mappingData} * 3
                storeIn: mappingData

            # Wait for 60/180/540(attempt-wise) secs before triggering the order movement if not successful in earlier attempt
            - log: Waiting for ${mappingData} seconds before order movement trigger on attempt - ${retryMovementCount}
            - sleep:
                duration: ${mappingData}

            # Trigger order movement for the required orderType
            - executeFunction:
                name: us.functions.utils.astro.triggerOrderMovement

            # Wait for 30(each attempt) secs before validating if order movement trigger is successful or not
            - sleep:
                duration: 30000

            # Validating order movement for the required orderType
            - executeFunction:
                name: us.functions.utils.astro.validateOrderMovement

            # Break re-attempt loop if order movement is successful
            - if:
                condition: ${responseValidationStatus} == true
                then:
                  - log: Order [ ${orderNo} ] successfully moved to [ ${status} ] status for fulfillment type [ ${orderType} ]
                  - break: true
                else:
                  - log: Retry after some wait time

      # Fail with appropriate error if orderType is not moved to required status even after all re-attempts
      - if:
          condition: ${responseValidationStatus} == true
          then:
            - log: -------[END-MOVE UTILITY] - Move order [ ${orderNo}-${orderType} ] to [ ${status} ] status-------
          else:
            - executeFunction:
               name: us.functions.utils.getFailureMessage
            - failTest:
                message: "API_FAILURE - ASTRO - Order [ ${orderNo} ] movement failed due to ${responseDetails} FailAt :[ ${responseDetailsDetailed} ] Description:[ ${responseDetailsDescription} ] ${failureMessage}"

  # [Utility is used to move order status for multiple fulfillment items at once]
  # [mandatory] orderNo     - Order number for which items needs to be moved
  # [mandatory] orderType1  - Fulfillment type in the order to be moved (1st item)
  # [mandatory] status1     - To which status the order needs to be moved (1st item)
  # [optional]  orderType2  - Fulfillment type in the order to be moved (2nd item)
  # [optional]  status2     - To which status the order needs to be moved (2nd item)
  # [optional]  orderType3  - Fulfillment type in the order to be moved (3rd item)
  # [optional]  status3     - To which status the order needs to be moved (3rd item)
  # -----------------------------------------------------------------------------------------------------------------------
  # Valid orderType-status combinations :
  # STORE_SCHEDULED_PICKUP/STORE_UNSCHEDULED_PICKUP - [PO Acknowledged/PO Pick Complete/PO Ready For Pickup/Customer Picked]
  # STORE_SCHEDULED_DELIVERY                        - [PO Acknowledged/PO Pick Complete/PO Out for Delivery/Delivered]
  # FC_DELIVERY/FC_DELIVERY_WPP                     - [Shipped/Delivered]
  # MP_DELIVERY/MP_WFS_DELIVERY                     - [PO Acknowledged/Shipped/Delivered]
  # -----------------------------------------------------------------------------------------------------------------------
  - name: us.functions.utils.astro.setMultilineOrderStatus
    flow:
      # Creating arrayList of orderTypes required for order movement based on params sent
      - storeIn:
          key: arrayList
          value: '[ "${orderType1}"'
      - if:
          condition: ${orderType2} != null
          then:
            - storeIn:
                key: arrayList
                value: ${arrayList}, "${orderType2}"
            - if:
                condition: ${orderType3} != null
                then:
                  - storeIn:
                      key: arrayList
                      value: ${arrayList}, "${orderType3}"
                  - if:
                      condition: ${orderType4} != null
                      then:
                        - storeIn:
                            key: arrayList
                            value: ${arrayList}, "${orderType4}"
      - storeIn:
          key: arrayList
          value: '${arrayList}]'

      # Variable to store orderTypes which are successful in order movement.
      # Used to skip already successful types during re-attempt
      - storeIn:
          key: completedOrderType
          value: ''

      # Fetch wait time constant set in mapping file
      - executeFunction:
          name: us.functions.utils.getMappingValue
          params:
            - name: mappingVariable
              string: us.data.sleep.time

      # Multifulfillment order movement loop [Total re-attempt - 3 times incase of failure of atleast one orderType movement]
      - loop:
          begin: 1
          end: 4
          storeIndex: retryMovementCount
          mode: increment
          flow:
            - log: ------------------------------------------------------------------------------------
            - log: MultiOrder movement attempt - ${retryMovementCount}
            - log: ------------------------------------------------------------------------------------
            - storeIn:
                key: allMoved
                value: true

            - arithmetic:
                expression: ${mappingData} * 3
                storeIn: mappingData

            # Wait for 60/180/540(attempt-wise) secs before triggering the order movement if not successful in earlier attempt
            - log: Waiting for ${mappingData} seconds before order movement trigger on attempt - ${retryMovementCount}
            - sleep:
                duration: ${mappingData}

            # Order movement triggering for each of the orderTypes required
            - loop:
                each: ${arrayList}
                storeIndex: i
                storeElement: type
                flow:
                  - try:
                      flow:
                        # Skip trigger if current orderType is already moved to required status
                        - verifyValue:
                            identifier: ${completedOrderType}
                            contains: ${type}
                        - log: Skipping retry trigger for ${type} as order movement is already successful
                      catch:
                        flow:
                          # Storing appropriate status for order movement
                          - if:
                              condition: $i == 0
                              then:
                                - storeIn:
                                    key: status
                                    value: ${status1}
                              else:
                                - if:
                                    condition: $i == 1
                                    then:
                                      - storeIn:
                                          key: status
                                          value: ${status2}
                                    else:
                                      - storeIn:
                                          key: status
                                          value: ${status3}
                          # Trigger order movement if it is yet to be completed
                          - executeFunction:
                              name: us.functions.utils.astro.triggerOrderMovement
                              params:
                                - name: orderType
                                  string: ${type}
                                - name: status
                                  string: ${status}
            # Wait for 30 secs before validating if order movement trigger is successful or not
            - sleep:
                duration: 30000

            # Validating order movement for each of the orderTypes triggered earlier
            - storeIn:
                key: errorDetails
                value: ''
            - loop:
                each: ${arrayList}
                storeIndex: i
                storeElement: type
                flow:
                  - try:
                      flow:
                        # Skip validation if current orderType is already moved to required status
                        - verifyValue:
                            identifier: ${completedOrderType}
                            contains: ${type}
                        - log: Skipping retry verification for ${type} as order movement is already successful
                      catch:
                        flow:
                          # Storing appropriate status for order movement validation
                          - if:
                              condition: $i == 0
                              then:
                                - storeIn:
                                    key: status
                                    value: ${status1}
                              else:
                                - if:
                                    condition: $i == 1
                                    then:
                                      - storeIn:
                                          key: status
                                          value: ${status2}
                                    else:
                                      - storeIn:
                                          key: status
                                          value: ${status3}
                          # Validating order movement if it is yet to be completed
                          - executeFunction:
                              name: us.functions.utils.astro.validateOrderMovement
                              params:
                                - name: orderType
                                  string: ${type}
                                - name: status
                                  string: ${status}

                          # If order movement is successful, storing orderType in a variable containing all successful ones
                          - if:
                              condition: ${responseValidationStatus} == true
                              then:
                                - log: Order [ ${orderNo} ] moved to [ ${status} ] status for type [ ${type} ]
                                - storeIn:
                                    key: completedOrderType
                                    value: ${completedOrderType}${type}
                              else:
                                # Variable set to false if even one orderType movement is un-successful. Used for loop break if all are moved successfully
                                - storeIn:
                                    key: allMoved
                                    value: false
                                - executeNode:
                                    file: us/e2e-tests/helpers/jsonParser.js
                                    args:
                                      - value: ${errorDetails}
                                      - value: ${type}
                                      - value: add
                                      - value: ${responseDetails}
                                    getResponse:
                                      storeIn: errorDetails
                                - log: Error Details - ${errorDetails}

            # Break loop instead of re-attempt as all orderTypes are moved to required status
            - if:
                condition: ${allMoved}
                then:
                  - log: All orderTypes in order [ ${orderNo} ] moved to required status
                  - break: true

      # Fail with appropriate error if all orderTypes are not moved to required status even after all re-attempts
      - if:
          condition: ${allMoved} != true
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - Order [ ${orderNo} ] movement through Astro API failed for few/all fulfillment types. Details- ${errorDetails}"
      - storeIn:
          key: completedOrderType
          value: ''
      - storeIn:
          key: orderType1
          value: 'null'
      - storeIn:
          key: orderType2
          value: 'null'
      - storeIn:
          key: orderType3
          value: 'null'

  - name: us.functions.utils.getFailureMessage
    flow:
      - if:
          condition: ${apiFetch}
          then:
            - if:
                condition: ${responseDetailsDetailed} == null
                then:
                  - storeIn:
                      key: responseDetailsDetailed
                      value: NA
                  - storeIn:
                      key: responseDetailsDescription
                      value: NA
            - if:
                condition: ${itemFilter} != null
                then:
                  - storeIn:
                      key: failureMessage
                      value: '[ Details : FailureType - OrderMovement, FulfillmentType - ${itemType}, FilterType - ${itemFilter} ]'
                else:
                  - storeIn:
                      key: failureMessage
                      value: '[ Details : FailureType - OrderMovement, FulfillmentType - ${itemType} ]'
          else:
            - storeIn:
                key: failureMessage
                value: '[ Details : FailureType - OrderMovement ]'


# [Utility is used to release order hold for FCD and MPD items]
  - name: us.functions.utils.astro.releaseOrderHold
    flow:
      - log: Trying to Release order batching hold           
      - try:
          flow:
            - callAPI:
                url: https://app-service-ms.fms-app-service.dev-feature.k8s.walmart.net/app/stageHold/${orderNo}
                requestMethod: POST
                wait: 5000
                readTimeout: 40000
                verifyResponseCode: 200
                retryDelay: 8000
                requestBody: ''
                disableCertificateChecks: true
                getResponse:
                  storeIn: response
            - log: ${response}
          catch:
            flow:
              - log: Unable to Release order batching hold  

# PetRX amends
  - name: us.functions.utils.astro.amendPetrxOrder
    flow:
      - log: Amend Petrx Order and update qty
      - callAPI:
          url: http://astro.walmart.com/api/v3/teflon/order/${orderNo}
          header:
            - key: segment
              value: oaoh
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestMethod: PUT
          wait: 15000
          verifyResponseCode: 200
          # verifyResponseBodyContains:
          #   - '"description":"Request submitted successfully for Order"'
          retriesOnFail: 3
          retryDelay: 180000
          requestBody: ${payload}


# Adding subs to the SC scheduled orders during PO pick complete
  - name: us.functions.utils.astro.subs.setOrderStatus
    flow:
      - log: Set subs order status to PO pick Complete
      - loop:
           begin: 1
           end: 4      
           storeIndex: j
           mode: increment
           flow:
            - callAPI:
                url: http://astro.walmart.com/api/v3/teflon/order/${orderNo}
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json     
                readTimeout: 180000
                requestMethod: PUT
                wait: 15000
                verifyResponseCode: 200
                verifyResponseBodyContains:
                  - '"status":"SUCCESS"'
                retriesOnFail: 3
                retryDelay: 180000
                requestBody: ${payload}
                getValue:
                  - key: astroStatus
                    storeIn: astroStatus
            - sleep:
                duration: 200000
            - executeFunction:
                name: us.functions.utils.astro.validateOrderMovement
            - if:
                condition: ${responseValidationStatus} == true
                then:
                  - break: true
      - if:
          condition: ${responseValidationStatus} == true
          then:
            - log: -------[END-MOVE UTILITY] - Move order [ ${orderNo}-${orderType} ] to [ ${status} ] status-------
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Order [ ${orderNo} ]  Unable to set the order status to PO Pick Complete failed due to ${responseDetails} "

  - name: us.functions.utils.astro.createOrder
    flow:
      - log: Create order
      - loop:
          begin: 0
          end: 5
          storeIndex: retryCount
          mode: increment
          flow:
            # ${errorCode} used to determine payload format issue
            # ${orderCreationStatus} used to determine order creation success/failure with valid payload
            - storeIn:
                key: errorCode
                value: 'null'
            - storeIn:
                key: orderCreationStatus
                value: 'null'
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/order
                requestMethod: POST
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                  - key: payment_version
                    value: smart_allocation
                  - key: response_type
                    value: omni
                  - key: pretripping_auth
                    value: true
                readTimeout: 180000
                requestBody: ${payload}
                getValue:
                  - key: astroDetails.orderSummary.orderInfo.orderId
                    storeIn: orderNo
                  - key: astroStatus
                    storeIn: orderCreationStatus
                  - key: astroDescription
                    storeIn: orderDetailsDescription
                  - key: statusCode
                    storeIn: errorCode
                  - key: error
                    storeIn: errorMessage
                  - key: message
                    storeIn: errorDetails
                retryDelay: 5000
            - if:
                condition: ${orderCreationStatus} == 'SUCCESS'
                then:
                  - log: Order successfully created.
                  - break: true
                else:
                  - log: Failure in order creation. Retrying after 30 secs
                  - sleep:
                      duration: 30000
      - if:
          condition: ${errorCode} == null
          then:
            - if:
                condition: ${orderCreationStatus} != 'SUCCESS'
                then:
                  - failTest:
                      message: "API_FAILURE - ASTRO - CREATE ORDER FAILURE - Error: ${orderDetailsDescription} - Fetched Items: ${fetchedItemDataDetails}"
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - PAYLOAD ERROR. Error: ${errorMessage} - ${errorDetails}"
      - log: ${orderNo}
      - if:
          condition: ${skipOrderWait} == true
          then:
            - log: skipping rest of the steps as skipOrderWait flag is set true
          else:
            - executeNode:
                file: us/e2e-tests/helpers/orderValidation.js
                args:
                  - value: ${payload}
                  - value: ${orderDetailsDescription}
                getResponse:
                  storeIn: validationResult
            - if:
                condition: ${validationResult} == 'No mismatch'
                then:
                  - log: Created order validated for fulfillment type correctness
                else:
                  - failTest:
                      message: ${validationResult} [ Created order fulfillment types - ${orderDetailsDescription} ]
            - sleep:
                duration: 60000


  - name: us.functions.utils.astro.createAccount
    flow:
      - log: Create Account
      - log: ${payload}
      - loop:
          begin: 1
          end: 4
          storeIndex: retryTriggerCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/customer
                requestMethod: POST
                wait: 5000
                header:
                  - key: Content-Type
                    value: application/json
                  - key: segment
                    value: oaoh
                  - key: tenant-id
                    value: elh9ie
                readTimeout: 30000 
                requestBody: ${payload}
                getValue:
                  - key: astroDetails.addPaymentPreferenceId
                    storeIn: addPaymentPreferenceId
                  - key: astroStatus
                    storeIn: astroStatus
                  - key: astroDetails.statusCode
                    storeIn: responseCode
                  - key: statusCode
                    storeIn: altResponseCode
                  - key: astroDescription
                    storeIn: errorMessage
                  - key: astroDetails.customerDetails.phoneNumber
                    storeIn: astroPhoneNum
                  - key: astroDetails.customerDetails.emailAddress
                    storeIn: astroEmail
            - storeIn: 
                key: astroPhoneNumber
                value: "1${astroPhoneNum}"
          #requestBody: '{"firstName": "Astro","lastName": "Mobile","emailAddress": "$email","phoneNumber": "4088968104","paymentMethods": ["VISA"],"postalAddress": {"address": "1350 Bacchus Dr","city": "San Jose","country": "USA","postalCode": "95122","state": "CA"},"password": "$password"}'
            - if:
                condition: ${astroStatus} == 'SUCCESS'
                then:
                  - if:
                      condition: ${responseCode} == 200
                      then:
                        - log: $addPaymentPreferenceId
                        - if:
                            condition: ${withoutPayment}
                            then:
                              - executeFunction:
                                  name: us.functions.utils.astro.deletePaymentData
                            else:
                              - log: Account created successfully
                        - log: ------- Account created Successfully -------
                        - break: true
                else:
                  - log: TRIGGER RETRY ${retryTriggerCount} - Triggering account creation API again
                  - sleep:
                      duration: 20000

      - if:
          condition: ${astroStatus}!= 'SUCCESS'
          then:
            - if:
                condition: ${responseCode} == 400 || ${altResponseCode} == 400
                then:
                  - failTest:
                      message: "API_FAILURE - ASTRO - PAYLOAD ERROR. Payload used: ${payload}"
                else:
                  - failTest:
                      message: "API_FAILURE - ASTRO - Unable to create account. Error: ${errorMessage}"

  - name: us.functions.utils.astro.deletePaymentData
    flow:
      - log: Delete payment preference data for the account
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/$customerEmail/preferences/$addPaymentPreferenceId?pidType=payment
          requestMethod: DELETE
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: segment
              value: oaoh
            - key: Content-Type
              value: application/json
          readTimeout: 30000
          retriesOnFail: 5
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: status
      - if:
          condition: ${status}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to delete payment data."

  # - name: us.functions.utils.cucumber.getAndSetOrderStatus
  #   flow:
  #     - if:
  #         condition: ${USE_CUCUMBER}
  #         then:
  #           - log: Waiting for Cucumber to call Astro
  #         else:
  #           - executeFunction:
  #               name: us.functions.utils.astro.getOrderStatus
  #           - executeFunction:
  #               name: us.functions.utils.astro.setOrderStatus

  - name: us.functions.utils.cucumber.getReturnOrderEligiblity
    flow:
      - executeNode:
                file: us/e2e-tests/helpers/getReturnEligibilityResponse.js
                args:
                  - value: ${returnLine}
                  - value: ${orderNumber}
                  - value: ${returnReason}
                  - value: ${returnMode}
                getResponse:
                  storeIn: returnReason
      - log: Error Details - ${returnReason}

# logging iOS glass app version
  - name: us.functions.utils.log.appVersionIos
    platform: ios
    flow:
      - if:
          condition: "${R2_PROFILE} == 'cucumber'"
          then:
            - verifyFile:
                file: us/app-versions/ios.txt
                storeIn: glassAppVersionIOS
          else:
            - verifyFile:
                file: us/app-versions/ios.txt
                storeIn: glassAppVersionIOS

      - log: "Glass Application version: ${glassAppVersionIOS}"

# logging android app version
  - name: us.functions.utils.log.appVersionAndroid
    platform: android
    flow:
      - if:
          condition: "${R2_PROFILE} == 'cucumber'"
          then:
            - verifyFile:
                file: us/app-versions/android.txt
                storeIn: glassAppVersionAndroid
          else:
            - verifyFile:
                file: us/app-versions/android.txt
                storeIn: glassAppVersionAndroid


      - log: "Glass Application version: ${glassAppVersionAndroid}"

  # Workaround to correctly restart app with Teflon settings
  - name: us.functions.utils.restartapp
    platform: android
    flow:
      - startActivity:
          packageName: ${APP_PACKAGE:com.walmart.android.debug}
          activityName: com.walmart.glass.integration.splash.SplashActivity
          params:
            - key: appWaitActivity
              value: com.walmart.glass.onboarding.view.OnboardingActivity


  - name: us.functions.utils.restartapp
    platform: ios
    flow:
      - launchStartPage: true
      - executeFunction:
          name: us.functions.global.onboarding.navigateOnboardingToHome
          
  - name: us.functions.utils.closeErrorAlertIfExists
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: Okay
          then:
            - click: 
                identifier: Okay

  - name: us.functions.utils.afterSteps
    platform: ios
    flow:
      - if:
          condition: "${testStatus} == 'passed'"
          then:
            - log: "Test passed"
          else:
            - log: "Test failed - ${executionStage}"
            - if:
                condition: ${testStarted} == null
                then:
                  - failTest:
                      message: "FAILURE - Unable to Open App"
            # - executeFunction:
            #     name: us.functions.utils.closeErrorAlertIfExists
      # - executeFunction:
      #     name: us.functions.utils.fetchExecutionTime

  - name: us.functions.utils.afterSteps
    platform: android
    flow:
      - if:
          condition: "${testStatus} == 'passed'"
          then:
            - log: "Test passed"
          else:
            - log: "Test failed - ${executionStage}" 
      # - executeFunction:
      #     name: us.functions.utils.fetchExecutionTime

  - name: us.functions.utils.fetchExecutionTime
    flow:
      - if:
          condition: ${testStartTime} != null
          then:
            - getTimestamp:
                asDate: false
                storeIn: testEndTime
            - arithmetic:
                expression: ($testEndTime - $testStartTime) / 1000
                storeIn: result
            - log: $result
            - arithmetic:
                expression: $result / 60
                storeIn: result
            - log: $result
            - createFile:
                file: ./timestampData.txt
                string: '${result},'

  - name: us.functions.utils.tryAgainWhenThereIsError
    platform: android
    flow:
      - loop:
         begin: 0
         end: 3
         storeIndex: i
         flow:
           - log: $i
           - if: 
               identifier:
                 present: 
                   - identifier: us.mappings.item.tryAgainLink
               then:
                 - log: 'Trying again to load item page'
                 - click:
                     identifier: us.mappings.item.tryAgainLink
                     wait: 5000
               else:
                 - break: true

  - name: us.functions.utils.tryAgainWhenThereIsError
    platform: ios
    flow:
      - loop:
         begin: 0
         end: 2
         storeIndex: i
         flow:
           - log: $i
           - if: 
               identifier:
                 present: 
                   - identifier: us.mappings.item.tryAgainLink
               then:
                 - log: 'Trying again to load item page'
                 - click:
                     identifier: us.mappings.item.tryAgainLink
               else:
                 - break: true

### CVV Checker: Logic and Error Handling
  - name: us.functions.utils.cvv.errorHandling
    platform: android  
    flow:
      - executeFunction:
          name: us.functions.checkout.reviewOrder.scrollToTopOfReviewOrder
      - scroll:
          direction: down
          untilIdentifier: us.mappings.buyNow.addCard.securityCodeField
          position: center
      - if:
          identifier:
            present: 
              - identifier: us.mappings.reviewOrder.confirmCvv.pleaseEnter.prompt
          then:
            - log: CVV error Detected
            - click:
                identifier: us.mappings.buyNow.addCard.securityCodeField
                wait: 5000
            - if:
                condition: ${cvv}!= null
                then:
                  - enterText:
                      clearField: false
                      clickFirst: false              
                      identifier: us.mappings.buyNow.addCard.securityCodeField
                      string: ${cvv}
                      pressEnter: true
                else:
                  - enterText:
                      clearField: false
                      clickFirst: false              
                      identifier: us.mappings.buyNow.addCard.securityCodeField
                      string: 111
                      pressEnter: true

          else:
            - log: No CVV error was Detected

### Blue+ Astro Functions

  - name: us.functions.utils.prod.cart.clearCart
    flow:
      - log: Prod user clear cart
      - callAPI:
          url: http://cart-service-app-prod-glass.cart-service-app.eus2-prod-a58.cluster.k8s.us.walmart.net/cart-service-app/v5/cart/${cartId}/clear
          requestMethod: DELETE
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: WM_CONSUMER.IP
              value: 172.29.56.219
            - key: WM_LOCALE_ID
              value: eng_USA
            - key: WM_TENANT_ID
              value: 0
            - key: WM_VERTICAL_ID
              value: 0
            - key: WM_QOS.CORRELATION_ID
              value: 1B5A0F34-2864-4C0D-AB4E-E050C58F66BF
            - key: WM_IFX.CLIENT_TYPE
              value: Java
            - key: WM_CONSUMER.ID
              value: $customerId
            - key: WM_SEC.KEY_VERSION
              value: 1
            - key: WM_SVC.NAME
              value: cartservice
            - key: WM_SVC.ENV
              value: prod
            - key: WM_SVC.VERSION
              value: 1.0.0
            - key: WM_CONSUMER.INTIMESTAMP
              value: ${timestamp}
            - key: WM_SEC.AUTH_TOKEN
              value: HASF/tmCLaUFHcd9xOvFKb/jrcZzqupcwlk9Yf3f2L3zCg07uO7WwYIp8CBZu39vjfcFq6Ca921hYGojvn7ILRT6l++qM1wwqIHU3E7NJ8tbs1WUgUgwnr6u9yiaG5pM1FxYDbTl7y2dW7D6OBvwe1jIDEUFgM8ZKkG4jNHMYehKWsBDESSPdHsIrwP88ODr1dGbu1Vzn7sy6VYesNlQ4Q==
            - key: WM_CONSUMER.USER_TYPE
              value: CUSTOMER
            - key: WM_SEC.AUTH_SIGNATURE
              value: qcQtdV2tcjqk3RRSlB5i6oU4WD/QmgJUXWWwReRz/DtG05zrJ6cM/zRm0l2P2rmoZU6MqcX3HLeNLAjGsmKE0Yp2rmPi8lZCBgLGNVZLIpmqlg7b5N+FMOZoqYqI+ipOAgIgRKEleS4onHFo0FHhciySZL2Vxrf08LO6+hIqfrQ=
            - key: Content-Type
              value: application/json
            - key: x-o-segment
              value: oaoh
            - key: WM_CONSUMER.user_id
              value: $customerId
            - key: RESPONSE_TYPE
              value: OMNI_PROMISE

  - name: us.functions.utils.generateGiftCard
    flow:
      - log: Create Gift Card
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/createDynamicGC
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: giftCardStatus
            - key: astroDetails.dynamicGCDetails.account
              storeIn: giftCardNumber
            - key: astroDetails.dynamicGCDetails.pin
              storeIn: giftCardPin
          retriesOnFail: 3
          retryDelay: 1000
          requestBody: '{"amount":$balance}'
      - log: ${giftCardNumber}
      - log: ${giftCardPin}
      - log: ${giftCardStatus}
      - if:
          condition: ${giftCardStatus}!='SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to generate gift card."

 #Astro Update DS Balance API can be used to update DS1 Balance for all the DS1 Cards mentioned on Astro Glass Teflon Golden Data page
 # [mandatory] ${PID}    - PID of card as parameter while calling the function
  - name: us.functions.utils.addAmountToDsCard
    flow:
      - log: Adding Amount to DS Card
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/updateDsBalance/PIH.pang.FDCGC.GIFTCARD.${PID}
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: addBalanceStatus
            - key: astroDescription
              storeIn: status
          retriesOnFail: 3
          retryDelay: 1000
          requestBody: '{"addamount":$balance}'
      - log: ${addBalanceStatus}
      - log: ${status}
      - if:
          condition: ${addBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to add balance to DS Card"

 #Astro Update DS Sky Card Balance API can be used to update DS Sky Card Balance for all the DS Sky Cards 
 # [mandatory] ${PIHASH}    - PIHASH of card as parameter while calling the function  https://confluence.walmart.com/pages/viewpage.action?pageId=1180382675#E2E&IntegrationsTestingPageForProjectSKY(E2ETestCases,TestCards,TestItems)-TestCards
 # [mandatory] ${purse}     - 64489,64490,64491 (64489 - BCBS FOOD , 64490 - BCBS OTC , 64491 - BCBS Pet Supplies)

  - name: us.functions.utils.addAmountToDsSkyCard
    flow:
      - if:
          condition: ${purse} == null
          then:
            - storeIn:
                key: purse
                value: 64490
      - log: Adding Amount to DS Sky Card
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/addDsSkyBalance/${PIHASH}
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: addBalanceStatus
            - key: astroDescription
              storeIn: status
          retriesOnFail: 3
          retryDelay: 1000
          requestBody: '{"amount":$balance,"purse":"$purse"}'
      - log: ${addBalanceStatus}
      - log: ${status}
      - if:
          condition: ${addBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to add balance to DS Sky Card"

  - name: us.functions.utils.fetchFulcrumAvailableItem
    flow:
      - storeIn:
          key: executionStage
          value: FulcrumAPI
      - log: --Fulcrum begining--
      - if:
          condition: ${storeId} == null
          then:
            - storeIn:
                key: storeId
                value: 32144
      # First, check if the itemSubFilter is provided
      - if:
          condition: ${featureName} != null 
          then:  
            - if:
                condition: ${itemFilter} != null 
                then:            
                  - log: "SubFilter provided: ${itemFilter}, including in the URL"
                  - storeIn:
                      key: fetchURL
                      value: http://fulcrum.teflon.walmart.com/api/v2/db/fulcrum/goldenHealthyItemsUS?orderType=${itemType}&storeId=${storeId}&featureName=${featureName}&subFilters=${itemFilter}&itemStatus=true
                  - storeIn:
                      key: version
                      value: nextgen
                else:
                  - log: "No subFilter provided, constructing URL without subFilters"
                  - storeIn:
                      key: fetchURL
                      value: http://fulcrum.teflon.walmart.com/api/v2/db/fulcrum/goldenHealthyItemsUS?orderType=${itemType}&storeId=${storeId}&featureName=${featureName}&itemStatus=true  
          else:
            - if:
                condition: ${itemFilter} != null 
                then:            
                  - log: "SubFilter provided: ${itemFilter}, including in the URL"
                  - storeIn:
                      key: fetchURL
                      value: http://fulcrum.teflon.walmart.com/api/v2/db/fulcrum/goldenHealthyItemsUS?orderType=${itemType}&storeId=${storeId}&featureName=APP E2E Regression&subFilters=${itemFilter}&itemStatus=true
                  - storeIn:
                      key: version
                      value: nextgen
                else:
                  - log: "No subFilter provided, constructing URL without subFilters"
                  - storeIn:
                      key: fetchURL
                      value: http://fulcrum.teflon.walmart.com/api/v2/db/fulcrum/goldenHealthyItemsUS?orderType=${itemType}&storeId=${storeId}&featureName=APP E2E Regression&itemStatus=true  
      #Looping thru API Objects
      - loop:
          begin: 1
          end: 2
          storeIndex: retryValidationCount
          mode: increment
          flow:
            - sleep:
                duration: 10000
            - callAPI:
                url: ${fetchURL} #http://fulcrum.teflon.walmart.com/api/v1/db/fulcrum/instantItemHealthAnalysis?orderType=${itemType}&storeId=${storeId}&itemStatus=green
                readTimeout: 180000
                requestMethod: GET
                verifyResponseCode: 200
                retriesOnFail: 3
                retryDelay: 180000
                getResponse:
                  storeIn: orderResponse
                getValue:
                  - key: itemDetails
                    storeIn: responseItemdetails
                  - key: instantItemStatus
                    storeIn: orderResponse
                  - key: status
                    storeIn: fetchItemStatus
                  - key: itemDetails.instantItemStatus 
                    storeIn: firstItem
            - log: --Fulcrum response instant-- ${responseInstant}
            - log: --Fulcrum first item response-- ${firstItem}
            - log: --Fulcrum item detail-- ${responseItemdetails}
            - log: --Fulcrum fetch item status-- ${fetchItemStatus}
            - log: --Fulcrum response instant-- ${responseInstant}
            - log: --begining array
            - loop:
                each: "${firstItem}"
                storeIndex: i
                storeElement: x
                # Fetching first stock available item
                flow:
                  - log: store index is $x
                  - storeIn:
                      key: itemFetched
                      value: $x.itemId
                  - storeIn:
                      key: itemStatus
                      value: $x.healthCheckRes[0].isEligible
                  - log: ${itemFetched}
                  - log: ${itemStatus}
                  - if:
                      condition: ${itemStatus} == true
                      then:
                        - log: Fulcrum fetched item ${itemFetched}
                        - break: true
                      else:
                        - storeIn:
                            key: itemStatus
                            value: 'FAIL'


  - name: us.functions.utils.fetchAstroAvailableItem
    flow:
      - log: Fetching Item available in stock using Astro API for Item type ${itemType}
      # API URL creation based on params passed
      - if:
          condition: ${storeId} == null
          then:
            - storeIn:
                key: storeId
                value: 32144
      - if:
          condition: ${nextGen} == null
          then:
            - storeIn:
                key: version
                value: nextgen
      - if:
          condition: ${itemStatusHeader} == null
          then:
            - storeIn:
                key: itemStatusHeader
                value: SUCCESS
      - if:
          condition: ${itemFilter} != null
          then:
            - if:
                condition: ${itemFilter} == 'lessThan35'  && ${itemSubFilter} != null
                then:
                  - storeIn:
                      key: fetchURL
                      value: http://astro.walmart.com/api/v3/teflon/internal/getItemHealth/${storeId}/${itemType}?minPrice=0&maxPrice=35&itemType=${itemSubFilter}
                else:
                  - if:
                      condition: ${itemFilter} == 'lessThan35'
                      then:
                        - storeIn:
                            key: fetchURL
                            value: http://astro.walmart.com/api/v3/teflon/internal/getItemHealth/${storeId}/${itemType}?minPrice=0&maxPrice=35   
                      else:
                        - if:
                            condition: ${itemFilter} == 'greaterThan35' && ${itemSubFilter} != null
                            then:
                              - storeIn:
                                  key: fetchURL
                                  value: http://astro.walmart.com/api/v3/teflon/internal/getItemHealth/${storeId}/${itemType}?minPrice=35&maxPrice=1000&itemType=${itemSubFilter}                                              
                            else:
                              - if:
                                  condition: ${itemFilter} == 'greaterThan35'
                                  then:
                                    - storeIn:
                                        key: fetchURL
                                        value: http://astro.walmart.com/api/v3/teflon/internal/getItemHealth/${storeId}/${itemType}?minPrice=35&maxPrice=1000
                                  else:
                                    - if:
                                        condition: ${itemFilter} != null
                                        then:
                                          - storeIn:
                                              key: fetchURL
                                              value: http://astro.walmart.com/api/v3/teflon/internal/getItemHealth/${storeId}/${itemType}?itemType=$itemFilter

            - storeIn:
                key: version
                value: nextgen
          else:
            - storeIn:
                key: fetchURL
                value: http://astro.walmart.com/api/v3/teflon/internal/getItemHealth/${storeId}/${itemType}
            
      # Set to default value
      - storeIn:
          key: itemDetails
          value: 'null'
      - try:
          flow:
            - if:
                condition: ${version} == 'nextgen'
                then:
                  - log: NextGen API
                  - callAPI:
                      url: ${fetchURL}
                      requestMethod: GET
                      wait: 5000
                      verifyResponseCode: 200
                      header:
                        - key: Content-Type
                          value: application/json
                        - key: ENVIRONMENT
                          value: glass
                        - key: astroStatus
                          value: ${itemStatusHeader}
                        - key: fetchlimit
                          value: 15
                        - key: version
                          value: nextgen
                      readTimeout: 180000
                      getResponse:
                        storeIn: response
                      retriesOnFail: 5
                      retryDelay: 2000
                      getValue:
                        - key: astroDetails
                          storeIn: response
                        - key: astroStatus
                          storeIn: fetchItemStatus
                else:
                  - log: Old API
                  - callAPI:
                      url: ${fetchURL}
                      requestMethod: GET
                      wait: 5000
                      verifyResponseCode: 200
                      header:
                        - key: Content-Type
                          value: application/json
                        - key: ENVIRONMENT
                          value: glass
                        - key: astroStatus
                          value: ${itemStatusHeader}
                        - key: fetchlimit
                          value: 8
                      readTimeout: 180000
                      getResponse:
                        storeIn: response
                      retriesOnFail: 5
                      retryDelay: 2000
                      getValue:
                        - key: astroDetails
                          storeIn: response
                        - key: astroStatus
                          storeIn: fetchItemStatus
            - if:
                condition: ${fetchItemStatus} == 'FAIL'
                then:
                  - failTest:
                      message: "DATA_FAILURE - teflon, no eligible item for the tag - ${itemType} and store ${storeId} found"
                else:
                  - log: SUCCESSFUL item fetched from astro API.
            - loop:
                each: "${response}"
                storeIndex: i
                storeElement: x
                # Fetching first stock available item
                flow:
                  - storeIn:
                      key: itemDetails
                      value: 'null'
                  - log: $x
                  - storeIn:
                      key: itemFetched
                      value: $x.itemId
                  - storeIn:
                      key: itemStatus
                      value: $x.astroStatus
                  - if:
                      condition: ${healthCheck}
                      then:
                        - log: Checking health of failed item ${itemFetched}
                        - executeFunction:
                            name: us.functions.utils.healthCheck
                        - if:
                            condition: ${healthStatus} == 'SUCCESS'
                            then:
                              - log: Order created with item ${itemFetched}
                              - break: true
                            else:
                              - storeIn:
                                  key: itemStatus
                                  value: 'FAIL'
                  - if:
                      condition: ${itemStatus} == 'SUCCESS'
                      then:
                        - executeNode:
                            file: us/e2e-tests/helpers/splitNumberString.js
                            args:
                              - value: ${itemFetched}
                            getResponse:
                              storeIn: itemFetched    
                        - log: $itemFetched                                     
                        # Store fetched item id. To be used for skipping same item on the 2nd run
                        - if:
                            condition: ${skipForNext}
                            then:
                              - storeIn:
                                  key: skipItemId
                                  value: $x.itemId
                        # Skip same item id fetched earlier and return a different item Id
                        - if:
                            condition: ${excludeFetchedItem}
                            then:
                              - if:
                                  condition: ${skipItemId} == null
                                  then:
                                    - storeIn:
                                        key: skipItemId
                                        value: '0'
                              - if:
                                  condition: $itemFetched == $skipItemId
                                  then:
                                    - log: Excluding the earlier fetched item
                                  else:
                                    - executeFunction:
                                        name: us.functions.utils.itemHealthCheck
                                        params:
                                          - name: excludedItemLists
                                            string: us.data.skip.itemIds
                                    - if:
                                        condition: ${itemEligiblity}
                                        then:
                                          - break: true
                            else:
                              - executeFunction:
                                  name: us.functions.utils.itemHealthCheck
                                  params:
                                    - name: excludedItemLists
                                      string: us.data.skip.itemIds
                              - if:
                                  condition: ${itemEligiblity}
                                  then:
                                    - break: true
                      else:
                        - log: Fail status item fetched, checking other fetched items
                        - storeIn:
                            key: itemDetails
                            value: unavailable
                        - storeIn:
                            key: itemFetched
                            value: 'null'
            - log: Stock available Item Id ${itemFetched} for type ${itemType}
            - executeNode:
                file: us/e2e-tests/helpers/jsonParser.js
                args:
                  - value: ${fetchedItemDataDetails}
                  - value: ${itemType}
                  - value: add
                  - value: ${itemFetched}
                getResponse:
                  storeIn: fetchedItemDataDetails
            # Reset to default values
            - storeIn:
                key: skipForNext
                value: false
            - storeIn:
                key: excludeFetchedItem
                value: false
          catch:
            flow:
              # API call fails or returns no item with stock availability
              - storeIn:
                  key: itemDetails
                  value: unavailable
      - if:
          condition: ${fetchItemStatus} == 'FAIL'
          then:
            - failTest:
                message: "DATA_FAILURE - teflon, no eligible item for the tag - ${itemType} and store ${storeId} found"
      - storeIn:
          key: storeId
          value: 'null'
      - storeIn:
          key: itemStatusHeader
          value: 'null'
      - storeIn:
          key: healthCheck
          value: false
      - storeIn:
          key: version
          value: 'null'
      - storeIn:
          key: itemFilter
          value: 'null'
      - storeIn:
          key: noSubSet
          value: false

  - name: us.functions.utils.itemHealthCheck
    flow:
      - log: Checking item eligibility before proceeding
      - storeIn:
          key: itemEligiblity
          value: false
      - storeIn:
          key: ignoreItem
          value: false
      - loop:
          each: ${excludedItemLists}
          storeElement: itemId
          flow:
            - if:
                condition: ${itemId} == ${itemFetched}
                then:
                  - storeIn:
                      key: ignoreItem
                      value: true
                  - break: true
      - if:
          condition: ${ignoreItem}
          then:
            - log: Trying for other item as this is in excluded list of item ids
          else:
            - if:
                condition: ${itemType} == 'STORE_SCHEDULED_PICKUP' || ${itemType} == 'STORE_SCHEDULED_DELIVERY' || ${itemType} == 'STORE_UNSCHEDULED_PICKUP' || ${itemType} == 'FC_DELIVERY'
                then:
                  # - try:
                  #     flow:
                  #       - callAPI:
                  #           url: http://astro.walmart.com/api/v3/teflon/internal/getItemHealth/$storeId/$itemType&itemId=$itemFetched #updated to new URL as per the Astro team ask
                  #           requestMethod: GET
                  #           readTimeout: 30
                  #           wait: 5000
                  #           verifyResponseCode: 200
                  #           header:
                  #             - key: Content-Type
                  #               value: application/json
                  #           getValue:
                  #             - key: eligibility.isEligible
                  #               storeIn: itemEligiblity
                  #     catch:
                  #       flow:
                  #         - log: Unable to get item eligibility data
                  - try:
                      flow:
                          - executeFunction:
                              name: us.functions.utils.checkItemTransactabality
                              params:
                                - name: email
                                  string: checkItemTransactabality@walmart.com
                                - name:  itemGroup
                                  string: ${itemType}
                                - name: itemId
                                  string: ${itemFetched}
                      catch:
                        flow:
                          - log: Unable to get item Transactabality data
                  - if:
                      condition: ${itemEligible}
                      then:               
                        - storeIn:
                            key: itemEligiblity
                            value: true
                else:
                  - if:
                      condition: ${itemType} == 'MP_DELIVERY' && ${noSubSet}
                      then:
                        - executeFunction:
                            name: us.functions.utils.mpItemWFSCheck
                      else:
                        - log: Skipping item eligibility check
                        - storeIn:
                            key: itemEligiblity
                            value: true

  - name: us.functions.utils.healthCheck
    flow:
      - log: Checking item overall health before proceeding
      - storeIn:
          key: healthStatus
          value: unknown
      - storeIn:
          key: expectedStatus
          value: $itemType ORDER CREATED
      - log: ${expectedStatus}
      - try:
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/item/healthCheck
                requestMethod: POST
                readTimeout: 90
                wait: 5000
                verifyResponseCode: 200
                header:
                  - key: Content-Type
                    value: application/json
                getResponse:
                  storeIn: healthResponse
                requestBody: '{"customerEmailAddress":"itemhealth9@walmartastro.com","orderType":"$itemType","storeId":"$storeId","recipient":"alex.aldan@walmart.com","item":["$itemFetched"]}'
            - loop:
                each: "${healthResponse}"
                storeElement: healthDetails
                flow:
                  - storeIn:
                      key: orderStatus
                      value: $healthDetails.createOrderDescription
                  - if:
                      condition: ${orderStatus} == ${expectedStatus}
                      then:
                        - storeIn:
                            key: healthStatus
                            value: SUCCESS
          catch:
            flow:
              - log: Unable to get item health data

  - name: us.functions.utils.mpItemWFSCheck
    flow:
      - log: Check if MP_DELIVERY item is WFS for skipping purpose
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/item/$itemFetched?storeId=$storeId
          requestMethod: GET
          readTimeout: 90
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          getResponse:
            storeIn: healthResponse
          getValue:
            - key: astroDetails.nodeFulfillmentDetails[0].nodeType
              storeIn: itemSubSetType
      - log: ${healthResponse}
      - log: ${itemSubSetType}
      - if:
          condition: ${itemSubSetType} != 'MARKETPLACE'
          then:
            - log: This ${itemFetched} is MP_WFS item so skipping
            - storeIn:
                key: itemEligiblity
                value: false
          else:
            - storeIn:
                key: itemEligiblity
                value: true
                                
  - name: us.functions.utils.fetchNewItem
    flow:
      - log: fetch newly created item
      - callAPI:
          url: http://data-oasis.stage.walmart.com/api/v1/itemRequestHistory?filter=${email}&startDate=${startDate}&endDate=${endDate}
          requestMethod: GET
          readTimeout: 90
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          getResponse:
            storeIn: itemRequestHistory
          getValue:
            - key: itemRequestHistory[0].itemId
              storeIn: newFetchedItem
            - key: itemRequestHistory[0].itemTransactionStatus
              storeIn: itemTransactionStatus
            - key: itemRequestHistory[0].itemCreationStatus
              storeIn: itemCreationStatus
      - if:
          condition: ${itemTransactionStatus} == 'SUCCESS' && ${itemCreationStatus} == 'SUCCESS'
          then:
            - log: New item created successfully
            - storeIn:
                key: itemFetched
                value: ${newFetchedItem}
          else:
            - log: New item creation failed
            - storeIn:
                key: itemFetched
                value: 'null'
      - log: ${itemRequestHistory}
      - log: ${newFetchedItem}
      # - if:
      #     condition: ${itemSubSetType} != 'MARKETPLACE'
      #     then:
      #       - log: This ${itemFetched} is MP_WFS item so skipping
      #       - storeIn:
      #           key: itemEligiblity
      #           value: false
      #     else:
      #       - storeIn:
      #           key: itemEligiblity
      #           value: true

  - name: us.functions.utils.fetchAvailableItem
    flow:
      - log: Fetching Item available in stock for Item type ${itemType}
      #API URL creation based on params passed
      - if:
          condition: ${storeId} == null
          then:
            - storeIn:
                key: param
                value: tag=${itemType}
          else:
            - storeIn:
                key: param
                value: tag=${itemType}&storeId=${storeId}
            - storeIn:
                key: storeId
                value: 'null'
      # Set to default value
      - storeIn:
          key: itemDetails
          value: 'null'
      - try:
          flow: 
            - callAPI:
                url: http://central-ops-server.prod.walmart.net/api/fetchTaggedItem?${param}&limit=5
                requestMethod: GET
                wait: 5000
                verifyResponseCode: 200
                header:
                  - key: Content-Type
                    value: application/json
                  - key: ENVIRONMENT
                    value: glass
                readTimeout: 180000
                verifyResponseBodyContains:
                  - '"tag"'
                getResponse:
                  storeIn: response
                retriesOnFail: 5
                retryDelay: 5000
            - loop:
                each: "${response}"
                storeIndex: i
                storeElement: x
                # Fetching first stock available item
                flow:
                  - log: $x
                  - storeIn:
                      key: searchTerm2
                      value: $x.itemId
                  - storeIn:
                      key: itemFetched
                      value: $x.itemId
                  # Store fetched item id. To be used for skipping same item on the 2nd run
                  - if:
                      condition: ${skipForNext}
                      then:
                        - storeIn:
                            key: skipItemId
                            value: $x.itemId
                  # Skip same item id fetched earlier and return a different item Id
                  - if:
                      condition: ${excludeFetchedItem}
                      then:
                        - if:
                            condition: ${skipItemId} == null
                            then:
                              - storeIn:
                                  key: skipItemId
                                  value: '0'
                        - if:
                            condition: $itemFetched == $skipItemId
                            then:
                              - log: Excluding the earlier fetched item
                            else:
                              - break: true
                      else:
                        - break: true                
            - log: Stock available Item Id ${searchTerm2} for type ${itemType}
            # Reset to default values
            - storeIn:
                key: skipForNext
                value: false
            - storeIn:
                key: excludeFetchedItem
                value: false
          catch:
            flow:
              # API call fails or returns no item with stock availability
              - storeIn:
                  key: itemDetails
                  value: unavailable

  # Function to get stock available items using API. 
  # STORES item fetched details in ${itemFetched} [ItemId] and ${deeplinkURl} [deeplink]
  # Parameters:
  # [Mandatory] itemType - tag to identify kind of items to fetch [e.g. FC_DELIVERY / FC_OZARK / STORE_SCHEDULED_PICKUP ...]
  # [Optional] source - astro/teflon [default 'astro'] [This is used to call astro/teflon data API accordingly]
  # [Optional] healthCheck - true/false [default 'false'] [If astro APIs health check is FAIL and to recheck specific item's health, set to true]
  # [Optional] storeId - If item fetched to be of a specific store
  # [Optional] backupItem - Item to be used for searching if API call fails
  # [Optional] skipForNext - [true/false] If true, stores item fetched through API for future reference and store in variable ${skipItemId}
  # [Optional] excludeFetchedItem - [true/false] If true, returns an itemId different from the one fetched earlier
  # [Optional] itemFilter - [lessThan35/greaterThan35] Filter to fetch items with price less than/greater than 35$
  - name: us.functions.utils.getSearchableItem
    flow:
      # Set to default values
      - storeIn:
          key: itemFetched
          value: 'null'
      - storeIn:
          key: deeplinkURL
          value: 'null'
      - storeIn:
          key: apiFetch
          value: true
      # - if:
      #     condition: ${useHardCodedItem} == true
      #     then:
      #       - executeFunction:
      #           name: us.functions.utils.hardCodedItems
      #     else:
      # API call to fetch stock available item
      # - storeIn:
      #     key: TEFLON_DATA
      #     value: '{"FC_DELIVERY": 23423423, "MP_DELIVERY": 2342342311222, "STORE_SCHEDULED_PICKUP":234232232342400004}'
      # - storeIn:
      #     key: itemFilter
      #     value: pickup
      - if:
          condition: ${TEFLON_DATA} != 'NA'
          then:
            - executeNode:
                file: us/e2e-tests/helpers/itemFetch.js
                args:
                  - value: ${itemType}
                  - value: ${itemFilter}
                  - value: ${TEFLON_DATA}
                getResponse:
                  storeIn: itemToBeUsed
            - log: ${itemToBeUsed}
      - if:
          condition: ${itemToBeUsed} == 'NA' || ${itemToBeUsed} == 'undefined' || ${itemToBeUsed} == 'null' || ${itemToBeUsed} == null
          then:
            - if:
                condition: ${source} == 'teflon'
                then:
                  - log: Item fetched by teflon data API
                  - executeFunction:
                      name: us.functions.utils.fetchAvailableItem
                else:
                  - log: Item fetched by Astro API
                  - executeFunction:
                      name: us.functions.utils.fetchAstroAvailableItem
            # If API call fails or no items available in stock
            - if:
                condition: ${itemDetails} == 'unavailable'
                then:
                  - if:
                      condition: ${backupItem} == null
                      then:
                        # When no backup item available
                        - log: Not able to fetch stock available item and no backup Item available either.
                        - failTest:
                            message: "DATA_FAILURE - teflon, no eligible item for the tag - ${itemType} found"
                      else:
                        # When backup item available
                        - storeIn:
                            key: itemFetched
                            value: ${backupItem}
          else:
            - storeIn:
                key: itemFetched
                value: ${itemToBeUsed}
      # Reset to default value
      - storeIn:
          key: backupItem
          value: 'null'
      - storeIn:
          key: source
          value: 'null'
      - storeIn:
          key: useHardCodedItem
          value: 'null'
      # Generating deeplinkURL based on fetched/backup item
      - storeIn:
          key: deeplinkURl
          value: walmart://item/$itemFetched
      - log: Item:$itemFetched
      - log: deeplinkURL:$deeplinkURl

  - name: us.functions.utils.hardCodedItems
    flow: 
      - log: "Using hardcodeditem - testing"
      - if:
          condition: ${itemType} == 'STORE_SCHEDULED_PICKUP'
          then:
            - storeIn:
                key: itemFetched
                value: us.data.ScPickup.itemId
            - storeIn:
                key: deeplinkURl
                value: walmart://item/$itemFetched
            - log: Item:$itemFetched
            - log: deeplinkURL:$deeplinkURl
      - if:
          condition: ${itemType} == 'FC_DELIVERY'
          then:
            - storeIn:
                key: itemFetched
                value: us.data.FcDelevery.itemId
            - storeIn:
                key: deeplinkURl
                value: walmart://item/$itemFetched
            - log: Item:$itemFetched
            - log: deeplinkURL:$deeplinkURl
      - if:
          condition: ${itemType} == 'STORE_UNSCHEDULED_PICKUP'
          then:
            - storeIn:
                key: itemFetched
                value: us.data.UnScPickup.itemId
            - storeIn:
                key: deeplinkURl
                value: walmart://item/$itemFetched
            - log: Item:$itemFetched
            - log: deeplinkURL:$deeplinkURl
      - if:
          condition: ${itemType} == 'STORE_SCHEDULED_DELIVERY'
          then:
            - storeIn:
                key: itemFetched
                value: us.data.SCDelivery.itemId
            - storeIn:
                key: deeplinkURl
                value: walmart://item/$itemFetched
            - log: Item:$itemFetched
            - log: deeplinkURL:$deeplinkURl
    # Work in progress
      - if:
          condition: ${itemType} == 'MP_DELIVERY' && ${itemFilter} == 'mpproseller'
          then:
            - storeIn:
                key: itemFetched
                value: us.data.MpProseller.itemId
            - storeIn:
                key: deeplinkURl
                value: walmart://item/$itemFetched
            - log: Item:$itemFetched
            - log: deeplinkURL:$deeplinkURl
      - if:
          condition: ${itemType} == 'S2S' 
          then:
            - storeIn:
                key: itemFetched
                value: us.data.s2s.itemId
            - storeIn:
                key: deeplinkURl
                value: walmart://item/$itemFetched
            - log: Item:$itemFetched
            - log: deeplinkURL:$deeplinkURl
      - if:
          condition: ${itemType} == 'MP_DELIVERY'
          then:
            - storeIn:
                key: itemFetched
                value: us.data.MpDelevery.itemId
            - storeIn:
                key: deeplinkURl
                value: walmart://item/$itemFetched
            - log: Item:$itemFetched
            - log: deeplinkURL:$deeplinkURl


  # Function to fetch working items from the list of items using checkItemTransactabality API
  # STORES item fetched details in ${itemFetched} [ItemId] and ${deeplinkURl} [deeplink]
  # Parameters:
  # [Mandatory] itemType - tag to identify kind of items to fetch [e.g. MP_PRO_SELLER / STORE_SCHEDULED_PICKUP/ STORE_SCHEDULED_DELIVERY /STORE_UNSCHEDULED_PICKUP /FC_DELIVERY]
  # [Mandatory] itemList - Valid list of items.
  # [Mandatory] emailID - email id
  # [Optional] storeId - If item fetched to be of a specific store

  - name: us.functions.utils.fetchFromDataList
    flow:
      - if:
          condition: ${storeId} == null
          then:
            - storeIn:
                key: storeId
                value: 32144

      - if:
          condition: ${itemType} == 'MP_PRO_SELLER'
          then:
            - storeIn:
                key: itemGroup
                value: MP_DELIVERY
          else:
            - storeIn:
                key: itemGroup
                value: ${itemType}
      - loop:
          each: ${itemList}
          storeIndex: i
          storeElement: itemId
          flow:
                  - executeFunction:
                      name: us.functions.utils.checkItemTransactabality
                  - if:
                      condition: ${itemEligible}
                      then:
                        - storeIn:
                            key: itemFetched
                            value: ${itemId}
                        - storeIn:
                            key: deeplinkURl
                            value: walmart://item/$itemFetched
                        - log: Item:$itemFetched
                        - log: deeplinkURL:$deeplinkURl
                        - break: true

      - if:
          condition: ${itemEligible}
          then:
            - log: Eligible item is ${itemFetched} for type ${itemType}
          else:
            - failTest:
                message: "DATA_FAILURE - Eligible item not found for type ${itemType}"

  - name: us.functions.utils.checkItemTransactabality
    flow:
      - storeIn:
          key: itemEligible
          value: false
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/item/transactability
          requestMethod: POST
          wait: 5000
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{"storeId":"${storeId}","fulfillmentGroups":[{"orderType":"${itemGroup}","items":[{"itemId":${itemId},"quantity":1}]}],"customerEmailAddress":"${email}"}'
          wait: 10000
          retriesOnFail: 3
          retryDelay: 2000
          getValue:
            - key: astroStatus
              storeIn: transactabilityStatus

      - if:
          condition: ${transactabilityStatus} == 'SUCCESS'
          then:
            - storeIn:
                key: itemEligible
                value: true

  - name: us.functions.utils.cucumber.createAccount
    flow:
      - if:
          condition: ${USE_CUCUMBER}
          then:
            - log: Wait for Cucumber to call Astro
            - storeIn:
                key: customerEmail
                value: $FILE_CONTENTS.customerEmail
            - log: ${customerEmail}
          else:
            - executeFunction:
                name: us.functions.utils.astro.createAccount
                params:
                  - name: customerEmail
                    string: ${customerEmail}


  # New Function to get stock available items using API (Fulcrum / Astro) with more error validation (create order / Validate order movement).
  # STORES item fetched details in ${itemFetched} [ItemId] and ${deeplinkURl} [deeplink]
  # Parameters:
  # [Mandatory] itemType - tag to identify kind of items to fetch [e.g. FC_DELIVERY / FC_OZARK / STORE_SCHEDULED_PICKUP ...]
  # [Mandatory] action  [FetchItem / FetchAndValidateOrderMovment] - FetchItem will only validate create order and FetchAndValidateOrderMovment will validate the order movement
  # [Optional] fulcrum [true/false] by default astro api
  # [Optional] storeId - If item fetched to be of a specific store by default 32144
  # [Mandatory] emailId - To check the validation in custom email by defualt test account is used 
  # [Optional] itemFilter - [Filter available in astro/fulcrum] Filter to fetch items with filters
  # [Mandatory if FetchAndValidateOrderMovment] orderStatus -
    # STORE_SCHEDULED_PICKUP/STORE_UNSCHEDULED_PICKUP - [PO Acknowledged/PO Pick Complete/PO Ready For Pickup/Customer Picked]
    # STORE_SCHEDULED_DELIVERY                        - [PO Acknowledged/PO Pick Complete/PO Out for Delivery/Delivered]
    # FC_DELIVERY/FC_DELIVERY_WPP                     - [Shipped/Delivered]
    # MP_DELIVERY/MP_WFS_DELIVERY                     - [PO Acknowledged/Shipped/Delivered]
  # [optional if FetchAndValidateOrderMovment] getOrderId - true/false [To get order id instead of item id for post txn flows] - as of now only single fulfilment is supported.
  - name: us.functions.utils.fetchItemAndValidate
    flow:
      - storeIn:
          key: skipItemId
          value: us.data.skip.itemIds
      - log: "wait for 5 mins getting item with fulfillment ${itemType} with validation ${action}"
      - executeNode:
          file: us/e2e-tests/helpers/fetchAndValidateItem.js
          args:
            - value: ${action}
            - value: ${fulcrum}
            - value: ${itemType}
            - value: ${itemFilter}
            - value: ${storeId}
            - value: ${orderStatus}
            - value: ${emailId}
            - value: ${skipItemId}
            - value: ${getOrderId}
          getResponse:
            storeIn: itemFetched
      - try:
          flow:
            - verifyValue:
                identifier: ${itemFetched}
                contains: FAILURE
            - storeIn:
                key: itemAvailable
                value: false
          catch:
            flow:
              - storeIn:
                  key: itemAvailable
                  value: true
      - if:
          condition: ${itemAvailable}
          then:
            - if:
                condition: ${getOrderId}
                then:
                  - storeIn:
                      key: orderNo
                      value: $itemFetched
                  - log: ${orderNo}
                else:
                  # Generating deeplinkURL based on fetched item
                  - storeIn:
                      key: deeplinkURl
                      value: walmart://item/$itemFetched
                  - log: Item:$itemFetched
                  - log: deeplinkURL:$deeplinkURl
                  - storeIn:
                      key: fetchedItemDataDetails
                      value: ${itemFetched}
          else:
            - storeIn:
                key: testStarted
                value: true
            - failTest:
                message: ${itemFetched}
      - storeIn:
          key: itemFilter
          value: 'null'
      - storeIn:
          key: itemAvailable
          value: false
      - storeIn:
          key: getOrderId
          value: false

  - name: us.functions.utils.scrollIfNotVisible
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - if:
          condition: ${scrollLimit} == null
          then:
            - storeIn:
                key: scrollLimit
                value: 7
      - log: Scroll limit set to - ${scrollLimit}
      - if:
          identifier:
            present:
              - identifier: ${identifier}
          then:
            - log: Required identifier already displayed
          else:
            - if:
                condition: ${scrollPosition} == null
                then:
                  - if:
                      condition: ${identifierScope} == null
                      then:
                        - scroll:
                            direction: ${direction}
                            untilIdentifier: ${identifier}
                            scrollLimit: ${scrollLimit}
                      else:
                        - scroll:
                            direction: ${direction}
                            untilIdentifier: ${identifier}
                            withinIdentifier: ${identifierScope}
                            scrollLimit: ${scrollLimit}
                else:
                  - if:
                      condition: ${identifierScope} == null
                      then:
                        - scroll:
                            direction: ${direction}
                            untilIdentifier: ${identifier}
                            position: ${scrollPosition}
                            scrollLimit: ${scrollLimit}
                      else:
                        - scroll:
                            direction: ${direction}
                            untilIdentifier: ${identifier}
                            withinIdentifier: ${identifierScope}
                            position: ${scrollPosition}
                            scrollLimit: ${scrollLimit}
      - log: Resetting scrollPosition variable to default
      - storeIn:
          key: scrollPosition
          value: 'null'
      - storeIn:
          key: identifierScope
          value: 'null'
      - storeIn:
          key: scrollLimit
          value: 'null'

  - name: us.functions.utils.scrollIfNotVisible
    platform: ios
    flow:
      - try:
          flow: 
            - verifyIdentifier:
                timeout: 1000
                visible:
                  - identifier: ${identifier}
                    value: true
            - log: Element already visible, scrolling is skipped
          catch:
            flow:
              - if:
                  condition: ${limit} == null
                  then:
                    - storeIn:
                        key: limit
                        value: 5
              - log: Scroll limit set to ${limit}
              - if:
                  condition: ${scrollPosition} == null
                  then:
                    - if:
                        condition: ${identifierScope} == null
                        then:
                          - scroll:
                              direction: ${direction}
                              untilIdentifier: ${identifier}
                              scrollLimit: ${limit}
                              timeout: 600000
                        else:
                          - scroll:
                              direction: ${direction}
                              untilIdentifier: ${identifier}
                              withinIdentifier: ${identifierScope}
                              scrollLimit: ${limit}
                              timeout: 600000
                  else:
                    - if:
                        condition: ${identifierScope} == null
                        then:
                          - scroll:
                              direction: ${direction}
                              untilIdentifier: ${identifier}
                              position: ${scrollPosition}
                              scrollLimit: ${limit}
                              timeout: 600000
                        else:
                          - scroll:
                              direction: ${direction}
                              untilIdentifier: ${identifier}
                              withinIdentifier: ${identifierScope}
                              position: ${scrollPosition}
                              scrollLimit: ${limit}
                              timeout: 600000
      - log: Resetting scrollPosition variable to default
      - storeIn:
          key: scrollPosition
          value: 'null'
      - storeIn:
          key: identifierScope
          value: 'null'
      - storeIn:
          key: limit
          value: 'null'          

  - name: us.functions.utils.handleTechnicalErrorPopup  
    platform: ios  
    flow:
      - storeIn:
          key: errorRemoved
          value: false
      - sleep: 
          duration: 5000
      - loop:
         begin: 0
         end: 3
         mode: increment
         storeIndex: i
         flow:
           - log: $i
           - if:
                identifier:
                  present: 
                    - identifier: us.mappings.popup.technicalError
                then:
                  - getString:
                      identifier: us.mappings.error.dismissButton
                      attribute: name
                      storeIn: buttonType
                  - click:
                      identifier: us.mappings.error.dismissButton
                  - storeIn:
                      key: errorDismissed
                      value: true
                else:
                  - storeIn:
                      key: errorRemoved
                      value: true
                  - log: No Technical Error Pop up observed
                  - break: true
      - if:
          condition: ${errorRemoved} == false
          then:
            - if:
                identifier:
                  notPresent:
                    - identifier: us.mappings.popup.technicalError
                then:
                  - storeIn:
                      key: errorRemoved
                      value: true

  - name: us.functions.utils.handleTechnicalErrorPopup.associateDiscountScreen
    platform: ios  
    flow:
      - sleep: 
          duration: 7000
      - loop:
         begin: 0
         end: 3
         storeIndex: i
         flow:
           - log: $i
           - if:
                identifier:
                  present: 
                    - identifier: us.mappings.popup.technicalError
                then:
                    - click:
                           identifier: us.mappings.error.dismissButton
                    - try:
                        flow:
                          - click:
                                  identifier: Continue
                        catch:
                          flow: 
                              - log: Continue not present

                else:
                    - log: No Technical Error Pop up observed
                    - break: true
  
  - name: us.functions.utils.handleCartMergePopup
    platform: ios  
    flow:
      - loop:
          begin: 0
          end: 4
          storeIndex: i
          flow:
            - log: $i
            - try:
                flow:
                  - verifyIdentifier:
                      timeout: 5000
                      present:
                        - identifier: us.mappings.popup.cartMerge
                  - click:
                      identifier: us.mappings.popup.cartMergeOkayButton
                catch:
                  flow:
                    - log: No Technical Error Page observed
                    - break: true

  - name: us.functions.utils.handleCartMergePopup
    platform: android  
    flow:
      - sleep:
           duration: 7000
      - loop:
         begin: 0
         end: 4
         storeIndex: i
         flow:
           - log: $i
           - if:
                identifier:
                  present: 
                    - identifier: us.mappings.popup.cartMerge
                then:
                  - click:
                      identifier: us.mappings.error.dismissButton
                else:
                    - log: No cart merge popup observed
                    - break: true


  - name: us.functions.utils.handleTechnicalErrorPopup
    platform: android  
    flow:
      - storeIn:
          key: errorRemoved
          value: false
      - sleep: 
          duration: 7000
      - loop:
         begin: 0
         end: 3
         storeIndex: i
         flow:
           - log: $i
           - if:
                identifier:
                  present: 
                    - identifier: us.mappings.popup.technicalError
                then:
                  - getString:
                      identifier: us.mappings.error.dismissButton
                      attribute: text
                      storeIn: buttonType
                  - click:
                      identifier: us.mappings.error.dismissButton
                else:
                  - storeIn:
                      key: errorRemoved
                      value: true
                  - log: No Technical Error Pop up observed
                  - break: true
      - if:
          condition: ${errorRemoved} == false
          then:
            - if:
                identifier:
                  notPresent:
                    - identifier: us.mappings.popup.technicalError
                then:
                  - storeIn:
                      key: errorRemoved
                      value: true

  - name: us.functions.utils.checkoutTechnicalErrorPopup
    platform: ios
    flow:
      - sleep:
          duration: 5000
      - loop:
          begin: 0
          end: 4
          storeIndex: i
          flow:
            - log: $i
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.popup.technicalError
                then:
                  - click:
                      identifier: us.mappings.buynow.buynowUnavailable.okButton
                  - executeFunction:
                      name: us.functions.cart.continueToCheckoutOrNewOrder
                else:
                    - log: No Technical Error Page observed
                    - break: true

  - name: us.functions.utils.handleMissingAnythingPopUp
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.multibox.missingAnythingContinueButton
          then:
            - click:
                identifier: us.mappings.multibox.missingAnythingContinueButton

  - name: us.functions.utils.handleMissingAnythingPopUp
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.cart.missingAnything.headerText
          then:
            - click:
                identifier: us.mappings.cart.missingAnything.ContinueButton
  
  - name: us.functions.utils.handleTechnicalErrorPageInCart
    platform: ios  
    flow:
      - sleep:
           duration: 15000
      - storeIn:
          key: cartPageLoaded
          value: false
      - loop:
          begin: 0
          end: 7
          storeIndex: i
          flow:
            - log: $i
            - if:
                identifier:
                  notPresent: 
                    - identifier: us.mappings.cart.refreshError
                then:
                  - if:
                      identifier:
                        present:
                          - identifier: us.mappings.cart.checkoutButton
                      then:
                        - storeIn:
                            key: cartPageLoaded
                            value: true
                      else:
                        - if:
                            identifier:
                              present:
                                - identifier: us.mappings.cart.startNewOrderButton
                            then:
                              - storeIn:
                                  key: cartPageLoaded
                                  value: true
                  - if:
                      identifier:
                        present:
                          - identifier: us.mappings.cart.emptyCartStartShoppingButton
                      then:
                        - storeIn:
                            key: cartPageLoaded
                            value: true
                      else:
                        - if:
                            identifier:
                              present:
                                - identifier: us.mappings.cart.removeLinkButton
                            then:
                              - storeIn:
                                  key: cartPageLoaded
                                  value: true
            - if:
                condition: ${cartPageLoaded} == false
                then:
                  - log: Cart page load error. Retry - ${i}
                  - click:
                      identifier: us.mappings.global.navigation.backNavigationToShop
                  - sleep:
                      duration: 5000
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.navBar.cartIcon
                  - click:
                      identifier: us.mappings.navBar.cartIcon
                  - sleep:
                      duration: 5000
                else:
                    - break: true
      - if:
          condition: ${cartPageLoaded}
          then:
            - log: Cart page loaded successfully
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} cart page load ERROR" 

  - name: us.functions.utils.handleTechnicalErrorPageInCart
    platform: android  
    flow:
      - sleep:
           duration: 15000
      -  storeIn:
          key: cartPageLoaded
          value: false
      - loop:
          begin: 0
          end: 7
          storeIndex: i
          flow:
            - log: $i
            - if:
                identifier:
                  notPresent:
                    - identifier: us.mappings.error.retryButton
                then:
                  - if:
                      identifier:
                        present:
                          - identifier: us.mappings.cart.checkoutButton
                      then:
                        - storeIn:
                            key: cartPageLoaded
                            value: true
                      else:
                        - if:
                            identifier:
                              present:
                                - identifier: us.mappings.cart.startNewOrderButton
                            then:
                              - storeIn:
                                  key: cartPageLoaded
                                  value: true
                  - if:
                      identifier:
                        present:
                          - identifier: us.mappings.cart.startShoppingButton
                      then:
                        - storeIn:
                            key: cartPageLoaded
                            value: true
                      else:
                        - if:
                            identifier:
                              present:
                                - identifier: us.mappings.cart.removeLinkButton
                            then:
                              - storeIn:
                                  key: cartPageLoaded
                                  value: true
            - if:
                condition: ${cartPageLoaded} == false
                then:
                  - log: Cart page load error. Retry - ${i}
                  - click:
                      identifier: us.mappings.global.navigation.backNavigation
                  - sleep:
                      duration: 5000
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.navBar.cartIcon
                  - click:
                      identifier: us.mappings.navBar.cartIcon
                  - sleep:
                      duration: 5000
                else:
                  - break: true
      - if:
          condition: ${cartPageLoaded}
          then:
            - log: Cart page loaded successfully
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} cart page load ERROR" 

  - name: us.functions.utils.handleTechnicalErrorPageInWalmart
    platform: android  
    flow:
      - sleep:
           duration: 10000
      - loop:
         begin: 0
         end: 7
         storeIndex: i
         flow:
           - log: $i
           - if:
                identifier:
                  present: 
                    - identifier: us.mappings.error.dismissButton
                then:
                  - click:
                      identifier: us.mappings.error.dismissButton
                  - sleep:
                      duration: 5000   
                else:
                    - log: No Technical Error Page observed
                    - break: true

  - name: us.functions.utils.handleTechnicalErrorPageInWalmart
    platform: ios  
    flow:
      - sleep:
           duration: 10000
      - loop:
         begin: 0
         end: 7
         storeIndex: i
         flow:
           - log: $i
           - if:
                identifier:
                  present: 
                    - identifier: us.mappings.error.dismissButton
                then:
                  - click:
                      identifier: us.mappings.error.dismissButton
                  - sleep:
                      duration: 5000   
                else:
                    - log: No Technical Error Page observed
                    - break: true


  - name: us.functions.utils.handleCheckAvailabilityNearByScenarioWithVariants
    platform: android
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            present:
              - identifier: us.mappings.wplus.checkAvailabilityNearByButton
          then:
            - scroll:
                direction: down
                untilIdentifier: us.mappings.itemPage.variantsContainer
            - loop:
                begin: 1
                end: 5
                mode: increment
                storeIndex: index
                flow:
                  - try:
                      flow:
                        - verifyIdentifier:
                            present:
                              - identifier: us.mappings.itemPage.variants
                        - click:
                            identifier: us.mappings.itemPage.variants
                        - if:
                            identifier:
                              present:
                                - identifier: us.mappings.item.addToCartButton
                            then:
                              - break: true
                            else:
                              - log: continuing with next variant
                      catch:
                        flow:
                          - log: Add to cart not available for any variant

  - name: us.functions.utils.handleCheckAvailabilityNearByScenarioWithVariants
    platform: ios
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            present:
              - identifier: us.mappings.wplus.checkAvailabilityNearByButton
          then:
            - scroll:
                direction: down
                untilIdentifier: us.mappings.itemPage.variantsContainer
            - loop:
                begin: 1
                end: 5
                mode: increment
                storeIndex: index
                flow:
                  - try:
                      flow:
                        - verifyIdentifier:
                            present:
                              - identifier: us.mappings.itemPage.variants
                        - click:
                            identifier: us.mappings.itemPage.variants
                        - if:
                            identifier:
                              present:
                                - identifier: us.mappings.item.addToCartButton
                            then:
                              - break: true
                            else:
                              - log: continuing with next variant
                      catch:
                        flow:
                          - log: Add to cart not available for any variant

  - name: us.functions.utils.handleCheckAvailabilityNearByScenario
    platform: ios
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            present:
              - identifier: us.mappings.wplus.checkAvailabilityNearByButton
          then:
            - scroll:
                direction: down
                untilIdentifier: us.mappings.wplus.retailerWalmartItemPage
            - sleep:
                duration: 3000
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.itemPage.variantsContainer
                then:
                  - executeFunction:
                      name: us.functions.utils.handleCheckAvailabilityNearByScenarioWithVariants
                else:
                  - scroll:
                      direction: down
                      untilIdentifier: us.mappings.itemPage.wplus.shopSimilarCarouselHeader
                  - click:
                      identifier: us.mappings.myItems.similarItems1


  - name: us.functions.utils.handleCheckAvailabilityNearByScenario
    platform: android
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            present:
              - identifier: us.mappings.wplus.checkAvailabilityNearByButton
          then:
            - scroll:
                direction: down
                untilIdentifier: us.mappings.wplus.retailerWalmartItemPage
            - sleep:
                duration: 3000
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.itemPage.variantsContainer
                then:
                  - executeFunction:
                      name: us.functions.utils.handleCheckAvailabilityNearByScenarioWithVariants
                else:
                  - scroll:
                      direction: down
                      untilIdentifier: us.mappings.itemPage.wplus.shopSimilarCarouselHeader
                  - click:
                      identifier: us.mappings.myItems.similarItems1

  - name: us.functions.utils.waitForLoadingImageToDisappear
    platform: android
    flow:
      - sleep:
          duration: 3000
      - loop:
          begin: 0
          end: 5
          storeIndex: i
          mode: increment
          flow:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.cart.loadingImage
                then:
                  - sleep:
                      duration: 5000
                  - log: loop count $i - waiting 5 secs for loading image to disappear
                else:
                  - break: true

  - name: us.functions.utils.waitForLoadingImageToDisappear
    platform: ios
    flow:
      - sleep:
          duration: 3000
      - loop:
          begin: 0
          end: 5
          storeIndex: i
          mode: increment
          flow:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.cart.loadingImage
                then:
                  - sleep:
                      duration: 5000
                  - log: loop count $i - waiting 5 secs for loading image to disappear
                else:
                  - break: true

  - name: us.function.resetOrderStatus
    flow:
      - if:
          condition: ${orderStatus} == 'Ready for pickup'
          then:
            - storeIn:
                key: orderStatus
                value: Ready
      - if:
          condition: ${fulfillmentType} == 'Shipping'
          then:
            - storeIn:
                key: fulfillmentType
                value: Delivery
      - if:
          condition: ${fulfillmentType} == 'Envío'
          then:
            - storeIn:
                key: fulfillmentType
                value: Entrega                
                
  - name: us.functions.utils.getFulfillmentTextsToCompare
    flow:
      - if:
          condition: ${altFulfillmentText} == null
          then:
            - if:
                condition: ${fulfillmentText} == 'Shipping'
                then:
                  - if:
                      condition: ${newGIC}
                      then:
                        - storeIn:
                            key: fulfillmentText
                            value: Delivery
                        - storeIn:
                            key: altFulfillmentText
                            value: delivery
                      else:
                        - storeIn:
                            key: altFulfillmentText
                            value: shipping
                else:
                  - if:
                      condition: ${fulfillmentText} == 'Pickup'
                      then:
                        - storeIn:
                            key: altFulfillmentText
                            value: pickup
                      else:
                        - if:
                            condition: ${fulfillmentText} == 'Delivery' || ${fulfillmentText} == 'Delivery from store'
                            then:
                              - storeIn:
                                  key: altFulfillmentText
                                  value: delivery
                            else:
                              - if:
                                  condition: ${fulfillmentText} == 'Drone delivery'
                                  then:
                                    - storeIn:
                                        key: altFulfillmentText
                                        value: Drone                                  
                                  else:
                                    - storeIn:
                                        key: altFulfillmentText
                                        value: ${fulfillmentText}

  - name: us.functions.utils.getPickupTextsToCompare
    flow:
      - if:
          condition: ${altPickupText} == null
          then:
            - if:
                condition: ${pickupText} == 'GardenCenterPickup'
                then:
                  - storeIn:
                      key: altPickupText
                      value: GardenCenterPickup
                else:
                  - if:
                      condition: ${pickupText} == 'GroceryPickup'
                      then:
                        - storeIn:
                            key: altPickupText
                            value: GroceryPickup
                      else:
                        - if:
                            condition: ${pickupText} == 'LiquorPickup'
                            then:
                              - storeIn:
                                  key: altPickupText
                                  value: LiquorPickup
                            else:
                              - storeIn:
                                  key: altPickupText
                                  value: ${pickupText}

  - name: us.functions.utils.fetchAmountDisplayed
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - log: Fetching only numeric value of given amount/count identifier
      - log: Attribute - ${attribute}
      - if:
          condition: ${attribute} == null
          then:
            - getString:
                identifier: ${identifier}
                storeIn: identifierData
          else:
            - getString:
                identifier: ${identifier}
                attribute: ${attribute}
                storeIn: identifierData

      - log: Amount displayed value ${identifierData}
      - executeNode:
          file: us/e2e-tests/helpers/splitString.js
          args:
            - value: ${identifierData}
            - value: ${delimeter}
          getResponse:
            storeIn: amountValue
      - executeNode:
          file: us/e2e-tests/helpers/splitString.js
          args:
            - value: ${amountValue}
            - value: ' '
            - value: split
            - value: before
          getResponse:
            storeIn: amountValue
      - storeIn:
          key: attribute
          value: 'null'
      - log: Numeric amount value ${amountValue}

  - name: us.functions.utils.getR2Array
    flow:
      - executeNode:
          file: us/e2e-tests/helpers/generateR2Array.js
          args:
            - value: ${data}
          getResponse:
            storeIn: r2Array

  - name: us.functions.utils.jsonDataParse
    flow:
      - executeNode:
          file: us/e2e-tests/helpers/jsonParser.js
          args:
            - value: ${data}
            - value: ${key}
          getResponse:
            storeIn: keyValue

  - name: us.functions.utils.jsonDataAdd
    flow:
      - executeNode:
          file: us/e2e-tests/helpers/jsonParser.js
          args:
            - value: ${data}
            - value: ${key}
            - value: ${option}
            - value: ${keyValue}
          getResponse:
            storeIn: jsonData

  - name: us.functions.utils.splitOrReplaceString
    flow:
      - if:
          condition: ${stringBefore} == null
          then:
            - executeNode:
                file: us/e2e-tests/helpers/splitString.js
                args:
                  - value: ${stringData}
                  - value: ${delimeter}
                  - value: ${action}
                getResponse:
                  storeIn: stringProcessed
          else:
            - executeNode:
                file: us/e2e-tests/helpers/splitString.js
                args:
                  - value: ${stringData}
                  - value: ${delimeter}
                  - value: ${action}
                  - value: ${stringBefore}
                getResponse:
                  storeIn: stringProcessed

  - name: us.functions.utils.astro.createTrialAccountConvertToPaid
    flow:
      - log: Create Account
      - log: ${payload}
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: segment
              value: oaoh
          readTimeout: 30000 
          requestBody: ${payload}
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.addPaymentPreferenceId
              storeIn: addPaymentPreferenceId
            - key: astroDetails.statusCode
              storeIn: statusCode
      - log: Account created successfully
      - if:
          condition: ${statusCode}!= 200
          then:
            - failTest:
                message: "API_FAILURE - Cannot create a trial member"
      - log: Converting Trial to Paid Member
      - executeFunction:
          name: us.functions.utils.astro.convertTrialtoPaidMember

  - name: us.functions.utils.astro.convertTrialtoPaidMember
    flow:
      - log: Convert Trial to Paid Member
      - log: $customerEmail
      - log: ${payload}
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus
          requestMethod: PUT
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: version
              value: nextgen
          readTimeout: 30000 
          requestBody: '{"convertToPaid":true}'
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue: 
            - key: astroDetails.status
              storeIn: status
      - if:
          condition: ${status}!= 'OK'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Cannot convert to paid member"

  - name: us.functions.utils.astro.verifyWPlusMembership
    flow:
      - log: "Checking wheher the customer is a W+ member"
      - log: $customerEmail
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: version
              value: nextgen
          readTimeout: 30000 
          requestBody: ${payload}
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.status
              storeIn: status
      - if:
          condition: ${status}!='OK'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to determine the membership ${response}"

  - name: us.functions.utils.astro.pauseMembershipWithPastOrFutureDate
    flow:
      - log: Pausing membership with a past or future date
      - log: $customerEmail
      - log: ${payload}
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus
          requestMethod: PUT
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: version
              value: nextgen
          readTimeout: 30000 
          requestBody: ${payload}
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.status
              storeIn: status
      - if:
          condition: ${status}!='OK'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to pause the membership ${response}"

  - name: us.functions.utils.astro.cancelPaidMembership
    flow:
      - log: Cancelling Paid Member
      - log: $customerEmail
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus
          requestMethod: DELETE
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: version
              value: nextgen
          readTimeout: 30000 
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response 
          getValue:
            - key: astroStatus
              storeIn: astroStatus
      - if:
          condition: ${astroStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to cancel the membership ${response}"

  - name: us.functions.utils.astro.convertTrialInhomeToPaidAnnual
    flow:
      - log: Converting InHome Trial to Paid Member
      - log: $customerEmail
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus
          requestMethod: PUT
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: version
              value: nextgen
          requestBody: ${payload}
          readTimeout: 30000 
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          

  # Terminate the application
  - name: us.test.functions.utils.terminateApp
    platform: ios
    flow:
      - executeAppiumScript:
          method: "mobile: terminateApp"
          params:
            - key: bundleId
              value: com.walmart.beta.electronics

  - name: us.test.functions.utils.terminateAndrelaunchApp
    platform: ios
    flow:
      - terminateApp: true
      - sleep:
          duration: 10000

      - executeAppiumScript:
          method: "mobile: activateApp"
          params:
            - key: bundleId
              value: com.walmart.beta.electronics  
      - sleep:
         duration: 10000

      - if:
          identifier:
            present:
              - identifier: us.mappings.global.onboarding.maybeLaterButton
          then:
            - click:
                identifier: us.mappings.global.onboarding.maybeLaterButton    

  # Terminate and Relaunch the app with the existing activity
  - name: us.test.functions.utils.relaunchApp
    platform: android
    flow:
      - terminateApp: true
      - sleep:
          duration: 10000 

      - activateApp:
          packageName: com.walmart.android.debug
      - sleep:
          duration: 50000    

      - if:
          identifier:
            present:
              - identifier: us.mappings.global.onboarding.maybeLaterButtonAfterRestart
          then:
            - click:
                identifier: us.mappings.global.onboarding.maybeLaterButtonAfterRestart

      - executeFunction:
          name: unified.us.functions.home.closeWPlusPromotionPopUpIfDisplayed

  - name: us.test.functions.utils.getNotificationsAfterAppRelaunch
    platform: android
    flow:
      - click:
          identifier: us.mappings.onboarding.afterAppRelaunch.getNotifications.button
          wait: 3000
      - click:
          identifier: us.mappings.onboarding.afterAppRelaunch.allowNotifications.button        

  # When no delivery address is present, select Add address CTA instead to direct to Add address prompt.
  - name: us.test.functions.utils.gic.noDeliveryAddressPresent.addAddressCTA  #Joel 4/3
    platform: ios
    flow:
      - if:
          identifier:
            timeout: 15000
            notPresent:
              - identifier: us.mappings.home.gic.module.addAddress.cta.present
              - log: Add Address is not present, Select the Delivery Address Card!          
          then:
            - click:
                identifier: us.mappings.home.gic.module.deliveryAddressCard.cta.present
                wait: 3000
          else:
            - log: Add Address is present, Select Add Address to provide one!
            - click:
                identifier: us.mappings.home.gic.module.addAddress.cta.present
      - verifyIdentifier:
          present:
            - identifier: Select address

  # When no delivery address is present, select Add address CTA instead to direct to Add address prompt.
  - name: us.test.functions.utils.gic.noDeliveryAddressPresent.addAddressCTA  #Joel 4/4
    platform: android
    flow:
      - if:
          identifier:
            timeout: 15000
            notPresent:
              - identifier: us.mappings.home.gic.module.addAddress.cta.present
              - log: Add Address is not present, Select the Delivery Address Card!        
          then:
            - click:
                identifier: us.mappings.home.gic.module.deliveryAddressCard.cta.present
                wait: 3000
          else:
            - log: Add Address is present, Select Add Address to provide one!
            - click:
                identifier: us.mappings.home.gic.module.addAddress.cta.present
      - verifyIdentifier:
          present:
            - identifier: Select address            

  # When user is presented with the W+ sign up but prefers to dismiss on iOS only.
  # Close W+ pop up
  - name: us.test.functions.utils.closeWplusPrompt.homeScreen
    platform: ios
    flow:
      - storeIn:
          key: executionStage
          value: onboarding
      - if:
          identifier:
            present:
              - identifier: us.mappings.home.splashPageJoinWplusBtn
          then: 
            - log: W+ Plus membership prompt is present closing.
            - click:      
                identifier: us.mappings.wplus.promotion.PopUpTrialButtonClose 
            - log: W+ Benefits prompt is dismissed!
          else:
            - log: W+ Plus membership prompt is not present nothing to close continue

  - name: us.test.functions.utils.closeWplusPrompt.homeScreen
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: onboarding
      - if:
          identifier:
            present:
              - identifier: us.mappings.wplus.benefitsTabEarlyAccessStartPaidMembershipButton
          then:
            - log: W+ Plus membership prompt is present closing.
            - click:
                identifier: us.mappings.wplus.cashback.bottomSheetcloseBtn
            - log: W+ Benefits prompt is dismissed!
          else:
            - log: W+ Plus membership prompt is not present nothing to close continue


  - name: us.functions.utils.astro.fetchPasscode.emailOTP
    flow:
      - log: Fetches the OTP from the customer email
      - log: $email
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/${email}/otp
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: response_type
              value: omni
            - key: payment_version
              value: smart_allocation
            - key: segment
              value: oaoh
          #requestBody: ${payload}
          readTimeout: 40000
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.passcode
              storeIn: otpFromEmail

  - name: us.functions.utils.astro.fetchPasscode.phoneOTP
    flow:
      - log: Fetches the OTP from the customer Phone
      - log: $customerEmail
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/phoneOtp?getOtp=true
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: response_type
              value: omni
            - key: payment_version
              value: smart_allocation
            - key: segment
              value: oaoh
            - key: Accept
              value: application/json
          requestBody: ${payload}
          readTimeout: 40000
          verifyResponseCode: 200
          retriesOnFail: 3
          retryDelay: 8000
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.passcode
              storeIn: otpFromPhone
            - key: astroStatus
              storeIn: OTPGenerationStatus
            - key: astroDescription
              storeIn: astroDetails
      - if:
          condition: ${OTPGenerationStatus} == 'SUCCESS'
          then:
            - log: OTP generated successfully
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to generate OTP. Error: ${astroDetails}"

  - name: us.functions.utils.astro.fetchPasscode.passwordResetCode
    flow:
      - log: Fetches the Passowrd Reset Code from the customer email
      - log: $custEmail
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/passwordResetCode
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: text/plain
            - key: segment
              value: oaoh
          requestBody: ${payload}
          readTimeout: 40000
          verifyResponseCode: 200
          retriesOnFail: 3
          retryDelay: 8000
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.passcode
              storeIn: passwordResetCodeFromEmail
            - key: astroStatus
              storeIn: OTPGenerationStatus
            - key: astroDescription
              storeIn: astroDetails
      - if:
          condition: ${OTPGenerationStatus} == 'SUCCESS'
          then:
            - log: OTP generated successfully
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to generate OTP. Error: ${astroDetails}"

  - name: us.functions.utils.astro.ibotta.triggerSubscriptionOrder
    flow:
      - log: Place the ibotta subscription order.
      - log: $fetchedCustId
      - log: The payload used
      - log: $payload
      - log: The processDate is
      - log: $processDate
      - callAPI:
          url: http://bigbenservice.stg.cruise-bigben.customer-profile.glb.us.walmart.net/event-scheduler-app/services/events/submit
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: WM_SVC.ENV
              value: teflon-hallway
            - key: Accept
              value: application/json
            - key: Content-Type
              value: application/json
          requestBody: ${payload}
          readTimeout: 40000
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"status":"TRIGGERED"'
          getResponse:
            storeIn: response
          getValue:
            - key: status
              storeIn: subscriptionOrderStatus

  - name: us.functions.utils.astro.fetchCustomerId
    flow:
      - log: Fetches the customer Id using the customer email
      - log: $custEmail
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/$custEmail
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: WM_CONSUMER.ID
              value: 2cd788f9-76e7-4d68-a466-628248d7bf24
            - key: Content-Type
              value: application/json
            - key: WM_CONSUMER.NAME
              value: aaa
            - key: WM_CONSUMER.TENANT_ID
              value: 0
            - key: WM_CONSUMER.VERTICAL_ID
              value: 0
            - key: WM_IFX.CLIENT_TYPE
              value: INTERNAL
            - key: WM_QOS.CORRELATION_ID
              value: TEST
            - key: WM_SEC.AUTH_TOKEN
              value: 1
            - key: WM_SVC.ENV
              value: teflon.hallway
            - key: WM_SVC.NAME
              value: CustomerAccountService
            - key: WM_SVC.VERSION
              value: 1.0.0
          readTimeout: 30000
          retriesOnFail: 5
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: customerIdStatus
            - key: astroDetails.customerDetails.customerAccountId
              storeIn: fetchedCustId

  # PetRX amends to increase quantity
  - name: us.functions.utils.astro.amendPetrxOrder.increaseQty
    flow:
      - log: Amend Petrx Order and update quantity
      - log: "Amend Petrx Order Payload is as below:::: ${payload}"
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}/amend
          header:
            - key: segment
              value: oaoh
            - key: Content-Type
              value: application/json
            - key: response_type
              value: omni
          readTimeout: 180000
          requestMethod: PUT
          wait: 15000
          verifyResponseCode: 200
          retriesOnFail: 3
          retryDelay: 180000
          requestBody: ${payload}

  - name: us.functions.utils.getFulfillmentTextsForIntentSelection
    flow:
      - if:
          condition: ${fulfillmentType} == 'shipping' || ${fulfillmentType} == 'Shipping'
          then:
            - storeIn:
                key: fulfillmentType
                value: ship
            - storeIn:
                key: altFulfillmentType
                value: Ship
          else:
            - if:
                condition: ${fulfillmentType} == 'pickup' || ${fulfillmentType} == 'Pickup'
                then:
                  - storeIn:
                      key: fulfillmentType
                      value: pickup
                  - storeIn:
                      key: altFulfillmentType
                      value: Pickup
                else:
                  - if:
                      condition: ${fulfillmentType} == 'delivery' || ${fulfillmentType} == 'Delivery'
                      then:
                        - storeIn:
                            key: fulfillmentType
                            value: delivery
                        - storeIn:
                            key: altFulfillmentType
                            value: Delivery   
                      else:
                        - if:
                            condition: ${fulfillmentType} == 'Retiro' || ${fulfillmentType} == 'retiro'
                            then:
                              - storeIn:
                                  key: fulfillmentType
                                  value: Retiro
                              - storeIn:
                                  key: altFulfillmentType
                                  value: retiro

                            else:
                              - if:
                                  condition: ${fulfillmentType} == 'Entrega' || ${fulfillmentType} == 'entrega'
                                  then:
                                    - storeIn:
                                        key: fulfillmentType
                                        value: Entrega
                                    - storeIn:
                                        key: altFulfillmentType
                                        value: entrega

                                  else:
                                    - if:
                                        condition: ${fulfillmentType} == 'Envío' || ${fulfillmentType} == 'envío'
                                        then:
                                          - storeIn:
                                              key: fulfillmentType
                                              value: Envío
                                          - storeIn:
                                              key: altFulfillmentType
                                              value: envío



  # PetRX - increase quantity and move Order
  - name: us.functions.utils.astro.petrxOrder.increaseQtyandMoveOrder
    flow:
      - log: Increase Quantity and Move Order for Petrx Order
      - log: "Increase Quantity and Move Order for Petrx Order and Payload is as below:::: ${payload}"
      - callAPI:
          url: http://astro.walmart.com/api/v3/teflon/order/${orderNo}
          header:
            - key: Content-Type
              value: application/json
            - key: segment
              value: oaoh
          readTimeout: 180000
          requestMethod: PUT
          wait: 15000
          verifyResponseCode: 200
          retriesOnFail: 3
          retryDelay: 180000
          requestBody: ${payload}

  # PetRX - Get OfferID and other Pet Details for an petRx Order
  - name: us.functions.utils.astro.petrxOrder.fetchOfferIdAndPetVetDetails
    flow:
      - log: fetch OfferId And PetVetDetails for Petrx Order
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}
          header:
            - key: Content-Type
              value: application/json
            - key: response_type
              value: omni
          readTimeout: 180000
          requestMethod: GET
          wait: 15000
          verifyResponseCode: 200
          retriesOnFail: 3
          retryDelay: 180000
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroDetails.orderInformation[0].lineIdsInfo.1.orderLineCustomAttributes.petId
              storeIn: petId
            - key: astroDetails.orderInformation[0].lineIdsInfo.1.orderLineCustomAttributes.prescriberId
              storeIn: prescriberId
            - key: astroDetails.orderInformation[0].lineIdsInfo.1.orderLineCustomAttributes.clinicId
              storeIn: clinicId
            - key: astroDetails.osResponse.payload[0].orderLines[0].orderProduct.offerId.offerId
              storeIn: offerId
  #            - key: astroDetails.purchaseOrders[0].purchaseOrderLines[0].requestOfferId.offerId
  #              storeIn: offerId
  #

  # PetRX - Amend the petRx order
  - name: us.functions.utils.astro.petrx.amendOrder
    flow:
      - log: Amend the petRx order
      - log: "Amend the petRx order and Payload is as below:::: ${payload}"
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}/amend
          header:
            - key: Content-Type
              value: application/json
            - key: response_type
              value: omni
          readTimeout: 180000
          requestMethod: PUT
          wait: 15000
          verifyResponseCode: 200
          retriesOnFail: 3
          retryDelay: 180000
          requestBody: ${payload}

  - name: us.functions.utils.astro.fetch.stepUpOTP
    flow:
      - loop:
          begin: 0
          end: 3
          storeIndex: retryCount
          mode: increment
          flow:
            - log: Fetches the STEP_UP_OTP from the customer email
            - log: $email
            - log: "The STEP_UP_OTP payload: ${payload}"
            - storeIn:
                key: errorCode
                value: 'null'
            - storeIn:
                key: OTPGenerationStatus
                value: 'null'
            - callAPI:
                url: http://astro-services.k8s.stage.walmart.com/api/v1/prod/customer/otp?getOtp=true
                requestMethod: POST
                header:
                  - key: Content-Type
                    value: application/json
                  - key: Accept
                    value: application/json
                  - key: Cookie
                    value: vtc=ZCswIujhKffjQhrPhq82Gw
                readTimeout: 180000
                requestBody: ${payload}
                getValue:
                  - key: astroStatus
                    storeIn: OTPGenerationStatus
                  - key: astroDescription
                    storeIn: astroDetails
                  - key: astroDetails.passcode
                    storeIn: stepUpOtpFromEmail
                retryDelay: 5000
                # verifyResponseBodyContains:
                #   - '"astroStatus":"SUCCESS"'
                # getResponse:
                #   storeIn: response
            - log: ${OTPGenerationStatus}
            - if:
                condition: ${OTPGenerationStatus} == 'SUCCESS'
                then:
                  - log: OTP generated successfully
                  - break: true
                else:
                  - log: Failure in otp generation. Retrying after 30 secs
                  - sleep:
                      duration: 30000
      - if:
          condition: ${OTPGenerationStatus} == 'SUCCESS'
          then:
            - log: OTP generated successfully
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to generate OTP. Error: ${astroDetails}"

  - name: us.functions.utils.astro.fetch.stepUpOTP.phone
    flow:
      - log: Fetches the STEP_UP_OTP from the customer Phone
      - log: $email
      - log: "The STEP_UP_OTP payload: ${payload}"
      - callAPI:
          url: http://astro-services.k8s.stage.walmart.com/api/v1/prod/customer/phoneOtp?getOtp=true
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: Accept
              value: application/json
            - key: Cookie
              value: vtc=ZCswIujhKffjQhrPhq82Gw
          requestBody: ${payload}
          readTimeout: 40000
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.passcode
              storeIn: stepUpOtpFromPhone

  - name: us.functions.utils.astro.fetch.stepUpOTPEmail
    flow:
      - loop:
          begin: 0
          end: 3
          storeIndex: retryCount
          mode: increment
          flow:
            - log: Fetches the STEP_UP_OTP from the customer email
            - log: $email
            - storeIn:
                key: errorCode
                value: 'null'
            - storeIn:
                key: OTPGenerationStatus
                value: 'null'
            - callAPI:
                url: https://acolyte.k8s.prod.walmart.com/api/v1/prod/customer/${email}/otp
                requestMethod: GET
                header:
                  - key: Content-Type
                    value: application/json
                  - key: Accept
                    value: application/json
                  - key: Cookie
                    value: vtc=ZCswIujhKffjQhrPhq82Gw
                readTimeout: 180000
                requestBody:
                getValue:
                  - key: astroStatus
                    storeIn: OTPGenerationStatus
                  - key: astroDescription
                    storeIn: astroDetails
                  - key: astroDetails.otptoken
                    storeIn: stepUpOtpFromEmail
                retryDelay: 5000
                disableCertificateChecks: true
                # verifyResponseBodyContains:
                #   - '"astroStatus":"SUCCESS"'
                # getResponse:
                #   storeIn: response
            - log: ${OTPGenerationStatus}
            - if:
                condition: ${OTPGenerationStatus} == 'SUCCESS'
                then:
                  - log: OTP generated successfully
                  - break: true
                else:
                  - log: Failure in otp generation. Retrying after 30 secs
                  - sleep:
                      duration: 30000
      - if:
          condition: ${OTPGenerationStatus} == 'SUCCESS'
          then:
            - log: OTP generated successfully
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to generate OTP. Error: ${astroDetails}"
# User cohort verification
  - name: us.functions.utils.astro.postCohortVerification
    flow:
      - loop:
          begin: 0
          end: 3
          storeIndex: i
          mode: increment
          flow:
            - log: ${i}
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus/cohortIdentity
                requestMethod: POST
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 30000
                retryDelay: 5000
                requestBody: ${payload}
                getValue:
                  - key: astroStatus
                    storeIn: astroStatus
            - if:
                condition: ${astroStatus} == 'SUCCESS'
                then:
                  - log: User cohort verification succeed
                  - break: true
                else:
                  - log: User cohort verification failed. Will retry
      - if:
          condition: ${astroStatus} == 'SUCCESS'
          then:
              - log: Post User Cohort Verification succeed
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Post User Cohort Verification failed for 3 times."

  - name: us.functions.utils.astro.petVetDiet.moveOrderStatus
    flow:
      - loop:
          begin: 0
          end: 3
          storeIndex: retryCount
          mode: increment
          flow:
            - log: Moves the order to Delivered Status
            - log: $orderNo
            - log: "Paylod used: ${payload}"
            - storeIn:
                key: errorCode
                value: 'null'
            - storeIn:
                key: OrderMovementStatus
                value: 'null'
            - callAPI:
                url: http://astro.walmart.com/api/v3/teflon/order/${orderNo}
                requestMethod: PUT
                header:
                  - key: Content-Type
                    value: application/json
                  - key: segment
                    value: oaoh
                readTimeout: 180000
#                requestBody: us.data.teflon.petVetDiet.payload.orderMovement
                requestBody: ${payload}
                getValue:
                  - key: status
                    storeIn: OrderMovementStatus
                retryDelay: 5000
            - log: " The Order movement status is: ${OrderMovementStatus}"
            - if:
                condition: ${OrderMovementStatus} == 'SUCCESS'
                then:
                  - log: Order moved Successfully
                  - break: true
                else:
                  - log: Failure in Order Movement. Retrying after 30 secs
                  - sleep:
                      duration: 30000
      - if:
          condition: ${OrderMovementStatus} == 'SUCCESS'
          then:
            - log: Order moved Successfully
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to Move the Order. Error!!!"

 # Function for Driver returned back to store order status change. 
     # [Utility to trigger order movement using Astro V3 API]
  # [mandatory] ${orderNo}    - Order number that has to be moved
  # [mandatory] ${orderType}  - Fulfillment type in the order to be moved
  # [mandatory] ${status}     - To which status the order needs to be moved
  - name: us.functions.utils.astro.triggerDriverreturnedstatus
    flow:
      - log: -------[START-TRIGGER UTILITY] - Order [ ${orderNo}-${orderType} ] movement to [ ${status} ] status-------
      - loop:
          begin: 1
          end: 4
          storeIndex: retryTriggerCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}/returned
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                requestMethod: POST
                verifyResponseCode: 200
                retriesOnFail: 3
                retryDelay: 180000
                requestBody: '{"fulfillmentGroups": [{"orderType":"$orderType","status": "$status"}]}'
                getValue:
                  - key: astroStatus
                    storeIn: responseTriggerStatus
            - if:
                condition: ${responseTriggerStatus} == 'SUCCESS'
                then:
                  - log: -------[END-TRIGGER UTILITY] - Order movement triggered successfully-------
                  - break: true
                else:
                  #- log: ------------------------------------------------------------------------------------
                  - log: TRIGGER RETRY ${retryTriggerCount} - Triggering order movement again due to failure.
                  #- log: ------------------------------------------------------------------------------------
      - if:
          condition: ${responseTriggerStatus} != 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to trigger order movement"                 

  - name: us.functions.utils.astro.petVetDiet.moveOrderStatus
    flow:
      - loop:
          begin: 0
          end: 3
          storeIndex: retryCount
          mode: increment
          flow:
            - log: Moves the order to Delivered Status
            - log: $orderNo
            - log: "Paylod used: ${payload}"
            - storeIn:
                key: errorCode
                value: 'null'
            - storeIn:
                key: OrderMovementStatus
                value: 'null'
            - callAPI:
                url: http://astro.walmart.com/api/v3/teflon/order/${orderNo}
                requestMethod: PUT
                header:
                  - key: Content-Type
                    value: application/json
                  - key: segment
                    value: oaoh
                readTimeout: 180000
#                requestBody: us.data.teflon.petVetDiet.payload.orderMovement
                requestBody: ${payload}
                getValue:
                  - key: status
                    storeIn: OrderMovementStatus
                retryDelay: 5000
            - log: " The Order movement status is: ${OrderMovementStatus}"
            - if:
                condition: ${OrderMovementStatus} == 'SUCCESS'
                then:
                  - log: Order moved Successfully
                  - break: true
                else:
                  - log: Failure in Order Movement. Retrying after 30 secs
                  - sleep:
                      duration: 30000
      - if:
          condition: ${OrderMovementStatus} == 'SUCCESS'
          then:
            - log: Order moved Successfully
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to Move the Order. Error!!!"

  - name: us.functions.utils.astro.updateDeliveryAddressFlags
    flow:
      - loop:
          begin: 0
          end: 3
          storeIndex: retryCount
          mode: increment
          flow:
            - log: Update Delivery Address Flags for email
            - log: $email
            - log: "Used payload is: ${payload}"
            - storeIn:
                key: errorCode
                value: 'null'
            - storeIn:
                key: updateDeliveryAddressFlags
                value: 'null'
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/customer/${email}/contactinformations
                requestMethod: PUT
                header:
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                requestBody: ${payload}
                getValue:
                  - key: astroStatus
                    storeIn: updateDeliveryAddressFlags
                retryDelay: 5000
            - log: ${updateDeliveryAddressFlags}
            - if:
                condition: ${updateDeliveryAddressFlags} == 'SUCCESS'
                then:
                  - log: Updated Delivery Address Flags successfully
                  - break: true
                else:
                  - log: Failure in Updating Delivery Address Flags. Retrying after 30 Secs
                  - sleep:
                      duration: 30000
      - if:
          condition: ${updateDeliveryAddressFlags} == 'SUCCESS'
          then:
            - log: Updated Delivery Address Flags successfully
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Failure in Updating Delivery Address Flags. Error."

  - name: us.functions.utils.astro.fetchPreferenceId
    flow:
      - log: Fetches the preference Id using the customer email
      - log: $email
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/$email
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: segment
              value: oaoh
          readTimeout: 30000
          retriesOnFail: 5
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: customerIdStatus
            - key: astroDetails.customerDetails.deliveryPreferences[0].deliveryAddressId
              storeIn: preferenceId
      - log: "Fetched prefernece id: ${preferenceId}"
            
  - name: us.functions.utils.astro.fetchOtpOnePay
    flow:
      - callAPI:
          url: https://8l3gq0kd02.execute-api.us-east-1.amazonaws.com/api/qa/twilio/otp
          header:
            - key: x-api-key
              value: "d0854179-06c8-495b-842f-e27412225ded"
            - key: Content-Type
              value: "application/json"
          readTimeout: 60000
          requestMethod: POST
          requestBody: '{"phone":4085551234"}'
          wait: 10000
          verifyResponseCode: 200
          retriesOnFail: 10
          retryDelay: 5000
          getValue:
            - key: code
              storeIn: otp
      - log: ${otp}


  - name: us.functions.utils.astro.fetchReturnOrderNumber
    flow:
      - log: fetch the Return order number from get order
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}
          header:
            - key: Content-Type
              value: application/json
            - key: response_type
              value: omni
          readTimeout: 180000
          requestMethod: GET
          wait: 15000
          verifyResponseCode: 200
          retriesOnFail: 3
          retryDelay: 1000
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroDetails.osResponse.payload[0].rmas[0]
              storeIn: rmas
      - log: "Fetched return order number: ${rmas}"
    
  - name: us.functions.utils.moveReturnOrderToIntransit
    flow:
      - callAPI:
          url: http://astro.walmart.com/api/nextGen/teflon/order/${orderNo}/return
          requestMethod: POST
          wait: 5000
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{"returnOrderNo": "${rmas}", "returnStatus": "In_Transit"}'
          wait: 10000
          retriesOnFail: 3
          retryDelay: 2000
          verifyResponseBodyContains:
            - '"SUCCESS"'
      - log: "get the return order number"
    
      #     getValue:
      #       - key: astroStatus
      #         storeIn: astroStatus

      # - if:
      #     condition: ${astroStatus} == 'SUCCESS'
      #     then:
      #       - storeIn:
      #           key: itemEligible
      #           value: true
  - name: us.functions.utils.moveReturnOrderToDeliveredRC
    flow:
      - callAPI:
          url: http://astro.walmart.com/api/nextGen/teflon/order/${orderNo}/return
          requestMethod: POST
          wait: 5000
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{"returnOrderNo": "${rmas}", "returnStatus": "Delivered_RC"}'
          wait: 10000
          retriesOnFail: 3
          retryDelay: 2000
          verifyResponseBodyContains:
            - '"SUCCESS"'
      - log: "order moved to delivered at RC"
  
  - name: us.functions.utils.moveReturnOrderToReturnReceived
    flow:
      - callAPI:
          url: http://astro.walmart.com/api/nextGen/teflon/order/${orderNo}/return
          requestMethod: POST
          wait: 5000
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{"returnOrderNo": "${rmas}", "returnStatus": "Return_Received"}'
          wait: 10000
          retriesOnFail: 3
          retryDelay: 2000
          verifyResponseBodyContains:
            - '"SUCCESS"'
      - log: "order moved to Return received" 
  

  - name: us.functions.utils.astro.addPaymentToExistingAccount
    flow:
      - log: Add Payment
      - log: ${payload}
      - storeIn:
          key: astroStatus
          value: 'null'
      - loop:
          begin: 1
          end: 4
          storeIndex: retryTriggerCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/customer/paymentPreferences
                requestMethod: POST
                wait: 5000
                header:
                  - key: Content-Type
                    value: application/json
                  - key: segment
                    value: oaoh
                readTimeout: 30000 
                requestBody: ${payload}
                getValue:
                  - key: astroStatus
                    storeIn: astroStatus
                  - key: astroDescription
                    storeIn: errorMessage
                  - key: astroDetails.statusCode
                    storeIn: responseCode
                  - key: statusCode
                    storeIn: altResponseCode
            - if:
                condition: ${astroStatus} == 'SUCCESS'
                then:
                  - if:
                      condition: ${responseCode} == 200
                      then:
                        - log: Payment added successfully
                        - break: true
                else:
                  - log: TRIGGER RETRY ${retryTriggerCount} - Triggering Additional payment addition API again
                  - sleep:
                      duration: 20000

      - if:
          condition: ${astroStatus}!= 'SUCCESS'
          then:
            - if:
                condition: ${responseCode} == 400 || ${altResponseCode} == 400
                then:
                  - failTest:
                      message: "API_FAILURE - ASTRO - PAYLOAD ERROR. Payload used: ${payload}"
                else:
                  - failTest:
                      message: "API_FAILURE - ASTRO - Unable to add new payment details to an account. Error: ${errorMessage}"

  - name: us.functions.utils.astro.fetchPasscode.latestPhoneOTP
    flow:
      - log: Fetches the latest OTP sent on phone
      - log: $astroEmail
      - log: $astroPhoneNumber
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/$astroEmail/otp?phone=$astroPhoneNumber
          requestMethod: GET
          wait: 5000
          header:
            - key: Content-Type
              value: application/json
            - key: Accept
              value: application/json
            - key: response_type
              value: omni
            - key: segment
              value: oaoh
          readTimeout: 40000
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          retriesOnFail: 3
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.passcode
              storeIn: otpFromPhone

  - name: us.functions.utils.astro.fetchPasscode.latestOTP
    flow:
      - log: Fetches the latest OTP sent on phone
      - log: $customerEmail
      - log: $astroPhoneNumber

      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer/$customerEmail/otp?phone=$astroPhoneNumber
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: Accept
              value: application/json
            - key: response_type
              value: omni
            - key: segment
              value: oaoh
          readTimeout: 40000
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.passcode
              storeIn: otpFromPhone

  - name: us.functions.utils.getitemTextsToCompare
    flow:
      - if:
          condition: ${getitemTexts} == null
          then:
            - if:
                condition: ${getitemTexts} == "Pre-Owned:Like New"
                then:
                  - storeIn:
                      key: altPickupText
                      value: Pre-Owned:Like New
                else:
                  - if:
                      condition: ${getitemTexts} == 'New with defects'
                      then:
                        - storeIn:
                            key: altPickupText
                            value: New with defects

  - name: us.functions.utils.navigateBackToAppFromSafari
    platform: ios
    flow:
      - click:
          coordinates: 50, 35
          wait: 1000

  - name: us.functions.utils.astro.createTrialAccount
    flow:
      - log: Create Account
      - log: ${payload}
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/customer
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: segment
              value: oaoh
          readTimeout: 30000 
          requestBody: ${payload}
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue:
            - key: astroDetails.addPaymentPreferenceId
              storeIn: addPaymentPreferenceId
            - key: astroDetails.statusCode
              storeIn: statusCode
      - log: Account created successfully
      - if:
          condition: ${statusCode}!= 200
          then:
            - failTest:
                message: "API_FAILURE - Cannot create a trial member"

  - name: us.functions.utils.astro.addRewardAmount
    flow:
      - log: Add Reward amount to existing Wplus user
      - log: ${payload}
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/addBalanceRewards
          requestMethod: PUT
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: version
              value: nextgen
          readTimeout: 30000 
          requestBody: ${payload}
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue: 
            - key: astroDetails.result
              storeIn: status
      - if:
          condition: ${status}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Cannot add reward amount to paid member"

  #Astro Update GiftCard Balance API can be used to update GC Balance for all the Gift Cards mentioned on Astro Glass Teflon Golden Data page
  # [mandatory] ${PID}    - PID of card as parameter while calling the function
  - name: us.functions.utils.addAmountToGiftCard
    flow:
      - log: Adding Amount to Gift Card
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/updateGcBalance/PIH.pang.FDCGC.GIFTCARD.${PID}
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{"addamount":$balance}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: addBalanceStatus
            - key: astroDescription
              storeIn: status
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${addBalanceStatus}
      - log: ${status}
      - if:
          condition: ${addBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to add balance to Gift Card"

  #Astro Check GiftCard Balance API can be used to check GC Balance for all the Gift Cards mentioned on Astro Glass Teflon Golden Data page
  # [mandatory] ${PID}    - PID of card as parameter while calling the function
  - name: us.functions.utils.checkGiftCardBalance
    flow:
      - log: Checking the Gift card balance
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/updateGcBalance/PIH.pang.FDCGC.GIFTCARD.${PID}
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: checkBalanceStatus
            - key: astroDescription
              storeIn: status
            - key: astroDetails.balanceamount.currencyAmount
              storeIn: gcBalance
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${checkBalanceStatus}
      - log: ${status}
      - if:
          condition: ${checkBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to Check the Gift Card balance"

  #Astro Check DS Balance API can be used to check GC Balance for all the Direct Spend Cards mentioned on Astro Glass Teflon Golden Data page
  # [mandatory] ${PID}    - PID of card as parameter while calling the function
  - name: us.functions.utils.checkDSCardBalance
    flow:
      - log: Checking the DS card balance
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/updateDsBalance/PIH.pang.FDCGC.GIFTCARD.${PID}
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: checkBalanceStatus
            - key: astroDescription
              storeIn: status
            - key: astroDetails.balanceamount.currencyAmount
              storeIn: gcBalance
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${checkBalanceStatus}
      - log: ${status}
      - if:
          condition: ${checkBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to Check the DS Card balance"

#Astro Check Rewards Balance API can be used to check rewards Balance 
  - name: us.functions.utils.checkRewardsBalance
    flow:
      - log: Checking the Rewards card balance
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/getBalanceRewards/${PIHASH}
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: checkBalanceStatus
            - key: astroDescription
              storeIn: status
            - key: astroDetails.balanceamount.currencyAmount
              storeIn: rcBalance
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${checkBalanceStatus}
      - log: ${status}
      - if:
          condition: ${checkBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to Check the Rewards balance"


  # Function to check the Rewards card Balance and if it is equal to 0, then the amount will be added to the Rewards card.
  - name: us.functions.checkRewardsBalanceAndLoadIfZero
    flow:
      - executeFunction:
          name: us.functions.utils.checkRewardsBalance
      - if:
          condition: ${rcBalance} == 0
          then:
            - log: "The Reward Card's current balance is:  '${rcBalance}'; Proceeding with load balance to Rewards Card(as the balance is ZERO.)"
            - executeFunction:
                name: us.functions.utils.astro.addRewardAmount
          else:
            - log: "The Reward Card's current balance is:  '${rcBalance}'; Skipping load balance to Rewards Card(as the balance is not ZERO.)"

#Function to get the current price of an item
  - name: us.functions.utils.astro.getItemPrice
    flow:
      - log: Getting the item price
      - callAPI:
          # url: http://astro.walmart.com/api/v2/teflon/item/414743206?storeId=32144
          url: http://astro.walmart.com/api/v2/teflon/item/${item}?storeId=${storeId}
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: getItemPriceStatus
            - key: astroDescription
              storeIn: status
            - key: astroDetails.currencyAmount
              storeIn: itemPrice
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${getItemPriceStatus}
      - log: "Current price of an Item: $${itemPrice}"
      - if:
          condition: ${getItemPriceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to Check the item price"

  # [Utility to validate the driverTip]
  # [mandatory] ${orderNo}    - Order number that has to be moved
  # [mandatory] ${orderType}  - Fulfillment type in the order to be moved
  # [mandatory] ${status}     - To which status the order needs to be moved
  # -----------------------------------------------------------------------------------------------------------------------
  # Valid orderType-status combinations :
  # STORE_SCHEDULED_PICKUP/STORE_UNSCHEDULED_PICKUP - [PO Acknowledged/PO Pick Complete/PO Ready For Pickup/Customer Picked]
  # STORE_SCHEDULED_DELIVERY                        - [PO Acknowledged/PO Pick Complete/PO Out for Delivery/Delivered]
  # FC_DELIVERY/FC_DELIVERY_WPP                     - [Shipped/Delivered]
  # MP_DELIVERY/MP_WFS_DELIVERY                     - [PO Acknowledged/Shipped/Delivered]
  # -----------------------------------------------------------------------------------------------------------------------
  - name: us.functions.utils.astro.validateDriverTip
    flow:
      - log: -------[START- UTILITY] - Validate driver Tip [ ${orderNo}-${orderType} ] for [ ${status} ] status-------

      - storeIn:
          key: mappingData
          value: 20000

      # Driver Tip Verification [Total re-attempt - 3 times incase of failure]
      - loop:
          begin: 1
          end: 4
          storeIndex: retryMovementCount
          mode: increment
          flow:
            - log: ------------------------------------------------------------------------------------
            - log: Driver Tip Verification attempt - ${retryMovementCount}
            - log: ------------------------------------------------------------------------------------

            - arithmetic:
                expression: ${mappingData} * 3
                storeIn: mappingData

            # Trigger Validate Driver Tip for the required orderType
            - executeFunction:
                name: us.functions.utils.astro.triggerValidateDriverTip

            # Wait for 5(each attempt) secs before validating if order movement trigger is successful or not
            - sleep:
                duration: 5000

            # Break re-attempt loop if Driver Tip Verification is successful
            - if:
                condition: ${responseVerifyDriverTipStatus} == 'SUCCESS'
                then:
                  - log: Driver Tip Has been Successfully Validated for Order [ ${orderNo} ] with [ ${status} ] status for fulfillment type [ ${orderType} ]
                  - break: true
                else:
                  - log: Retry after some wait time

      # Fail with appropriate error if Driver tip verification fails, even after all re-attempts
      - if:
          condition: ${responseVerifyDriverTipStatus} == 'SUCCESS'
          then:
            - log: -------[END-DRIVER TIP VERIFICATION UTILITY] - for order [ ${orderNo}-${orderType} ] on [ ${status} ] status-------
          else:
            - executeFunction:
                name: us.functions.utils.getFailureMessage
            - failTest:
                message: "API_FAILURE - ASTRO - Driver Tip Validation for [ ${orderNo} ] failed due to ${responseDetails} ${failureMessage}"

  # [Utility to trigger Validate Driver Tip using Astro V2 API]
  # [mandatory] ${orderNo}    - Order number that has to be moved
  # [mandatory] ${orderType}  - Fulfillment type in the order to be moved
  # [mandatory] ${status}     - To which status the order needs to be moved
  - name: us.functions.utils.astro.triggerValidateDriverTip
    flow:
      - log: -------[START-TRIGGER VALIDATE DRIVER TIP UTILITY] - for Order [ ${orderNo}-${orderType} ] on [ ${status} ] status-------
      - loop:
          begin: 1
          end: 4
          storeIndex: retryTriggerCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}/validateDriverTip
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                requestMethod: POST
                verifyResponseCode: 200
                retriesOnFail: 3
                retryDelay: 180000
                requestBody: '{"submittedTipAmount":${driverTipAmt},"orderType":"${orderType}","orderStatus":"${status}","tipType":"${tipType}"}'
                getValue:
                  - key: astroStatus
                    storeIn: responseVerifyDriverTipStatus
                  - key: astroDescription
                    storeIn: reason
            - log: "The ValidateDriverTip status is: ${responseVerifyDriverTipStatus}"
            - log: "The ASTRO STATUS: '${responseVerifyDriverTipStatus}'"
            - log: "The ASTRO MESSAGE: '${reason}'"
            - if:
                condition: ${responseVerifyDriverTipStatus} == 'SUCCESS'
                then:
                  - log: -------[END-TRIGGER UTILITY] - Verify Driver Tip successfully-------
                  - break: true
                else:
                  - failTest:
                      message: "API_FAILURE - ASTRO - [ ${orderNo} ] Unable to Verify Driver Tip ${reason}"


  - name: us.functions.checkWicCardBalanceAndLoadIfLessThan10 #needs to be updated after endpoint is finalized
    flow:
      - executeFunction:
          name: us.functions.utils.checkWicCardBalance 
      - if:
          condition: ${gcBalance} < 30
          then:
            - log: "The Wic's current balance is:  '${gcBalance}'; Proceeding with load balance to GC(as the balance is less.)"
            - executeFunction:
                name: us.functions.utils.addAmountToWicCard
          else:
            - log: "The Wic's current balance is:  '${gcBalance}'; Skipping load balance to GC(as the balance is not less.)"

  #Astro Check Wic Card Balance API can be used to check Wic Balance for all the Gift Cards mentioned on Astro Glass Teflon Golden Data page
  # [mandatory] ${PID}    - PID of card as parameter while calling the function
  # needs to be updated after endpoint is finalized
  - name: us.functions.utils.checkWicCardBalance 
    flow:
      - log: Checking the Wic card balance
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/updateGcBalance/PIH.pang.FDCGC.GIFTCARD.${PID}
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: checkBalanceStatus
            - key: astroDescription
              storeIn: status
            - key: astroDetails.balanceamount.currencyAmount
              storeIn: gcBalance
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${checkBalanceStatus}
      - log: ${status}
      - if:
          condition: ${checkBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to Check the Wic Card balance"


  #Astro Update Wic Balance API can be used to update Wic Balance for all the Gift Cards mentioned on Astro Glass Teflon Golden Data page
  # [mandatory] ${PID}    - PID of card as parameter while calling the function
  # needs to be updated after endpoint is finalized
  - name: us.functions.utils.addAmountToWicCard
    flow:
      - log: Adding Amount to Wic Card
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/updateGcBalance/PIH.pang.FDCGC.GIFTCARD.${PID}
          requestMethod: POST
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{"addamount":$balance}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: addBalanceStatus
            - key: astroDescription
              storeIn: status
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${addBalanceStatus}
      - log: ${status}
      - if:
          condition: ${addBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to add balance to Wic Card"

# Fetch customer id for prod emails
  - name: us.functions.utils.prod.fetchCustomerId
    flow:
      - log: Fetches the Customer Id using the customer email
      - log: $email
      - callAPI: 
          url: http://ca.prod-n.walmart.com/ca-app/services/customers/emails/$email
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: WM_CONSUMER.ID
              value: 2cd788f9-76e7-4d68-a466-628248d7bf24
            - key: Content-Type
              value: application/json
            - key: WM_CONSUMER.NAME
              value: aaa
            - key: WM_CONSUMER.TENANT_ID
              value: 0
            - key: WM_CONSUMER.VERTICAL_ID
              value: 0
            - key: WM_IFX.CLIENT_TYPE
              value: INTERNAL
            - key: WM_QOS.CORRELATION_ID
              value: TEST
            - key: WM_SEC.AUTH_TOKEN
              value: 1
            - key: WM_SVC.ENV
              value: prod
            - key: WM_SVC.NAME
              value: CustomerAccountService
            - key: WM_SVC.VERSION
              value: 1.0.0
          readTimeout: 30000
          retriesOnFail: 5
          verifyResponseCode: 200
          verifyResponseBodyContains:
            - '"OK"'
          getValue:
            - key: status
              storeIn: customerIdStatus
            - key: payload.persons[0].customerAccountId
              storeIn: customerAccountId
      - log: "Fetched customer id: ${customerAccountId}"

  - name: us.functions.utils.astro.createAccountWithoutPhoneNumber
    flow:
      - log: Create Account
      - loop:
          begin: 1
          end: 4
          storeIndex: retryTriggerCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/customer
                requestMethod: POST
                wait: 5000
                header:
                  - key: Content-Type
                    value: application/json
                  - key: segment
                    value: oaoh
                readTimeout: 30000 
                requestBody: ${payload}
                getValue:
                  - key: astroDetails.addPaymentPreferenceId
                    storeIn: addPaymentPreferenceId
                  - key: astroStatus
                    storeIn: astroStatus
                  - key: astroDetails.statusCode
                    storeIn: responseCode
                  - key: statusCode
                    storeIn: altResponseCode
                  - key: astroDescription
                    storeIn: errorMessage
                  - key: astroDetails.customerDetails.emailAddress
                    storeIn: astroEmail
          #requestBody: '{"firstName": "Astro","lastName": "Mobile","emailAddress": "$email","paymentMethods": ["VISA"],"postalAddress": {"address": "1350 Bacchus Dr","city": "San Jose","country": "USA","postalCode": "95122","state": "CA"},"password": "$password"}'
            - if:
                condition: ${astroStatus} == 'SUCCESS'
                then: 
                  - if:
                      condition: ${responseCode} == 200
                      then:
                        - log: $addPaymentPreferenceId
                        - if:
                            condition: ${withoutPayment}
                            then:
                              - executeFunction:
                                  name: us.functions.utils.astro.deletePaymentData
                            else:
                              - log: Account created successfully
                        - log: ------- Account created Successfully -------
                        - break: true
                else:
                  - log: TRIGGER RETRY ${retryTriggerCount} - Triggering account creation API again
                  - sleep:
                      duration: 20000

      - if:
          condition: ${astroStatus}!= 'SUCCESS'
          then:
            - if:
                condition: ${responseCode} == 400 || ${altResponseCode} == 400
                then:
                  - failTest:
                      message: "API_FAILURE - ASTRO - PAYLOAD ERROR. Payload used: ${payload}"
                else:
                  - failTest:
                      message: "API_FAILURE - ASTRO - Unable to create account. Error: ${errorMessage}"  

  - name: us.functions.utils.astro.getRenewalEvent
    flow:
      - sleep:
          duration: 100000      
      - log:  -------[START-VERIFY Renewal Events] - $customerEmail -------
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus/getRenewalEvents?status=OPEN 
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: segment
              value: oaoh
          readTimeout: 30000
          retriesOnFail: 5
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroDetails.renewalEvents[0].eventId
              storeIn: eventId
      - log: "Fetched event id: ${eventId}"                      

  - name: us.functions.utils.astro.getRenewalEvents
    flow:
      - sleep:
          duration: 100000      
      - log:  -------[START-VERIFY Renewal Events] - $customerEmail -------
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus/getRenewalEvents?status=OPEN 
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: segment
              value: oaoh
          readTimeout: 30000
          retriesOnFail: 5
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroDetails.renewalEvents[1].eventId
              storeIn: eventId
      - log: "Fetched event id: ${eventId}"

  - name: us.functions.utils.astro.postpayment
    flow:
      - sleep:
          duration: 100000      
      - loop:
          begin: 0
          end: 3
          storeIndex: i
          mode: increment
          flow:
            - log: ${i}
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/account/$customerEmail/wplus/triggerRenewalEvent
                requestMethod: POST
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 30000
                retryDelay: 5000
                requestBody: ${payload}
                getValue:
                  - key: astroStatus
                    storeIn: astroStatus
            - if:
                condition: ${astroStatus} == 'SUCCESS'
                then:
                  - log: User renewal verification succeed
                  - break: true
                else:
                  - log: User renewal verification failed. Will retry
      - if:
          condition: ${astroStatus} == 'SUCCESS'
          then:
              - log: Post User renewal hort Verification succeed
          else:
            - failTest:
                message: "API_FAILURE - ASTRO - Post User renewal Verification failed for 3 times."       
 
  - name: us.functions.utils.astro.ACCSchedulingTireInstallation
    flow:
      - log: -------[START-Scheduling tire installation appointment] - Order [ ${orderNo}-${orderType} ] -------
      - loop:
          begin: 1
          end: 3
          storeIndex: retryCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v3/teflon/order/${orderNo}
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 120000
                requestMethod: PUT
                verifyResponseCode: 200
                retriesOnFail: 2
                retryDelay: 120000
                requestBody: '{"fulfillmentGroups": [{"orderType":"$orderType","status": "$status"}]}'
                getValue:
                  - key: status
                    storeIn: responseStatus
                  - key: astroDescription
                    storeIn: failureReason
            - if:
                condition: ${responseStatus} == 'SUCCESS'
                then:
                  - log: -------[END-Scheduled tire installation appointment successfully]-------
                  - break: true
                else:
                  - log: RETRY ${retryCount}
      - if:
          condition: ${responseStatus} != 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - [ ${orderNo} ] Unable to schedule tire installation appointment ${failureReason}"  
                
# Update Location Accuracy timer via Debug panel iOS
  - name: us.functions.home.debugPanel.updateLocationAccuracyTimer
    platform: ios
    flow:
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: walmart://expo?_xf=b3a4m&wm_preview_date=1718305081740
      # - sleep:
      #     duration: 5000
      # - executeFunction:
      #     name: us.functions.global.navigation.goToDeepLink
      #     params:
      #       - name: deepLinkUrl
      #         string: walmart://debugPanel
      # - click:
      #     identifier: us.mappings.debugPanel.CcmState
      #     wait: 3000
      # - sleep:
      #     duration: 2000
      # - scroll:
      #    direction: up
      # - scroll:
      #    direction: up
      # - enterText:
      #     identifier: us.mappings.debugPanel.CCMState.searchBar
      #     string: cart.locationAccuracy.lastShownThreshold.minutes
      #     pressEnter: true
      # - click:
      #     identifier: us.mappings.debugPanel.CCMState.LocationAccuracyTimerFlag
      # - enterText:
      #     identifier: us.mappings.debugPanel.CCMState.LocationAccuracyTimerFlagValue
      #     clearField: true
      #     clickFirst: true
      #     string: 1
      #     pressEnter: true
      # - click:
      #     identifier: us.mappings.debugPanel.CCMState.LocationAccuracyTimerFlag.SaveModifications
      # - click:
      #     identifier: us.mappings.debugPanel.CCMState.LocationAccuracyTimerFlag.Cancel


# Update Location Accuracy timer via Debug panel  Android
  - name: us.functions.home.debugPanel.updateLocationAccuracyTimer
    platform: android
    flow:
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: walmart://expo?_xf=b3a4m&wm_preview_date=1718305081740
      - sleep:
            duration: 3000        

      # - executeFunction:
      #     name: us.functions.global.navigation.goToDeepLink
      #     params:
      #       - name: deepLinkUrl
      #         string: walmart://debugPanel

      # - click:
      #     identifier: us.mappings.debugPanel.ConfigAPIPanel  

      # - enterText:
      #     identifier: us.mappings.debugPanel.ConfigAPIPanel.searchBar
      #     string: cart.locationAccuracy.lastShownThreshold.minutes
      #     pressEnter: true

      # - click:
      #     identifier: us.mappings.debugPanel.ConfigAPIPanel.LocationAccuracyCCM

      # - click:
      #     identifier: us.mappings.debugPanel.ConfigAPIPanel.LocationAccuracyCcmModify

      # - enterText:
      #     identifier: us.mappings.debugPanel.ConfigAPIPanel.LocationAccuracyCcmFlagValue
      #     clearField: true
      #     clickFirst: true
      #     string: 1
      #     pressEnter: true

      # - click:
      #     identifier: us.mappings.debugPanel.ConfigAPIPanel.LocationAccuracyCcmFlagConfirmChangeCTA

      # - executeFunction:
      #    name: us.functions.global.navigation.backNavigation  

      # - executeFunction:
      #    name: us.functions.global.navigation.backNavigation

      # - sleep:
      #     duration: 5000

      # - executeFunction:
      #     name: us.functions.global.navigation.goToDeepLink
      #     params:
      #       - name: deepLinkUrl
      #         string: walmart://expo?_xf=RGENO&wm_preview_date=1717705856264

      # - sleep:
      #     duration: 5000

# Android - Adds headers in debug panel, takes 2 parameters key, value, see the example test added for reference
  - name: us.functions.home.debugPanel.debuggerTools.addHeader
    platform: android
    flow:
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: walmart://debugPanel/debugger-tools
      - sleep:
            duration: 3000
      - scroll:
         direction: down
      - click:
          identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader
          wait: 10000
      - verifyIdentifier:
          present:
            - identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader.addModifyHeadersTitle
      - click:
          identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader.addHeaderButton
          wait: 3000
      - verifyIdentifier:
          present:
            - identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader.enterKey
      - enterText:
          identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader.enterKey
          string: ${headerKey} 
      - enterText:
          identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader.enterValue
          string: ${headerValue}
      - click:
          identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader.addHeaderButton
          wait: 3000
      - verifyIdentifier:
          present:
            - identifier: us.mappings.debugPanel.debuggerTools.addDebugHeader.addModifyHeadersTitle
      - verifyIdentifier:
          text:
            - identifier: //android.widget.TextView[@resource-id="com.walmart.android.debug:id/networking_modify_header_name" and @text="${headerKey}"]
              equals: ${headerKey} 
      - log: header key ${headerKey} is added
      - verifyIdentifier:
          text:
            - identifier: //android.widget.TextView[@resource-id="com.walmart.android.debug:id/networking_modify_header_value" and @text="${headerValue}"]
              equals: ${headerValue}
      - log: header value ${headerValue} is added
      - goBack: true
      - goBack: true


# Android - Go to debug panel, cookies, clear cookies
  - name: us.functions.home.debugPanel.cookies.clearCookies
    platform: android
    flow:
      - sleep:
            duration: 3000
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: walmart://debugPanel
      - sleep:
            duration: 3000
      - enterText:
          identifier: us.mappings.debugPanel.search
          string: cookies
      - sleep:
            duration: 3000
      - click:
          identifier: us.mappings.debugPanel.cookies
          wait: 2000
      - click:
          identifier: us.mappings.debugPanel.cookies.clearCookies
          wait: 4000
      - log: Cookies cleared

# iOS - Adds headers in debug panel, takes 2 parameters key, value, see the example test added for reference
  - name: us.functions.home.debugPanel.debuggerTools.addHeader
    platform: ios
    flow:
      - executeFunction:
          name: us.functions.global.navigation.goToDeepLink
          params:
            - name: deepLinkUrl
              string: walmart://debugPanel/enableTestverse
      - sleep:
            duration: 10000
      - click:
          identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton
          wait: 3000
      - verifyIdentifier:
          present:
            - identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.newHeaderFlagTitle
      - verifyIdentifier:
          present:
            - identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.headerKey
      - enterText:
          identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.headerKey
          string: ${headerKey}
      - verifyIdentifier:
          present:
            - identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.headerValue
      - enterText:
          identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.headerValue
          string: ${headerValue}
      - click:
          identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.persistHeader
          wait: 3000
      - click:
          identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.addCustomLocalHeaderFlagButton
          wait: 3000
      - click:
          identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton
          wait: 3000
      - verifyIdentifier:
          present:
            - identifier: us.mappings.debugPanel.enableTestverse.customHeaderIntegrationButton.newHeaderFlagTitle
      - verifyIdentifier:
          present:
            - identifier: "//XCUIElementTypeStaticText[@name='${headerKey}: ${headerValue}']"
      - log: header key ${headerKey} , header value ${headerValue} is added
      - goBack: true
      - goBack: true

## RXPD Util to create Prescriptions using Astro
  - name: us.functions.utils.astro.rxpd.create.rx
    flow:
      - log: -------[START-Create prescriptions for the given customer] ] -------
      - loop:
          begin: 1
          end: 3
          storeIndex: retryCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/rx/order
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                requestMethod: POST
                verifyResponseCode: 200
                retriesOnFail: 2
                retryDelay: 30000
                requestBody: '{"patientId": "$patientId","siteId": "$siteId","drug": {"ndc": "$ndc"}, "moveTo":"$moveTo"}'
                getValue:
                  - key: astroStatus
                    storeIn: responseStatus
            - if:
                condition: ${responseStatus} == 'SUCCESS'
                then:
                  - log: -------[END-Created prescriptions for the given customer successfully]-------
                  - break: true
                else:
                  - log: RETRY ${retryCount}
      - if:
          condition: ${responseStatus} != 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - [ ${$patientId} ] Unable to Create Prescriptions for the given customer ${failureReason}"

 # Function for Driver return initiated back to store order status change. 
     # [Utility to trigger order movement using Astro V2 API]
  # [mandatory] ${orderNo}    - Order number that has to be moved
  # [mandatory] ${orderType}  - Fulfillment type in the order to be moved
  # [mandatory] ${status}     - To which status the order needs to be moved
  - name: us.functions.utils.astro.triggerDriverReturnInitiatedStatus
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - log: -------[START-TRIGGER UTILITY] - Order [ ${orderNo}-${orderType} ] movement to [ ${status} ] status-------
      - loop:
          begin: 1
          end: 4
          storeIndex: retryTriggerCount
          mode: increment
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/order/${orderNo}/returnInitiated
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                readTimeout: 180000
                requestMethod: POST
                verifyResponseCode: 200
                retriesOnFail: 3
                retryDelay: 180000
                requestBody: '{"fulfillmentGroups": [{"orderType":"$orderType","status": "$status"}]}'
                getValue:
                  - key: status
                    storeIn: responseTriggerStatus
            - if:
                condition: ${responseTriggerStatus} == 'SUCCESS'
                then:
                  - log: -------[END-TRIGGER UTILITY] - Order movement triggered successfully-------
                  - break: true
                else:
                  #- log: ------------------------------------------------------------------------------------
                  - log: TRIGGER RETRY ${retryTriggerCount} - Triggering order movement again due to failure.
                  #- log: ------------------------------------------------------------------------------------
      - if:
          condition: ${responseTriggerStatus} != 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - ASTRO - Unable to trigger order movement"

  - name: unified.us.functions.utils.astro.clearCart
    flow:
      - try:
          flow:
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/customer/${email}/clearcart
                requestMethod: DELETE
                header:
                  - key: segment
                    value: oaoh
                  - key: Content-Type
                    value: application/json
                wait: 10000
                verifyResponseBodyContains:
                  - 'SUCCESS'
                verifyResponseCode: 200
                retriesOnFail: 5
                retryDelay: 2000
                getValue:
                  - key: astroStatus
                    storeIn: clearCartStatus
            - log: Cart cleared for ${email}
          catch:
            flow:
              - if:
                  condition: ${clearCartStatus} != 'SUCCESS'
                  then:
                    - failTest:
                        message: "API_FAILURE - ASTRO - Cart not cleared"

  - name: unified.us.functions.utils.prod.clearCart
    flow:                        
        - executeFunction:
            name: unified.us.functions.global.navigation.toCartFromNavBar            
        - executeFunction:
            name: unified.us.functions.cart.removeAllCartItems
        - executeFunction:
            name: unified.us.functions.cart.removeUnavailableItemsFromCart
        - executeFunction:
            name: unified.us.functions.global.navigation.backNavigation       

  # Function to check the Rewards card Balance and if it is equal to 0, then the amount will be added to the Rewards card.
  - name: unified.us.functions.checkRewardsBalanceAndLoadIfZero
    flow:
      - executeFunction:
          name: unified.us.functions.utils.checkRewardsBalance
      - if:
          condition: ${rcBalance} == 0
          then:
            - log: "The Reward Card's current balance is:  '${rcBalance}'; Proceeding with load balance to Rewards Card(as the balance is ZERO.)"
            - executeFunction:
                name: unified.us.functions.utils.astro.addRewardAmount
          else:
            - log: "The Reward Card's current balance is:  '${rcBalance}'; Skipping load balance to Rewards Card(as the balance is not ZERO.)"

#Astro Check Rewards Balance API can be used to check rewards Balance 
  - name: unified.us.functions.utils.checkRewardsBalance
    flow:
      - log: Checking the Rewards card balance
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/getBalanceRewards/${PIHASH}
          requestMethod: GET
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
          readTimeout: 180000
          requestBody: '{}'
          verifyResponseBodyContains:
            - '"SUCCESS"'
          getValue:
            - key: astroStatus
              storeIn: checkBalanceStatus
            - key: astroDescription
              storeIn: status
            - key: astroDetails.balanceamount.currencyAmount
              storeIn: rcBalance
          retriesOnFail: 3
          retryDelay: 1000
      - log: ${checkBalanceStatus}
      - log: ${status}
      - if:
          condition: ${checkBalanceStatus}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Unable to Check the Rewards balance"

  - name: unified.us.functions.utils.astro.addRewardAmount
    flow:
      - log: Add Reward amount to existing Wplus user
      - log: ${payload}
      - callAPI:
          url: http://astro.walmart.com/api/v2/teflon/addBalanceRewards
          requestMethod: PUT
          wait: 5000
          verifyResponseCode: 200
          header:
            - key: Content-Type
              value: application/json
            - key: version
              value: nextgen
          readTimeout: 30000 
          requestBody: ${payload}
          verifyResponseBodyContains:
            - '"astroStatus":"SUCCESS"'
          getResponse:
            storeIn: response
          getValue: 
            - key: astroDetails.result
              storeIn: status
      - if:
          condition: ${status}!= 'SUCCESS'
          then:
            - failTest:
                message: "API_FAILURE - Astro - Cannot add reward amount to paid member"