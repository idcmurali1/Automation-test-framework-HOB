functions:

  #*************************************************************************************************
  #************************************ UTILITIES - IOS - START ************************************
  #*************************************************************************************************

  # ******** Utility to initiate and load initial returns window to select items for returns *******
  - name: us.functions.returns.initiateReturns
    platform: ios
    flow:
      - executeFunction:
          name: us.functions.returns.goToStartReturn
      - executeFunction:
          name: us.functions.returns.verifyStartReturnScreen

  # **************** Utility to initiate item returns from return window within ODP ****************
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${itemIndex}        - Index of item for selection [1 / 2 / 3 ...]
  # [Mandatory] ${returnReason}     - Damaged / Item damaged / Poor qualty ...
  # [Optional]  ${returnType}       - Refund/Replacement [default 'Refund']
  # [Optional]  ${replacementType}  - fast/slow [default 'slow' (To be given only if ${returnType} is 'Replacement')]
  # [Mandatory] ${returnMethod}     - Schedule for pickup / Drop off at FedEx / Return by mail / Return at Walmart store
  # [Mandatory] ${itemType}         - fc/sc/mp
  # [Optional]  ${keepItItem}       - keepit/nonKeepit/partialkeepit [default 'nonKeepit']
  # [Optional]  ${cardType}         - visa / Electronic Benefit Transfer / solutran (For DS card) / Gift Card
  # [Optional]  ${tierMsgType}      - fast/slow
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.itemReturn
    platform: ios
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.returns.requiredReturnDataSetup
      - executeFunction:
          name: us.functions.returns.returnItemAndReasonSelection
      - executeFunction:
          name: us.functions.returns.returnTypeSelection
      - executeFunction:
          name: us.functions.returns.returnMethodSelection
      - executeFunction:
          name: us.functions.returns.returnReviewDetailsValidation
      - executeFunction:
          name: us.functions.returns.returnConfirmationValidation

  # ****************** Utility to validate ODP after initiating returns for an item ****************
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnReviewText} - Return by mail / Return to Walmart store / Return scheduled for pickup / Return by drop-off at FedEx
  # [Mandatory] ${buttonText}       - View label / Show barcode / View instructions / Show QR
  # [Optional]  ${cardType}         - visa / Electronic Benefit Trasnfer / solutran / Gift Card
  # [Optional]  ${restrictedItem}   - true / false  [default 'false']
  # [Optional]  ${keepItItem}       - keepit / nonKeepit  [default 'nonKeepit']
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnODPValidation
    platform: ios
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.returns.requiredReturnDataSetup
      - verifyIdentifier:
          present:
            - identifier: us.mappings.orderDetails.orderNumber
      - sleep:
          duration: 5000

      - executeFunction:
          name: us.functions.orderDetails.expandItemDetails
      - if:
          identifier:
            present:
              - identifier: us.mappings.return.odp.processingReturn
          then:
            - log: "Return still processing Waiting for 2 mins before refreshing odp"
            - sleep:
                duration: 100000
            # Deeplink into order details page
            - executeFunction:
                name: us.functions.global.navigation.goToDeepLink
                params:
                  - name: deepLinkUrl
                    string: walmart://orders/$orderNo
            - executeFunction:
                name: us.functions.orderDetails.expandItemDetails
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.return.odp.processingReturn
                then:
                  - failTest:
                      message: "ENV_FAILURE - ${env} - Return still processing after waiting "

      - if:
          condition: ${keepItItem} == 'keepit' || ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericODPValidation
          else:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.return.odp.pendingMessage
            - if:
                condition: ${prerequisiteScrollRequired}
                then:
                  - executeFunction:
                      name: us.functions.utils.scrollIfNotVisible
                      params:
                        - name: identifier
                          string: us.mappings.return.odp.returnMethod.textLabel
                        - name: direction
                          string: up
                else:
                  - executeFunction:
                      name: us.functions.utils.scrollIfNotVisible
                      params:
                        - name: identifier
                          string: us.mappings.return.odp.returnDetailsButton
                        - name: direction
                          string: down
            - verifyIdentifier: 
                present:
                  - identifier: us.mappings.return.odp.returnDetailsButton
                  - identifier: us.mappings.return.odp.returnMethod.textLabel
                  - identifier: us.mappings.return.odp.returnDetailsLink
            - if:
                condition: ${returnReviewText} != 'Return scheduled for pickup'
                then:
                  - verifyIdentifier: 
                      present:
                        - identifier: us.mappings.return.odp.pickupTime.textLabel
      - executeFunction:
          name: us.functions.returns.returnODPPopupValidation
      - executeFunction:
          name: us.functions.returns.returnODPReturnDetailsValidation
      - scroll:
          direction: up
          untilIdentifier: us.mappings.orderDetails.orderNumber

  # ****************************** Utility to Cancel return initiated  *****************************
  # ************[Currently all items initiated for returns are cancelled in one go] ****************
  - name: us.functions.returns.cancelReturn
    platform: ios
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.returns.initiateReturnCancellation
      - executeFunction:
          name: us.functions.returns.submitReturnCancellation

  # *************** Utility to validate successful cancellation of returns initiated ***************
  - name: us.functions.returns.validateReturnCancellation
    platform: ios
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - verifyIdentifier:
          present:
            - identifier: us.mappings.orderDetails.startReturnButton         
      - verifyIdentifier:
          notPresent:
            - identifier: us.mappings.return.odp.pendingMessage
            - identifier: us.mappings.returns.cancelReturn
      - executeFunction:
          name: us.functions.orderDetails.expandItemDetails
      - verifyIdentifier:
          notPresent:
            - identifier: us.mappings.return.odp.returnDetailsButton

  # *************  Variant Replacement Validation ***************    
  - name: us.functions.returns.variantReplacement
    platform: ios
    flow: 
      - executeFunction:
          name: us.functions.returns.requiredReturnDataSetup
      - executeFunction:
          name: us.functions.returns.returnItemAndReasonSelection 
      - executeFunction:
          name: us.functions.returns.variantSelection 
      - executeFunction:
          name: us.functions.returns.returnMethodSelection
      # Return Review screen validation
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.returnReview.itemTile
            # - identifier: us.mappings.returns.variantReplacement.returnReview.returnReplacementText    
      - executeFunction:
          name: us.functions.returns.returnReviewDetailsValidation
      # Return Confirmation screen validation
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.returnReview.itemTile
            # - identifier: us.mappings.returns.variantReplacement.returnReview.returnReplacementText 
      - executeFunction:
          name: us.functions.returns.returnConfirmationValidation    
                          

  #*************************************************************************************************
  #************************************* UTILITIES - IOS - END *************************************
  #*************************************************************************************************

  #*************************************************************************************************
  #********************************** SUB UTILITIES - IOS - START **********************************
  #*************************************************************************************************

  # Definition  : To load returns window from ODP
  # Sub-utility : Used in [ us.functions.returns.initiateReturns ]
  # Params      : NA
  - name: us.functions.returns.goToStartReturn
    platform: ios
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.orderDetails.orderNumber
            - name: direction
              string: up
      - verifyIdentifier:
          present:
            - identifier: us.mappings.orderDetails.orderNumber
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.orderDetails.startReturnButton
            - name: direction
              string: down
      - click:
          identifier: us.mappings.orderDetails.startReturnButton

  # Definition  : To validate returns window displayed
  # Sub-utility : Used in [ us.functions.returns.initiateReturns ]
  # Params      : NA
  - name: us.functions.returns.verifyStartReturnScreen
    platform: ios
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.startReturnScreenHeader
          then:
            - log: "Screen header displayed as expected"
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Return item selection window not displayed"
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.selectItemsText

  # Definition  : To select item to be returned and return reason
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${itemIndex}    for item selection          [ 1 / 2 / 3 ... ]
  # [Mandatory] ${returnReason} for return reason selection [ Damaged / Item damaged / Poor qualty ... ]
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnItemAndReasonSelection
    platform: ios
    flow:
      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyInfleckitMessage
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.selectItemsText
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.item.select
          then:
            - click:
                identifier: us.mappings.returns.item.select
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Item at position ${itemIndex} not available for Return"
      - click:
          identifier: us.mappings.returns.continueButton
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.itemPageReasonDropdown
      - click:
          identifier: us.mappings.returns.itemPageReasonDropdown
      - sleep:
          duration: 1000
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnReason
          then:
            - click:
                identifier: us.mappings.returns.returnReason
          else:
            - log: Given Return reason is not available selecting the first available in the option
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.returnReasonFirstOption
                then:
                  - click:
                      identifier: us.mappings.returns.returnReasonFirstOption
                else:
                  - failTest:
                      message: "FAILURE - ${env} - Return reason -${returnReason}- is not available in the list. Please select others"
      - click:
          identifier: us.mappings.returns.NextAndSaveButton
      # Selecting item return condition if its mandatory only
      - executeFunction:
          name: us.functions.returns.returnItemConditionSelectionIfRequired

  # Definition  : To select return item condition. Currently, 1st condition is selected by default
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : NA
  - name: us.functions.returns.returnItemConditionSelectionIfRequired
    platform: ios
    flow:
      - try:
          flow:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.returnConditionDropDown
                then:
                  - verifyIdentifier:
                      label:
                        - identifier: us.mappings.returns.returnConditionDropDown
                          contains: Optional
                  - log: Skipping condition selection as it is optional
                else:
                  - log: Skipping condition selection as it is not available for selection
          catch:
            flow:
              - click:
                  identifier: us.mappings.returns.returnConditionDropDown
              - sleep:
                  duration: 1000
              - click:
                  identifier: us.mappings.returns.returnCondition
              - click:
                  identifier: us.mappings.returns.NextAndSaveButton

  # Definition  : To select the type of return for the selected item
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnReason} - For return reason selection [Poor quality / Item damaged ...]
  # [Mandatory] ${returnType}   - Refund / Replacement [Default 'Refund']
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnTypeSelection
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.typeSelectionTitle
      - scroll:
          direction: down
      - if:
          condition: ${returnType} == 'Replacement'
          then:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.replacementButton
                then:
                  - click:
                      identifier: us.mappings.returns.replacementButton
                else:
                  - failTest:
                      message: "ENV_FAILURE - ${env} - Replacement option not visible for the selected item"
          else:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.replacementButton
                then:
                  - click:
                      identifier: us.mappings.returns.refundButton
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.continueButton
      - click:
          identifier: us.mappings.returns.continueButton
      - sleep:
          duration: 5000    

  # Definition  : To select method of return for the selected item
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnMethod} - Schedule for pickup / Drop off at FedEx / Return by mail / Return at Walmart store
  # [Mandatory] ${itemType}     - mp / others (fc/sc)
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnMethodSelection
    platform: ios
    flow:
      - sleep:
          duration: 5000
      
      - if:
          condition: ${returnMethod} == 'Return from home' || ${returnMethod} == 'FedEx pickup'
          then:
            - click:
                identifier: us.mappings.returns.feeBasedReturns.selectReturnFromHomeMethod
      - if:
          condition: ${returnMethod} == 'Return by mail'
          then:
            - click:
                identifier: us.mappings.returns.feeBasedReturns.selectreturnbymailReturnFromHomeMethod
      - if:
          condition: ${returnMethod} == 'Return to Walmart store'
          then:
            - click:
                identifier: us.mappings.returns.feeBasedReturns.selectreturntostoreReturnFromHomeMethod
      
          else:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.feeBasedReturns.selectReturnFromMailMethod
                then:
                  - click:
                      identifier: us.mappings.returns.feeBasedReturns.selectReturnFromMailMethod
      - if:
          condition: ${returnMethod} == 'Return by mail'
          then:
            - storeIn:
                key: altReturnMethod
                value: 'Return by USPS Post Office'
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnMethodScreen.title
          then:
            - executeFunction:
                name: us.functions.utils.scrollIfNotVisible
                params:
                  - name: identifier
                    string: us.mappings.returns.returnMethodScreen.selectMethod
                  - name: direction
                    string: down
            - click:
                identifier: us.mappings.returns.returnMethodScreen.selectMethod
       
            - if:
                condition: ${returnMethod} == 'Return by mail'
                then: 
                - click:
                   identifier: us.mappings.returns.returnMethodScreen.selectMethod.usps

            - if:
                condition: ${returnMethod} == 'Return from home' || ${returnMethod} == 'FedEx pickup'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.returns.feeBasedReturns.freeWithwPlusMember
            - if:
                condition: ${recommendedTag} != null
                then:
                  - executeFunction:
                      name: us.functions.returns.validateRecommendedTag
            - click:
                identifier: us.mappings.returns.continueButton
            
            - if:
                condition: ${returnMethod} == 'FedEx pickup'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.returns.feeBasedReturns.fedExPickupBottomSheet
                  - click:
                      identifier: us.mappings.returns.feeBasedReturns.fedExPickupInstructionCheckbox
                  
                  - click:
                      identifier: us.mappings.returns.continueButton

      - executeFunction:
          name: us.functions.returns.setReturnLabelAndButtonTexts
      - if:
          condition: ${returnMethod} == 'Schedule for pickup' || ${returnMethod} == 'Return from home' || ${returnMethod} == 'FedEx pickup'
          then:
            - executeFunction:
                name: us.functions.returns.scPickup.scheduledAppointmentAndVerifyCard
      - if:
          condition: ${keepit} == 'partialkeepit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyPartialKeepItPopUpAndAccept
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnScreenError
          then:
            - click:
                identifier: us.mappings.cart.itemUpdatesContinueButton
            - click:
                identifier: us.mappings.returns.continueButton
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.returnScreenError
                then:
                  - failTest:
                      message: "ENV_FAILURE - ${env} - Unable to process return"
      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyAcknowledgementPopup


  # Definition  : To validate recommended tag in return method selection page
  # Sub-utility : Used in [ us.functions.returns.returnMethodSelection ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${recommendedTag} - present / notPresent
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.validateRecommendedTag
    platform: ios
    flow:
      - if:
          condition: ${recommendedTag} == 'present'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.RecommendedTag
          else:
            - if:
                condition: ${recommendedTag} == 'notPresent'
                then:
                  - verifyIdentifier:
                      notPresent:
                        - identifier: us.mappings.returns.RecommendedTag 

  # Definition  : To validate basic details displayed on returns review and confirmation screen
  # Sub-utility : Used in [ us.functions.returns.returnReviewDetailsValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Optional] ${tierMsgType} - slow / fast
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnBasicDetailsValidation
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.itemDetails
          label:
            - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.itemDetails
              contains: ${returnType}
      # Validate replacement details display for replacement scenario
      - if:
          condition: ${returnType} == 'Replacement'
          then:
            - if:
                condition: ${replacementType} == 'fast' || ${replacementType} == 'variant'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.returns.replacementReviewAndConfirmationScreen.estimateDeliveryDate
                        - identifier: us.mappings.returns.replacementReviewAndConfirmationScreen.replacementMessage
                else:
                  - verifyIdentifier:
                      notPresent:
                        - identifier: us.mappings.returns.replacementReviewAndConfirmationScreen.estimateDeliveryDate
                        - identifier: us.mappings.returns.replacementReviewAndConfirmationScreen.replacementMessage
      # Validate tiered message for Refund scenario
      - if:
          condition: ${returnMethod} == 'Return by mail' && ${itemType} == 'fc' && ${returnType} == 'Refund'
          then:
            - executeFunction:
                name: us.functions.returns.returnTieredMessageValidation

  # Definition  : To validate tier message details in return review and confirmation pages
  # Sub-utility : Used in [ us.functions.returns.returnBasicDetailsValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${tierMsgType} - slow / fast
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnTieredMessageValidation
    platform: ios
    flow:
      - if:
          condition: ${tierMsgValidation} != 'skip'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.tieredMessage
            - if:
                condition: ${tierMsgType} == 'slow'
                then:
                  - verifyIdentifier:
                      label:
                        - identifier: us.mappings.returns.tieredMessage
                          contains: us.data.slowtieredMessage
                else:
                  - verifyIdentifier:
                      label:
                        - identifier: us.mappings.returns.tieredMessage
                          contains: us.data.instantTieredMessage

  # Definition  : To validate card refund details in return review and confirmation pages
  # Sub-utility : Used in [ us.functions.returns.returnReviewDetailsValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${cardType} - visa / Electronic Benefit Trasnfer / solutran / Gift Card
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnCardDetailsValidation
    platform: ios
    flow:
      - click:
          identifier: us.mappings.returns.returnReviewAndConfirmationScreen.refundDetails
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.paymentDetails
      - sleep:
          duration: 2000
      - scroll:
          direction: down
      - verifyIdentifier:
          label:
            - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.paymentDetails
              contains: ${cardType}

  # Definition  : To validate returns review details screen before returns submission
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Optional] ${cardType}        - visa / Electronic Benefit Trasnfer / solutran / Gift Card
  # [Optional] ${restrictedItem}  - true / false [default 'false']
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnReviewDetailsValidation
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.reviewReturnsTitle
      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyInfleckitMessage
      - if:
          condition: ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericReviewDetailsValidation
          else:                   
            - if:
                condition: ${itemType} != 'sc'
                then:
                  - verifyIdentifier:
                      label:
                        - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.title
                          contains: ${returnReviewText}
                else:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.returns.returnReviewScreen.title
                        
            - executeFunction:
                name: us.functions.returns.returnBasicDetailsValidation
            - if:
                condition: ${returnMethod} == 'Return by mail'
                then:
                  - storeIn:
                      key: returnReviewText
                      value: us.data.text.returnByMail
                  - storeIn:
                      key: altReturnReviewText
                      value: Return by mail
                else:
                  - if:
                      condition: ${returnMethod} == 'Drop off at FedEx'
                      then:
                        - storeIn:
                            key: returnReviewText
                            value: 'Return by drop-off at FedEx'
      - if:
          condition: ${cardType} != 'skip'
          then:
            - executeFunction:
                name: us.functions.returns.returnCardDetailsValidation
      - click:
          identifier: us.mappings.reviewReturnSubmitButton
      - sleep:
          duration: 8000
      - if:
          identifier:
            present:
              - identifier: us.mappings.popup.technicalError
          then:
            - click:
                identifier: us.mappings.cancellation.CancellationGotitButton
            - sleep:
                duration: 4000
            - click:
                identifier: us.mappings.reviewReturnSubmitButton
     
            

  # Definition  : To validate non generic details (restricted ...) in returns review page
  # Sub-utility : Used in [ us.functions.returns.returnReviewDetailsValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${restrictedItem} - true / false
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnNonGenericReviewDetailsValidation
    platform: ios
    flow:
      - if:
          condition: ${restrictedItem}
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.returnReviewRestrictedItemValidation
                  - identifier: us.mappings.marketplace.returnReviewRestrictedItemMessageValidation

  # Definition  : To validate return confirmation screen after submission
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Optional] ${restrictedItem}  - true / false        [default 'false']
  # [Optional] ${keepItItem}      - keepit / nonKeepit  [default 'nonKeepit']
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnConfirmationValidation
    platform: ios
    flow:
      - sleep:
          duration: 10000
      # Verify confirmation page load
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnFailureScreenHeader
          then:
            - failTest:
                message: "FAILURE - ${env} - Unable to process your return request now"
          else:
            - log: Return initiated successfully
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returs.returnConfirmationScreenHeader
      
      # Validate confirmation page details for generic and non generic cases
      - if:
          condition: ${keepItItem} != 'keepit' && ${restrictedItem} == false
          then:
            # Generic case
            - executeFunction:
                name: us.functions.returns.returnBasicDetailsValidation
          else:
            # Special cases
            - executeFunction:
                name: us.functions.returns.returnNonGenericConfirmationDetailsValidation

      # Validate card details in confirmation page
      - if:
          condition: ${cardType} != 'skip'
          then:
            - executeFunction:
                name: us.functions.returns.returnCardDetailsValidation

      # Close confirmation page
      - click:
          identifier: us.mappings.marketplace.returnDoneButton
      - if:
          condition: ${returnMethod} == 'Return from home'
          then:
            - storeIn:
                key: returnReviewText
                value: 'Return scheduled for pickup'
      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyInfleckitMessage

  # Definition  : To validate non generic details (restricted ...) in returns confirmation page
  # Sub-utility : Used in [ us.functions.returns.returnReviewDetailsValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${restrictedItem} - true / false
  # [Mandatory] ${keepItItem}     - keepit / nonKeepit
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnNonGenericConfirmationDetailsValidation
    platform: ios
    flow:
      - if:
          condition: ${keepItItem} == 'keepit'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.returnConfirmationKeepitMessage
                  - identifier: us.mappings.marketplace.returnConfirmationRefundedMessageKeepitValidation
          else:
            - if:
                condition: ${restrictedItem}
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.marketplace.returnReviewRestrictedItemValidation
                        - identifier: us.mappings.marketplace.returnReviewRestrictedItemMessageValidation

  # Definition  : To validate pop up displayed on click on label after return initiated
  # Sub-utility : Used in [ us.functions.returns.returnODPValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnReviewText} - Return by mail / Return to Walmart store / Return scheduled for pickup / Return by drop-off at FedEx
  # [Optional]  ${restrictedItem}   - true / false
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnODPPopupValidation
    platform: ios
    flow:
      - if:
          condition: ${keepItItem} == 'keepit' || ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericODPPopupValidation
          else:
            - click:
                identifier: us.mappings.return.odp.returnDetailsButton
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                  - identifier: us.mappings.return.odp.returnDetails.popupTitle
            - if:
                condition: ${returnReviewText} == 'Return to Walmart store' || ${returnReviewText} == 'Devolver en una tienda Walmart'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.return.odp.returnDetails.returnProof
                        - identifier: us.mappings.return.odp.returnDetails.okayButton
                      label:
                        - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                          contains: us.data.odp.returnDetails.returnToWalmartStore.instructionHeading
                        - identifier: us.mappings.return.odp.returnDetails.popupTitle
                          contains: us.data.odp.returnDetails.returnToWalmartStore.popupTitle
                else:
                  - if:
                      condition: ${returnReviewText} == 'Return scheduled for pickup'
                      then:
                        - if:
                            condition: ${returnMethod} == 'Return from home'
                            then:     
                              - verifyIdentifier:                                         
                                  label:
                                    - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                                      contains: 'Pickup from home instructions'
                                    - identifier: us.mappings.return.odp.returnDetails.popupTitle
                                      contains: 'Return barcode and instructions'
                            else:     
                              - verifyIdentifier:                                         
                                  label:
                                    - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                                      contains: 'Schedule for pickup'
                              - verifyIdentifier:
                                  present:
                                    - identifier: us.mappings.return.odp.returnDetails.popupTitle
                                    # - identifier: us.mappings.return.odp.returnDetails.popupTitle
                                    #   contains: 'Label and instructions'                                                                                                  
                      else:
                        - if:
                            condition: ${returnReviewText} == 'Return by mail' || ${returnReviewText} == 'Devolver por correo'
                            then:
                              - verifyIdentifier:
                                  present:
                                    - identifier: us.mappings.return.odp.returnDetails.returnProof
                                    - identifier: us.mappings.return.odp.returnDetails.printLabelButton
                                  label:
                                    - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                                      contains: us.data.odp.returnDetails.returnByMail.instructionHeading
                                    - identifier: us.mappings.return.odp.returnDetails.popupTitle
                                      contains: us.data.odp.returnDetails.returnByMail.popupTitle
                            else:
                              - if:
                                  condition: ${returnReviewText} == 'Return by drop-off at FedEx'
                                  then:
                                    - verifyIdentifier:
                                        present:
                                          - identifier: us.mappings.return.odp.returnDetails.returnProof
                                          - identifier: us.mappings.return.odp.returnDetails.okayButton
                                        label:
                                          - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                                            contains: 'Dropoff at FedEx instructions'
                                          - identifier: us.mappings.return.odp.returnDetails.popupTitle
                                            contains: 'Generate QR code'
            - click:
                identifier: us.mappings.return.odp.returnDetailsLink.back
                wait: 1000

  # Definition  : To validate non generic details (restricted ...) in returns initiated ODP
  # Sub-utility : Used in [ us.functions.returns.returnODPValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${restrictedItem} - true / false
  # [Mandatory] ${keepItItem} - keepit / nonKeepit
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnNonGenericODPValidation
    platform: ios
    flow:
      - if:
          condition: ${keepItItem} == 'keepit'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.keepItText
          else:
            - if:
                condition: ${restrictedItem}
                then:
                  - verifyIdentifier: 
                      present:
                        - identifier: us.mappings.marketplace.pendingLabelUpdate

  # Definition  : To validate non generic details (restricted ...) in returns ODP pop up window
  # Sub-utility : Used in [ us.functions.returns.returnODPPopupValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${restrictedItem} - true / false
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnNonGenericODPPopupValidation
    platform: ios
    flow:
      - if:
          condition: ${restrictedItem}
          then:
            - click:
                identifier: us.mappings.return.odp.returnDetailsLink
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.returnDetailRestrictedItemMessageValidation
                  - identifier: us.mappings.marketplace.pendingLabelUpdate
            - goBack: true

  # Definition  : To validate screen on click of Return details link after return initiated
  # Sub-utility : Used in [ us.functions.returns.returnODPValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Optional] ${restrictedItem}  - true / false
  # [Optional] ${keepItItem}      - keepit / nonKeepit
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnODPReturnDetailsValidation
    platform: ios
    flow:
      - click:
          identifier: us.mappings.return.odp.returnDetailsLink
      - if:
          condition: ${keepItItem} == 'keepit' || ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericODPReturnDetailsValidation
          else:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.return.odp.returnDetailsLink.returnsTitle
                  - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.itemDetails
                  - identifier: us.mappings.return.odp.returnDetailsLink.returnTypeText
                # returnTypeText is not same as returnReviewText anymore
                # label:
                #   - identifier: us.mappings.return.odp.returnDetailsLink.returnTypeText
                #     contains: ${returnReviewText}

      - if:
          condition: ${cardType} != 'skip'
          then:
            - scroll:
                direction: down
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.paymentDetails
                label:
                  - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.paymentDetails
                    contains: ${cardType}
      - click:
          identifier: us.mappings.return.odp.returnDetailsLink.back

  # Definition  : To validate non generic details (restricted ...) in return details page
  # Sub-utility : Used in [ us.functions.returns.returnODPReturnDetailsValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${restrictedItem} - true / false
  # [Mandatory] ${keepItItem}     - keepit / nonKeepit
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnNonGenericODPReturnDetailsValidation
    platform: ios
    flow:
      - if:
          condition: ${keepItItem} == 'keepit'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.returnDetailKeepitMessage
          else:
            - if:
                condition: ${restrictedItem}
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.marketplace.pendingLabelUpdate

  # Definition  : To select a time slot for schedule pickup or return to home return types
  # Sub-utility : Used in [us.functions.returns.itemReturn]
  # Params      : NA
  - name: us.functions.returns.scPickup.scheduledAppointmentAndVerifyCard
    platform: ios
    flow: 
      - sleep:
          duration: 5000    
      - verifyIdentifier: 
          timeout: 40000
          present: 
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.selectedItemImage
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.addressForPickup
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.daySelectionView
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.daySelectedAndSlotAvailable
          # address may vary and hence below validation makes the test flaky
          # label:
          #   - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.addressForPickup
          #     contains: ${addressForPickup}
      - if: 
          condition: ${itemSize} == 'large'
          then: 
            - verifyIdentifier:
                present: 
                  - identifier: us.mappings.reserveSlot.firstSlot
                  # - identifier: us.mappings.reserveSlot.secondSlot
                  # - identifier: us.mappings.reserveSlot.thirdSlot
                notPresent:
                  - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.pickupTimeInformation       
          else: 
            - verifyIdentifier:
                present: 
                  - identifier: us.mappings.reserveSlot.firstSlot
                  # - identifier: us.mappings.reserveSlot.secondSlot                  
                notPresent: 
                  - identifier: us.mappings.reserveSlot.thirdSlot
                  # - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.pickupTimeInformation                  
      - click:
          wait: 2000
          identifier: us.mappings.reserveSlot.firstSlot
      - scroll:
          direction: down
          untilIdentifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.enterInstructionsTextField
          position: center
          scrollLimit: 2
      - enterText:
          identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.enterInstructionsTextField
          string: ${appointmentInstruction}
      - click: 
          wait: 2000
          identifier: us.mappings.default.keyboardDoneButton
      - click: 
          wait: 2000
          identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.saveAndContinueButton

  # Definition  : To initiate cancellation of already initiated returns for an order
  # Sub-utility : Used in [ us.functions.returns.cancelReturn ]
  # Params      : NA
  - name: us.functions.returns.initiateReturnCancellation
    platform: ios
    flow:
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.returns.cancelReturn
            - name: direction
              string: down
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.cancelReturn
      - click:
          identifier: us.mappings.returns.cancelReturn
          wait: 2000

  # Definition  : To submit and confirm cancellation of return initiated
  # Sub-utility : Used in [ us.functions.returns.cancelReturn ]
  # Params      : NA
  - name: us.functions.returns.submitReturnCancellation
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.cancelReturnTitle
            - identifier: us.mappings.returns.cancelReturnDescription
            - identifier: us.mappings.returns.cancelReturnItemsText
            - identifier: us.mappings.returns.cancelReturnConfirmationCta 
      - click:
          identifier: us.mappings.returns.cancelReturnConfirmationCta 
          wait: 2000
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.cancelSuccessIcon
            - identifier: us.mappings.returns.cancelSuccessTitle
            - identifier: us.mappings.returns.cancelReturnDoneCta    
      - click:
          identifier: us.mappings.returns.cancelReturnDoneCta
          wait: 2000  
      - sleep:
          duration: 5000

  - name: us.functions.returns.verifyPartialKeepItPopUpAndAccept
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.partialRefundOption
      - click:
          identifier: us.mappings.returns.partialkeepitRadioButton
      - sleep:
          duration: 5000
      - click:
          identifier: us.mappings.returns.partialkeepitConfirmButton


  - name: us.functions.returns.variantSelection
    platform: ios
    flow: 
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.typeSelectionTitle
      - scroll:
          direction: down
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.replacementButton
          then:
            - click:
                identifier: us.mappings.returns.replacementButton
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Replacement option not visible for the selected item"
      - sleep:
          duration: 5000
      # variant replacement tile validation
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.headerTitle
            - identifier: us.mappings.returns.variantReplacement.footerTitle
            - identifier: us.mappings.returns.variantReplacement.variantTile
            - identifier: us.mappings.returns.variantReplacement.chooseCta
      - click:
          identifier: us.mappings.returns.variantReplacement.chooseCta   
      - sleep:
          duration: 5000
      # selecting different variant from "Choose replacement option" page
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.pageTitle
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.productName
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.productImage
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.variantCategory 
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.variantOption
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.saveCta
      - scroll:
          direction: down 
          untilIdentifier: us.mappings.returns.variantReplacement.variant.size
          scrollLimit: 2
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.variant.size
      - click:
          identifier: us.mappings.returns.variantReplacement.variant.size
      - getString:
          identifier: us.mappings.returns.variantReplacement.variant.sizeText
          attribute: label
          storeIn: itemSize
      - log: $itemSize
      - sleep:
          duration: 5000      
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.variant.color
      - click:
          identifier: us.mappings.returns.variantReplacement.variant.color
      - getString:
          identifier: us.mappings.returns.variantReplacement.variant.colorText
          attribute: label
          storeIn: itemColor
      - log: $itemColor  
      - sleep:
          duration: 5000   
      - click:
          identifier: us.mappings.returns.variantReplacement.chooseReplacement.saveCta   
      - sleep:
          duration: 5000        
      # checking whether the replacement tile get updated with new variant
      - verifyIdentifier:
          label:
            - identifier: us.mappings.returns.variantReplacement.itemdetails.selectedVariantSize
              contains: ${itemSize}
            - identifier: us.mappings.returns.variantReplacement.itemdetails.selectedVariantColor
              contains: ${itemColor}
      - log: replacement tile get updated with new variant selected         
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.continueButton
      - click:
          identifier: us.mappings.returns.continueButton          

  #*************************************************************************************************
  #*********************************** SUB UTILITIES - IOS - END ***********************************
  #*************************************************************************************************

  #*************************************************************************************************
  #********************************** UTILITIES - ANDROID - START **********************************
  #*************************************************************************************************

  # ******** Utility to initiate and load initial returns window to select items for returns *******
  - name: us.functions.returns.initiateReturns
    platform: android
    flow:
      - executeFunction:
          name: us.functions.returns.goToStartReturn
      - executeFunction:
          name: us.functions.returns.verifyStartReturnScreen

  # **************** Utility to initiate item returns from return window within ODP ****************
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${itemIndex}        - Index of item for selection [1 / 2 / 3 ...]
  # [Mandatory] ${returnReason}     - Damaged / Item damaged / Poor qualty ...
  # [Optional]  ${returnType}       - Refund/Replacement [default 'Refund']
  # [Optional]  ${replacementType}  - fast/slow [default 'slow' (To be given only if ${returnType} is 'Replacement')]
  # [Mandatory] ${returnMethod}     - Schedule for pickup / Drop off at FedEx / Return by mail / Return at Walmart store
  # [Mandatory] ${itemType}         - fc/sc/mp
  # [Optional]  ${keepItItem}       - keepit/nonKeepit [default 'nonKeepit']
  # [Optional]  ${cardType}         - visa / Electronic Benefit Transfer / solutran (For DS card) / Gift Card
  # [Optional]  ${tierMsgType}      - fast/slow
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.itemReturn
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.returns.requiredReturnDataSetup
      - executeFunction:
          name: us.functions.returns.returnItemAndReasonSelection
      - executeFunction:
          name: us.functions.returns.returnTypeSelection
      - sleep:
          duration: 5000          
      - executeFunction:
          name: us.functions.returns.returnMethodSelection
      - executeFunction:
          name: us.functions.returns.returnReviewDetailsValidation
      - executeFunction:
          name: us.functions.returns.returnConfirmationValidation


  # ****************** Utility to validate ODP after initiating returns for an item ****************
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnReviewText} - Return by mail / Return to Walmart store / Return scheduled for pickup / Return by drop-off at FedEx
  # [Mandatory] ${buttonText}       - View label / Show barcode / View instructions / Show QR
  # [Optional]  ${cardType}         - visa / Electronic Benefit Trasnfer / solutran / Gift Card
  # [Optional]  ${restrictedItem}   - true / false  [default 'false']
  # [Optional]  ${keepItItem}       - keepit / nonKeepit  [default 'nonKeepit']
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnODPValidation
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.returns.requiredReturnDataSetup
      - verifyIdentifier:
          present:
            - identifier: us.mappings.orderDetails.orderNumber
      - sleep:
          duration: 2000
      # - if:
      #     condition: ${prerequisiteScrollRequired}
      #     then:
      #       - scroll:
      #           direction: up
      #           untilIdentifier: us.mappings.return.odp.pendingMessage
      #           wait: 7000
      - if:
          condition: ${keepItItem} == 'keepit' || ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericODPValidation
          else:
            - try:
                flow:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.return.odp.pendingMessage
                catch:
                  flow:
                    - sleep:
                        duration: 70000
                    - log: Refreshing ODP and verifying the pending message again
                    - scroll:
                        direction: up
                    - verifyIdentifier:
                        present:
                          - identifier: us.mappings.return.odp.pendingMessage
            - executeFunction:
                name: us.functions.orderDetails.expandItemDetails
            - scroll:
                direction: up
                untilIdentifier: us.mappings.return.odp.returnDetailsButton
                wait: 1000
                position: center

            - if:
                identifier:
                  notPresent:
                      - identifier: us.mappings.return.odp.returnMethod.textLabel
                then:
                  - scroll:
                      direction: down
                  - scroll:
                      direction: up
                      wait: 2000
                      untilIdentifier: us.mappings.return.odp.returnMethod.textLabel

            - verifyIdentifier: 
                present:
                  - identifier: us.mappings.return.odp.returnMethod.textLabel
                  - identifier: us.mappings.return.odp.pickupTime.textLabel
                  - identifier: us.mappings.return.odp.returnDetailsButton
                  - identifier: us.mappings.return.odp.returnDetailsLink

            - if:
                condition: ${returnReviewText} != 'Return scheduled for pickup'
                then:
                  - verifyIdentifier: 
                      present:
                        - identifier: us.mappings.return.odp.pickupTime.textLabel
      - executeFunction:
          name: us.functions.returns.returnODPPopupValidation
      - executeFunction:
          name: us.functions.returns.returnODPReturnDetailsValidation
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.orderDetails.orderNumber
            - name: direction
              string: up

  # ****************************** Utility to Cancel return initiated  *****************************
  # ************[Currently all items initiated for returns are cancelled in one go] ****************
  - name: us.functions.returns.cancelReturn
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.returns.initiateReturnCancellation
      - executeFunction:
          name: us.functions.returns.submitReturnCancellation

  # *************** Utility to validate successful cancellation of returns initiated ***************
  - name: us.functions.returns.validateReturnCancellation
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - verifyIdentifier:
          notPresent:
            - identifier: us.mappings.return.odp.pendingMessage
      - scroll:
          direction: down
          untilIdentifier: us.mappings.returns.returnEligibleText
      - verifyIdentifier:
          notPresent:
            - identifier: us.mappings.return.odp.returnDetailsLink
      - scroll:
          direction: down
          untilIdentifier: us.mappings.returns.walletText
      - verifyIdentifier:
          notPresent:
            - identifier: us.mappings.returns.cancelReturn

  # ***************  Variant Replacement Validation ***************    
  - name: us.functions.returns.variantReplacement
    platform: android
    flow: 
      - executeFunction:
          name: us.functions.returns.requiredReturnDataSetup
      - executeFunction:
          name: us.functions.returns.returnItemAndReasonSelection 
      - executeFunction:
          name: us.functions.returns.variantSelection 
      - executeFunction:
          name: us.functions.returns.returnMethodSelection
      # Return Review screen validation
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.returnReview.itemTile
            # - identifier: us.mappings.returns.variantReplacement.returnReview.returnReplacementText    
      - executeFunction:
          name: us.functions.returns.returnReviewDetailsValidation
      # Return Confirmation scren validation
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.returnReview.itemTile
            # - identifier: us.mappings.returns.variantReplacement.returnReview.returnReplacementText 
      - executeFunction:
          name: us.functions.returns.returnConfirmationValidation              

  #*************************************************************************************************
  #*********************************** UTILITIES - ANDROID - END ***********************************
  #*************************************************************************************************

  #*************************************************************************************************
  #******************************** SUB UTILITIES - ANDROID - START ********************************
  #*************************************************************************************************

  # Definition  : To load returns window from ODP
  # Sub-utility : Used in [ us.functions.returns.initiateReturns ]
  # Params      : NA
  - name: us.functions.returns.goToStartReturn
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.orderDetails.orderNumber
            - name: direction
              string: up
      - verifyIdentifier:
          present:
            - identifier: us.mappings.orderDetails.orderNumber
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.orderDetails.startReturnButton
            - name: direction
              string: up
      - verifyIdentifier:
          present:
            - identifier: us.mappings.orderDetails.startReturnButton
      - click:
          identifier: us.mappings.orderDetails.startReturnButton

  # Definition  : To validate returns window displayed
  # Sub-utility : Used in [ us.functions.returns.initiateReturns ]
  # Params      : NA
  - name: us.functions.returns.verifyStartReturnScreen
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.startReturnScreenHeader
          then:
            - log: "Screen header displayed as expected"
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Return item selection window not displayed"
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.itemOneTile
            - identifier: us.mappings.returns.itemOneCheckbox

  - name: us.functions.returns.getItemWithFulfillemtFC
    platform: android
    flow:
      - storeIn:
          key: executionStage
          value: Post-transactions
      - executeNode:
              file: us/e2e-tests/helpers/getOrderLineStatus.js
              args:
                - value: $orderNo
                - value: $itemType
              getResponse:
                storeIn: itemId
  
  # Definition  : To select item to be returned and return reason
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${itemIndex} for item selection
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnItemAndReasonSelection
    platform: android
    flow:
      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyInfleckitMessage
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.selectItemsText
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.item.select
          then:
            - click:
                identifier: us.mappings.returns.item.select
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Item at position ${itemIndex} not available for Return"
      - click:
          identifier: us.mappings.returns.continue
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.itemPageReasonDropdown
      - click:
          identifier: us.mappings.returns.itemPageReasonDropdown
      - sleep:
          duration: 1000
      # - if:
      #     condition: $itemId != null
      #     then:
      #       - executeNode:
      #           file: us/e2e-tests/helpers/getReturnEligiblityResponse.js
      #           args:
      #             - value: $returnReason
      #             - value: $returnMode
      #             - value: $itemId
      #             - value: $orderNo
                  
      #           getResponse:
      #             storeIn: returnReason
      #       - log: Error Details - ${returnReason}
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnReason
          then:
            - click:
                identifier: us.mappings.returns.returnReason
          else:
            - log: Given Return reason is not available selecting the first available in the option
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.returnReasonFirstOption
                then:
                  - click:
                      identifier: us.mappings.returns.returnReasonFirstOption
                else:
                  - failTest:
                      message: "FAILURE - ${env} - Return reason -${returnReason}- is not available in the list. Please select others"
      # Selecting item return condition if its mandatory only
      - executeFunction:
          name: us.functions.returns.returnItemConditionSelectionIfRequired

  # Definition  : To select return item condition. Currently, 1st condition is selected by default
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : NA
  - name: us.functions.returns.returnItemConditionSelectionIfRequired
    platform: android
    flow:
      - try:
          flow:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.returnConditionDropDown
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: us.mappings.returns.returnConditionDropDown
                          contains: Optional
                  - log: Skipping condition selection as it is optional
                else:
                  - log: Skipping condition selection as it is not available for selection
          catch:
            flow:
              - click:
                  identifier: us.mappings.returns.returnConditionDropDown
              - sleep:
                  duration: 1000
              - click:
                  identifier: us.mappings.returns.returnCondition

  # Definition  : To select the type of return for the selected item
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnReason} - For return reason selection [Poor quality / Item damaged ...]
  # [Mandatory] ${returnType}   - Refund / Replacement [Default 'Refund']
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnTypeSelection
    platform: android
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.itemPageReturnTitle
      - scroll:
          direction: down
      - if:
          condition: ${returnType} == 'Replacement' || ${returnType} == 'Reemplazo'
          then:
            - if:
                identifier:
                  notPresent:
                    - identifier: us.mappings.returns.replacement.option
                then:
                  - failTest:
                      message: "ENV_FAILURE - ${env} - Replacement option not visible for the selected item"
                else:
                  - click:
                      identifier: us.mappings.returns.replacement.option
          else:
            - if:
                identifier:
                  present:
                    - identifier: us.mappings.returns.replacement.option
                then:
                  - click:
                      identifier: us.mappings.returns.refund.option
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.continue
      - click:
          identifier: us.mappings.returns.continue
      - sleep:
          duration: 5000    

  # Definition  : To select method of return for the selected item
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnMethod} - Schedule for pickup / Drop off at FedEx / Return by mail / Return at Walmart store
  # [Mandatory] ${itemType}     - mp / others (fc/sc)
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnMethodSelection
    platform: android
    flow:
      
      - if:
          condition: ${returnMethod} == 'Return from home' || ${returnMethod} == 'FedEx pickup'
          then:
            - click:
                identifier: us.mappings.returns.feeBasedReturns.selectReturnFromHomeMethod
      - if:
          condition: ${returnMethod} == 'Return by mail'
          then:
            - click:
                identifier: us.mappings.returns.feeBasedReturns.selectreturnbymailReturnFromHomeMethod
      - if:
          condition: ${returnMethod} == 'Return to Walmart store'
          then:
            - click:
                identifier: us.mappings.returns.feeBasedReturns.selectreturntostoreReturnFromHomeMethod
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnMethod
          then:
            - executeFunction:
                name: us.functions.utils.scrollIfNotVisible
                params:
                  - name: identifier
                    string: us.mappings.returns.refundMethodScreen.selectMethod
                  - name: direction
                    string: down
            - if:
                condition: ${returnMethod} == 'Return from home' || ${returnMethod} == 'FedEx pickup'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.returns.feeBasedReturns.freeWithwPlusMember
            - click:
                identifier: us.mappings.returns.refundMethodScreen.selectMethod
            - if:
                condition: ${recommendedTag} != null
                then:
                  - executeFunction:
                      name: us.functions.returns.validateRecommendedTag
            - click:
                identifier: us.mappings.returns.continue
            - if:
                condition: ${returnMethod} == 'FedEx pickup'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.returns.feeBasedReturns.fedExPickupBottomSheet
                  - click:
                      identifier: us.mappings.returns.feeBasedReturns.fedExPickupInstructionCheckbox
                  
                  - click:
                      identifier: us.mappings.returns.continueButton
      - executeFunction:
          name: us.functions.returns.setReturnLabelAndButtonTexts
      - if:
          condition: ${returnMethod} == 'Schedule for pickup' || ${returnMethod} == 'Return from home' || || ${returnMethod} == 'FedEx pickup'
          then:
            - executeFunction:
                name: us.functions.returns.scPickup.scheduledAppointmentAndVerifyCard

      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.inflexRefundAllPartSection

  - name: us.functions.returns.validateRecommendedTag
    platform: android
    flow:
      - if:
          condition: ${recommendedTag} == 'present'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.RecommendedTag
          else:
            - if:
                condition: ${recommendedTag} == 'notPresent'
                then:
                  - verifyIdentifier:
                      notPresent:
                        - identifier: us.mappings.returns.RecommendedTag

  # Definition  : To validate basic details displayed on returns review and confirmation screen
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : NA
  - name: us.functions.returns.returnBasicDetailsValidation
    platform: android
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItem
            - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItemName
            - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItemPrice
            - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItemQty
          text:
            - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnTypeAndReason
              contains: ${returnType}
      # Validate based on return type
      - if:
          condition: ${returnType} == 'Refund' || ${returnType} == 'Reembolso'
          then:
            # Validate refund details display for refund scenario
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.return.refundReviewAndConfirmationScreen.refundTotalPriceText
                  - identifier: us.mappings.return.refundReviewAndConfirmationScreen.refundTotalPrice
          else:
            # Validate replacement details display for replacement scenario
            - if:
                condition: ${returnType} == 'Replacement'
                then:
                  - if:
                      condition: ${replacementType} == 'fast' || ${replacementType} == 'variant'
                      then:
                        - verifyIdentifier:
                            present:
                              - identifier: us.mappings.return.replacementReviewAndConfirmationScreen.estimateDeliveryDate
                              - identifier: us.mappings.return.replacementReviewAndConfirmationScreen.replacementMessage
                      else:
                        - verifyIdentifier:
                            notPresent:
                              - identifier: us.mappings.return.replacementReviewAndConfirmationScreen.estimateDeliveryDate
                              - identifier: us.mappings.return.replacementReviewAndConfirmationScreen.replacementMessage
      # Validate tiered message for Refund scenario
      - if:
          condition: ${returnMethod} == 'Return by mail' && ${itemType} == 'fc' && ${returnType} == 'Refund'
          then:
            - executeFunction:
                name: us.functions.returns.returnTieredMessageValidation

  - name: us.functions.returns.returnTieredMessageValidation
    platform: android
    flow:
      - if:
          condition: ${tierMsgValidation} != 'skip'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.tieredMessage
            - if:
                condition: ${tierMsgType} == 'slow'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: us.mappings.returns.tieredMessage
                          contains: us.data.slowtieredMessage
                else:
                  - verifyIdentifier:
                      text:
                        - identifier: us.mappings.returns.tieredMessage
                          contains: us.data.instantTieredMessage

  - name: us.functions.returns.wpluSignUpfromReturnMethodScreen
    platform: ios
    flow:
      - if:
          condition: ${returnMethod} == 'Return from home'    
          then:
            - verifyIdentifier:
                  present:
                    - identifier: us.mappings.returns.startFreeTrialLink
            - click: 
                identifier: us.mappings.returns.startFreeTrialLink
            - sleep: 
                  duration: 5000 

            - verifyIdentifier:
                      present:
                          - identifier: us.mappings.search.rewards.clickStart30DayFreetrial
            # - click:
            #       identifier: us.mappings.search.rewards.clickStart30DayFreetrial
            # - log: Clicked on w+ trial sign up CTA on the bottom sheet for trial sign up

            # - verifyIdentifier:
            #     label:
            #         - identifier: us.mappings.search.rewards.verifySuccessBottomSheet
            #           contains: Welcome
            - click:
                identifier: us.mappings.wplus.cashback.bottomSheetcloseBtn
            # - sleep: 
            #       duration: 5000 
            # - click:
            #     identifier: us.mappings.returns.continueButton

  - name: us.functions.returns.returnCardDetailsValidation
    platform: android
    flow:
      - click:
          identifier: us.mappings.return.refundReviewAndConfirmationScreen.refundPriceDetailsExpander
      - verifyIdentifier:
          present:
            - identifier: us.mappings.return.refundReviewAndConfirmationScreen.refundBreakupDetails
      - sleep:
          duration: 2000
      - click:
          identifier: us.mappings.return.refundReviewAndConfirmationScreen.refundBreakupDetails
      - scroll:
          direction: down
          untilIdentifier: us.mappings.return.refundReviewAndConfirmationScreen.refundPaymentDetailsSection
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.paymentDetails
  
  # Definition : To Validate return review refund to credit payment method present for fast refund

  - name: us.functions.returns.returnReviewSelectFirstRefundCard
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnReviewExpandButton
          then:
            - click:
                identifier: us.mappings.returns.returnReviewExpandButton
      - scroll:
          direction: down
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.selectreturnReviewSelectFirstRefundCard
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.selectreturnReviewSelectFirstRefundCard
            - click:
                identifier: us.functions.returns.selectreturnReviewSelectFirstRefundCard
          else: 
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.verifyReturnReviewRefundCard
            - log: Verified refund to card. 
  
  # Definition : To Validate return confirmation refund to credit payment method present
  
  - name: us.functions.returns.returnConfirmationSelectFirstRefundCard
    platform: android
    flow:
      - sleep:
          duration: 2000
      - scroll:
          direction: down
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.verifyreturnReviewSelectFirstRefundCard
  

  # Definition  : To validate returns review details screen before returns submission
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Optional] ${cardType} - visa / Electronic Benefit Trasnfer / solutran / Gift Card
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnReviewDetailsValidation
    platform: android
    flow:
      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyInfleckitMessage
      - if:
          condition: ${reviewheader} == 'No need to return it'
          then:
            - verifyIdentifier:
                present:
                  - identifier:  us.mappings.marketplace.returnConfirmationKeepitMessage
          else:
            - if:
                condition: ${reviewheader} == 'Return by Mail'
                then:
                  - verifyIdentifier:
                      present:
                       - identifier: us.mappings.returns.reviewReturnsTitle
      - if:
          condition: ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericReviewDetailsValidation
          else:                
            - if:
                condition: ${itemType} != 'sc'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: us.mappings.returns.refundReviewAndConfirmationScreen.returnMethod
                          contains: ${returnReviewText}
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.returns.refundReviewAndConfirmationScreen.returnDate
            - executeFunction:
                name: us.functions.returns.returnBasicDetailsValidation
            - if:
                condition: ${returnMethod} == 'Return by mail'
                then:
                  - storeIn:
                      key: returnReviewText
                      value:  us.data.text.returnByMail
                  - storeIn:
                      key: altReturnReviewText
                      value: Return by mail
                    
                else:
                  - if:
                      condition: ${returnMethod} == 'Drop off at FedEx'
                      then:
                        - storeIn:
                            key: returnReviewText
                            value: 'Return by drop-off at FedEx'
            - if:
                condition: ${cardType} == 'fastRefund'
                then:
                  - executeFunction:
                      name: us.functions.returns.returnReviewSelectFirstRefundCard
                else:
                  - if:
                      condition: ${cardType} != 'skip'
                      then:
                        - executeFunction:
                            name: us.functions.returns.returnCardDetailsValidation
      - click:
          identifier: us.mappings.returns.reviewReturn.Submitbtn

  - name: us.functions.returns.returnNonGenericReviewDetailsValidation
    platform: android
    flow:
      - if:
          condition: ${restrictedItem}
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.returnReviewRestrictedItemValidation
                  - identifier: us.mappings.marketplace.returnReviewRestrictedItemMessageValidation

  # Definition  : To validate return confirmation screen after submission
  # Sub-utility : Used in [ us.functions.returns.itemReturn ]
  # Params      : NA
  - name: us.functions.returns.returnConfirmationValidation
    platform: android
    flow:
      # Verify confirmation page load
      - if:
          identifier:
            present:
              - identifier: us.mappings.returs.returnFailure.titleBar
          then:
            - failTest:
                message: "FAILURE - ${env} - Unable to process your return request now"
          else:
            - log: Return initiated successfully
      - verifyIdentifier:
          present:
            - identifier: us.mappings.return.refundConfirmation.titleBar

      # Validate confirmation page details for generic and non generic cases
      - if:
          condition: ${keepItItem} != 'keepit' && ${restrictedItem} == false
          then:
            # Generic case
            - executeFunction:
                name: us.functions.returns.returnBasicDetailsValidation
          else:
            # Special cases
            - executeFunction:
                name: us.functions.returns.returnNonGenericConfirmationDetailsValidation

      # Validate card details in confirmation page
      - if:
          condition: ${cardType} != 'skip'
          then:
            - executeFunction:
                name: us.functions.returns.returnCardDetailsValidation

      # Close confirmation page
      - click:
          identifier: us.mappings.returns.returnConfitmation.doneButton
          wait: 3000
      - if:
          condition: ${returnMethod} == 'Return from home'
          then:
            - storeIn:
                key: returnReviewText
                value: 'Return scheduled for pickup'  
      - if:
          condition: ${typeofitem} == 'inflexkit'
          then:
            - executeFunction:
                name: us.functions.returns.verifyInfleckitMessage        

  - name: us.functions.returns.returnNonGenericConfirmationDetailsValidation
    platform: android
    flow:
      - if:
          condition: ${keepItItem} == 'keepit'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.returnConfirmationKeepitMessage
                  - identifier: us.mappings.marketplace.returnConfirmationRefundedMessageKeepitValidation
          else:
            - if:
                condition: ${restrictedItem}
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.marketplace.returnReviewRestrictedItemValidation
                        - identifier: us.mappings.marketplace.returnReviewRestrictedItemMessageValidation      

  
  

  - name: us.functions.returns.returnNonGenericODPValidation
    platform: android
    flow:
      - if:
          condition: ${keepItItem} == 'keepit'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.keepItText
          else:
            - if:
                condition: ${restrictedItem}
                then:
                  - verifyIdentifier: 
                      present:
                        - identifier: us.mappings.marketplace.pendingLabelUpdate
                  - scroll:
                      direction: down
                      untilIdentifier: us.mappings.return.odp.returnDetailsLink
                  - verifyIdentifier: 
                      present:
                        - identifier: us.mappings.return.odp.returnDetailsLink

  # Definition  : To validate pop up displayed on click on label after return initiated
  # Sub-utility : Used in [ us.functions.returns.returnODPValidation ]
  # Params      : Yes
  # -------------------------------------------- Params --------------------------------------------
  # [Mandatory] ${returnReviewText} - Return by mail / Return to Walmart store / Return scheduled for pickup / Return by drop-off at FedEx
  # -------------------------------------------- Params --------------------------------------------
  - name: us.functions.returns.returnODPPopupValidation
    platform: android
    flow:
      
      - if:
          condition: ${keepItItem} == 'keepit' || ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericODPPopupValidation
          else:
            - click:
                identifier: us.mappings.return.odp.returnDetailsButton
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.return.odp.returnDetails.instructionHeading
            - if:
                condition: ${returnReviewText} == 'Return to Walmart store' || ${returnReviewText} == 'Devolver en una tienda Walmart'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.return.odp.returnDetails.barcodeTitle
                        - identifier: us.mappings.return.odp.returnDetails.returnProof
                        - identifier: us.mappings.return.odp.returnDetails.okayButton
                      text:
                        - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                          contains: us.data.odp.returnDetails.returnToWalmartStore.instructionHeading
                else:
                  - if:
                      condition: ${returnReviewText} == 'Return scheduled for pickup'
                      then:
                        - verifyIdentifier:
                            present:
                              - identifier: us.mappings.return.odp.returnDetails.viewInstructionTitle
                        - getString:
                            identifier: us.mappings.return.odp.returnDetails.instructionHeading
                            attribute: text
                            storeIn: instructionHeaderText
                        - try:
                            flow:
                              - verifyValue:
                                  identifier: ${instructionHeaderText}
                                  contains: Pickup from home
                            catch:
                              flow:
                                - verifyValue:
                                    identifier: ${instructionHeaderText}
                                    contains: Schedule for pickup
                      else:
                        - if:
                            condition: ${returnReviewText} == 'Return by mail' || ${returnReviewText} == 'Devolver por correo'
                            then:
                              - verifyIdentifier:
                                  present:
                                    - identifier: us.mappings.return.odp.returnDetails.viewMailInstructionTitle
                                    - identifier: us.mappings.return.odp.returnDetails.printLabelButton
                                  text:
                                    - identifier: us.mappings.return.odp.returnDetails.instructionHeading
                                      contains: us.data.odp.returnDetails.returnByMail.instructionHeading
      # - click:
      #     identifier: us.mappings.return.odp.returnDetails.close
      #     wait: 1000
      - goBack: true

  - name: us.functions.returns.returnNonGenericODPPopupValidation
    platform: android
    flow:
      - if:
          condition: ${restrictedItem}
          then:
            - click:
                identifier: us.mappings.return.odp.returnDetailsLink
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.returnDetailRestrictedItemMessageValidation
                  - identifier: us.mappings.marketplace.pendingLabelUpdate

  # Definition  : To validate screen on click of Return details link after return initiated
  # Sub-utility : Used in [ us.functions.returns.returnODPValidation ]
  # Params      : NA
  - name: us.functions.returns.returnODPReturnDetailsValidation
    platform: android
    flow:
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.return.odp.returnDetailsLink
            - name: direction
              string: down
      - click:
          identifier: us.mappings.return.odp.returnDetailsLink
      - if:
          condition: ${keepItItem} == 'keepit' || ${restrictedItem}
          then:
            - executeFunction:
                name: us.functions.returns.returnNonGenericODPReturnDetailsValidation
          else:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.return.odp.returnDetailsLink.returnsTitle
                  - identifier: us.mappings.return.odp.returnDetailsLink.returnTypeText
                  - identifier: us.mappings.return.odp.returnDetailsLink.date
                  - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItem
                  - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItemName
                  - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItemPrice
                  - identifier: us.mappings.return.refundReviewAndConfirmationScreen.returnItemQty
                # return type text is not same as returnReviewText anymore
                # text:
                #   - identifier: us.mappings.return.odp.returnDetailsLink.returnTypeText
                #     contains: ${returnReviewText}
            - if:
                condition: ${returnType} == 'Refund' || ${returnType} == 'Reembolso'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.return.refundReviewAndConfirmationScreen.refundTotalPriceText
                        - identifier: us.mappings.return.refundReviewAndConfirmationScreen.refundTotalPrice

            - if:
                condition: ${cardType} != 'skip'
                then:
                  - scroll:
                      direction: down
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.returns.returnReviewAndConfirmationScreen.paymentDetails
                        - identifier: us.mappings.return.odp.returnDetailsLink.detailsButton
      # - click:
      #     identifier: us.mappings.orderDetails.receiptDetails.backButton
      - goBack: true

  - name: us.functions.returns.returnNonGenericODPReturnDetailsValidation
    platform: android
    flow:
      - if:
          condition: ${keepItItem} == 'keepit'
          then:
            - verifyIdentifier:
                present:
                  - identifier: us.mappings.marketplace.keepItText
          else:
            - if:
                condition: ${restrictedItem}
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: us.mappings.marketplace.pendingLabelUpdate

  # Definition  : To select a time slot for schedule pickup or return to home return types
  # Sub-utility : Used in [us.functions.returns.itemReturn]
  # Params      : NA
  - name: us.functions.returns.scPickup.scheduledAppointmentAndVerifyCard 
    platform: android
    flow: 
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.returnMethod.scPickup.CheckListTitle
          then:
            - click: 
                identifier: us.mappings.returns.returnMethod.scPickup.CheckListCheckBox
            - click:
                identifier: us.mappings.returns.returnMethod.scPickup.CheckListContinueButton
                
      - verifyIdentifier: 
          timeout: 40000
          present: 
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.selectedItemImage
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.addressForPickup
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.daySelectionView
            - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.daySelectedAndSlotAvailable
          # address may vary and hence below validation makes the test flaky  
          # text:
          #   - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.addressForPickup
          #     contains: ${addressForPickup}
      - if: 
          condition: ${itemSize} == 'large'
          then: 
            - verifyIdentifier:
                present: 
                  - identifier: us.mappings.reserveSlot.firstSlot
                  - identifier: us.mappings.reserveSlot.secondSlot
                  - identifier: us.mappings.reserveSlot.thirdSlot
                notPresent:
                  - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.pickupTimeInformation       
          else: 
            - verifyIdentifier:
                present: 
                  - identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.pickupTimeInformation
                  - identifier: us.mappings.reserveSlot.firstSlot
                  # - identifier: us.mappings.reserveSlot.secondSlot         #(second slot is present only third slot is not present)           
                notPresent: 
                  - identifier: us.mappings.reserveSlot.thirdSlot
      - click:
          wait: 2000
          identifier: us.mappings.reserveSlot.firstSlot
      - scroll:
          direction: down
          untilIdentifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.enterInstructionsTextField
          position: center
          scrollLimit: 2
      - enterText:
          identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.enterInstructionsTextField
          string: ${appointmentInstruction}
          pressEnter: true
      - click: 
          wait: 2000
          identifier: us.mappings.returns.returnMethod.scPickup.scheduleAppointment.saveAndContinueButton

  # Utility to initiate cancellation of already initiated returns for an order
  - name: us.functions.returns.initiateReturnCancellation
    platform: android
    flow:
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.returns.cancelReturn
            - name: direction
              string: down
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.cancelReturn
      - click:
          identifier: us.mappings.returns.cancelReturn
      - sleep:
          duration : 5000

  # Utility to submit and confirm cancellation of return initiated
  - name: us.functions.returns.submitReturnCancellation
    platform: android
    flow:
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.cancelReturnTitle
            - identifier: us.mappings.returns.cancelReturnDescription
            # - identifier: us.mappings.returns.cancelReturnItemsText
            - identifier: us.mappings.returns.cancelReturnConfirmationCta
      - click:
          identifier: us.mappings.returns.cancelReturnConfirmationCta
          wait: 2000
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.cancelSuccessIcon
            - identifier: us.mappings.returns.cancelSuccessTitle
            - identifier: us.mappings.returns.cancelReturnDoneCta
      - click:
          identifier: us.mappings.returns.cancelReturnDoneCta

  - name: us.functions.returns.verifyPromoAppliedlabel
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.startReturn.promoAppliedlabel
          then:
            - log: "Promo applied as expected"
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Promo should have been applied but is not"
      # - verifyIdentifier: 
      #     present:
      #       - identifier: us.mappings.returns.startReturn.promoAppliedlabel

  - name: us.functions.returns.variantSelection
    platform: android
    flow: 
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.itemPageReturnTitle
      - scroll:
          direction: down
      - if:
          condition: ${returnType} == 'Replacement'
          then:
            - if:
                identifier:
                  notPresent:
                    - identifier: us.mappings.returns.replacement.option
                then:
                  - failTest:
                      message: "ENV_FAILURE - ${env} - Replacement option not visible for the selected item"
                else:
                  - click:
                      identifier: us.mappings.returns.replacement.option
      - sleep:
          duration: 5000
      # variant replacement tile validation
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.headerTitle
            - identifier: us.mappings.returns.variantReplacement.footerTitle
            - identifier: us.mappings.returns.variantReplacement.variantTile
            - identifier: us.mappings.returns.variantReplacement.chooseCta
      - click:
          identifier: us.mappings.returns.variantReplacement.chooseCta   
      - sleep:
          duration: 5000
      # selecting different variant from "Choose replacement option" page
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.pageTitle
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.productName
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.productImage
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.variantCategory 
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.variantOption
            - identifier: us.mappings.returns.variantReplacement.chooseReplacement.saveCta
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.variant.size
      - click:
          identifier: us.mappings.returns.variantReplacement.variant.size
      - getString:
          identifier: us.mappings.returns.variantReplacement.variant.sizeText
          attribute: text
          storeIn: itemSize
      - log: $itemSize
      - sleep:
          duration: 5000      
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.variantReplacement.variant.color
      - click:
          identifier: us.mappings.returns.variantReplacement.variant.color
      - getString:
          identifier: us.mappings.returns.variantReplacement.variant.colorText
          attribute: text
          storeIn: itemColor
      - log: $itemColor  
      - sleep:
          duration: 5000   
      - click:
          identifier: us.mappings.returns.variantReplacement.chooseReplacement.saveCta   
      - sleep:
          duration: 5000        
      # checking whether the replacement tile get updated with new variant
      - verifyIdentifier:
          text:
            - identifier: us.mappings.returns.variantReplacement.itemdetails.selectedVariantSize
              contains: ${itemSize}
            - identifier: us.mappings.returns.variantReplacement.itemdetails.selectedVariantColor
              contains: ${itemColor}
      - log: replacement tile get updated with new variant selected         
      - verifyIdentifier:
          present:
            - identifier: us.mappings.returns.continue
      - click:
          identifier: us.mappings.returns.continue   

  #*************************************************************************************************
  #********************************* SUB UTILITIES - ANDROID - END *********************************
  #*************************************************************************************************

  - name: us.functions.returns.setReturnLabelAndButtonTexts
    flow:
      - if:
          condition: ${returnMethod} == 'Return by mail' || ${returnMethod} == 'Devolver por correo'
          then:
            - if:
                condition: ${restrictedItem}
                then:
                  - storeIn:
                      key: returnReviewText
                      value: us.data.odp.returnReviewText.returnByMail
                else:
                  - if:
                      condition: ${itemType} == 'mp'
                      then:
                        - storeIn:
                            key: returnReviewText
                            value: 'Mail to'
                      else:
                        - storeIn:
                            key: returnReviewText
                            value: us.data.text.returnByMail
            - storeIn:
                key: buttonText
                value: us.data.odp.viewLabel.returnByMail
          else:
            - if:
                condition: ${returnMethod} == 'Drop off at FedEx'
                then:
                  - storeIn:
                      key: returnReviewText
                      value: 'Dropoff at FedEx'
                  - storeIn:
                      key: buttonText
                      value: 'Show QR'
                else:
                  - if:
                      condition: ${returnMethod} == 'Return to Walmart store' || ${returnMethod} == 'Devolver a la tienda Walmart'
                      then:
                        - storeIn:
                            key: returnReviewText
                            value: us.data.odp.returnReviewText.returnToWalmartStore
                        - storeIn:
                            key: buttonText
                            value: us.data.odp.barcode.returnToWalmartStore
                      else:
                        - if:
                            condition: ${returnMethod} == 'Schedule for pickup'
                            then:
                              - storeIn:
                                  key: returnReviewText
                                  value: 'Return scheduled for pickup'
                              - storeIn:
                                  key: buttonText
                                  value: 'View label'
                            else:
                              - if:
                                  condition: ${returnMethod} == 'Return from home'
                                  then:
                                    - storeIn:
                                        key: returnReviewText
                                        value: 'Returns from home'
                                    - storeIn:
                                        key: buttonText
                                        value: 'Return barcode and instructions'
                              - if:
                                  condition: ${returnMethod} == 'Curbside return at a Walmart Store'
                                  then:
                                    - storeIn:
                                        key: returnReviewText
                                        value: 'Curbside return at a Walmart Store'
                                    - storeIn:
                                        key: buttonText
                                        value: 'Return details'

      - if:
          condition: ${keepit} == 'partialkeepit'
          then:
             - storeIn:
                  key: returnReviewText
                  value: 'No need to return it'

  # ********************************* Platform independent utility *********************************
  # Definition  : Data set up function used in utilities
  # Sub-utility : Used in [us.functions.returns.itemReturn] & [ us.functions.returns.returnODPValidation ]
  # Params      : NA
  - name: us.functions.returns.requiredReturnDataSetup
    flow:
      - if:
          condition: ${returnType} == null
          then:
            - storeIn:
                key: returnType
                value: us.data.text.refund
      - if:
          condition: ${cardType} == null
          then:
            - storeIn:
                key: cardType
                value: skip
      - if:
          condition: ${tierMsgType} == null
          then:
            - storeIn:
                key: tierMsgValidation
                value: skip
      - if:
          condition: ${replacementType} == null
          then:
            - storeIn:
                key: replacementType
                value: slow
      - if:
          condition: ${keepItItem} == null
          then:
            - storeIn:
                key: keepItItem
                value: nonKeepit
      - if:
          condition: ${returnMethod} == 'Return at Walmart store' || ${returnMethod} == null
          then:
            - storeIn:
                key: returnMethod
                value: 'Return to Walmart store'
      - if:
          condition: ${restrictedItem}
          then:
            - log: Restricted value set
          else:
            - storeIn:
                key: restrictedItem
                value: false

  - name: us.functions.returns.wpluSignUpfromReturnMethodScreen
    platform: android

    flow:
      - if:
          condition: ${returnMethod} == 'Return from home'    
          then:
            - verifyIdentifier:
                  present:
                    - identifier: us.mappings.returns.startFreeTrialLink
            - click: 
                identifier: us.mappings.returns.startFreeTrialLink
            - sleep: 
                  duration: 5000
            - if:
                identifier:
                    notPresent:
                      - identifier: us.mappings.search.rewards.clickStart30DayFreetrial
                then:
                  - scroll:
                      direction: down
            - verifyIdentifier:
                      present:
                          - identifier: us.mappings.search.rewards.clickStart30DayFreetrial
            - verifyIdentifier:
                      present:
                          - identifier: us.mappings.search.returns.closereactivateBottomsheet
            - click: 
                identifier: us.mappings.search.returns.closereactivateBottomsheet
            # - click:
            #       identifier: us.mappings.search.rewards.clickStart30DayFreetrial
            # - log: Clicked on w+ trial sign up CTA on the bottom sheet for trial sign up
            # - sleep: 
            #       duration: 5000 
            # - click:
            #     identifier: us.mappings.returns.wPlusContinueButton

  - name: us.functions.returns.checkWplusReactivationBottomsheetFromReturnMethodScreen
    platform: android
    flow:
      - if:
          condition: ${returnMethod} == 'Return from home'    
          then:
            - verifyIdentifier:
                  present:
                    - identifier: us.mappings.returns.restartWalmartPlus
            - click: 
                identifier: us.mappings.returns.restartWalmartPlus
            - sleep: 
                  duration: 5000 
            - verifyIdentifier:
                      present:
                          - identifier: us.mappings.search.returns.reactivateWalmartPlus
            - verifyIdentifier:
                      present:
                          - identifier: us.mappings.search.returns.closereactivateBottomsheet
            - click: 
                identifier: us.mappings.search.returns.closereactivateBottomsheet

  - name: us.functions.returns.checkWplusReactivationBottomsheetFromReturnMethodScreen
    platform: ios
    flow:
      - if:
          condition: ${returnMethod} == 'Return from home'    
          then:
            - verifyIdentifier:
                  present:
                    - identifier: us.mappings.returns.restartWalmartPlus
            - click: 
                identifier: us.mappings.returns.restartWalmartPlus
            - sleep: 
                  duration: 5000 
            - verifyIdentifier:
                      present:
                          - identifier: us.mappings.search.returns.reactivateWalmartPlus
            - verifyIdentifier:
                      present:
                          - identifier: us.mappings.search.returns.closereactivateBottomsheet
            - click: 
                identifier: us.mappings.search.returns.closereactivateBottomsheet
  
  # Definition : Verifying ODP screen with InTransit and Refund issued status              

  - name:  us.functions.returns.returnStatusODPValidation
    platform: android
    flow:
      # - executeFunction:
      #     name: us.functions.returns.requiredReturnDataSetup
      - verifyIdentifier:
          present:
            - identifier: us.mappings.orderDetails.orderNumber
      - sleep:
          duration: 2000

      - if:
          condition: ${refundStatus} == 'InTransit'
          then:
            - scroll:
                direction: down
                untilIdentifier: us.mapping.returns.statusInTransit
            - verifyIdentifier: 
                present:
                  - identifier: us.mapping.returns.statusInTransit
          else:
            - if:
            
                condition: ${refundStatus} == 'returnReceived'
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: us.mapping.returns.statusRefundIssued
                  - verifyIdentifier: 
                      present:
                        - identifier: us.mapping.returns.statusRefundIssued
      # - executeFunction:
      #     name: us.functions.returns.returnODPPopupValidation
      # - executeFunction:
      #     name: us.functions.returns.returnODPReturnDetailsValidation
      - executeFunction:
          name: us.functions.utils.scrollIfNotVisible
          params:
            - name: identifier
              string: us.mappings.orderDetails.orderNumber
            - name: direction
              string: up

  # Definition : Verifying Wallet with different return status returnInProgress and Refund issued  

  - name: us.functions.returns.verifyWalletAfterreturningItem
    platform: android
    flow:
      - if:
          condition: ${refundStatus} == 'returnInProgress'    
          then:
            - verifyIdentifier:
                  notPresent:
                    - identifier: us.mappings.returns.verifyreturnReviewSelectFirstRefundCard
          else:
            - if:
                condition: ${refundStatus} == 'returnReceived'  
                then:
                  - verifyIdentifier:
                        present:
                          - identifier: us.mappings.returns.verifyreturnReviewSelectFirstRefundCard
                  - click:
                      identifier: us.mappings.returns.ViewCardHistory
                  - verifyIdentifier:
                        present:
                          - identifier: us.mappings.returns.transactionHistory
                  - verifyIdentifier:
                        present:
                          - identifier: us.mapping.returns.totalBalance


  - name: us.functions.returns.verifyWalletAfterreturningItem
    platform: android
    flow:
      - if:
          condition: ${refundStatus} == 'returnInProgress'    
          then:
            - verifyIdentifier:
                  notPresent:
                    - identifier: us.mappings.returns.verifyreturnReviewSelectFirstRefundCard
          else:
            - if:
                condition: ${refundStatus} == 'returnReceived'  
                then:
                  - verifyIdentifier:
                        present:
                          - identifier: us.mappings.returns.verifyreturnReviewSelectFirstRefundCard
                  - click:
                      identifier: us.mappings.returns.ViewCardHistory
                  - verifyIdentifier:
                        present:
                          - identifier: us.mappings.returns.transactionHistory
                  - verifyIdentifier:
                        present:
                          - identifier: us.mapping.returns.totalBalance
  
  - name: us.functions.returns.verifyPartialKeepItPopUpAndAccept
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.partialkeepitPopup
          then:
            - click: 
                identifier: us.mappings.returns.partialkeepitRadioBtnAccept
            - click: 
                identifier:  us.mappings.returns.partialkeepitConfirmButton

#inflexkit day0 automation
  - name: us.functions.returns.verifyInfleckitMessage
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.search.returns.verifyInflexKitMessage
          then:
            - log: "Correct message is shown for inflexkit item"
          else:
            - failTest:
                message: "Correct message is not showing for inflexkit item"

  - name: us.functions.returns.verifyAcknowledgementPopup
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.search.returns.verifyAcknowledgementPopup
              - identifier: us.mappings.search.returns.verifyAcknowledgementPopupTitle
              - identifier: us.mappings.search.returns.verifyAcknowledgementPopupRefundBtn
          then:
             - click: 
                identifier: us.mappings.search.returns.verifyAcknowledgementPopupRefundBtn

  - name: us.functions.returns.returnODPValidationForInflexkitItems
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.search.returns.verifyInflexKitMessage
              - identifier: us.mappings.search.returns.labelAndInstructionsBtn
          then:
             - click: 
                identifier: us.mappings.search.returns.labelAndInstructionsBtn

  - name: us.functions.returns.verifyReturnLabelPage
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.search.returns.inFlexkitReturnLabelMessage
              - identifier: us.mappings.search.returns.inFlexkitReturnLabelPDF
          then:
            - log: "Return label page is displayed as per inflexkit criteria"
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Return label page is not displayed as per inflexkit criteria"
  
            
  # inflexkit - android
  - name: us.functions.returns.verifyInfleckitMessage
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.inflexAllCoponentsToolKitText
            
          then:
            - log: "Correct message is shown for inflexkit item"
          else:
            - failTest:
                message: "Correct message is not showing for inflexkit item"

  - name: us.functions.returns.inflexRefundAllPartSection
    platform: android
    flow:
      - if:
          identifier:
            present:
               - identifier: us.mappings.returns.getYourReturnReadyText
               - identifier: us.mappings.returns.closeButton
               - identifier: us.mappings.returns.returnAllPartForRefundButton 
          then:
             - click: 
                identifier: us.mappings.returns.returnAllPartForRefundButton 

  - name: us.functions.returns.returnODPValidationForInflexkitItems
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.inflexAllCoponentsToolKitText
              - identifier: us.mappings.returns.labelAndInstructionsCta
          then:
             - click: 
                identifier: us.mappings.returns.labelAndInstructionsCta

  - name: us.functions.returns.verifyReturnLabelPage
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: us.mappings.returns.inFlexReturnLabelText
              - identifier: us.mappings.returns.inFlexkReturnLabelPDF
          then:
            - log: "Return label page is displayed as per inflexkit criteria"
          else:
            - failTest:
                message: "ENV_FAILURE - ${env} - Return label page is not displayed as per inflexkit criteria"

  
                

  
