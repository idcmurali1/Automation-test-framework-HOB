inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - push:
          manualOnly: true

      # Run unified flows on Prod on Release branch build
      - manual:
          name: Re-run unified-prod-e2e [Release]
          call: run_failed_cases(APP_BUILD_BRANCH = 'release-latest', TAG_TO_RERUN_FAILURE ='unified-prod-e2e', TEST_TAGS = 'unified-prod-e2e-retry', DEPENDENCY_PROFILE = 'looper-prod-release')

      - manual:
          name: Re-run unified-prod-wplus-e2e [Release]
          call: run_failed_cases(APP_BUILD_BRANCH = 'release-latest', TAG_TO_RERUN_FAILURE ='unified-prod-wplus-e2e', TEST_TAGS = 'unified-prod-wplus-e2e-retry', DEPENDENCY_PROFILE = 'looper-prod-release')

      - manual:
          name: Re-run unified-prod-wplus-e2e-2 [Release]
          call: run_failed_cases(APP_BUILD_BRANCH = 'release-latest', TAG_TO_RERUN_FAILURE ='unified-prod-wplus-e2e-2', TEST_TAGS = 'unified-prod-wplus-e2e-2-retry', DEPENDENCY_PROFILE = 'looper-prod-release')

      - manual:
          name: Re-Run p0-ecomm-teflon-e2e [Release]
          call: run_failed_cases(APP_BUILD_BRANCH = 'release-latest', TAG_TO_RERUN_FAILURE ='p0-ecomm-teflon-e2e', TEST_TAGS = 'p0-ecomm-teflon-e2e-retry', DEPENDENCY_PROFILE = 'looper-release')

envs:
  global:
    variables:
      MARKET: us
      POST_TO_ES: true
      R2_VERIFIER_PATH: "./us/e2e-tests"
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'

  env_ios:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      APP_PLATFORM: ios

  env_android:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      APP_PLATFORM: android

  env_android_release_sauce_app:
    variables:
      SAUCE_APP: "storage:filename=glass-release-latest.apk"

  env_ios_release_sauce_app:
    variables:
      SAUCE_APP: "storage:filename=ios-arm-release-latest.zip"

flows:

  # Pick platform specific paramters
  run_failed_cases:
    try:
      - parallel(failsafe):
          - if: |
              %{PLATFORM == 'android'}
            then:
              - call: run_fetch_env(env_android)
            else:
              - call: run_fetch_env(env_ios)
    catch:
      - shell: exit 1

  # Pick environment & rerun tag specific paramters
  run_fetch_env:
    try:
      - parallel(failsafe):
          - if: |
              %{TAG_TO_RERUN_FAILURE == 'unified-prod-e2e' || TAG_TO_RERUN_FAILURE == 'unified-prod-wplus-e2e' || TAG_TO_RERUN_FAILURE == 'unified-prod-wplus-e2e-2'}
            then:
              - call: run_fetch_app_path(GLASS_ENV = 'production', MAPPING_LABELS = 'production')
            else:
              - call: run_fetch_app_path(GLASS_ENV = 'teflon', MAPPING_LABELS = 'teflon')
    catch:
      - shell: exit 1

  # Pick environment & branch specific paramters
  run_fetch_app_path:
    try:
      - parallel(failsafe):
          - if: |
              %{PLATFORM == 'android'}
            then:              
              - call: run_setup_tests_report(env_android_release_sauce_app)
            else:
              - call: run_setup_tests_report(env_ios_release_sauce_app)
    catch:
      - shell: exit 1    

  run_setup_tests_report:
    try:
      - call: build
    catch:
      - shell: exit 1

  get_app_version:
    - if: |
        %{PLATFORM == 'android'}
      then:
        - var(APP_VERSION):
            - shell  (name Get App Version): head ${MARKET}/app-versions/release-latest/android.txt
      else:
        - var(APP_VERSION):
            - shell  (name Get App Version): head ${MARKET}/app-versions/release-latest/ios.txt

  build:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - call: get_app_version
          - call: get_repository_build
          - call: return_sauce_app_location
          - call: get_build_app_version
          - shell: node ./us/scripts/fetch-failed-test-flows.js
          - call: execute_test
          - shell: node ./us/scripts/update-testrail-results-for-rerun-cases.js
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: post_test_results_json_to_es

parameters:
  - PLATFORM: {type: choice, choices: "android,ios", label: "Platform to rerun test flows"}
  - RERUN_BUILD_ID: {type: string, defaultValue: "0", label: "[Optional] Looper build id to fetch failed test flows. If not provided, it will fetch the latest build."}
  - RUN_ID: {type: string, defaultValue: "0", label: "[Optional] Test rail run id to update the rerun results. If not provided, it will fetch the latest run id from the test rail."}