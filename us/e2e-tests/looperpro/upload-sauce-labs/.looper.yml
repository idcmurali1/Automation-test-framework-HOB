inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

parameters:
  - APP_BUILD_URL: { type: string }
  - SAUCE_FILE_NAME: { type: string }
  - APP_PLATFORM: { type: string }
  - FILE_TYPE: { type: string }
  - APP_BRANCH: { type: string }
  - APP_BUILD_BRANCH: { type: string }

triggers:
  - push: disabled
  - pr: disabled

envs:
  global:
    variables:
      MARKET: us
      SLACK_CHANNEL: r2-glass-test-result
      SLACK_TEST_RUN_MESSAGE: "${TEST_RUN_STATUS} *- Upload Sauce Labs Build*\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *Platform*: ${APP_PLATFORM}\n
        *App Location on Sauce Labs*: storage:filename=${SAUCE_FILE_NAME}\n
        *Build Link*: ${BUILD_URL}"
      TEST_PLAN_PASSED: ":white_check_mark: *Build Success*"
      TEST_PLAN_FAILED: ":x: *Build Failure*"

flows:
  download_build:
    - shell (name Download App Build): |
        sh us/scripts/download_build_looper.sh

  download_b2b_build:
    - shell (name Download App Build): |
        sh us/us-b2b/scripts/download_build_looper.sh

  upload_build:
    - shell (name Upload Build to Sauce Labs): |
        sh us/scripts/upload_build_looper.sh

  upload_build_to_sauce_labs:
    - node(label = linux, isolation = except_project, ws = exclusive):
        try:
          # - declare(APP_BRANCH)
          - declare(APP_VERSION)
          # - call: get_app_branch
          - if: $APP_VERSION
            then:
              - shell (Using manually specified APP_VERSION):
                  echo $APP_VERSION
            else:
              - call: get_app_version
          - (name Environment dump) printenv|sort
          - if: $B2B_APP
            then:
              - call: download_b2b_build
            else:
              - call: download_build
          - call: upload_build
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
          - call: post_slack_test_run
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - call: post_slack_test_run
          - shell: exit 1

  update_by_app_branch_ios:
    call: upload_build_to_sauce_labs(env_ios)

  update_by_app_branch_android:
    call: upload_build_to_sauce_labs(env_android)

  get_app_version:
    - if: |
        %{APP_PLATFORM == 'android'}
      then:
        - var(APP_VERSION):
            - shell  (name Get App Version): head ${MARKET}/app-versions/${APP_BUILD_BRANCH}/android.txt
      else:
        - var(APP_VERSION):
            - shell  (name Get App Version): head ${MARKET}/app-versions/${APP_BUILD_BRANCH}/ios.txt
