# DEPRECATED

inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - push:
          manualOnly: true

      #example test for PR review
      - manual: # migrated to looperpro
          name: Run iOS Example Test
          call: run_tests(TEST_TAGS = 'example-test', SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip')

      - manual:
          name: Prod perf test - RDC
          call: run_ios_prod_perf_test_rdc(TEST_TAGS = 'prod-core-perf')

      # Run Modified e2e Flows on development build
      - manual:
          name: Run iOS Teflon Modified E2E - development - All
          call: run_teflon_modified_e2e_development

      # # Run Functional regression on teflon on development build
      #       - manual:
      #           name: Run iOS Teflon Regression Tests - All
      #           call: run_teflon_regression

      # Run E2E flows on Prod on feature build
      - manual:
          name: Run iOS Prod Regression flows on Feature build- All
          call: run_prod_regression_flows(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", DEPENDENCY_PROFILE = 'looper-prod', POST_TO_SPLUNK = true)

      - manual:
          name: Run iOS Prod Regression flows on Feature build- iOS 15
          call: run_prod_regression_flows(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", DEPENDENCY_PROFILE = 'looper-prod-release-15', POST_TO_SPLUNK = true)

      - manual:
          name: Run Batch1 W+ Prod flows on Feature build
          call: run_ios_prod_wplus_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'prod-wplus-e2e', DEPENDENCY_PROFILE = 'looper-prod-wplus', POST_TO_SPLUNK = true)

      - manual:
          name: Run Batch2 W+ Prod flows on Feature build
          call: run_ios_prod_wplus_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'prod-wplus-e2e-2', DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel', POST_TO_SPLUNK = true)

      - manual:
          name: Run Batch3 W+ Prod flows on Feature build
          call: run_ios_prod_wplus_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'prod-wplus-e2e-3', DEPENDENCY_PROFILE = 'looper-prod-wplus', POST_TO_SPLUNK = true)

      # Run Unified E2E flows on Prod on development build
      - manual: # migrated to looperpro
          name: Run Unified iOS Prod Regression flows - All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod')
      
      # Run unified flows on Prod on development build.
      - cron: # migrated to looperpro
          spec: "0 11,17,23 * * 3-7"
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod')

      - manual: # migrated to looperpro
          name: Run Unified iOS Prod Regression flows - Exp and Evergreen
          call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod')

      - cron: # migrated to looperpro
          spec: "30 13,16 * * *"
          call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod')

    # Run Unified Walmart plus E2E flows batch 1 on Prod on development build sequentially
      - manual: # migrated to looperpro
          name: Run Unified iOS Prod Wplus Tests Sequential Batch 1
          call: run_ios_prod_wplus_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-wplus-e2e',
            DEPENDENCY_PROFILE = 'looper-prod-wplus')

      - cron: # migrated to looperpro
          spec: "0 10 * * 1-7"
          call: run_ios_prod_wplus_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest',  TEST_TAGS = 'unified-prod-wplus-e2e',
            DEPENDENCY_PROFILE = 'looper-prod-wplus')

      # Run Unified Walmart plus E2E flows batch 2 on Prod on development build sequentially
      - manual:
          name: Run Unified iOS Prod Wplus Tests Sequential Batch 2
          call: run_ios_prod_wplus_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-wplus-e2e-3',
            DEPENDENCY_PROFILE = 'looper-prod-wplus')

      - cron:
          spec: "0 12 * * 1-7"
          call: run_ios_prod_wplus_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest',  TEST_TAGS = 'unified-prod-wplus-e2e-3',
            DEPENDENCY_PROFILE = 'looper-prod-wplus')

      # Run Unified Walmart plus E2E flows on Prod on development build parallel
      - manual: # migrated to looperpro
          name: Run Unified iOS Prod Wplus Tests Parallel
          call: run_ios_prod_wplus_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel')

      - cron: # migrated to looperpro
          spec: "0 14 * * 1-7"
          call: run_ios_prod_wplus_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel')

     # Run Walmart plus E2E flows on Prod on development build 
        
      - manual:
          name: Run iOS Spanish Prod Regression flows
          call: run_prod_spanish_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-spanish-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-spanish')

      - cron:
          spec: "0 19 * * 3-7"
          call: run_prod_spanish_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-spanish-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-spanish')

      # Run Quantum Metric Session flows on Prod on development build
      - manual: # migrated to looperpro
          name: Run iOS Prod Regression flows - Quantum Metric Session
          call: run_prod_regression_flows_quantum(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmprod', DEPENDENCY_PROFILE = 'looper-prod')

      - cron: # migrated to looperpro
          spec: "0 8 * * 1-7"
          call: run_prod_regression_flows_quantum(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmprod', DEPENDENCY_PROFILE = 'looper-prod')

      # Run OTT flows on Prod on development build
      - manual: # migrated to looperpro
          name: Run iOS Prod Regression flows - OTT Session
          call: run_prod_regression_flows_ott(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-ott')

      - cron: # migrated to looperpro
          spec: "0 2 * * 2"
          call: run_prod_regression_flows_ott(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-ott')

      # Run Discovery Functional regression on Teflon on development build
      # - manual:
      #     name: Run iOS Teflon Tests Discovery- All
      #     call: run_teflon_discovery_regression

      - pr:
          scheduling: cancelRunning
          # requiredLabels: # Uncomment and add a label to be used for your team's PRs. Otherwise, all PRs will trigger this test.
          #   - "example-ios"
          ignoredLabels: # Only used for ignore specific PR labels. Otherwise, should be removed.
            - "ignore-example-ios"
            - "ignore-example"

      # Run e2easaservice poc tests
      - manual:
          name: Run iOS Prod E2E AS A SERVICE Tests
          call: run_prod_e2easaservice_poc

      # - cron:
      #     spec: H H/4 * * *
      #     call: run_prod_e2easaservice_poc

  - spec: us/release-latest
    scheduling: concurrent

    triggers:
      - push:
          manualOnly: true

      # # Run unified flows on Prod on Release branch build
      # - manual:
      #     name: Run Unified iOS Prod Regression flows - All
      #     call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-release')

      # # Run unified flows on Prod on Release branch build, scheduled at  6:30PM Friday-Monday for release 25.0, we will change to regular schedule after this release
      # - cron:
      #     spec: "00 12 * * 2-3"
      #     call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-release')

      # - manual:
      #     name: Run [unified-prod-e2e-1] iOS E2E Golden Flows - Ecomm Exp and Evergreen
      #     call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod-release')

      # - cron:
      #     spec: "30 7 * * *"
      #     call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod-release')

      # - manual:
      #     name: Run iOS Prod Regression flows - Force Upgrade
      #     call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'force-upgrade', DEPENDENCY_PROFILE = 'looper-prod-force-upgrade')

      # - cron:
      #     spec: "0 18 * * 5-7"
      #     call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'force-upgrade', DEPENDENCY_PROFILE = 'looper-prod-force-upgrade')


      # # Run Unified Walmart plus E2E flows batch 1 on Prod on Release branch build sequentially
      # - manual:
      #     name: Run [unified-prod-wplus-e2e] iOS Prod Wplus Tests Sequential Batch 1
      #     call: run_ios_prod_wplus_tests_release(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e',
      #       DEPENDENCY_PROFILE = 'looper-prod-wplus-release')

      # - cron:
      #     spec: "00 12 * * 1,2"
      #     call: run_ios_prod_wplus_tests_release(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e',
      #       DEPENDENCY_PROFILE = 'looper-prod-wplus-release')


      # # Run Unified Walmart plus E2E flows batch 2 on Prod on Release branch build sequentially
      # # - manual:
      # #     name: Run [unified-prod-wplus-e2e-3] iOS Prod Wplus Tests Sequential Batch 2
      # #     call: run_ios_prod_wplus_tests_release(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e-3',
      # #       DEPENDENCY_PROFILE = 'looper-prod-wplus-release')

      # # - cron:
      # #     spec: "0 12 * * 2,3"
      # #     call: run_ios_prod_wplus_tests_release(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e-3',
      # #       DEPENDENCY_PROFILE = 'looper-prod-wplus-release')


      # # Run Unified Walmart plus E2E flows on Prod on Release branch build parallel
      # - manual:
      #     name: Run [unified-prod-wplus-e2e-2] iOS Prod Wplus Tests Parallel
      #     call: run_ios_prod_wplus_tests_release(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
      #       DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel-release')

      # - cron:
      #     spec: "30 12 * * 1,2"
      #     call: run_ios_prod_wplus_tests_release(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
      #       DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel-release')

      # - pr:
      #     scheduling: cancelRunning
      #     # requiredLabels: # Uncomment and add a label to be used for your team's PRs. Otherwise, all PRs will trigger this test.
      #     #   - "example-ios"

      # # Run Functional exploratory test
      # - manual:
      #     name: Run iOS Prod Exploratory Tests
      #     call: run_prod_exploratory_tests

      # - cron:
      #     spec: H H/4 * * *
      #     call: run_prod_exploratory_tests

envs:
  global:
    variables:
      MARKET: us
      APP_PLATFORM: ios
      SLACK_CHANNEL: r2-glass-test-result # Add your own team's test result slack channel. Also, make sure to add looperbot app to channel.
      # TESTRAIL_PROJECT_ID: 133 # OPTIONAL: If used, a new Testrail plan id will be generated on this project id for each looper run.
      # TESTRAIL_PLAN_ID: '' # OPTIONAL: Declare global var TESTRAIL_PLAN_ID to be used in test configs
      # SKIP_SLACK_TEST_RUN: passed # OPTIONAL: Set value to skip posting slack message for test runs using condition "all" or "passed"
      #TESTRAIL_PLAN_ID: 773385
      POST_TO_ANIVIA: true
      R2_VERIFIER_PATH: "./us/e2e-tests"

  # Environment profiles can be specified here with specific environment variable values.
  env_ios_staging:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      # TEST_TAGS: example-test
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: staging
      MAPPING_LABELS: staging

  env_ios_staging_parameters:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      TEST_TAGS: ''
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: staging
      MAPPING_LABELS: staging

  env_ios_teflon:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      # TEST_TAGS: example-test
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon

  env_ios_teflon_parameters:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      TEST_TAGS: ''
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon

  env_ios_prod_regression:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      # DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      R2_THREADS: 10
      SLACK_CHANNEL: r2-glass-prod-ios-tests
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *App Build*: ${SAUCE_APP}\n
        *Tag*: ${TEST_TAGS}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"

  env_ios_prod_regression-ott:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      # DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      R2_THREADS: 10
      THREADS: 50
      SLACK_CHANNEL: r2-glass-prod-ios-tests
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *App Build*: ${SAUCE_APP}\n
        *Tag*: ${TEST_TAGS}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"
      WHITELISTED_FILE: whitelisted_ios_url_list

  env_ios_site_mer_parameters:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      GLASS_ENV: production
      MAPPING_LABELS: production-sm

  env_ios_wplus_prod:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      R2_THREADS: 10
      SLACK_CHANNEL: r2-glass-prod-ios-tests
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *App Build*: ${SAUCE_APP}\n
        *Tag*: ${TEST_TAGS}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"
      POST_TO_ES: true
      APPLITOOLS_API_KEY: ENC[Rt+/oXg4fNf9b2Pq2MQ47frfGB42KVDp7l7/tQ/1na985VV7Ia42QMgDDOppIoaDTWfXJmsQW0Imo7rpXjXaQQ==]

  env_ios_prod_perf_test_rdc:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      DEPENDENCY_PROFILE: looper-prod-perf-rdc
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-prod-store-test
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      SAUCE_APP: storage:filename=glass-release-latest.ipa
      RDC: true

  env_ios_teflon_regression:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon
      SLACK_CHANNEL: r2-glass-regression-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *App Build*: ${SAUCE_APP}\n
        *Tag*: ${TEST_TAGS}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"

  env_ios_spanish_prod_regression:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      GLASS_ENV: production
      MAPPING_LABELS: spanish_prod_e2e
      R2_THREADS: 10
      SLACK_CHANNEL: r2-glass-prod-ios-tests
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *App Build*: ${SAUCE_APP}\n
        *Tag*: ${TEST_TAGS}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"


  env_ios_prod_exploratory_test_parameters:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      TEST_TAGS: exploratory-test
      DEPENDENCY_PROFILE: saucelabs-rdc
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-glass-prod-ios-tests
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *App Build*: ${SAUCE_APP}\n
        *Tag*: ${TEST_TAGS}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"
      SAUCE_APP: storage:filename=glass-release-latest.ipa

  env_ios_prod_e2easaservice_parameters:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
      TEST_TAGS: e2e-poc
      DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-glass-prod-ios-tests
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *App Build*: ${SAUCE_APP}\n
        *Tag*: ${TEST_TAGS}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"
      SAUCE_APP: storage:filename=glass-development-latest.zip

flows:
  pr:
    - if: |
        %{TRIGGER_TARGET_BRANCH == 'development'}
      then:
        - call: run_tests(TEST_TAGS = 'example-test', SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip')
      else:
        - call: run_tests(TEST_TAGS = 'example-test', SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip')
  run_tests:
    - call: build(env_ios_teflon)

  run_prod_regression_base:
    - call: build(env_ios_prod_regression)

  run_prod_site_mer_base:
    - call: build_sm(env_ios_site_mer_parameters)

  run_prod_regression:
    try:
      - parallel(failsafe):
          - call: run_prod_regression_base_release(TEST_TAGS = 'item_ios_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
          - call: run_prod_regression_base_release(TEST_TAGS = 'search_ios_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_spanish_regression_flows:
    try:
      - parallel(failsafe):
          - call: run_prod_spanish_regression_base_release(POST_TO_ES = true, TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_regression_1_flows:
    try:
      - parallel(failsafe):
          - call: run_prod_regression_base_release(TEST_TAGS = 'unified-prod-e2e-1', POST_TO_ES = true, TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_regression_flows:
    try:
      - parallel(failsafe):
          - call: run_prod_regression_base_release(POST_TO_ES = true, TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan


  run_teflon_feature_regression_flows:
    try:
      - parallel(failsafe):
          - call: run_teflon_regression_base(TEST_TAGS = 'us-golden-flows', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_teflon_regression_base:
    - call: build(env_ios_teflon_regression)


  run_teflon_modified_e2e_development:
    - call: build(env_ios_teflon_modified_e2e_development)

  run_ios_prod_perf_test_rdc:
    - call: build(env_ios_prod_perf_test_rdc)

  run_ios_prod_wplus_tests:
    try:
      - call: build(env_ios_wplus_prod)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_exploratory_tests:
    try:
      - parallel(failsafe):
          - call: build(env_ios_prod_exploratory_test_parameters)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_e2easaservice_poc:
    try:
      - parallel(failsafe):
          - call: build(env_ios_prod_e2easaservice_parameters)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_ios_prod_wplus_tests_release:
    try:
      - call: generate_testrail_plan(env_ios_wplus_prod)
      - call: build(env_ios_wplus_prod)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_regression_base_release:
    try:
      - call: generate_testrail_plan(env_ios_prod_regression)
      - call: build(env_ios_prod_regression)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  build_sm:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - shell: node ./us/e2e-tests/helpers/generate-campaign-tests.js
          - call: get_app_version
          - call: get_repository_build
          - call: return_sauce_app_location
          - call: get_build_app_version
          - call: execute_test
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: post_slack_test_plan
          - call: post_to_anivia

  post_to_anivia:
    try:
      - shell: node us/scripts/generate-sm-report.js
    catch:
      - echo "Unable to post results to Anivia - $flowErrorMessage"

  run_prod_spanish_regression_base_release:
    try:
      - call: generate_testrail_plan(env_ios_spanish_prod_regression)
      - call: build(env_ios_spanish_prod_regression)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_regression_flows_quantum:
    try:
      - parallel(failsafe):
          - call: build_quantum(env_ios_prod_regression)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_regression_flows_ott:
    try:
      - parallel(failsafe):
          - call: build_ott(env_ios_prod_regression-ott)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  build_quantum:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - call: get_app_version
          - call: get_repository_build
          - call: return_sauce_app_location
          - call: get_build_app_version
          - call: execute_test
          - shell: node ./us/e2e-tests/helpers/generateQuantumReport.js
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: check_pii_data
          - call: generate_sauce_labs_build_url
          - call: publish_report
          # - shell: node ./us/e2e-tests/helpers/calculateAvgTestTime.js
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: slack_test_run_helper
          - call: post_test_results_json_to_es
          - call: post_test_results_json_to_splunk
          - call: update_test_results_to_xray
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: check_pii_failure

  build_ott:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - call: get_app_version
          - call: get_repository_build
          - call: start_sc
          - call: execute_test
          - shell: cat sc.log
          - call: stop_sc
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: ott_check
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: slack_test_run_helper
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: check_ott_failure
