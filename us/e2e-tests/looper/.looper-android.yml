# DEPRECATED
inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - push:
          manualOnly: true

      - manual:
          name: Run Android Example Test
          call: run_tests(TEST_TAGS = 'example-test', SAUCE_APP = 'storage:filename=glass-development-latest.apk', DEPENDENCY_PROFILE = 'looper')

      - manual:
          name: Prod store test
          call: run_android_prod_store_test(TEST_TAGS = 'prod-store-test')

      - manual:
          name: Prod perf test - RDC
          call: run_android_prod_perf_test_rdc(TEST_TAGS = 'prod-core-perf')

      - manual:
          name: Run Android Tests By Parameters
          call: build(env_android_teflon_parameters)

      - manual:
          name: Run Android Teflon Modified E2E - development - All
          call: run_teflon_modified_e2e_development

# Run E2E flows on Prod on feature build
      - manual:
          name: Run Android Prod Regression flows on Feature build- All
          call: run_prod_regression_flows(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'prod-e2e', DEPENDENCY_PROFILE = 'looper-prod',POST_TO_SPLUNK = true)
          
      - manual:
          name: Run Batch1 W+ Prod flows on Feature build
          call: run_android_prod_wplus_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'prod-wplus-e2e', DEPENDENCY_PROFILE = 'looper-prod-wplus', POST_TO_SPLUNK = true)

      - manual:
          name: Run Batch2 W+ Prod flows on Feature build
          call: run_android_prod_wplus_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'prod-wplus-e2e-2', DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel', POST_TO_SPLUNK = true)

# Run Unified E2E flows on Prod on development build
      - manual:  # migrated to looperpro
          name: Run Unified Android Prod Regression flows - All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod')

      - cron:
          spec: "0 11,17,23 * * 3-7"
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod')


#Run E2E flows on Prod Spanish flows on development build
      - manual: # migrated to looperpro
          name: Run Android Prod Spanish flows - All
          call: run_spanish_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-spanish-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-spanish')

      - cron:
          spec: "0 14 * * 1,3-7"
          call: run_spanish_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-spanish-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-spanish')

# Run Express and Evergreen flows on Prod on development build
      - manual:  # migrated to looperpro
          name: Run Unified Android Prod Regression flows - Exp and Evergreen
          call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod')

      - cron:
          spec: "0 13,16 * * *"
          call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod')

# Run Unified Walmart plus E2E flows batch 1 on Prod on development build sequentially
      - manual:  # migrated to looperpro
          name: Run Unified Android Prod Wplus Tests Sequential Batch 1
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-wplus-e2e',
            DEPENDENCY_PROFILE = 'looper-prod-wplus')

      - cron:
          spec: "0 1 * * 1-7"
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest',  TEST_TAGS = 'unified-prod-wplus-e2e',
            DEPENDENCY_PROFILE = 'looper-prod-wplus')

# Run Unified Walmart plus E2E flows on Prod on development build parallel
      - manual:  # migrated to looperpro
          name: Run Unified Android Prod Wplus Tests Parallel
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel')

      - cron:
          spec: "0 4 * * 1-7"
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-parallel')

      # Run Quantum Metric Session E2E flows on Prod on development build parallel
      - manual:  # migrated to looperpro
          name: Run Android Prod Regression flows - Quantum Metric Session
          call: run_prod_regression_flows_quantum(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmprod', DEPENDENCY_PROFILE = 'looper-prod')

      - cron:
          spec: "0 8 * * 1-7"
          call: run_prod_regression_flows_quantum(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmprod', DEPENDENCY_PROFILE = 'looper-prod')

      # Run OTT check E2E flows on Prod on development build parallel
      - manual:  # migrated to looperpro
          name: Run Android Prod Regression flows - OTT Session
          call: run_prod_regression_flows_ott(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-ott')

      - cron:
          spec: "0 2 * * 2"
          call: run_prod_regression_flows_ott(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-ott')

      # Run E2E flows on Teflon on feature build
      - manual:
          name: Run Android Teflon Regression flows on Feature build- All
          call: run_teflon_feature_regression_flows(SAUCE_APP = "${SAUCE_APP_FILE_NAME}")

      - pr:
          scheduling: cancelRunning
          # requiredLabels: # Uncomment and add a label to be used for your team's PRs. Otherwise, all PRs will trigger this test.
          #   - "example-android"
          ignoredLabels: # Only used for ignore specific PR labels. Otherwise, should be removed.
            - "ignore-example-android"
            - "ignore-example"

  - spec: us/release-latest
    scheduling: concurrent

    triggers:
      - push:
          manualOnly: true

# Run E2E flows on Prod on Release branch build, disabling prod-e2e and running unified-flows at the same times

      - manual:  # migrated to looperpro
          name: Run [unified-prod-e2e-1] Android Prod Regression flows - Exp and Evergreen
          call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod-release')

      - cron:
          spec: "0 8 * * *"
          call: run_prod_regression_1_flows(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e-1', DEPENDENCY_PROFILE = 'looper-prod-release')

# Run Unified E2E flows on Prod on Release branch build
      - manual:  # migrated to looperpro
          name: Run Unified Android Prod Regression flows - All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-release')

# Run unified flows on Prod on Release branch build, scheduled at  6:30PM Friday-Monday for release 25.0, we will change to regular schedule after this release
      - cron:
          spec: "00 12 * * 1,3-7"
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-e2e', DEPENDENCY_PROFILE = 'looper-prod-release')

# Run Unified Walmart plus E2E flows batch 1 on Prod on Release branch build sequentially
      - manual:  # migrated to looperpro
          name: Run [unified-prod-wplus-e2e] Android Prod Wplus Tests Sequential Batch 1
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-release')

      - cron:
          spec: "00 12 * * 1,3-7"
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-release')

# Run Unified Walmart plus E2E flows on Prod on Release branch build parallel
      - manual:  # migrated to looperpro
          name: Run [unified-prod-wplus-e2e-2] Android Prod Wplus Tests Parallel
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-release-parallel')

      - cron:
          spec:  "30 12 * * 1,3"
          call: run_android_prod_wplus_tests(SAUCE_APP = 'storage:filename=glass-release-latest.apk', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-prod-wplus-e2e-2',
            DEPENDENCY_PROFILE = 'looper-prod-wplus-release-parallel')

# Run Modified E2E on teflon on release build
      - manual:
          name: Run Android Teflon Modified E2E - Release - All
          call: run_teflon_modified_e2e_release(APP_BUILD_BRANCH = 'release-latest')

# Run Functional production regression on real device
      - manual:
          name: Run Android Prod Real Device Tests
          call: run_prod_regression_real_device_flows

      - cron:
          spec: H H/4 * * *
          call: run_prod_regression_real_device_flows

# Run Functional exploratory test
      - manual:
          name: Run Android Prod Exploratory Tests
          call: run_prod_exploratory_tests(env_android_prod_exploratory_test_parameters)

      - cron:
          spec: H H/4 * * *
          call: run_prod_exploratory_tests(env_android_prod_exploratory_test_parameters)


  - spec: Fulcrum_API_Integration_Nov
    scheduling: concurrent

    triggers:
      - push:
          manualOnly: true
          # Run Fulcrum E2E flows on teflon build
      - manual:
          name: Run Fulcrum Regression flows - All
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-fulcrum-teflon-e2e', DEPENDENCY_PROFILE = 'looper-prod')

      - cron:
          spec: "30 9 * * 1-7"
          call: run_prod_regression_flows(SAUCE_APP = 'storage:filename=glass-development-latest.apk', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-fulcrum-teflon-e2e', DEPENDENCY_PROFILE = 'looper-prod')


envs:
  global:
    variables:
      MARKET: us
      APP_PLATFORM: android
      SLACK_CHANNEL: r2-glass-test-result # Add your own team's test result slack channel. Also, make sure to add looperbot app to channel.
      # TESTRAIL_PROJECT_ID: 133 # OPTIONAL: If used, a new Testrail plan id will be generated on this project id for each looper run.
      # TESTRAIL_PLAN_ID: '' # OPTIONAL: Declare global var TESTRAIL_PLAN_ID to be used in test configs
      # SKIP_SLACK_TEST_RUN: passed # OPTIONAL: Set value to skip posting slack message for test runs using condition "all" or "passed"
      #TESTRAIL_PLAN_ID: 778418
      POST_TO_ANIVIA: true

  env_android_teflon:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      # TEST_TAGS: example-test
      # DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon

  env_android_prod_perf_test_rdc:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: looper-prod-perf-rdc
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-prod-store-test
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      SAUCE_APP: storage:filename=glass-sc.apk
      RDC: true

  env_android_prod_store_test:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-prod-store-test
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      SAUCE_APP: storage:filename=glass-release-latest.apk

  env_android_teflon_parameters:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-glass-android-regression-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Tag*: ${TEST_TAGS}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"

  env_android_prod_parameters:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      # DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-android-prod-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Tag*: ${TEST_TAGS}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"

  env_android_prod_parameters-ott:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      # DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-android-prod-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      THREADS: 20
      WHITELISTED_FILE: whitelisted_android_url_list

  #site merchandising

  env_android_site_mer_parameters:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      # DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      # MAPPING_LABELS: production-sm
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-android-prod-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"

  env_android_teflon_modified_e2e_development:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      TEST_TAGS: golden-flows-modified
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon
      SLACK_CHANNEL: r2-glass-android-regression-test-results
      USE_TEST_REPORT: true
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
  
  env_android_prod_real_device_parameters:
    variables:
      DEPENDENCY_FILE_NAME: test/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: saucelabs-rdc
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-android-prod-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Tag*: ${TEST_TAGS}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      SAUCE_APP: storage:filename=glass-release-latest.apk
  
  env_android_prod_exploratory_test_parameters:
    variables:
      DEPENDENCY_FILE_NAME: test/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: saucelabs-rdc
      GLASS_ENV: production
      MAPPING_LABELS: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-android-prod-test-results
      EMAIL_TO: stirumala@walmart.com
      EMAIL_SUBJECT: Exploratory Test Failed
      EMAIL_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Tag*: ${TEST_TAGS}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Tag*: ${TEST_TAGS}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      SAUCE_APP: storage:filename=glass-release-latest.apk
  
  env_android_prod_wplus:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      GLASS_ENV: production
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-android-prod-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Tag*: ${TEST_TAGS}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"
      POST_TO_ES: true
      APPLITOOLS_API_KEY: ENC[Rt+/oXg4fNf9b2Pq2MQ47frfGB42KVDp7l7/tQ/1na985VV7Ia42QMgDDOppIoaDTWfXJmsQW0Imo7rpXjXaQQ==]
  
  env_android_teflon_modified_e2e_release:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      TEST_TAGS: golden-flows-modified
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon
      SLACK_CHANNEL: r2-glass-android-regression-test-results
      SAUCE_APP: storage:filename=glass-release-latest.apk
      USE_TEST_REPORT: true
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Tag*: ${TEST_TAGS}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"

  env_spanish_android_prod_parameters:
    variables:
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/android/android-default.yaml
      # DEPENDENCY_PROFILE: looper-prod
      GLASS_ENV: production
      MAPPING_LABELS: spanish_prod_e2e
      USE_TEST_REPORT: true
      SLACK_CHANNEL: r2-android-prod-test-results
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"

flows:
  pr:
    - if: |
        %{TRIGGER_TARGET_BRANCH == 'development'}
      then:
        - call: run_tests(TEST_TAGS = 'example-test', SAUCE_APP = 'storage:filename=glass-development-latest.apk', DEPENDENCY_PROFILE = 'looper')
      else:
        - call: run_tests(TEST_TAGS = 'example-test', SAUCE_APP = 'storage:filename=glass-release-latest.apk', DEPENDENCY_PROFILE = 'looper')

  run_tests:
    - call: build(env_android_teflon)

  run_healthcheck:
    - call: build(env_android_teflon_healthcheck)

  run_prod_regression_base:
    - call: build(env_android_prod_parameters)

  run_prod_site_mer_base:
    - call: build_sm(env_android_site_mer_parameters)

  run_prod_regression_real_device_base:
    - call: build(env_android_prod_real_device_parameters)
  
  run_prod_exploratory_test_base:
    - call: build(env_android_prod_exploratory_test_parameters)

  run_prod_regression:
    try:
      - parallel(failsafe):
        - call: run_prod_regression_base(TEST_TAGS = 'item_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
        - call: run_prod_regression_base(TEST_TAGS = 'search_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_teflon_feature_regression_flows:
    try:
      - parallel(failsafe):
        - call: run_teflon_regression_base(TEST_TAGS = 'us-golden-flows', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_teflon_regression_base:
    - call: build(env_android_teflon_parameters)

  # run_teflon_regression:
  #   try:
  #     - parallel(failsafe):
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'signin_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       - call: run_teflon_regression_base(TEST_TAGS = 'amend_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       - call: run_teflon_regression_base(TEST_TAGS = 'marketplace-integration-android-tests-teflon', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'cancel_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'home_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'checkout_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'bookslot_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'myitems_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'cart_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'orderdetails_android_test', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'orderhistory_android_test', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
  #       # - call: run_teflon_regression_base(TEST_TAGS = 'returns_android_tests', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')


  run_prod_regression_1_flows:
    try:
      - parallel(failsafe):
        - call: run_prod_regression_base(TEST_TAGS = 'unified-prod-e2e-1', POST_TO_ES = true, TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_regression_flows:
    try:
      - parallel(failsafe):
        - call: run_prod_regression_base(POST_TO_ES = true, TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_spanish_prod_regression_flows:
    try:
      - parallel(failsafe):
        - call: run_spanish_prod_regression_base(POST_TO_ES = true, TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan


  run_prod_regression_real_device_flows:
    try:
      - parallel(failsafe):
        - call: run_prod_regression_real_device_base(TEST_TAGS = 'prod-e2e-real-device', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan
  
  run_prod_exploratory_tests:
    try:
      - parallel(failsafe):
        - call: run_prod_exploratory_test_base(TEST_TAGS = 'exploratory-test', TEST_SESSION_ID = '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}')
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan
      - call: post_email

  run_android_prod_wplus_tests:
    try:
      - call: build(env_android_prod_wplus)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_teflon_modified_e2e_release:
    - call: build(env_android_teflon_modified_e2e_release)

  run_teflon_modified_e2e_development:
    - call: build(env_android_teflon_modified_e2e_development)

  run_android_prod_store_test:
    - call: build_zipcode(env_android_prod_store_test)

  run_android_prod_perf_test_rdc:
    - call: build(env_android_prod_perf_test_rdc)

  run_spanish_prod_regression_base:
    - call: build(env_spanish_android_prod_parameters) 

  build_zipcode:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          # - declare(APP_BRANCH)
          - declare(APP_VERSION)
          - call: input_r2_params
          - call: setup
          - shell: node ./us/scripts/generate-store-tests.js
          # - call: get_app_branch
          - call: get_app_version
          - call: return_sauce_app_location
          - call: execute_test
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
          - call: generate_output(TEST_STATUS = 'passed')
          - call: output_r2_params
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - call: generate_output(TEST_STATUS = 'failed')
          - call: output_r2_params
          - shell: exit 1
        finally:
          - call: slack_test_run_helper
          - call: post_test_results_json_to_splunk

  build_sm:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - shell: node ./us/e2e-tests/helpers/generate-campaign-tests.js
          - call: get_app_version
          - call: get_repository_build
          - call: return_sauce_app_location
          - call: get_build_app_version
          - call: execute_test
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: slack_test_run_helper
          - call: post_to_anivia

  post_to_anivia:
    try:
      - shell: node us/scripts/generate-sm-report.js
    catch:
      - echo "Unable to post results to Anivia - $flowErrorMessage"

  run_prod_regression_flows_quantum:
    try:
      - parallel(failsafe):
          - call: build_quantum(env_android_prod_parameters)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  run_prod_regression_flows_ott:
    try:
      - parallel(failsafe):
          - call: build_ott(env_android_prod_parameters-ott)
    catch:
      - shell: exit 1
    finally:
      - call: post_slack_test_plan

  build_quantum:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - call: get_app_version
          - call: get_repository_build
          - call: return_sauce_app_location
          - call: get_build_app_version
          - call: execute_test
          - shell: node ./us/e2e-tests/helpers/generateQuantumReport.js
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: check_pii_data
          - call: generate_sauce_labs_build_url
          - call: publish_report
          # - shell: node ./us/e2e-tests/helpers/calculateAvgTestTime.js
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: slack_test_run_helper
          - call: post_test_results_json_to_es
          - call: post_test_results_json_to_splunk
          - call: update_test_results_to_xray
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: check_pii_failure

  build_ott:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - call: get_app_version
          - call: get_repository_build
          - call: start_sc
          - call: execute_test
          - shell: cat sc.log
          - call: stop_sc
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: ott_check
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: slack_test_run_helper
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: check_ott_failure