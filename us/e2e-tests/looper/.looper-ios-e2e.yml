# DEPRECATED

inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent
    triggers:
      - pr: disabled
      - push:
          manualOnly: true

      - manual: # migrated to looperpro
          name: Run [p0-ecomm-teflon-e2e] iOS E2E Golden Flows-Ecomm P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 5,15 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [p1-ecomm-teflon-e2e] iOS E2E Golden Flows-Ecomm P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 5,15 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [p2-ecomm-teflon-e2e] iOS E2E Golden Flows-Ecomm P2
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p2-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 8,15 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p2-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')
      
      # Unified p0, p1 & p2 ecomm flows

      - manual: # migrated to looperpro
          name: Run [unified-p0-ecomm-teflon-e2e] iOS E2E Golden Flows-Ecomm P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 5,15 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')


      - manual: # migrated to looperpro
          name: Run [unified-p1-ecomm-teflon-e2e] iOS E2E Golden Flows-Ecomm P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 5,15 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [unified-p2-ecomm-teflon-e2e] iOS E2E Golden Flows-Ecomm P2
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p2-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 8,15 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p2-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run iOS E2E Golden Flows- duplicate pre-tx in teflon
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'dupe-pre-tx-teflon', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 15 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'dupe-pre-tx-teflon', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 1,20 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'faultboard', DEPENDENCY_PROFILE = 'looper')


      # W+ Looper job configurations
      - manual: # migrated to looperpro
          name: Run [p0-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 1,20 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [p1-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 1,20 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [p2-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P2
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p2-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 6,22 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p2-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')
       
       # Unified W+ Looper job configurations

      - manual: # migrated to looperpro
          name: Run [unified-p0-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 1,20 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [unified-p1-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 1,20 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [unified-p2-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P2
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p2-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 6,22 * * 3-7"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'unified-p2-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')
       
        # Run Spanish E2E flows on Teflon on Dev build

      - manual: # migrated to looperpro
          name: Run iOS Spanish E2E Golden Flows
          call: run_spanish_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-spanish-teflon-e2e', DEPENDENCY_PROFILE = 'looper-spanish')

      - cron: # migrated to looperpro
          spec: "0 17 * * 3-7"
          call: run_spanish_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-spanish-teflon-e2e', DEPENDENCY_PROFILE = 'looper-spanish')

        # Run Quantum E2E flows on Teflon on Dev build
      - manual: # migrated to looperpro
          name: Run iOS Quantum E2E Golden Flows
          call: run_tests_quantum(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmios', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 8,20 * * *"
          call: run_tests_quantum(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmios', DEPENDENCY_PROFILE = 'looper')

        # Run Quantum E2E flows on Teflon on Dev build
      - manual: # migrated to looperpro
          name: Run iOS Quantum E2E Golden Flows New
          call: run_tests_quantum(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmios1', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 7,19 * * *"
          call: run_tests_quantum(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'qmios1', DEPENDENCY_PROFILE = 'looper')

       # Run Tipping E2E flows on Teflon on Dev build
      - manual: # migrated to looperpro
          name: Run iOS Tipping E2E Golden Flows
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'Tipping', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "0 7,21 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'Tipping', DEPENDENCY_PROFILE = 'looper')

      # Run E2E flows on Teflon on feature build
      - manual:
          name: Run iOS Teflon P1 Ecomm flows on Feature build- All
          call:  run_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper', POST_TO_SPLUNK = true )

      - manual:
          name: Run P1 W+ Teflon flows on Feature build
          call:  run_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper', POST_TO_SPLUNK = true )

      - manual:
          name: Run P2 W+ Teflon flows on Feature build
          call:  run_tests(SAUCE_APP = "${SAUCE_APP_FILE_NAME}", TEST_TAGS = 'p2-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper', POST_TO_SPLUNK = true )

  - spec: us/release-latest
    scheduling: concurrent

    triggers:
      - pr: disabled
      - push:
          manualOnly: true

      - manual: # migrated to looperpro
          name: Run [p0-ecomm-teflon-e2e] iOS E2E Golden Flows - Ecomm P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper-release')

      - cron: # migrated to looperpro
          spec: "0 12 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper-release')

      - manual: # migrated to looperpro
          name: Run [p1-ecomm-teflon-e2e] iOS E2E Golden Flows - Ecomm P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "30 18 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      # unified p0 ecomm flows
      - manual: # migrated to looperpro
          name: Run [unified-p0-ecomm-teflon-e2e] iOS E2E Golden Flows - Ecomm P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "30 18 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p0-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      # unified p1 ecomm flows
      - manual: # migrated to looperpro
          name: Run [unified-p1-ecomm-teflon-e2e] iOS E2E Golden Flows - Ecomm P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "30 18 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p1-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper')


    #   - manual:
    #       name: Run iOS E2E Golden Flows - Ecomm P2
    #       call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p2-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper-release')

    #   - cron:
    #       spec: "0 18 * * *"
    #       call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p2-ecomm-teflon-e2e', DEPENDENCY_PROFILE = 'looper-release')

    #   - manual:
    #       name: Run iOS E2E Golden Flows- duplicate pre-tx in teflon
    #       call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'dupe-pre-tx-teflon', DEPENDENCY_PROFILE = 'looper-release')

    #   - cron:
    #       spec: "0 18 * * *"
    #       call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'dupe-pre-tx-teflon', DEPENDENCY_PROFILE = 'looper-release')

      # W+ Looper job configurations  
      - manual: # migrated to looperpro
          name: Run [p0-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper-wplus-release')

      - cron: # migrated to looperpro
          spec: "0 12 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper-wplus-release')
                      
      - manual: # migrated to looperpro
          name: Run [p1-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "30 18 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      # Unified W+ Looper job configurations              
      - manual: # migrated to looperpro
          name: Run [unified-p0-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P0
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "30 18 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p0-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual: # migrated to looperpro
          name: Run [unified-p1-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P1
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron: # migrated to looperpro
          spec: "30 18 * * *"
          call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-release-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'unified-p1-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper')

      # - manual:
      #     name: Run [p2-wplus-teflon-e2e] iOS E2E Wplus Golden Flows P2
      #     call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p2-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper-wplus-release')

      # - cron:
      #     spec: "0 20 * * *"
      #     call: run_tests(SAUCE_APP = 'storage:filename=ios-arm-development-latest.zip', APP_BUILD_BRANCH = 'release-latest', TEST_TAGS = 'p2-wplus-teflon-e2e', DEPENDENCY_PROFILE = 'looper-wplus-release')

envs:
  global:
    variables:
      MARKET: us
      APP_PLATFORM: ios
      SLACK_CHANNEL: r2-glass-test-result
      POST_TO_ES: true
      POST_TO_ANIVIA: true
    #   TESTRAIL_PLAN_ID: 773385
      APPLITOOLS_API_KEY: ENC[Rt+/oXg4fNf9b2Pq2MQ47frfGB42KVDp7l7/tQ/1na985VV7Ia42QMgDDOppIoaDTWfXJmsQW0Imo7rpXjXaQQ==]
      R2_VERIFIER_PATH: "./us/e2e-tests"

  # Environment profiles can be specified here with specific environment variable values.
  env_ios_teflon:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
    #   DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon

  env_ios_spanish_teflon:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: us/e2e-tests/dependencies/ios/ios-default.yaml
    #   DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: spanish_teflon_e2e

flows:
  run_tests:
    - call: build(env_ios_teflon)

  run_spanish_tests:
    - call: build(env_ios_spanish_teflon)

  run_pii_tests:
    - call: build_pii_check(env_ios_teflon)

  run_tests_quantum:
      - call: build_quantum(env_ios_teflon)

  build_quantum:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - call: get_app_version
          - call: get_repository_build
          - call: return_sauce_app_location
          - call: get_build_app_version
          - call: execute_test
          - shell: node ./us/e2e-tests/helpers/generateQuantumReport.js
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - call: check_pii_data
          - call: generate_sauce_labs_build_url
          - call: publish_report
          # - shell: node ./us/e2e-tests/helpers/calculateAvgTestTime.js
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: slack_test_run_helper
          - call: post_test_results_json_to_es
          - call: post_test_results_json_to_splunk
          - call: update_test_results_to_xray
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - call: check_pii_failure
