name: Autoheal: extract IDs → update mappings → PR

on:
  # Manual run support (you can override the app repo/ref here)
  workflow_dispatch:
    inputs:
      app_repo:
        description: "App repository to scan (owner/repo)"
        required: false
        default: "idcmurali1/Hob-shop"
      branch:
        description: "App branch (fallback if SHA not provided)"
        required: false
        default: "main"
      sha:
        description: "App commit SHA to scan (takes precedence over branch)"
        required: false
        default: ""
      logical:
        description: "Optional: only update a single logical mapping"
        required: false
        default: ""
  # Fired by your app repo when it changes
  repository_dispatch:
    types: [app_change]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: autoheal-identifiers-${{ github.ref }}
  cancel-in-progress: false

env:
  # Force LLM provider to OpenAI; no rulebased fallback here
  LLM_PROVIDER: openai
  APP_REPO: ${{ inputs.app_repo || 'idcmurali1/Hob-shop' }}
  APP_REF: ${{ github.event.client_payload.sha || github.event.client_payload.branch || inputs.sha || inputs.branch || 'main' }}
  LOGICAL_FILTER: ${{ inputs.logical || '' }}

jobs:
  update-identifiers:
    runs-on: ubuntu-latest
    steps:
      - name: Show dispatch payload (debug)
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "event_type=${{ github.event.action || github.event.action || '' }}"
          echo "client_payload:"
          echo '${{ toJson(github.event.client_payload) }}'
          echo "APP_REPO=$APP_REPO"
          echo "APP_REF=$APP_REF"
          echo "LOGICAL_FILTER=$LOGICAL_FILTER"

      # 1) Checkout THIS repo (tests repo) always at main with full history so we can branch & push
      - name: Checkout tests repo (this repo)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: true

      # 2) Checkout the APP repo to a subfolder at the requested SHA/branch
      - name: Checkout app repo (Hob-shop) at provided SHA/branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.APP_REPO }}
          ref: ${{ env.APP_REF }}
          path: hob-shop
          fetch-depth: 0

      # 3) Setup Python
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install autoheal CLI
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ./autoheal_fw
          python -m pip install pyyaml

      # 4) Write config.yaml (LLM=OpenAI; RN patterns for mapping)
      - name: Write config.yaml for CLI (OpenAI + RN patterns)
        run: |
          mkdir -p autoheal_fw/config
          cat > autoheal_fw/config/config.yaml <<'CFG'
          app:
            platform: react_native

            # Highest-priority exact RN testID → logical (still helpful as hints)
            testid_to_logical:
              product_sku_hoodie:  us.mappings.yourOrders.hoodieProduct
              product_sku_cap:     us.mappings.yourOrders.capProduct

            # Regex families so *_valNNNN variants are auto-mapped
            testid_patterns:
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct
              - match: "^product_sku_shirt.*$"
                logical: us.mappings.yourOrders.shirtProduct

            # Optional native patterns (kept for future native scanning)
            ios_patterns:
              - match: "^(settingsButton|.*SettingsButton.*)$"
                logical: us.mappings.account.menuSettingsButton

            android_patterns:
              - match: "^com\\.walmart\\.android\\.debug:id/account_header_settings.*$"
                logical: us.mappings.account.menuSettingsButton
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct

          source_files:
            react_native:
              - "src/catalog.ts"
              - "src/menu.ts"
            ios_native: []
            android_native: []

          llm:
            provider: openai
            openai_api_key: "${OPENAI_API_KEY:-}"
            anthropic_api_key: "${ANTHROPIC_API_KEY:-}"
            model: "gpt-4o"
            temperature: 0.1

          vectordb:
            provider: local
            api_key: ""
            index_name: "autoheal-failures"
            base_path: "./vector_index"

          vcs:
            provider: local
            github_token: "${GITHUB_TOKEN:-}"
            repo: "idcmurali1/Automation-test-framework-HOB"

          ci:
            provider: local

          artifact_store:
            path: "./artifacts"

          policy:
            file: "./policies/policy.yaml"

          logging:
            level: "INFO"
            patch_ledger: "./patches/ledger.jsonl"
          CFG

      # 5) Run the CLI to extract identifiers from app → update tests mappings → PR
      - name: Run autoheal (extract IDs → update mappings → PR)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<'PY'
          import os, json, subprocess, sys
          cfg_path = "autoheal_fw/config/config.yaml"
          branch = f"autoheal/app-ids-{os.environ.get('GITHUB_RUN_ID')}"
          logical = os.environ.get("LOGICAL_FILTER","").strip()
          args = [
            sys.executable, "-m", "autoheal.cli", "update-mappings-from-app",
            "--app_repo", "hob-shop",
            "--tests_repo", ".",
            "--logical", logical,
            "--branch", branch,
            "--config", cfg_path,
            "--github_token", os.environ.get("GITHUB_TOKEN",""),
          ]
          print("Running:", " ".join(args))
          subprocess.run(args, check=False)
          PY

      # 6) Upload artifacts (prompt, plan, summary, PR json, etc.)
      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autoheal-artifacts
          path: |
            artifacts/**
            autoheal_fw/config/config.yaml
            patches/**
          if-no-files-found: warn
