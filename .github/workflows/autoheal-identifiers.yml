name: Autoheal - update identifiers from app

on:
  workflow_dispatch:
    inputs:
      app_repo:
        description: "App repository (owner/repo)"
        required: true
        default: idcmurali1/Automation-test-framework-HOB
      ref:
        description: "Git ref to scan (branch/SHA)"
        required: false
        default: main
      logical:
        description: "Filter to one logical mapping (optional)"
        required: false
        default: ""
  repository_dispatch:
    types: [app_change]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: autoheal-identifiers-${{ github.ref }}
  cancel-in-progress: false

jobs:
  update-identifiers:
    name: extract IDs → update mappings → PR
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      LLM_PROVIDER: openai
    steps:
      - name: Checkout tests repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine app repo/ref
        id: app
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            APP_REPO="${{ github.repository }}"
            # Prefer branch from payload, otherwise SHA; fallback to default branch ref
            if [[ -n "${{ github.event.client_payload.branch }}" ]]; then
              APP_REF="${{ github.event.client_payload.branch }}"
            elif [[ -n "${{ github.event.client_payload.sha }}" ]]; then
              APP_REF="${{ github.event.client_payload.sha }}"
            else
              APP_REF="${{ github.ref_name }}"
            fi
          else
            APP_REPO="${{ inputs.app_repo }}"
            APP_REF="${{ inputs.ref }}"
          fi
          echo "repo=$APP_REPO" >> "$GITHUB_OUTPUT"
          echo "ref=$APP_REF" >> "$GITHUB_OUTPUT"

      - name: Checkout app repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.app.outputs.repo }}
          ref: ${{ steps.app.outputs.ref }}
          path: app-src
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install autoheal CLI
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -U pip
          pip install -e .

      - name: Write config.yaml
        shell: bash
        run: |
          mkdir -p autoheal_fw/config artifacts vector_index
          cat > autoheal_fw/config/config.yaml <<'CFG'
          app:
            platform: react_native
            testid_to_logical:
              product_sku_hoodie: us.mappings.yourOrders.hoodieProduct
              product_sku_cap: us.mappings.yourOrders.capProduct
            testid_patterns:
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct
              - match: "^product_sku_shirt.*$"
                logical: us.mappings.yourOrders.shirtProduct
            ios_patterns:
              - match: "^(settingsButton|.*SettingsButton.*)$"
                logical: us.mappings.account.menuSettingsButton
            android_patterns:
              - match: "^com\\.walmart\\.android\\.debug:id/account_header_settings.*$"
                logical: us.mappings.account.menuSettingsButton
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct
          source_files:
            react_native:
              - "src/catalog.ts"
              - "src/menu.ts"
          llm:
            provider: ${LLM_PROVIDER:-openai}
            openai_api_key: "${OPENAI_API_KEY:-}"
            anthropic_api_key: "${ANTHROPIC_API_KEY:-}"
            model: "gpt-4o"
            temperature: 0.1
          vectordb:
            provider: local
            api_key: ""
            index_name: "autoheal-failures"
            base_path: "./vector_index"
          vcs:
            provider: local
            github_token: "${GITHUB_TOKEN:-}"
            repo: "idcmurali1/Automation-test-framework-HOB"
          ci:
            provider: local
          artifact_store:
            path: "./artifacts"
          policy:
            file: "./policies/policy.yaml"
          logging:
            level: "INFO"
            patch_ledger: "./patches/ledger.jsonl"
          CFG

      - name: (Optional) Build simple RAG manifest
        shell: bash
        run: |
          source venv/bin/activate
          python - <<'PY'
          import json, os, glob
          os.makedirs("artifacts", exist_ok=True)
          manifest={"repo":"${{ steps.app.outputs.repo }}","ref":"${{ steps.app.outputs.ref }}","files":[]}
          for p in glob.glob("app-src/**/*.*", recursive=True):
            if os.path.isfile(p) and p.split(".")[-1] in {"ts","tsx","js","jsx","java","kt","swift"}:
              manifest["files"].append(p)
          open("artifacts/rag_index_manifest_update_from_app.json","w").write(json.dumps(manifest, indent=2))
          PY

      - name: Run CLI (update identifiers from app)
        shell: bash
        run: |
          source venv/bin/activate
          python -m autoheal.cli update-mappings-from-app \
            --app_repo "$GITHUB_WORKSPACE/app-src" \
            --tests_repo "$GITHUB_WORKSPACE" \
            --logical "${{ inputs.logical || '' }}" \
            --branch "autoheal/app-update-${{ github.run_id }}" \
            --config "autoheal_fw/config/config.yaml" \
            --github_token "${GITHUB_TOKEN}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autoheal-identifiers
          path: |
            artifacts/**
            autoheal_fw/config/config.yaml
