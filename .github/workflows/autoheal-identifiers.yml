name: Autoheal identifiers (extract IDs -> update mappings -> PR)

on:
  workflow_dispatch:
    inputs:
      app_repo:
        description: "App repository to scan (owner/repo). Leave empty to use default."
        required: false
        type: string
      ref:
        description: "Branch or tag in the app repo. Leave empty to use default."
        required: false
        type: string

  repository_dispatch:
    types: [app_change]

  push:
    branches: [main]
    paths:
      - "hob-shop/**"
      - "autoheal_fw/**"
      - ".github/workflows/autoheal-identifiers.yml"

permissions:
  contents: write
  pull-requests: write

jobs:
  update-identifiers:
    runs-on: ubuntu-latest

    env:
      # Set your defaults here
      DEFAULT_APP_REPO: idcmurali1/hob-shop
      DEFAULT_APP_REF: main

    steps:
      - name: Checkout tests repo (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine app repo/ref
        id: app
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          PAYLOAD_APP_REPO: ${{ github.event.client_payload.app_repo }}
          PAYLOAD_REF: ${{ github.event.client_payload.ref }}
          PAYLOAD_BRANCH: ${{ github.event.client_payload.branch }}
          INPUT_APP_REPO: ${{ inputs.app_repo }}
          INPUT_REF: ${{ inputs.ref }}
        run: |
          set -euo pipefail
          APP_REPO="${INPUT_APP_REPO:-${PAYLOAD_APP_REPO:-$DEFAULT_APP_REPO}}"
          WANT_REF="${INPUT_REF:-${PAYLOAD_REF:-${PAYLOAD_BRANCH:-$DEFAULT_APP_REF}}}"

          echo "Requested app repo: $APP_REPO"
          echo "Requested app ref:  $WANT_REF"

          if git ls-remote --heads --tags "https://github.com/${APP_REPO}" "${WANT_REF}" >/dev/null 2>&1; then
            APP_REF="$WANT_REF"
          else
            echo "Ref '${WANT_REF}' not found in ${APP_REPO}; falling back to '${DEFAULT_APP_REF}'."
            APP_REF="$DEFAULT_APP_REF"
          fi

          {
            echo "repo=${APP_REPO}"
            echo "ref=${APP_REF}"
          } >> "$GITHUB_OUTPUT"

          echo "Using app repo: ${APP_REPO} @ ${APP_REF}"

      - name: Checkout app repo at requested ref
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.app.outputs.repo }}
          ref: ${{ steps.app.outputs.ref }}
          path: app-src
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install autoheal framework
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -U pip
          pip install -e ./autoheal_fw

      - name: Write config.yaml for CLI (OpenAI + RN patterns)
        run: |
          mkdir -p autoheal_fw/config
          cat > autoheal_fw/config/config.yaml <<'YAML'
          app:
            platform: react_native

            # Highest precedence: exact mappings
            testid_to_logical:
              product_sku_hoodie:  us.mappings.yourOrders.hoodieProduct
              product_sku_cap:     us.mappings.yourOrders.capProduct

            # Flexible families (regex)
            testid_patterns:
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct
              - match: "^product_sku_shirt.*$"
                logical: us.mappings.yourOrders.shirtProduct

          source_files:
            react_native:
              - "src/catalog.ts"
              - "src/menu.ts"

          llm:
            provider: openai
            openai_api_key: "${OPENAI_API_KEY:-}"
            anthropic_api_key: "${ANTHROPIC_API_KEY:-}"
            model: "gpt-4o"
            temperature: 0.1

          vectordb:
            provider: local
            api_key: ""
            index_name: "autoheal-failures"
            base_path: "./vector_index"

          vcs:
            provider: local
            github_token: "${GITHUB_TOKEN:-}"
            repo: "idcmurali1/Automation-test-framework-HOB"

          ci:
            provider: local

          artifact_store:
            path: "./artifacts"

          policy:
            file: "./policies/policy.yaml"

          logging:
            level: "INFO"
            patch_ledger: "./patches/ledger.jsonl"
          YAML

      - name: Run autoheal (extract -> update -> PR)
        id: run_cli
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_REPO: ${{ steps.app.outputs.repo }}
          BRANCH: autoheal/rn-sync-${{ github.run_id }}
        run: |
          set -e
          source venv/bin/activate

          # Log LLM info (so we can confirm OpenAI is used)
          python - <<'PY'
          import json, os, pathlib
          info = {
              "provider": "openai",
              "model": "gpt-4o",
              "has_openai_key": bool(os.getenv("OPENAI_API_KEY")),
          }
          pathlib.Path("llm_info.json").write_text(json.dumps(info, indent=2))
          PY

          python -m autoheal.cli update-mappings-from-app \
            --app_repo   "${APP_REPO}" \
            --tests_repo "${GITHUB_WORKSPACE}" \
            --logical    "" \
            --branch     "${BRANCH}" \
            --config     "autoheal_fw/config/config.yaml" \
            --github_token "${GITHUB_TOKEN}" || true

          # Capture PR URL if one was created
          if [[ -f pull_request.json ]]; then
            PR_URL="$(python - <<'PY'
          import json, pathlib
          p = pathlib.Path("pull_request.json")
          print(json.loads(p.read_text()).get("html_url","") if p.exists() else "")
          PY
          )"
            if [[ -n "$PR_URL" ]]; then
              echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Upload artifacts (debug)
        uses: actions/upload-artifact@v4
        with:
          name: autoheal-identifiers-artifacts
          if-no-files-found: ignore
          path: |
            artifacts/**
            autoheal_fw/config/config.yaml
            pull_request.json
            identifiers_discovered*.json
            rag_index_manifest_*.json
            llm_info.json
