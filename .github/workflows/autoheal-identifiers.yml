name: Autoheal:(extract IDs -> update mappings -> PR)

on:
  repository_dispatch:
    types: [app_change]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-identifiers:
    runs-on: ubuntu-latest

    env:
      # Make sure these secrets exist in: Settings -> Secrets and variables -> Actions
      LLM_PROVIDER: openai
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout tests repo (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Decide which ref (sha/branch) to use for hob-shop; fallback to main if missing
      - name: Decide app ref (hob-shop)
        id: appref
        shell: bash
        run: |
          set -euo pipefail
          APP_REPO="idcmurali1/hob-shop"
          WANT_REF="${{ github.event.client_payload.sha || github.event.client_payload.branch || 'main' }}"

          echo "Requested ref: ${WANT_REF}"

          if git ls-remote --heads --tags "https://github.com/${APP_REPO}.git" "${WANT_REF}" | grep -q . ; then
            REF="${WANT_REF}"
          else
            # If WANT_REF looks like a full SHA, try that; otherwise fallback to main
            if [[ "${WANT_REF}" =~ ^[0-9a-f]{7,40}$ ]] && git ls-remote "https://github.com/${APP_REPO}.git" "${WANT_REF}" | grep -q . ; then
              REF="${WANT_REF}"
            else
              echo "Ref '${WANT_REF}' not found in ${APP_REPO}; falling back to 'main'."
              REF="main"
            fi
          fi

          echo "repo=${APP_REPO}" >> "$GITHUB_OUTPUT"
          echo "ref=${REF}"       >> "$GITHUB_OUTPUT"

      - name: Checkout hob-shop at requested ref
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.appref.outputs.repo }}
          ref:        ${{ steps.appref.outputs.ref }}
          path:       hob-shop
          fetch-depth: 0

      - name: Checkout autoheal framework
        uses: actions/checkout@v4
        with:
          repository: idcmurali1/autoheal_production
          path: autoheal_fw
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # No pip install of the framework; we run it via PYTHONPATH to avoid editable-install errors
      - name: Create venv and base deps
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          # Minimal deps your framework uses when not installed as a package
          pip install pyyaml requests scikit-learn

      - name: Write config.yaml for CLI (OpenAI + RN patterns)
        run: |
          mkdir -p autoheal_fw/config
          cat > autoheal_fw/config/config.yaml <<'YAML'
          app:
            platform: react_native

            # Exact RN testID -> logical (highest priority)
            testid_to_logical:
              product_sku_hoodie:  us.mappings.yourOrders.hoodieProduct
              product_sku_cap:     us.mappings.yourOrders.capProduct

            # Flexible families (regex)
            testid_patterns:
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct
              - match: "^product_sku_shirt.*$"
                logical: us.mappings.yourOrders.shirtProduct

            ios_patterns:
              - match: "^(settingsButton|.*SettingsButton.*)$"
                logical: us.mappings.account.menuSettingsButton

            android_patterns:
              - match: "^com\\.walmart\\.android\\.debug:id/account_header_settings.*$"
                logical: us.mappings.account.menuSettingsButton
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct

          source_files:
            react_native:
              - "src/catalog.ts"
              - "src/menu.ts"
            ios_native:
              - "ios/Views/ProductView.swift"
              - "ios/Controllers/MenuController.swift"
            android_native:
              - "android/app/src/main/java/com/walmart/app/CatalogActivity.java"
              - "android/app/src/main/java/com/walmart/app/MenuActivity.java"

          llm:
            provider: ${LLM_PROVIDER:-openai}
            openai_api_key: "${OPENAI_API_KEY:-}"
            anthropic_api_key: "${ANTHROPIC_API_KEY:-}"
            model: "gpt-4o"
            temperature: 0.1

          vectordb:
            provider: local
            api_key: ""
            index_name: "autoheal-failures"
            base_path: "./vector_index"

          vcs:
            provider: local
            github_token: "${GITHUB_TOKEN:-}"
            repo: "idcmurali1/Automation-test-framework-HOB"

          ci:
            provider: local

          artifact_store:
            path: "./artifacts"

          policy:
            file: "./policies/policy.yaml"

          logging:
            level: "INFO"
            patch_ledger: "./patches/ledger.jsonl"
          YAML

      - name: Show config used (debug)
        run: |
          echo "---- USING CONFIG ----"
          sed -n '1,220p' "$GITHUB_WORKSPACE/autoheal_fw/config/config.yaml"

      - name: Configure git identity for the commit
        run: |
          git config user.name  "autoheal-bot"
          git config user.email "autoheal-bot@users.noreply.github.com"

      - name: Run autoheal (extract IDs -> update mappings -> PR)
        id: autoheal
        env:
          PYTHONPATH: ${{ github.workspace }}/autoheal_fw
        run: |
          set -euo pipefail
          source venv/bin/activate
          python -m autoheal.cli update-mappings-from-app \
            --app_repo   "$GITHUB_WORKSPACE/hob-shop" \
            --tests_repo "$GITHUB_WORKSPACE" \
            --logical "" \
            --branch "autoheal/rn-sync-${{ github.run_id }}" \
            --config "$GITHUB_WORKSPACE/autoheal_fw/config/config.yaml" \
            --github_token "${GITHUB_TOKEN}" || true

          # Pull PR URL if present (no heredoc needed)
          if [[ -f pull_request.json ]]; then
            PR_URL="$(python -c "import json, pathlib; p=pathlib.Path('pull_request.json'); print(json.load(p.open()).get('html_url','')) if p.exists() else print('')")"
            if [[ -n "$PR_URL" ]]; then
              echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autoheal-identifiers-artifacts
          if-no-files-found: ignore
          path: |
            artifacts/**
            autoheal_fw/config/config.yaml
            pull_request.json
            identifiers_discovered*.json
            rag_index_manifest_*.json
            llm_info.json
