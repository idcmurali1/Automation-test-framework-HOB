name: Autoheal:(extract IDs -> update mappings -> PR)

on:
  workflow_dispatch:
    inputs:
      app_repo:
        description: "App repository to scan (owner/repo). Leave empty to use default."
        required: false
        type: string
      ref:
        description: "Branch or tag in the app repo. Leave empty to use default."
        required: false
        type: string
  repository_dispatch:
    types: [app_change]
  push:
    paths:
      - "hob-shop/**"
      - "autoheal/**"
      - "autoheal_fw/**"
      - ".github/workflows/autoheal-identifiers.yml"

jobs:
  update-identifiers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout tests repo (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- Surgical fix #1: pick the app repo/ref robustly and default to hob-shop/main ---
      - name: Determine app repo/ref
        id: app
        shell: bash
        env:
          DEFAULT_APP_REPO: idcmurali1/hob-shop   # <— your APP repo here
          DEFAULT_APP_REF: main
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            APP_REPO="${{ github.event.client_payload.app_repo || env.DEFAULT_APP_REPO }}"
            WANT_REF="${{ github.event.client_payload.ref || github.event.client_payload.branch || env.DEFAULT_APP_REF }}"
          else
            APP_REPO="${{ inputs.app_repo || env.DEFAULT_APP_REPO }}"
            WANT_REF="${{ inputs.ref || env.DEFAULT_APP_REF }}"
          fi

          echo "Requested app repo: $APP_REPO"
          echo "Requested app ref:  $WANT_REF"

          if git ls-remote --exit-code --heads --tags "https://github.com/${APP_REPO}" "$WANT_REF" >/dev/null 2>&1; then
            APP_REF="$WANT_REF"
          else
            echo "Ref '$WANT_REF' not found in $APP_REPO; defaulting to ${DEFAULT_APP_REF}"
            APP_REF="${DEFAULT_APP_REF}"
          fi

          echo "repo=$APP_REPO" >> "$GITHUB_OUTPUT"
          echo "ref=$APP_REF"  >> "$GITHUB_OUTPUT"
          echo "Using app repo: $APP_REPO @ $APP_REF"

      - name: Checkout app repo at requested ref
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.app.outputs.repo }}
          ref: ${{ steps.app.outputs.ref }}
          path: app-src
          fetch-depth: 1

      # --- Surgical fix #2: install package from an existing path (root or autoheal/) ---
      - name: Install autoheal framework
        shell: bash
        run: |
          set -euo pipefail
          python -m venv venv
          source venv/bin/activate
          python -m pip install -U pip

          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            PKG_DIR="."
          elif [ -f autoheal/pyproject.toml ] || [ -f autoheal/setup.cfg ] || [ -f autoheal/setup.py ]; then
            PKG_DIR="autoheal"
          else
            echo "❌ Could not find package metadata (pyproject.toml/setup.*). Tree:"
            find . -maxdepth 2 -type f -name 'pyproject.toml' -o -name 'setup.cfg' -o -name 'setup.py'
            exit 1
          fi

          echo "Installing package from: $PKG_DIR"
          python -m pip install -e "$PKG_DIR"

      - name: Write config.yaml for CLI (OpenAI + RN patterns)
        shell: bash
        env:
          LLM_PROVIDER: openai
        run: |
          set -euo pipefail
          mkdir -p autoheal_fw/config
          cat > autoheal_fw/config/config.yaml <<'YAML'
          app:
            platform: react_native
            testid_to_logical:
              product_sku_hoodie:  us.mappings.yourOrders.hoodieProduct
              product_sku_cap:     us.mappings.yourOrders.capProduct
            testid_patterns:
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct
              - match: "^product_sku_shirt.*$"
                logical: us.mappings.yourOrders.shirtProduct
            ios_patterns:
              - match: "^(settingsButton|.*SettingsButton.*)$"
                logical: us.mappings.account.menuSettingsButton
            android_patterns:
              - match: "^com\\.walmart\\.android\\.debug:id/account_header_settings.*$"
                logical: us.mappings.account.menuSettingsButton
              - match: "^product_sku_hoodie.*$"
                logical: us.mappings.yourOrders.hoodieProduct
              - match: "^product_sku_cap.*$"
                logical: us.mappings.yourOrders.capProduct

          source_files:
            react_native:
              - "src/catalog.ts"
              - "src/menu.ts"

          llm:
            provider: ${LLM_PROVIDER:-openai}
            openai_api_key: "${OPENAI_API_KEY:-}"
            anthropic_api_key: "${ANTHROPIC_API_KEY:-}"
            model: "gpt-4o"
            temperature: 0.1

          vectordb:
            provider: local
            api_key: ""
            index_name: "autoheal-failures"
            base_path: "./vector_index"

          vcs:
            provider: local
            github_token: "${GITHUB_TOKEN:-}"
            repo: "idcmurali1/Automation-test-framework-HOB"

          ci:
            provider: local

          artifact_store:
            path: "./artifacts"

          policy:
            file: "./policies/policy.yaml"

          logging:
            level: "INFO"
            patch_ledger: "./patches/ledger.jsonl"
          YAML

      - name: Run autoheal (extract IDs -> update mappings -> PR)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          source venv/bin/activate

          BRANCH="autoheal/rn-sync-${{ github.run_id }}"
          python -m autoheal.cli update-mappings-from-app \
            --app_repo     "${{ steps.app.outputs.repo }}" \
            --tests_repo   "$PWD" \
            --branch       "${BRANCH}" \
            --config       "autoheal_fw/config/config.yaml" \
            --github_token "${GITHUB_TOKEN}" || true

          # Read PR URL safely (no heredoc/YAML pitfalls)
          PR_URL=$(python -c 'import json,os,sys; p="pull_request.json"; print(json.load(open(p)).get("html_url","") if os.path.exists(p) else "")')
          if [[ -n "$PR_URL" ]]; then
            echo "pr_url=$PR_URL" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload artifacts (debug)
        uses: actions/upload-artifact@v4
        with:
          name: autoheal-identifiers-artifacts
          if-no-files-found: ignore
          path: |
            artifacts/**
            autoheal_fw/config/config.yaml
            pull_request.json
            identifiers_discovered*.json
            identifiers_update_plan.json
            identifiers_update_summary.json
            rag_index_manifest_*.json
            llm_info.json
