inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - pr:
          scheduling: cancelRunning
          requiredLabels:
            - "ca-e2e"
      - push:
          manualOnly: true

      - manual:
          name: Run iOS e2e English App Test - Staging
          call: run_build(TEST_TAGS = 'ca_authpoc', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS = 'iosStaging', REPORT_ID = "9")
      
      - cron:
          spec: 30 8 * * *
          call: run_build(TEST_TAGS = 'ca_authpoc', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS = 'iosStaging', REPORT_ID = "9")

      - manual:
          name: Run iOS e2e French App Test - Staging
          call: run_build(TEST_TAGS = 'fr_ca', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "10")

      - cron:
          spec: 30 8 * * *
          call: run_build(TEST_TAGS = 'fr_ca', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "10")

      - manual:
          name: Run iOS e2e English GO EXP Test - Staging
          call: run_build(TEST_TAGS = 'exp_go', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "11")

      - cron:
          spec: 0 10 * * *
          call: run_build(TEST_TAGS = 'exp_go', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "11")

      - manual:
          name: Run iOS e2e French GO EXP Test - Staging
          call: run_build(TEST_TAGS = 'exp_go_fr', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "12")

      - cron:
          spec: 0 10 * * *
          call: run_build(TEST_TAGS = 'exp_go_fr', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "12")

      - manual:
          name: Run iOS e2e English POJ Test - Staging
          call: run_build(TEST_TAGS = 'ca_poj', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "13")

      - cron:
          spec: 0 10 * * *
          call: run_build(TEST_TAGS = 'ca_poj', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "13")

      - manual:
          name: Run iOS e2e French POJ Test - Staging
          call: run_build(TEST_TAGS = 'fr_poj', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "14")

      - cron:
          spec: 0 10 * * *
          call: run_build(TEST_TAGS = 'fr_poj', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "14")
  

  - spec: ca/release-latest
    scheduling: concurrent

    triggers:
      - pr:
          scheduling: cancelRunning
          requiredLabels:
            - "ca-e2e"
      - push:
          manualOnly: true

      - manual:
          name: Run iOS e2e English App Test - Staging
          call: run_release_build(TEST_TAGS = 'ca_authpoc', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS = 'iosStaging', REPORT_ID = "9")
      
      - cron:
          spec: 30 19 * * *
          call: run_release_build(TEST_TAGS = 'ca_authpoc', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS = 'iosStaging', REPORT_ID = "9")

      - manual:
          name: Run iOS e2e French App Test - Staging
          call: run_release_build(TEST_TAGS = 'fr_ca', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "10")

      - cron:
          spec: 30 19 * * *
          call: run_release_build(TEST_TAGS = 'fr_ca', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "10")

      - manual:
          name: Run iOS e2e English GO EXP Test - Staging
          call: run_release_build(TEST_TAGS = 'exp_go', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "11")

      - cron:
          spec: 0 13 * * *
          call: run_release_build(TEST_TAGS = 'exp_go', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "11")

      - manual:
          name: Run iOS e2e French GO EXP Test - Staging
          call: run_release_build(TEST_TAGS = 'exp_go_fr', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "12")

      - cron:
          spec: 0 13 * * *
          call: run_release_build(TEST_TAGS = 'exp_go_fr', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "12")

      - manual:
          name: Run iOS e2e English POJ Test - Staging
          call: run_release_build(TEST_TAGS = 'ca_poj', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "13")

      - cron:
          spec: 30 19 * * *
          call: run_release_build(TEST_TAGS = 'ca_poj', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "13")

      - manual:
          name: Run iOS e2e French POJ Test - Staging
          call: run_release_build(TEST_TAGS = 'fr_poj', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "14")

      - cron:
          spec: 30 19 * * *
          call: run_release_build(TEST_TAGS = 'fr_poj', SAUCE_APP = 'storage:filename=ca-walmart-release-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "14")

envs:
  global:
    variables:
      MARKET: ca
      SAUCE_USERNAME: CanadaMobile
      SAUCE_ACCESS_KEY: be7b5ef5-86d1-450d-94ba-f3234f736ab8
      POST_TO_SPLUNK: false
      POST_TO_XRAY: false
      POST_TO_ES: true

  run_iOS_development_branch:
    variables:
      APP_PLATFORM: iOS
      SLACK_CHANNEL: r2-ca-glass-test-result
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: ${MARKET}/test/dependencies/ios/ios-default.yaml
      GLASS_ENV: staging
      glassEnv: '{"env":{"config":"{\"environment\":\"${GLASS_ENV:staging}\"}"},"args":["-kGlassExpEnabled","true","-ca.walmart.px.skip-catcha","YES"]}'
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *Tag*: ${TEST_TAGS}\n
        *App Build*: ${SAUCE_APP}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Environment*: ${GLASS_ENV} iOS -v${BUILD_APP_VERSION}\n
        *Report Link*: ${REPORT_URL}"

  run_iOS_release_branch:
    variables:
      SLACK_CHANNEL: r2-ca-release-branch-report
      APP_PLATFORM: iOS
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: ${MARKET}/test/dependencies/ios/ios-default.yaml
      GLASS_ENV: staging
      glassEnv: '{"env":{"config":"{\"environment\":\"${GLASS_ENV:staging}\"}"},"args":["-kGlassExpEnabled","true","-ca.walmart.px.skip-catcha","YES"]}'
      USE_TEST_REPORT: true
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *Tag*: ${TEST_TAGS}\n
        *App Build*: ${SAUCE_APP}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Environment*: ${GLASS_ENV} iOS -v${BUILD_APP_VERSION}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"

flows:

  # Publishing report
  publish_report:
    try:
      - publishReport:
          context: ${REPORT_ID}${TEST_SESSION_ID}
          dir: report
          index: index.html
          verbose: true
      - var(REPORT_URL):
        - shell (name Report URL): |
            REPORT_VALUE=PUBLISH_REPORT_${REPORT_ID}${TEST_SESSION_ID}
            echo ${!REPORT_VALUE}
    catch:
      - echo "Publish Report step failed. Please check Start R2 Test step. $flowErrorMessage"

  # generating saucelabs build url
  generate_sauce_labs_build_url:
    - shell (name Sauce Labs Build URL): |
        echo "https://app.saucelabs.com/archives/vdc?q=build:(r2-${TEST_SESSION_ID})"

  # Getting app version from saucelabs using api
  get_build_app_version:
    try:
      - var(VERSION_NAME = 'short_version')
      - var(STORAGE_NAME):
          - shell (name STORAGE_NAME): echo ${SAUCE_APP} | cut -f2 -d'='
      - var(BUILD_APP_VERSION):
          - shell (name BUILD_APP_VERSION): |
              curl -s -u "$SAUCE_USERNAME:$SAUCE_ACCESS_KEY" "https://api.us-west-1.saucelabs.com/v1/storage/files?per_page=1&name=${STORAGE_NAME}" | grep -o "\"${VERSION_NAME}\": \"[^\"]*\"" | cut -f4 -d'"' | cut -f1 -d"-"
      - echo "${BUILD_APP_VERSION}"
    catch:
      - echo "Unable to get build appVersion - $flowErrorMessage"

  # Assigning to variable and printing on report
  get_app_version:
    - call: get_build_app_version
    - var(APP_VERSION):
        - shell  (name Get App Version): echo ${BUILD_APP_VERSION}

  # generate test report in slack format
  get_test_report_slack_format:
    try:
      - shell (name Generate test report in slack format): |
          node ./ca/slack-output/generate-slack-output.js
      - var(SLACK_TEST_REPORT_MESSAGE):
        - shell (name Generate test report in slack format): |
            cat slackOutPut.txt
    catch:
      - echo "Unable to generate report - $flowErrorMessage"
      - exit 1

  pr:
    - parallel(failsafe):
      - call: run_build(TEST_TAGS = 'ca_authpoc', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS = 'iosStaging', REPORT_ID = "9")
      - call: run_build(TEST_TAGS = 'fr_ca', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "10")
      - call: run_build(TEST_TAGS = 'exp_go', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "11")
      - call: run_build(TEST_TAGS = 'exp_go_fr', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "12")
      - call: run_build(TEST_TAGS = 'ca_poj', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'looper', MAPPING_LABELS= 'iosStaging', REPORT_ID = "13")
      - call: run_build(TEST_TAGS = 'fr_poj', SAUCE_APP = 'storage:filename=ca-walmart-development-latest.zip', DEPENDENCY_PROFILE = 'fr_looper', MAPPING_LABELS= 'fr_stagingIos', REPORT_ID = "14")

  run_build:
    - call: build(run_iOS_development_branch)

  run_release_build:
    - call: build(run_iOS_release_branch)
