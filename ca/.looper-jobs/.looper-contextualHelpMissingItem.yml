inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - pr: 
          scheduling: cancelRunning
          requiredLabels:
            - "ca-help"
      - push:
          manualOnly: true

      - manual:
          name: Run Android Test - Staging
          call: run_staging_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')   

      - cron:
          spec: 0 0 * * *
          call: run_staging_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')

      - manual:
          name: Run Android French Test - Staging
          call: run_staging_fr_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')   

      - cron:
          spec: 0 0 * * *
          call: run_staging_fr_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')

      - manual:
          name: Run Android Test - Production
          call: run_production_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')   

      - cron:
          spec: 0 0 * * *
          call: run_production_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')

      - manual:
          name: Run Android French Test - Production
          call: run_production_fr_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')   

      - cron:
          spec: 0 0 * * *
          call: run_production_fr_android(TEST_TAGS = 'contextualHelpMissingItem', APP_BUILD_BRANCH = 'development-latest')
envs:
  global:
    variables:
      MARKET: ca
      SLACK_CHANNEL: contextualHelpMissingItem-regression
      SAUCE_USERNAME: CanadaMobile
      SAUCE_ACCESS_KEY: be7b5ef5-86d1-450d-94ba-f3234f736ab8
      POST_TO_SPLUNK: false
      POST_TO_XRAY: false
      POST_TO_ES: true

  env_android_fr_staging:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: ${MARKET}/test/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: looper_french
      GLASS_ENV: staging
      MAPPING_LABELS: fr_staging
      APP_PLATFORM: android
      SAUCE_APP: storage:filename=${MARKET}-glass-development-latest.apk

  env_android_staging:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: ${MARKET}/test/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: looper
      GLASS_ENV: staging
      MAPPING_LABELS: staging
      APP_PLATFORM: android
      SAUCE_APP: storage:filename=${MARKET}-glass-development-latest.apk

  env_android_fr_production:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: ${MARKET}/test/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: looper_prod
      GLASS_ENV: production
      MAPPING_LABELS: fr_production
      APP_PLATFORM: android
      SAUCE_APP: storage:filename=${MARKET}-glass-development-latest.apk  

  env_android_production:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: ${MARKET}/test/dependencies/android/android-default.yaml
      DEPENDENCY_PROFILE: looper_prod
      GLASS_ENV: production
      MAPPING_LABELS: production
      APP_PLATFORM: android
      SAUCE_APP: storage:filename=${MARKET}-glass-development-latest.apk  

flows:
  pr:
    - call: run_staging_android(TEST_TAGS = 'contextualHelpMissingItem')
    - call: run_production_android(TEST_TAGS = 'contextualHelpMissingItem')
    - call: run_staging_fr_android(TEST_TAGS = 'contextualHelpMissingItem')
    - call: run_production_fr_android(TEST_TAGS = 'contextualHelpMissingItem')

  run_staging_android:
    - call: build(env_android_staging)
  run_staging_fr_android:
    - call: build(env_android_fr_staging)
  run_production_android:
    - call: build(env_android_production)
  run_production_fr_android:
    - call: build(env_android_fr_production)

