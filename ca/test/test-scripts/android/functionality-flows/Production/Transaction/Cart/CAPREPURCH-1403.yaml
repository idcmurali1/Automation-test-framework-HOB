general:
  platform: android
  tags: ca-function-run, cart-001
  testCaseId: cart-001
  inherit:
    filesRunAll:
      - ca-errors-helpers.yaml

scenarios:
  - name: Before
    before: false
    endTestOnFailure: true
    flow:
      - log: Execute before scenarios

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      - log: 'R2_SUBFLOW_PRE_TRANSACTION'
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  - name: Add GO, GM(1P and 3P), MX, and Freight to cart and validate all product are present in cart.
    flow:
      - log:
          message: Add GO, GM(1P and 3P), MX, and Freight to cart and validate all product are present in cart.
          color: GREEN_BOLD

      - log: 
          message: Onboarding to app using postal code.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: ca.test.data.orleansZipCode
      - log: 
          message: Selecting store at HomePage.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.home.selectStore
          params:
            - name: Zip_Code
              string: ca.test.data.orleansZipCode
            - name: storeName
              string: ca.test.data.orleansStoreName
      - log: 
          message: Searching for a GO product with product name.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.goItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true 

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.productCategory

      # - log: 
      #     message: Extracting first product name from SRP.
      #     color: GREEN_BOLD

      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - log: 
          message: Storing product name to a variable.
          color: GREEN_BOLD

      - storeIn:
          key: go_item
          value: ${productName}

      # - log: 
      #     message: Adding product to cart and extracting product price.
      #     color: GREEN_BOLD

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - log: 
          message: Storing product cost to a variable
          color: GREEN_BOLD

      - storeIn:
          key: go_item_price
          value: ${productCost}

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.1pGmItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true  

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.product_1_sku
      
      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: gm_1p_item
          value: ${productName}
      
      - log: ${gm_1p_item}

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: gm_1p_item_price
          value: ${productCost}
      
      - log: ${gm_1p_item_price}

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.3pGmItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true 

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.productCategory.GM
      
      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: gm_3p_item
          value: ${productName}
      
      - log: ${gm_3p_item}

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: gm_3p_item_price
          value: ${productCost}
      
      - log: ${gm_3p_item_price}

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.mxItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true 

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.product_2_sku
      
      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: mx_item
          value: ${productName}
      
      - log: ${mx_item}

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: mx_item_price
          value: ${productCost}
      
      - log:
          message: ${mx_item_price}
          color: GREEN_BOLD

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.freightItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.product.Freight
      
      # - log:
      #     message: Extracting product name from SRP.
      #     color: GREEN_BOLD

      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: freight_item
          value: ${productName}
      
      - log: 
          message: ${freight_item}
          color: GREEN_BOLD
      
      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: freight_item_price
          value: ${productCost}
      
      - log:
          message: ${freight_item_price}
          color: GREEN_BOLD

      - log:
          message: Asserting cart quantity.
          color: GREEN_BOLD

      - executeFunction:
           name: ca.test.functions.cart.assertCartQuantity
           params:
            - name: cartQuantity
              string: ca.test.data.sku5_qty

      - log:
          message: Asserting cart total.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.assertCartTotal
          params:
            - name: subTotal
              string: ${totalPrice}

# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      - log: 'R2_SUBFLOW_TRANSACTION'
# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

      - log:
          message: Navigating to cart.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.global.navigation.goToCart

      - log:
          message: Verifying ${go_item} product tile in cart page.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.verifyProductTitleWithPrice
          params:
            - name: productName
              string: ${go_item}
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: productPrice
              string: ${go_item_price}

      - log:
          message: Verifying ${mx_item} product tile in cart page.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.verifyProductTitleWithPrice
          params:
            - name: productName
              string: ${mx_item}
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: productPrice
              string: ${mx_item_price}

      - log:
          message: Expanding the product tile if compressed.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.productCardExpansion

      - log:
          message: Verifying ${freight_item} product tile in cart page.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.verifyProductTitleWithPrice
          params:
            - name: productName
              string: ${freight_item}
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: productPrice
              string: ${freight_item_price}

      - log:
          message: Verifying ${gm_1p_item} product tile in cart page.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.verifyProductTitleWithPrice
          params:
            - name: productName
              string: ${gm_1p_item}
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: productPrice
              string: ${gm_1p_item_price}
            # - name: scrollContainer
            #   string: ca.test.mappings.cart.fulfillmentMethod  

      - log:
          message: Verifying ${gm_3p_item} product tile in cart page.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.verifyProductTitleWithPrice
          params:
            - name: productName
              string: ${gm_3p_item}
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: productPrice
              string: ${gm_3p_item_price}
            # - name: scrollContainer
            #   string: ca.test.mappings.cart.fulfillmentMethod  

       # Proceed to continue to checkout
      - executeFunction:
          name: ca.test.functions.cart.proceedToCheckOut        

      - executeFunction:
          name: ca.test.functions.loginPage.userLogin
          params:
            - name: email 
              string: ca.test.data.cart001-android
            - name: password
              string: ca.test.data.functional.password  

      - executeFunction:
          name: ca.test.functions.reserveTimePage.bookRequiredSlotDate
          params:
            - name: requiredSlotDay
              string: ca.test.data.requiredSlotDay

      # Validating order card in check out page
      - executeFunction:
          name: ca.test.functions.checkout.validatingFulfillmentCard
          params:
            - name: fulfillmentType
              string: ca.test.data.cart003.fulfillmentTypePickup
        
      - executeFunction:
          name: ca.test.functions.checkoutPage.tapItemDetailsLink

      - executeFunction:
          name: ca.test.functions.checkoutPage.itemDetailsPage.validateProductDetails
          params:
            - name: productName
              string: ${go_item}

      - executeFunction:
          name: ca.test.functions.checkoutPage.itemDetailsPage.validateProductDetails
          params:
            - name: productName
              string: ${mx_item}

      - executeFunction:
          name: ca.test.functions.checkout.itemDetailsPage.tapCloseBtn

      # Validating order card in check out page
      - executeFunction:
          name: ca.test.functions.checkout.validatingFulfillmentCard
          params:
            - name: fulfillmentType
              string: ca.test.data.fulfillmentTypeShipping
 
      # Asserting delivery address
      - executeFunction:
          name: ca.test.functions.checkOut.assertingDeliveryAddress
          params:
            - name: fulfillmentType
              string: ca.test.data.fulfillmentTypeShipping
            - name: addressFirstLine
              string: ca.test.data.cart001.deliveryAddress
      
      - executeFunction:
          name: ca.test.functions.checkoutPage.tapItemDetailsLink

      - executeFunction:
          name: ca.test.functions.checkoutPage.itemDetailsPage.validateProductDetails
          params:
            - name: productName
              string: ${freight_item}
            
      - executeFunction:
          name: ca.test.functions.checkoutPage.itemDetailsPage.validateProductDetails
          params:
            - name: productName
              string: ${gm_1p_item}

      - executeFunction:
          name: ca.test.functions.checkoutPage.itemDetailsPage.validateProductDetails
          params:
            - name: productName
              string: ${gm_3p_item}

      - executeFunction:
          name: ca.test.functions.checkout.itemDetailsPage.tapCloseBtn
        
      # - executeFunction:
      #     name: ca.test.functions.checkOut.paymentOptions

      # - executeFunction:
      #     name: ca.test.functions.checkOut.payment.addCVV
      #     params:
      #       - name: cvv
      #         string: ca.test.data.cart001.cvv
    
      - executeFunction:
          name: ca.test.functions.checkOut.mobileContact.enterMobileNumber
          params:
            - name: phoneNumber
              string: ca.test.data.cart001.mobileNumber

      - executeFunction:
          name: ca.test.functions.checkOut.promoCodeValidation
     
      # - executeFunction:
      #     name: ca.test.functions.checkout.placeOrderButton    
      
      # - executeFunction:
      #     name: ca.test.functions.checkout.orderConfirmationPage.isPageDisplayed
      
      # - if:
      #     condition: "!${isReturnedDisplayed}"
      #     then:
      #       - failTest:
      #           message: "End Function: checkout.orderConfirmationPage.isPageDisplayed (Not Displayed)"

      # - executeFunction:
      #     name: ca.test.functions.orderConfirmationPage.validateScheduled$UnscheduledFulfillmentTypes
      #     params:
      #       - name: fulfillmentCondition
      #         string: ca.test.data.cart003.fulfillmentTypePickup
      #       - name: storeName
      #         string: ca.test.data.cart001.pickupStoreName
      #       - name: storeAddress
      #         string: ca.test.data.cart001.pickupStoreAddress

      # - executeFunction:
      #     name: ca.test.functions.orderConfirmationPage.validateScheduled$UnscheduledFulfillmentTypes
      #     params:
      #       - name: fulfillmentCondition
      #         string: ca.test.data.fulfillmentTypeShipping
      #       - name: addressAssertion
      #         string: ca.test.data.cart001.shippingAddress
    

  #After Scenarios
  - name: After
    after: true
    flow:
      - executeFunction:
          name: ca.test.functions.utils.afterSteps 