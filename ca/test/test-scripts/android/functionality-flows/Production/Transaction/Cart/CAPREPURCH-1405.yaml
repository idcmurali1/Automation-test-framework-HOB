#------------------------------------------------------------------------------
# Onboaring as registered user and change store
# Go to cart and Validate GO, GM (1P and 2P), MX and Freight EDD and product grouping in cart page.
#------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------------------------------
# Flow: cart-002
# User : Registered User
# Experience: A2C
# Validation: Cart Interaction OD
#
# Remark: 
#-------------------------------------------------------------------------------------------------------------------


general:
  platform: Android
  tags: cart-002, ca-function-run
  testCaseId: cart-002
  inherit:
    filesRunAll:
      - ca-errors-helpers.yaml

scenarios:
  - name: Before
    before: true
    endTestOnFailure: true
    flow:
      - log: Execute before steps

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
      - log: 'R2_SUBFLOW_PRE_TRANSACTION'
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #  
  - name: Main
    flow:
      - log: Start Main

      - getTimestamp:
          asDate: false
          storeIn: timestamp

      - executeFunction:
          name: ca.test.functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: ca.test.data.cart010.onboarding.zipCodeT6N0A9

      - log:
          message: Navigating to Sign In to account from home page.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.home.signIn

      - log:
          message: Putting user credentials.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.loginPage.userLogin
          params:
            - name: email
              string: ca.test.data.cart002.email
            - name: password
              string: ca.test.data.functional.password

      # Remove Item from cart
      - executeFunction:
          name: ca.test.functions.productSearch.checkItemsInCartAndRemovingThem

      - log:
          message: Searching for a GO product with product name.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.goItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true  

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.productCategory

      # - log:
      #     message: Extracting first product name from SRP.
      #     color: GREEN_BOLD

      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - log:
          message: Storing product name to a variable.
          color: GREEN_BOLD

      - storeIn:
          key: go_item
          value: ${productName}

      # - log:
      #     message: Adding product to cart and extracting product price.
      #     color: GREEN_BOLD

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - log:
          message: Storing product cost to a variable
          color: GREEN_BOLD

      - storeIn:
          key: go_item_price
          value: ${productCost}

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.1pGmItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true  

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.cart02.GM_1P_Item  

      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: gm_1p_item
          value: ${productName}

      - log: ${gm_1p_item}

     # Product SRP to PDP page
      - executeFunction:
          name: ca.test.functions.productSearch.srpToPdpPage
          params:
            - name: productName
              string: ${gm_1p_item}

      # Pdp product header validation
      - executeFunction:
          name: ca.test.functions.pdp.productHeaderContainer

      # Getting fulfillment date from pdp
      - executeFunction:
          name: ca.test.function.pdp.extractingFulfillmentDate

      # Initializing variable with shipping info of product
      - storeIn:
          key: GM_1P_Shipping_EED
          value: ${shipping}

      - log: ${GM_1P_Shipping_EED}

      # Initializing variable with pickup info of product
      - storeIn:
          key: GM_1P_Pickup_EED
          value: ${pickup}

      #extracting Fulfilled By Details
      - executeFunction:
          name: ca.test.functions.pdp.extractingFulfilledByDetails

      # Storing seller info in a variable
      - storeIn:
          key: GM_1P_SellerInfo
          value: ${sellerInfo}

      # Storing fulfillment by info in a variable
      - storeIn:
          key: product_1P_fulfillment
          value: ${fulfillmentInfo}

      - executeFunction:
          name: ca.test.functions.PDPpage.closePDPpage

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: gm_1p_item_price
          value: ${productCost}

      - log: ${gm_1p_item_price}

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart002.3pGmItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true  

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.cart02.GM_3P_Item  

      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: gm_3p_item
          value: ${productName}

      - log: ${gm_3p_item}

     # Product SRP to PDP page
      - executeFunction:
          name: ca.test.functions.productSearch.srpToPdpPage
          params:
            - name: productName
              string: ${gm_3p_item}

      # Pdp product header validation
      - executeFunction:
          name: ca.test.functions.pdp.productHeaderContainer

      # Getting fulfillment date from pdp
      - executeFunction:
          name: ca.test.function.pdp.extractingFulfillmentDate

      # Initializing variable with shipping info of product
      - storeIn:
          key: GM_3P_Shipping_EED
          value: ${shipping}

      # Initializing variable with pickup info of product
      - storeIn:
          key: GM_3P_Pickup_EED
          value: ${pickup}

      # extracting Fulfilled By Details
      - executeFunction:
          name: ca.test.functions.pdp.extractingFulfilledByDetails

      # Storing seller info in a variable
      - storeIn:
          key: GM_3P_SellerInfo
          value: ${sellerInfo}
      # Storing fulfillment by info in a variable
      - storeIn:
          key: product_3P_fulfillment
          value: ${fulfillmentInfo}

      - executeFunction:
          name: ca.test.functions.PDPpage.closePDPpage

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: gm_3p_item_price
          value: ${productCost}

      - log: ${gm_3p_item_price}

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.mxItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true  

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.cart02.itemSkuMX

      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: mx_item
          value: ${productName}

      - log: ${mx_item}

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: mx_item_price
          value: ${productCost}

      - log:
          message: ${mx_item_price}
          color: GREEN_BOLD

      - executeFunction:
          name: ca.functions.searchPage.searchItemArray
          params:
            - name: items
              string: ca.test.data.cart001.freightItemArray
            - name: quantity
              string: ca.test.data.product_1_qty
            - name: checkNonPromotionBadges
              string: true

      # - executeFunction:
      #     name: ca.test.functions.productSearch.searchAProduct
      #     params:
      #       - name: product
      #         string: ca.test.data.product.Freight

      # - log:
      #     message: Extracting product name from SRP.
      #     color: GREEN_BOLD

      # - executeFunction:
      #     name: ca.test.functions.productSearch.extractingFirstProductName

      - storeIn:
          key: freight_item
          value: ${productName}

      - log:
          message: ${freight_item}
          color: GREEN_BOLD

     # Product SRP to PDP page
      - executeFunction:
          name: ca.test.functions.productSearch.srpToPdpPage
          params:
            - name: productName
              string: ${freight_item}

      # Pdp product header validation
      - executeFunction:
          name: ca.test.functions.pdp.productHeaderContainer

      # Getting fulfillment date from pdp
      - executeFunction:
          name: ca.test.function.pdp.extractingFulfillmentDate

      # Initializing variable with shipping info of product
      - storeIn:
          key: product_2_shipping
          value: ${shipping}

      # Initializing variable with pickup info of product
      - storeIn:
          key: product_2_pickup
          value: ${pickup}

      # extracting Fulfilled By Details
      - executeFunction:
          name: ca.test.functions.pdp.extractingFulfilledByDetails

      # Storing seller info in a variable
      - storeIn:
          key: product_2_seller
          value: ${sellerInfo}

      # Storing fulfillment by info in a variable
      - storeIn:
          key: product_2_fulfillment
          value: ${fulfillmentInfo}

      - executeFunction:
          name: ca.test.functions.PDPpage.closePDPpage

      # - executeFunction:
      #     name: ca.test.functions.productSearch.addToCartCostExtractionSRP
      #     params:
      #       - name: quantity
      #         string: ca.test.data.product_1_qty

      - storeIn:
          key: freight_item_price
          value: ${productCost}

      - log:
          message: ${freight_item_price}
          color: GREEN_BOLD

      - log:
          message: Asserting cart quantity.
          color: GREEN_BOLD

      - executeFunction:
           name: ca.test.functions.cart.assertCartQuantity
           params:
            - name: cartQuantity
              string: ca.test.data.sku5_qty

      - log:
          message: Asserting cart total.
          color: GREEN_BOLD

# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  
      - log: 'R2_SUBFLOW_TRANSACTION'
# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  

      # navigate to cart
      - executeFunction:
          name: ca.test.functions.global.navigation.goToCart

      - log:
            message: Book a delivery slot
            color: GREEN_BOLD_BRIGHT

      # Clicking on reserve time button
      - executeFunction:
          name: ca.test.functions.cart.reserveTimePage

      # Validating reserve time page
      - executeFunction:
          name: ca.test.functions.reserveTimePageValidation

      # Reserving a slot
      - executeFunction:
          name: ca.test.functions.bookASlot.reserveTimePage.reserveStandardSlot
    
      - executeFunction:
          name: ca.test.functions.grocerySlot.dateTimeExtraction

      # Clicking on book a slot button
      - executeFunction:
          name: ca.test.functions.bookASlot.reserveTimePage.bookASlotButton
    
      - executeNode:
          file: ca/test/helpers/parseDeliverySlotForAssertion/parseDeliverySlotForAssertion.js
          args:
            - value: "Cart"
            - value: ${slot_details}
            - value: ${slot_time}
          getResponse:
            storeIn: cart_slot
      - log: ${cart_slot}
    
      - executeFunction:
          name: ca.test.functions.cart.groceryFulfillmentCard.detailsAssertion
          params:
            - name: fulfillmentType
              string: Pickup
            # - name: fulfillment
            #   string: ${cart_slot}
            - name: storeName
              string: ca.test.data.cart002.storeName

      - executeFunction:
          name: ca.test.functions.cart.validatingProductGrouping
          params:
            - name: fulfillmentType
              string: Pickup
            - name: productName
              string: ${go_item}

      - executeFunction:
          name: ca.test.functions.cart.validatingProductGrouping
          params:
            - name: fulfillmentType
              string: Pickup
            - name: productName
              string: ${mx_item}

      - executeFunction:
          name: ca.test.functions.cart.generalMerchandise.fulfillmentCard.dateRange
          params:
            - name: EED1
              string: ${GM_1P_Shipping_EED}
            - name: EED2
              string: $product_2_shipping
            - name: EED3
              string: $GM_3P_Shipping_EED

      - log:
          message: Expanding the product tile if compressed.
          color: GREEN_BOLD

      - executeFunction:
          name: ca.test.functions.cart.productCardExpansion

      - executeFunction:
          name: ca.test.function.cart.generalMerchandise.eedBasedGrouping
          params:
            - name: walmartDeliveryDate
              string: ${GM_1P_Shipping_EED}
            - name: itemsShippedByWalmart
              string: "2 items"
            - name: soldByWalmart
              string: ${GM_1P_SellerInfo}
            - name: general_merchandise
              string: ${gm_1p_item}
            - name: freight_merchandise
              string: ${freight_item}
            - name: 3pDeliveryDate
              string: ${GM_3P_Shipping_EED}
            - name: itemShippedByThirdParty
              string: "1 item"
            - name: soldByThirdParty
              string: ${GM_3P_SellerInfo}
            - name: third_party_merchandise
              string: ${gm_3p_item}

       # Proceed to continue to checkout
      - executeFunction:
          name: ca.test.functions.cart.proceedToCheckOut 

      # Validating order card in check out page
      - executeFunction:
          name: ca.test.functions.checkout.validatingFulfillmentCard
          params:
            - name: fulfillmentType
              string: ca.test.data.cart001.fulfillmentType    

      # Validating order card in check out page
      - executeFunction:
          name: ca.test.functions.checkout.validatingFulfillmentCard
          params:
            - name: fulfillmentType
              string: ca.test.data.cart001.fulfillmentTypeShipping                 

      - storeIn:
          key: testStatus
          value: passed
  
  - name: After
    after: true
    flow:
      - executeFunction:
          name: ca.test.functions.utils.afterSteps    