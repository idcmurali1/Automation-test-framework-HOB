inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: april15_wcp
    scheduling: concurrent

    triggers:
      - pr:
          scheduling: cancelRunning
      - push:
          manualOnly: true

      - manual:
          name: CA-Android
          call: CA_Android(DEPENDENCY_PROFILE = 'looper-prod-ca-english', MAPPING_LABELS= 'ca_android_teflon', SAUCE_APP='storage:filename=ca-walmart-release-latest.apk', REPORT_ID = "3")

      - manual:
          name: US-Android
          call: US_Android(DEPENDENCY_PROFILE = 'looper-prod-us-english', MAPPING_LABELS= 'us_en_android_teflon', SAUCE_APP= 'storage:filename=us-walmart-release-latest.apk', REPORT_ID = "4")

      - manual:
          name: MX-Android
          call: MX_Android(DEPENDENCY_PROFILE = 'looper-prod-mx-spanish', MAPPING_LABELS= 'mx_ea_android_teflon', SAUCE_APP='storage:filename=mx-walmart-release-latest.apk', REPORT_ID = "5")

      - manual:
          name: CA-iOS
          call: CA_iOS(DEPENDENCY_PROFILE = 'looper-CA', MAPPING_LABELS= 'ca_ios_teflon', SAUCE_APP='storage:filename=ca-walmart-release-latest.zip', REPORT_ID = "3")

      - manual:
          name: US-iOS
          call: US_iOS(DEPENDENCY_PROFILE = 'looper-US', MAPPING_LABELS= 'us_en_ios_teflon', SAUCE_APP= 'storage:filename=us-walmart-release-latest.zip', REPORT_ID = "4")

      - manual:
          name: MX-iOS
          call: MX_iOS(DEPENDENCY_PROFILE = 'looper-MX', MAPPING_LABELS= 'mx_ea_ios_teflon', SAUCE_APP='storage:filename=mx-walmart-release-latest.zip', REPORT_ID = "5")
      
      - manual:
          name: CA-Android-fr
          call: CA_Android_fr(DEPENDENCY_PROFILE = 'looper_ca_fr', MAPPING_LABELS= 'ca_android_fr', SAUCE_APP='storage:filename=ca-walmart-release-latest.apk', REPORT_ID = "3")

      - manual:
          name: CA-iOS-fr
          call: CA_iOS_fr(DEPENDENCY_PROFILE = 'looper_ca_fr', MAPPING_LABELS= 'ca_ios_fr', SAUCE_APP='storage:filename=ca-walmart-release-latest.zip', REPORT_ID = "3")


envs:
  global:
    variables:
      SAUCE_USERNAME: CanadaMobile
      SAUCE_ACCESS_KEY: be7b5ef5-86d1-450d-94ba-f3234f736ab8
      TEST_TAGS: wcp-poc
      POST_TO_SPLUNK: true
      POST_TO_XRAY: false
      POST_TO_ES: true

  Android_flows:
    variables:
      MARKET: wcp
      SLACK_CHANNEL: wcp-automation
      APP_PLATFORM: android
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: wcp/test/dependencies/android/android-default.yaml
      GLASS_ENV: Production Android -v${BUILD_APP_VERSION}
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *Tag*: ${TEST_TAGS}\n
        *App Build*: ${SAUCE_APP}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Environment*: ${GLASS_ENV}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}"

  iOS_flows:
    variables:
      MARKET: wcp
      SLACK_CHANNEL: wcp-automation
      APP_PLATFORM: ios
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: wcp/test/dependencies/ios/ios-default.yaml
      GLASS_ENV: Production ios -v${BUILD_APP_VERSION}
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *Tag*: ${TEST_TAGS}\n
        *App Build*: ${SAUCE_APP}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Environment*: ${GLASS_ENV}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}
        *Testburst*: ${Testburst}"

flows:

  # For publishing report
  publish_report:
    try:
      - publishReport:
          context: ${REPORT_ID}${TEST_SESSION_ID}
          dir: report
          index: index.html
          verbose: true
      - var(REPORT_URL):
        - shell (name Report URL): |
            REPORT_VALUE=PUBLISH_REPORT_${REPORT_ID}${TEST_SESSION_ID}
            echo ${!REPORT_VALUE}
    catch:
      - echo "Publish Report step failed. Please check Start R2 Test step. $flowErrorMessage"

  # Generating saucelabs url
  generate_sauce_labs_build_url:
    - shell (name Sauce Labs Build URL): |
        echo "https://app.saucelabs.com/archives/vdc?q=build:(r2-${TEST_SESSION_ID})"

  # Getting app version from saucelabs using api
  get_build_app_version:
    try:
      - var(VERSION_NAME = 'version')
      - var(STORAGE_NAME):
          - shell (name STORAGE_NAME): echo ${SAUCE_APP} | cut -f2 -d'='
      - var(BUILD_APP_VERSION):
          - shell (name BUILD_APP_VERSION): |
              curl -s -u "$SAUCE_USERNAME:$SAUCE_ACCESS_KEY" "https://api.us-west-1.saucelabs.com/v1/storage/files?per_page=1&name=${STORAGE_NAME}" | grep -o "\"${VERSION_NAME}\": \"[^\"]*\"" | cut -f4 -d'"' | cut -f1 -d"-"
      - echo "${BUILD_APP_VERSION}"
    catch:
      - echo "Unable to get build appVersion - $flowErrorMessage"

  # Assigning to variable and printing on report
  get_app_version:
    - call: get_build_app_version
    - var(APP_VERSION):
        - shell  (name Get App Version): echo ${BUILD_APP_VERSION}

  # generate test report in slack format
  get_test_report_slack_format:
    try:
      - shell (name Generate test report in slack format): |
          node ./ca/slack-output/generate-slack-output.js
      - var(SLACK_TEST_REPORT_MESSAGE):
        - shell (name Generate test report in slack format): |
            cat slackOutPut.txt
    catch:
      - echo "Unable to generate report - $flowErrorMessage"
      - exit 1

  CA_Android:
    - call: build(Android_flows)
  US_Android:
    - call: build(Android_flows)
  MX_Android:
    - call: build(Android_flows)
  CA_iOS:
    - call: build(iOS_flows)
  US_iOS:
    - call: build(iOS_flows)
  MX_iOS:
    - call: build(iOS_flows)
  CA_Android_fr:
    - call: build(Android_flows)
  CA_iOS_fr:
    - call: build(iOS_flows)
