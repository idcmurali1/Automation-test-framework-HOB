# ================================================================================================================================
# TC: 003
# Flow: TC-003: Payment Information: Master CC +  Digital item + Invoice
# ================================================================================================================================
general:
  testCaseId: C2720128
  tags: C2720128, p1-mx-ea-teflon, p1-bodega-ea-teflon, p1-mx-ea-prod, p1-bodega-ea-prod, p1-mx-mh-e2e-teflon, p1-mx-mh-e2e-prod
  combineScenarios: true

scenarios:
  - name: Before
    before: true
    flow:
      - executeFunction:
          name: functions.utils.setMarketInfo

  # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      - log: 'R2_SUBFLOW_PRE_TRANSACTION'
  # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  - name: Main
    flow:

      #Onboarding && Sign in
      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode
            - name: ShoppingExperience
              string: data.onboarding.onlineExclusiveStore

      - executeFunction:
          name: functions.login.storeEmail
          params:
            - name: userAndroidEmail
              string: data.wcp003.user.email.android
            - name: useriOSEmail
              string: data.wcp003.user.email.ios

      # Tap global account button
      - executeFunction:
          name: functions.global.tapAccountBtn

      # Tap Sign in button
      - executeFunction:
          name: functions.accountPage.tapSignInBtn

      - executeFunction:
          name: functions.loginPage.userAuthentication
          params:
            - name: userEmail
              string: ${userEmail}
            - name: userPassword
              string: data.global.password.Password1


      # Navigate to home page
      - executeFunction:
          name: functions.global.tapShopBtn

      # Validate digital item could not be added to cart with other item
      - executeFunction:
          name: functions.cartPage.clearCart

      - if:
          condition: ${environment} == 'Production'
          then:
            # Add to Cart any Item
            - executeFunction:
                name: functions.searchPage.addToCartUsingItemArray
                params:
                  - name: productArray
                    string: data.global.1PItems
            # Add to Cart 1P Digital Item to validate Digital Item Error displays
            - executeFunction:
                name: functions.searchPage.addToCartUsingItemArray-assertSpecificErrorDisplayed
                params:
                  - name: productArray
                    string: data.global.1PItems.digital
                  - name: errorCode
                    string: data.global.errorCodes.addToCart.digitalItem
            # Clear cart
            - executeFunction:
                name: functions.global.tapShopBtn
            - executeFunction:
                name: functions.cartPage.clearCart
            # After testing Digital Item error popup, reset cart information to continue with the purchase with fresh cart
            - executeFunction:
                name: functions.global.resetCartInformation/GlobalVars
            # Prodution add 1 digital item into cart
            - executeFunction:
                name: functions.searchPage.addToCartUsingItemArray # --> RETURNS: ${typeOfErrorDisplayed}
                params:
                  - name: productArray
                    string: data.global.1PItems.digital
          else:
            # Teflon use deeplink to add 1 digital item into cart
            - executeFunction:
                name: functions.utils.getTheFirstAvailableItemAndNavigateToPDPWithDeepLink
                params:
                  - name: productArray
                    string: data.global.1PItems.digital
            - executeFunction:
                name: functions.productDetailsPage.tapClose

      # Go to cart and check out 
      - executeFunction:
          name: functions.global.tapCartIcon
      - executeFunction:
          name: functions.cartPage.tapDeliveryOption
      - executeFunction:
          name: functions.cartPage.tapOnAddressLink
      - executeFunction:
          name: functions.cartPage.saveAddressFromList # --> RETURNS: ${returnedSelectedAddressName}, ${returnedSelectedAddress}      
      - executeFunction:
          name: functions.cartPage.tapContinueToCheckoutBtn


      # Select card from cxo wallet
      - if:
          condition: ${platform} == 'android' | ${environment} == 'Production'
          then:
            # Select existing Master CC
            - executeFunction:
                name: flows.checkoutPage.selectFirstCardListed # --> RETURNS: ${cardLast4Digits}
            # Assert Master CC selected
            - executeFunction:
                name: functions.checkoutPage.paymentMethod.assertCreditOrDebitCardSelected # <-- ${cardLast4Digits}              
        
      # Select existing invoice
      - executeFunction:
          name: functions.checkoutPage.selectInvoice
      - executeFunction:
          name: functions.checkoutPage.selectExistingInvoiceFromSheet

      - if:
          condition: ${environment} == 'Teflon'
          then:           
            - executeFunction:
                name: functions.checkoutPage.scrollToCVVTextfield
            - executeFunction:
                name: functions.checkoutPage.addCVV
                params:
                  - name: CVV
                    string: data.global.card.cvv.123

            # Place Order
            - executeFunction:
                name: functions.checkoutPage.tapPlaceOrderButton

  # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
            - log: 'R2_SUBFLOW_POST_TRANSACTION'
  # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


            # Verify Thank you page
            - executeFunction:
                name: functions.thankYouPage.verifyThankYouPageDisplayed

            # Navigate to ODP
            - executeFunction:
                name: functions.global.navigateToODPUseDeeplink

      # Validate the user is able to access ODP
            - executeFunction:
                name: functions.orderDetailPage.verifySectionDisplayed

            - executeFunction:
                name: functions.orderDetailPage.verifyDeliveryType
                params:
                  - name: expectedDeliveryType
                    string: data.global.deliveryText.delivery

            - executeFunction:
                name: functions.orderDetailPage.scrollToPOS

      - storeIn:
          key: testStatus
          value: passed

  - name: After
    after: true
    flow:
      - executeFunction:
          name: functions.utils.after