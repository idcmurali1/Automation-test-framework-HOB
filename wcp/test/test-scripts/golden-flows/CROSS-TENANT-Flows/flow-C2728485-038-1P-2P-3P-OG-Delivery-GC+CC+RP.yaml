general:
  testCaseId: C2728485
  tags: wcp-us-038, p1-us-prod, p1-ca-en-prod, p1-ca-fr-prod, p1-ca-en-teflon, p1-ca-fr-teflon, C2728485, p1-mx-mh-e2e-prod, p1-mx-mh-e2e-teflon

scenarios:

  - name: Before
    before: true
    endTestOnFailure: true
    flow:
      - executeFunction:
          name: functions.utils.setMarketInfo

  - name: Main
    flow:

     # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      - log: 'R2_SUBFLOW_PRE_TRANSACTION'
     # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

      # Onboarding
      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode

      - if:
          condition: ${environment} == 'Teflon'
          then:
            - executeFunction:
                name: functions.astroApi.createNewAccountWithCreatePayload
          else:
            - executeFunction: 
                name: functions.login.storeEmail
                params:
                  - name: userAndroidEmail
                    string: data.wcp038.android.email
                  - name: useriOSEmail
                    string: data.wcp038.user.email.ios
      
      # Sign in
      - executeFunction:
          name: functions.global.tapAccountBtn
      - executeFunction:
          name: functions.accountPage.tapSignInBtn
      - if:
          condition: ${environment} == 'Teflon'
          then:
            - executeFunction: 
                name: functions.loginPage.userAuthentication
                params:
                  - name: userEmail
                    string: ${userEmail}
                  - name: userPassword
                    string: ${password}
          else:
            - executeFunction:
                name: functions.loginPage.userAuthentication
                params:
                  - name: userEmail
                    string: ${userEmail}
                  - name: userPassword
                    string: data.wcp038.password
                    
      - executeFunction:
          name: functions.global.tapShopBtn

      - executeFunction:
          name: functions.cartPage.clearCart
      - if:
          condition: ${market} == 'CA' # US market select shipping intent to skip reserving time
          then:
             - executeFunction:
                 name: functions.homePage.selectAddress
                 params:
                    - name: streetAddress
                      string: data.wcp038.storeAddress
     
      # Add GO Items to Cart
      - executeFunction:
          name: functions.searchPage.addToCartUsingItemArray
          params:
            - name: productArray
              string: data.searchPage.groceryItemArray

      # Add 1P Items to Cart
      - executeFunction:
          name: functions.searchPage.addToCartUsingItemArray
          params:
            - name: productArray
              string: data.searchPage.1PItems
      
      # Add 3P Items to Cart
      - executeFunction:
          name: functions.searchPage.addToCartUsingItemArray
          params: 
            - name: productArray
              string: data.searchPage.3PItems
      
      # Add 2P Items to Cart
      - executeFunction:
          name: functions.searchPage.addToCartUsingItemArray
          params: 
            - name: productArray
              string: data.searchPage.2pItemArray

      # Navigate to cart page
      - executeFunction:
          name: functions.global.tapCartIcon
        
      # Navigate to tbook slot page
      - executeFunction:
          name: functions.cartPage.tapReserveATimeBtn

      # Reserving the slot
      - executeFunction:
          name: functions.reserveATime.bookSlot
          params:
            - name: fufillment
              string: data.reserveATime.deliveryFromStore
            - name: slotType
              string: Standard
            - name : slotDay
              string: tomorrow

      # Will check and see which flow amend order from cart can be done
      # # Validate Amend Order flow from cart screen
      # - executeFunction:
      #     name: functions.cartPage.amendOrderFromCart

      # Validating the items added in the cart 
      - executeFunction:
          name: functions.cartPage.validateItemDetails

      # # Asserting the fulfilment type in cart
      # - executeFunction:
      #     name: functions.cartPage.assertFulfillmentTypeInCart
      #     params:
      #       - name: fulfillmentText
      #         string: Delivery from store

      # # Validating that there is no shipping charge for the Delivery pass user
      # - executeFunction:
      #     name: functions.cartPage.validateReducedPriceAndNoShippingCharge
              
      # Mavigate to ROP
      - executeFunction:
          name: functions.cartPage.tapContinueToCheckoutBtn
      
      # Validating that the ROP is loaded
      - executeFunction:
          name: functions.checkoutPage.assertPageLoaded     

      # Validate Item details are mentioned as expected in ROP
      - executeFunction:
          name: functions.checkoutPage.validateItemDetails

      - if:
          condition: ${environment} == 'Teflon'
          then:
            - executeFunction:
                name: functions.astroUrl.createGiftCard
                params:
                  - name: giftCardAmount
                    string: 50
            - storeIn:
                key: gc_num
                value: ${giftCardNumber}
            - storeIn:
                key: gc_pin
                value: ${giftCardPin}
              
            # Flow to add gift card
            - executeFunction:
                name: function.utils.applyPayments
                params:
                  - name: paymentType 
                    string: 'Gift Card'
                  - name: giftCardNumber
                    string: gc_num
                  - name: giftCardPin
                    string: gc_pin
            - executeFunction:
                name: functions.checkoutPage.scrollDownToEditPaymentButton
            - executeFunction:
                name: functions.checkoutPage.tapOnEditPaymentMethodButton
            - executeFunction:
                name: function.utils.applyPayments
                params:
                  - name: paymentType
                    string: 'walmartRewardsCard'
                  - name: cardNumber
                    string: data.global.creditCard.visa.6949.fullNumber
                  - name: cardHolderFirstName
                    string: data.global.name.ACCEPT
                  - name: cardHolderLastName
                    string: data.global.name.ACCEPT
                  - name: expirationYear
                    string: data.wcp038.expirationYear
                  - name: expirationMonth
                    string: data.global.addNewCardInfo.expiration.month.number
                  - name:  expirationDate
                    string: data.wcp038.expirationDate
                  - name: phoneNumber
                    string: data.defaultAddress.phoneNumber
                  - name: cvv
                    string: data.global.card.cvv.999
                  - name: sameBillingAddress
                    string: true
                  - name: cardLast4Digits
                    string: data.global.creditCard.visa.6949.last4DigitsOnly
                  - name: defaultCard
                    string: true
            
            # Applying Rewards Point
            - executeFunction:
                name: functions.checkoutPage.paymentMethod.tapRewardsPointCheckbox

            # Applying the promo code
            - executeFunction:
                name: functions.checkoutPage.applyPromoCode
                params:
                  - name: accountType
                    string: data.global.accountType

      # # Making sure that delivery fee is not applied
      # - executeFunction:
      #     name: functions.checkoutPage.validateReducedPriceAndDeliveryFreeShipping
      
      - if:
          condition: ${environment} == 'Teflon'
          then:
            # Place Order
            - executeFunction:
                name: functions.checkoutPage.tapPlaceOrderButton
            
            # Validate Order Details on ThankYou Page
            - executeFunction:
                name: functions.thankYouPage.verifyThankYouPageDetails
                params:
                  - name: expectedDeliveryType
                    string: S2H
                  - name: expectedFulfillmentName
                    string: ACCEPT ACCEPT
                  - name: expectedFulfillmentAddress
                    string: 3354 Innes Rd, Ottawa, ON K1C 1T1
                  - name: expectedTotalItemsCount
                    string: '1'
                  - name: position
                    string: 1
            # Validate Cart Empty After Order Placed
            - executeFunction:
                name: functions.cartPage.cartEmptyAfterPlaceOrder
      
            # Navigate to purchase history
            - executeFunction:
                name: functions.accountPage.navigateToPurchaseHistoryFromHomeScreen

            # Validate if the purchase history is loaded
            - executeFunction:
                name: functions.orderHistoryPage.isPageDisplayed

            - executeFunction:
                name: functions.orderDetailsPage.mixedBagOrderActions

      - storeIn:
          key: testStatus
          value: passed

  - name: After
    after: true
    flow:
      - executeFunction:
          name: functions.utils.after