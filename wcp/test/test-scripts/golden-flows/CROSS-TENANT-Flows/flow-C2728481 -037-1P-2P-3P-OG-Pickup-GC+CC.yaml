general:
  testCaseId: C2728481
  tags: wcp-us-037, p1-us-prod, p1-ca-en-prod, p1-ca-fr-prod, p1-ca-en-teflon, p1-ca-fr-teflon, C2728481, p1-mx-mh-e2e-prod, p1-mx-mh-e2e-teflon

scenarios:

  - name: Before
    before: true
    endTestOnFailure: true
    flow:
      - executeFunction:
          name: functions.utils.setMarketInfo
  - name: Main
    flow:
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      - log: 'R2_SUBFLOW_PRE_TRANSACTION'
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

 # Onboarding
      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode

      - if:
          condition: ${environment} == 'Teflon'
          then:
            - executeFunction:
                name: functions.astroApi.createNewAccountWithCreatePayload
          else:
            - executeFunction: 
                name: functions.login.storeEmail
                params:
                  - name: userAndroidEmail
                    string: data.wcp037.user.email.android
                  - name: useriOSEmail
                    string: data.wcp037.user.email.ios
      
      #Sign in
      - executeFunction:
          name: functions.global.tapAccountBtn
      - executeFunction:
          name: functions.accountPage.tapSignInBtn
      - if:
          condition: ${environment} == 'Teflon'
          then:
            - executeFunction: 
                name: functions.loginPage.userAuthentication
                params:
                  - name: userEmail
                    string: ${userEmail}
                  - name: userPassword
                    string: ${password}
          else:
            - executeFunction:
                name: functions.loginPage.userAuthentication
                params:
                  - name: userEmail
                    string: ${userEmail}
                  - name: userPassword
                    string: data.wcp037.password
                    
      - executeFunction:
          name: functions.global.tapShopBtn

    #   - if:
    #       condition: ${environment} == 'Teflon'
    #       then:
    #         - executeFunction:
    #             name: us.functions.utils.addAmountToGiftCard
    #             params:
    #               - name: PID
    #                 string: data.giftCard.PID
    #               - name: balance
    #                 string: '5'
    #               - name: pinCode
    #                 string: '4691'
            

      - executeFunction:
          name: functions.cartPage.clearCart

      - executeFunction:
          name: functions.homePage.gic.expandIfCollapsed

      - executeFunction:
          name: functions.global.gic.selectPickupIntent
          params:
            - name: page
              string: home
      - if:
          condition: ${environment} =='Teflon'
          then:
            - executeFunction:
                  name: functions.homePage.gic.taponStorebutton

            - executeFunction:
                  name: functions.selectStorePage.enterZipcode
                  params:
                    - name: Zip_Code
                      string: data.global.gic.zipCodeCA

            - executeFunction:
                name: functions.selectStorePage.selectStore
                params:
                  - name: storeName
                    string: data.global.gic.storeNameScToreoCA

            - executeFunction:
                  name: functions.selectStorePage.tapOnSaveButton

      - executeFunction:
            name: functions.homePage.gic.collapseIfExpanded 
          
      - if:
          condition: ${environment} == 'Teflon'
          then:
          #Add 1P item to cart
            - log: 'Adding 1p item to cart'
            - executeFunction:
                name: functions.utils.fetchFulcrumAvailableItem
                params:
                  - name: orderType
                    string: STORE_UNSCHEDULED_PICKUP
                  - name: eligiblePath
                    string: gm
      

            - executeFunction:
                name: functions.searchField.enterText
                params:
                  - name: searchText
                    string: ${firstItem}

            - executeFunction:
                name: functions.searchResultPage.clickOnFirstAddToCartButton

            # Add 3P item to cart
            - log: 'Adding 3p item to cart'
            - executeFunction:
                name: functions.utils.fetchFulcrumAvailableItem
                params:
                  - name: orderType
                    string: MP_S2S
                  - name: eligiblePath
                    string: 3p

            - executeFunction:
                name: functions.searchField.enterText
                params:
                  - name: searchText
                    string: ${firstItem}

            - executeFunction:
                name: functions.searchResultPage.clickOnFirstAddToCartButton

           # Add 2P item to cart
            - log: 'Adding 2p item to cart'
            - executeFunction:
                name: functions.utils.fetchFulcrumAvailableItem
                params:
                  - name: orderType
                    string: STORE_SCHEDULED_PICKUP
                  - name: eligiblePath
                    string: dsv

            - executeFunction:
                name: functions.searchField.enterText
                params:
                  - name: searchText
                    string: ${firstItem}

            - executeFunction:
                name: functions.searchResultPage.clickOnFirstAddToCartButton 

            #Add Grocery item to cart
            - log: 'Adding grocery item to cart'
            - executeFunction:
                name: functions.utils.fetchFulcrumAvailableItem
                params:
                  - name: orderType
                    string: STORE_SCHEDULED_PICKUP
                  - name: eligiblePath
                    string: go

            - executeFunction:
                name: functions.searchField.enterText
                params:
                  - name: searchText
                    string: ${firstItem}

            - executeFunction:
                name: functions.searchResultPage.clickOnFirstAddToCartButton
          else:
            # Adding Grocery Item
            - log: 'Adding grocery item to cart'
            - executeFunction:
                name: functions.searchPage.addToCartUsingItemArray 
                params:          
                  - name: productArray
                    string: data.searchPage.groceryItemArray

            # Adding 1P item
            - log: 'Adding 1p item to cart'
            - executeFunction:
                name: functions.searchPage.addToCartUsingItemArray 
                params:          
                  - name: productArray
                    string: data.searchPage.1PItems

            # Adding 2P item
            - log: 'Adding 2p item to cart'
            - executeFunction:
                name: functions.searchPage.addToCartUsingItemArray 
                params:          
                  - name: productArray
                    string: data.searchPage.2pItemArray

            # Adding 3P item
            - log: 'Adding 3p item to cart'
            - executeFunction:
                name: functions.searchPage.addToCartUsingItemArray 
                params:          
                  - name: productArray  
                    string: data.searchPage.3PPickupItems
      - if:
          condition: ${market} == 'US' # US market select shipping intent to skip reserving time
          then:        
             - executeFunction:
                 name: functions.global.closePopUp
             - executeFunction:
                 name: functions.searchPage.handle3PPickupBottomSheet
                 

#   # Add 2P item to cart
#       - executeFunction:
#           name: functions.searchPage.addToCartUsingItemArray
#           params:
#             - name: productArray
#               string: data.searchPage.2pItemArray

      - executeFunction:
          name: functions.global.tapCartIcon

      - executeFunction:
          name: functions.cartPage.tapReserveATimeBtn

      - executeFunction:
          name: functions.reserveATime.bookSlot
          params:
            - name: fufillment
              string: Pickup
            - name: slotType
              string: Standard
            - name: slotDay
              string: tomorrow

      - executeFunction:
          name: functions.cartPage.assertFulfillmentTypeInCart
          params:
            - name: fulfillmentText
              string: data.cartPage.pickupFulfillmentType

      - executeFunction:
          name: functions.cartPage.validateItemDetails
      # Mavigate to ROP
      - executeFunction:
          name: functions.cartPage.tapContinueToCheckoutBtn
      
      # Validating that the ROP is loaded
      - executeFunction:
          name: functions.checkoutPage.assertPageLoaded  

      # Validate Item details are mentioned as expected in ROP
      - executeFunction:
          name: functions.checkoutPage.validateItemDetails

      # Transaction & Post-Transaction validation on Teflon
      - if:
          condition: ${environment} == 'Teflon'
          then:
            - executeFunction:
                name: functions.checkoutPage.scrollToCVVTextfield
            
            - executeFunction:
                name: functions.checkoutPage.addCVV
                params:
                  - name: CVV
                    string: data.global.card.cvv.123

            # Scroll down to Edit payment button
            - executeFunction:
                name: functions.checkoutPage.scrollDownToEditPaymentButton


            - executeFunction:
                name: functions.checkoutPage.paymentMethod.assertGiftCardAttached
            

            # Tapping on Edit payment button
            - if:
                condition: ${platform} == 'Android'
                then:
                  - executeFunction:
                      name: functions.checkoutPage.tapOnEditPaymentMethodButton

                  # Validate if the Wallet page is displayed after tapping on the edit payment method
                  - executeFunction:
                      name: functions.checkoutPage.validateWalletIsDisplayed

                  - executeFunction:
                      name: functions.checkoutPage.wallet.tapContinueButton
            
            # Applying the promo code
            - executeFunction:
                name: functions.checkoutPage.applyPromoCode
                params:
                    - name: accountType
                      string: data.global.accountType

            # Making sure that delivery fee is not applied
            # - executeFunction:
            #     name: functions.checkoutPage.validateReducedPriceAndPickUpFreeShipping

            # Place Order
            - executeFunction:
                name: functions.checkoutPage.tapPlaceOrderButton

            # Validate Thank you page 
            - executeFunction:
                name: functions.thankYouPage.verifyThankYouPageDisplayed

            - executeFunction:
                name: functions.thankYouPage.getOrderNumber

            - executeFunction:
                name: functions.cartPage.cartEmptyAfterPlaceOrder
            
            # Navigate to purchase history
            - executeFunction:
                name: functions.accountPage.navigateToPurchaseHistoryFromHomeScreen

            # Validate if the purchase history is loaded
            - executeFunction:
                name: functions.orderHistoryPage.isPageDisplayed

            - executeFunction:
                name: functions.orderDetailsPage.mixedBagOrderActions    

      - storeIn:
          key: testStatus
          value: passed

  - name: After
    after: true
    flow:
      - executeFunction:
          name: functions.utils.after