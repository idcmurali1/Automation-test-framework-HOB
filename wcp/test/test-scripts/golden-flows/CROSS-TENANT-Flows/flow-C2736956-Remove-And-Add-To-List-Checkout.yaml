general:
  testCaseId: C2736956
  tags: p1-us-prod, p1-ca-en-prod, p1-ca-fr-prod, C2736956

scenarios:
  - name: Before
    before: true
    endTestOnFailure: true
    flow:
      - executeFunction:
          name: functions.utils.setMarketInfo

  - name: Main
    flow:

      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode

      - executeFunction:
          name: functions.global.tapMyItemsBtn

      # Function added because in iOS US after selecting "My Items tab" Login popup comes automatically
      - if: 
          condition: ${market} == 'US' && ${platform} == 'iOS'
          then:
            - executeFunction:
                name: functions.checkoutPage.walletPopup.tapCloseBtn

      - executeFunction:
          name: functions.myItemsPage.tapLists

      - executeFunction:
          name: functions.myItemsPage.lists.tapSignInBtn

      - if:
          condition: ${platform} == 'Android'
          then:
            - storeIn:
                key: userEmail
                value: data.wcp.list.android.email
          else:
            - storeIn:
                key: userEmail
                value: data.wcp.list.ios.email

      - executeFunction:
          name: functions.loginPage.userAuthentication
          params:
            - name: userEmail
              string: ${userEmail}
            - name: userPassword
              string: data.global.password.Password1

      - executeFunction:
          name: functions.myItemsPage.lists.tapListTile
          params:
            - name: listName
              string: data.global.listName

      - executeFunction:
          name: functions.myItemsPage.lists.removeAllItemsFromList

      - executeFunction:
          name: functions.global.tapShopBtn

      - executeFunction:
          name: functions.cartPage.clearCart

      - executeFunction:
          name: functions.searchPage.getTheFirstAvailableItemAndNavigateToPDP
          params:
            - name: productArray
              string: data.global.1PItems

      - executeFunction:
          name: functions.productDetailsPage.getProductName

      - executeFunction:
          name: functions.productDetailsPage.tapAddToFavorites

      - executeFunction:
          name: functions.productDetailsPage.tapClose

      - executeFunction:
          name: functions.global.tapMyItemsBtn

      - executeFunction:
          name: functions.myItemsPage.lists.addIndividualItemFromList
          params:
            - name: productName
              string: ${productName}

      - executeFunction:
          name: functions.global.tapShopBtn

      - executeFunction:
          name: functions.searchPage.getTheFirstAvailableItemAndNavigateToPDP
          params:
            - name: productArray
              string: data.searchPage.groceryItemArray

      - executeFunction:
          name: functions.productDetailsPage.getProductName

      - executeFunction:
          name: functions.productDetailsPage.tapAddToFavorites

      - executeFunction:
          name: functions.productDetailsPage.tapClose

      - executeFunction:
          name: functions.global.tapMyItemsBtn

      - executeFunction:
          name: functions.myItemsPage.lists.addIndividualItemFromList
          params:
            - name: productName
              string: ${productName}

      - executeFunction:
          name: functions.global.tapCartIcon

      - executeFunction:
          name: functions.cartPage.tapReserveATimeBtn

      - executeFunction:
          name: functions.reserveATime.bookSlot
          params:
            - name: fufillment
              string: Delivery
            - name: slotType
              string: Standard
            - name: slotDay
              string: tomorrow
              
      - executeFunction:
          name: functions.cartPage.tapContinueToCheckoutBtn

      - executeFunction:
          name: functions.checkoutPage.assertPageLoaded

      - storeIn:
          key: testStatus
          value: passed

  - name: After
    after: true
    flow:
      - executeFunction:
          name: functions.utils.after
