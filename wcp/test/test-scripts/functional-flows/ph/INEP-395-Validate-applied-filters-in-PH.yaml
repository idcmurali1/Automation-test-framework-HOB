#######################################################################################################################
#
# TEST CASE DETAILS: 
#
#   TC - INEP-394
#       Flow - MH: Validate applied filters in PH
#    
#
#   CONFLUENCE TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/COMM/WCP+Merging+Hallways+-+Weekly+Summary#25049188467b442a39856942ffbf14209cc3ea19a5
#
#   CONFLUENCE AUTOMATION TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/~vn54czd/Native+Apps+Automation
#
#   JIRA OPIF TC:
#     https://jira.walmart.com/browse/OPIF-179446
#
#   JIRA TEST ID:
#     https://jira.walmart.com/browse/INEP-395 
#
#   JIRA Test Plan ID:
#     https://jira.walmart.com/browse/INEP-389
#
#   TODO: 
#        * Validate Final Payloads
#        * Missing TC for android since filters in PH is not finished yet 
#
#######################################################################################################################

general:
  testCaseId: INEP-395
  tags: INEP-395, OPIF-179446, p1-mh-opif-teflon-d-feb, p1-mh-opif-teflon, INEP-389, native-apps-opif-test-case
  combineScenarios: true

scenarios:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   B E F O R E   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


  - name: Before
    before: true
    endTestOnFailure: true
    flow:

      - log: "BEFORE SCENARIO"

      - executeFunction:
          name: functions.utils.setMarketInfo

      - log: "BEFORE SCENARIO END"


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   M A I N   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


  - name: "MH: Validate applied filters in PH"
    flow:
      # Create account using astro api.
      - log:
          message: PREREQUISITE — Creating user account using Astro API...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.createNewAccountWithCreatePayload  # Return -> $userEmail , $userPassword
          params:
            - name: paymentMethod
              string: data.default.astroAPI.createAccount.paymentMethod.CCVisa 

      # Create order using astro api.
      - log:
          message: PREREQUISITE — Creating order with PO Created status using Astro API...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.createOrder
          params:
            - name: payload
              string: data.mh.createOrderPayload.mpDelivery # Param -> $userEmail
      - storeIn:
          key: poCreatedOrderId
          value: ${returnedOrderNumber}
      
      # Create order using astro api and moving it to status "ON THE WAY".
      - log:
          message: PREREQUISITE — Creating order using Astro API and moving it to On The Way...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.createOrder
          params:
            - name: payload
              string: data.mh.createOrderPayload1PItem.fcDelivery # Param -> ${userEmail}
      - storeIn:
          key: onTheWayOrderId
          value: ${returnedOrderNumber}
      # Move order using astro api.
      - log:
          message: Move order ${onTheWayOrderId} using Astro API -> "On the way"
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.moveOrder
          params:
            - name: orderId
              string: ${returnedOrderNumber}
            - name: payload
              string: data.moveOrder.fcDelivery.outForDelivery

      # Create order using astro api and moving it to status "DELIVERED".
      - log:
          message: PREREQUISITE — Creating order using Astro API and moving it to Delivered...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.createOrder
          params:
            - name: payload
              string: data.mh.createOrderPayload1PItem.fcDelivery # Param -> ${userEmail}
      - storeIn:
          key: deliveredOrderId
          value: ${returnedOrderNumber}
      # Move order using astro api.
      - log:
          message: Move order ${deliveredOrderId} using Astro API -> "delivered"
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.moveOrder
          params:
            - name: orderId
              string: ${returnedOrderNumber}
            - name: payload
              string: data.moveOrder.fcDelivery.delivered
      
      # Create order using astro api and moving it to status "DELIVERED" and then create "RETURN".
      - log:
          message: PREREQUISITE — Creating order using Astro API and create Return...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.createOrder
          params:
            - name: payload
              string: data.mh.createOrderPayload1PItem.fcDelivery # Param -> ${userEmail}
      - storeIn:
          key: returnedStatusOrderId
          value: ${returnedOrderNumber}
      # Move order using astro api.
      - log:
          message: Move order ${deliveredOrderId} using Astro API -> "delivered"
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.moveOrder
          params:
            - name: orderId
              string: ${returnedOrderNumber}
            - name: payload
              string: data.moveOrder.fcDelivery.delivered
      - log:
          message: Return order using Astro API...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.returnOrder
          params:
            - name: orderId
              string: ${returnedOrderNumber}
            - name: payload
              string: data.returnOrder.1PReturnPayload
      
      # Create order using astro api and CANCELL it.
      - log:
          message: PREREQUISITE — Creating order using Astro API and cancell it...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.createOrder
          params:
            - name: payload
              string: data.mh.createOrderPayload1PItem.fcDelivery # Param -> ${userEmail}
      - storeIn:
          key: returnedStatusOrderId
          value: ${returnedOrderNumber}
      - log:
          message: Cancel order using Astro API...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.cancelOrder
          params:
            - name: orderId
              string: ${returnedOrderNumber}
            - name: payload
              string: data.cancelOrder.1PCancelPayload
      
      # Onboard to application
      - log:
          message: "Onboard to application."
          color: PURPLE_BOLD_BRIGHT
      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode
            - name: ShoppingExperience
              string: data.onboarding.onlineExclusiveStore
      - executeFunction:
          name: functions.homePage.assertPageLoaded
    
      # Go to Order History Page and validate orders are created and visibles in PH
      - executeFunction:
          name: functions.global.tapAccountBtn
      - executeFunction:
          name: functions.accountPage.tapSignInBtn
      - executeFunction:
          name: functions.loginPage.userAuthentication # Param -> $userEmail , $userPassword
      
      - executeFunction:
          name: functions.accountPage.tapOnOrderHistory

      # Assert user can applied filters
      - executeFunction:
          name: functions.orderHistoryPage.tapOnByDateFilter
      - executeFunction:
          name: functions.orderHistoryPage.byDateFilterView.selectTimeOption 
          params:
            - name: dateOption
              string: data.orderHistory.byDateFilter.lastThreeMonths
      - executeFunction:
          name: functions.orderHistoryPage.genericFilterView.tapOnSeeResults
      - sleep:
          duration: 7000
      - executeFunction:
          name: functions.orderHistoryPage.tapOnStatusFilter
      - executeFunction:
          name: functions.orderHistoryPage.statusFilterView.selectStatusOption
          params:
            - name: statusOption
              string: data.orderHistory.statusFilter.completed 
      - executeFunction:
          name: functions.orderHistoryPage.genericFilterView.tapOnSeeResults
      
      # Assert number of orders displayed
      - executeFunction:
          name: functions.orderHistoryPage.assertCountOrdersDisplayed
          params:
            - name: expectedOrdersInHistory
              string: "1"
      - executeFunction:
          name: functions.orderHistoryPage.tapOnAllOrdersFilter
      - sleep:
          duration: 7000
      # Assert number of orders displayed
      - executeFunction:
          name: functions.orderHistoryPage.assertCountOrdersDisplayed
          params:
            - name: expectedOrdersInHistory
              string: "5"
          

# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# #   A F T E R   S C E N A R I O
# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  - name: After
    after: true
    executeOnFailure: false
    flow:
      - log: "AFTER SCENARIO"

      - log:
          message: "Main Scenario passed Successfully."
          color: GREEN_BOLD

      - log: "AFTER SCENARIO ENDED"