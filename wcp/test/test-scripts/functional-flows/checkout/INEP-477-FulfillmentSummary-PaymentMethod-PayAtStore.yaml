#######################################################################################################################
#
# TEST CASE DETAILS: 
#
#   TC - INEP-477
#       Flow - MH:  FulfillmentSummary-PaymentMethod-PayAtStore
#    
#
#   CONFLUENCE TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/COMM/WCP+Merging+Hallways+-+Weekly+Summary#25049188467b442a39856942ffbf14209cc3ea19a5
#
#   CONFLUENCE AUTOMATION TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/~vn54czd/Native+Apps+Automation
#
#   JIRA OPIF TC:
#     https://jira.walmart.com/browse/OPIF-179363
#
#   JIRA TEST ID:
#     https://jira.walmart.com/browse/INEP-477
#
#   JIRA Test Plan ID:
#     https://jira.walmart.com/browse/INEP-866
#
#
#######################################################################################################################

general:
  testCaseId: INEP-477
  tags: INEP-477, OPIF-179363, p1-mh-opif-teflon-d-feb, p1-mh-opif-teflon, INEP-866, native-apps-opif-test-case
  combineScenarios: true

scenarios:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   B E F O R E   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - name: Before
    before: true
    endTestOnFailure: true
    flow:

      - log: "BEFORE SCENARIO"

      - executeFunction:
          name: functions.utils.setMarketInfo
     
     #TODO: Remove whether functions.reserveATime.bookSlot is usgin to reserve a slot
      - storeIn:
          key: index
          value: '1'
      
      - storeIn:
          key: slotDay
          value: 'tomorrow'

      - log: "BEFORE SCENARIO END"
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   M A I N   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  - name: "MH: Validate Mix Order Pickup GM and GO items"
    flow:
      # Create account using astro api.
      - log:
          message: PREREQUISITE â€” Creating user account using Astro API...
          color: GREEN_BOLD
      - executeFunction:
          name: functions.astroApi.createNewAccountWithCreatePayload
          params:
            - name: paymentMethod
              string: data.default.astroAPI.createAccount.paymentMethod.CCVisa 
    
      # Onboard to application
      - log:
          message: "Onboard to application."
          color: PURPLE_BOLD_BRIGHT
      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode
            - name: ShoppingExperience
              string: data.onboarding.groceryStore
      - executeFunction:
          name: functions.homePage.assertPageLoaded
      - executeFunction:
          name: functions.global.tapAccountBtn
      - executeFunction:
          name: functions.accountPage.tapSignInBtn
      - executeFunction:
          name: functions.loginPage.userAuthentication
          params:
            - name: userEmail
              string: ${userEmail}
            - name: userPassword
              string: ${password}
      - executeFunction:
          name: functions.accountPage.assertUserLoggedInSuccessfully 

     # Add products to add and validate product added sucessfully 
      - executeFunction:
          name: functions.global.tapShopBtn  
      - executeFunction:
          name: functions.searchPage.addToCartUsingItemArray #TO-DO: Update with Grocery Items
          params:
            - name: productArray
              string: data.mh.TC01.groceryItemArray

     # Navigate to cart.
      - log:
          message: "Navigate to cart "
          color: GREEN_BOLD       
      - executeFunction:
          name: functions.global.tapCartIcon 
      - executeFunction:
         name: functions.cartPage.tapContinueToCheckoutBtn
      
    # Reserving slot scheduled order next day
      - log:
          message: "Reserving slot"
          color: GREEN_BOLD 
      - executeFunction:
          name: functions.reserveATime.tapPickupBtn
      - executeFunction:
          name: functions.reserveATime.addAddressDisplayed
      - if:
          condition: ${returnedIsDisplayed}
          then:
            - executeFunction:
                name: functions.reserveATime.tapAddAddress
            - executeFunction:
                name: function.reserveATime.validateSelectAddressSheet                    
            - executeFunction:
                name: functions.reserveATime.selectFirstAddress
            - executeFunction:
                name: functions.reserveATime.tapSaveAddress 
      - executeFunction:
                name: functions.reserveATime.getSelectedAddress
      - executeFunction:
          name: functions.reserveATime.tapBookSlotDateBtn
      - executeFunction:
          name: functions.reserveATime.checkSlotAvailability
      - if: 
          condition: ${slotDay} == 'tomorrow'
          then: 
            - executeFunction:
               name: functions.reserveADay.selectDay.tomorrow
      - if: 
            condition: ${isSlotAvailable}
            then: 
                - executeFunction:
                    name: functions.reserveATime.tapFirstSlotBtn
      - executeFunction:
                name: functions.reserveATime.getSelectedDaySlot
      - executeFunction:
                name: functions.reserveATime.getSelectedTimeSlot
      - executeFunction:
          name: functions.reserveATime.tapReserveBtn
      

      # Validate slot date & time same as reserved from cart next day
      - log:
          message: "Validate date & time same as cart"
          color: GREEN_BOLD
      - executeFunction:
          name: functions.utils.getDeliverySlot
          params:
            - name: forPage
              string: 'ReviewOrder'
            - name: selectedDaySlot
              string: ${returnedSelectedDaySlot}
            - name: selectedTimeSlot
              string: ${returnedSelectedTimeSlot}
      - executeFunction:
         name: functions.checkoutPage.tapAddPaymentMethodBtn
      
      # Payment at store
      - executeFunction:
          name: functions.checkoutPage.walletPopup.assertDisplayed.payAtStoreSection
         
      - storeIn:
          key: testStatus
          value: passed

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
#   A F T E R   S C E N A R I O                                                                                       #
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #              
  
  - name: After
    after: true
    executeOnFailure: false
    flow:
      - executeFunction:
          name: functions.utils.after
       