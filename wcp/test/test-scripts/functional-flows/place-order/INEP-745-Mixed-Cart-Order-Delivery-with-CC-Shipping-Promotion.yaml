#######################################################################################################################
#
# TEST CASE DETAILS: 
#
#   TC - INEP-745
#       Flow : Create mixed order with CC Delivery + shipping promotion
#
#   CONFLUENCE TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/COMM/WCP+Merging+Hallways+-+Weekly+Summary#25049188467b442a39856942ffbf14209cc3ea19a5
#
#   CONFLUENCE AUTOMATION TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/~vn54czd/Native+Apps+Automation
#
#   JIRA OPIF TC:
#     https://jira.walmart.com/browse/OPIF-179465
#
#   INEP TEST ID:
#     https://jira.walmart.com/browse/INEP-745
#
#   JIRA Test Plan ID:
#     https://jira.walmart.com/browse/INEP-442
#
#   JIRA Native Apps Automation ID:
#     https://jira.walmart.com/browse/INEP-613 
########################################################################################################################

general:
  testCaseId: INEP-745
  tags: INEP-745, OPIF-179465, p1-mh-opif-teflon-d-feb, p1-mh-opif-teflon, native-apps-opif-test-case
  combineScenarios: true

scenarios:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   B E F O R E   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - name: Before
    before: true
    endTestOnFailure: true
    flow:

      - log: "BEFORE SCENARIO"

      - executeFunction:
          name: functions.utils.setMarketInfo

      - log: "BEFORE SCENARIO END"

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   M A I N   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  - name: "Create mixed order with CC Delivery + shipping promotion"
    flow:

      # Create account using astro api..
      - log:
          message: PREREQUISITE â€” Creating user account using Astro API..
          color: PURPLE_BOLD_BRIGHT
      - executeFunction:
          name: functions.astroApi.generateTimeStampEmail
      - executeFunction:
          name: functions.astroApi.createAccount
          params:
            - name: payload
              string: data.global.payload.amexCard1111

      # Onboard to application..
      - log:
          message: "Onboard to the application.."
          color: PURPLE_BOLD_BRIGHT      
      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode
            - name: ShoppingExperience
              string: data.onboarding.onlineExclusiveStore          
      - executeFunction:
         name: functions.homePage.assertPageLoaded

     # Add to cart GO item and GM item (Mixed Cart)
      - log:
          message: "ASTRO API - ADD ITEM TO CART"
          color: PURPLE_BRIGHT
      - executeFunction:
          name: functions.astroApi.addToCart  
          params:
            - name: userEmail
              string: ${userEmail}
            - name: password
              string: data.global.password.Password1
            - name: storeId
              string: data.inep-745.storeId
            - name: s1
              string: data.inep-745.item1
            - name: q1
              string: "1"
            - name: orderType
              string: data.orderType.storeScheduledDelivery
            - name: s2
              string: data.inep-745.item2
            - name: q1
              string: "1"
            - name: orderType
              string: data.orderType.fcDelivery

      # Click on login and select sign in..
      - log:
          message: "Click on Login and Select Sign in.."
          color: PURPLE_BOLD_BRIGHT  
      - executeFunction:
          name: functions.global.tapAccountBtn          
      - executeFunction:
          name: functions.accountPage.tapSignInBtn

      # Login with existing user user..
      - log:
          message: "Login with existing user account.."
          color: PURPLE_BOLD_BRIGHT       
      - executeFunction:
          name: functions.loginPage.userAuthentication
          params:
            - name: userEmail
              string: ${userEmail}
            - name: userPassword
              string: data.global.password.Password1

      - executeFunction:
          name: functions.global.tapShopBtn 

# # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# #       - log: 'R2_SUBFLOW_TRANSACTION'
# # # # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *              

      # Navigate to cart.
      - log:
          message: "Navigate to cart.. "
          color: PURPLE_BOLD_BRIGHT      
      - executeFunction:
          name: functions.global.tapCartIcon    

      # Validate item and quantity available in cart..
      - log:
          message: "Validate item and quantity available in cart.. "
          color: PURPLE_BOLD_BRIGHT    
      - executeFunction:
          name: function.cartPage.tapSeeDetails
      - executeFunction:
          name: functions.cartPage.validateItemDetails 

      # Select delivery slot from cart..
      - log:
          message: "Select delivery slot from cart.."
          color: PURPLE_BOLD_BRIGHT    
      - executeFunction:
          name: functions.cartPage.tapReserveATimeBtn

      - executeFunction:
          name: functions.addAddressBottomSheet.handleSelectAddressPopUpReserveATime
          params:
            - name: invoiceColoniaName
              string: data.defaultAddress.coloniaName    

      - executeFunction:
           name: functions.reserveATime.bookSlot
           params:
             - name: fufillment
               string: data.global.deliveryText.delivery
             - name: slotType
               string: Standard  
             - name: slotDay
               string: tomorrow

      - executeFunction:
          name: functions.cartPage.scheduledDelivery.verifyCard
      - executeFunction:
          name: functions.cartPage.unscheduledOrder.verifyCard
          params:
            - name: Delivery
              string: true 

      # Validate Free shipping cost text in cart moneybox..
      - log:
          message: "Validate Free shipping cost text in cart moneybox.. "
          color: PURPLE_BOLD_BRIGHT 
      - executeFunction:
          name: functions.cartPage.scrollDownToPOS          
      - executeFunction:
         name: functions.cartPage.pos.validateNoShippingCharge

      # Click checkout button and navigate to ROP..
      - log:
          message: "Click checkout button and navigate to ROP.. "
          color: PURPLE_BOLD_BRIGHT    
      - executeFunction:
          name: functions.cartPage.tapContinueToCheckoutBtn
      - executeFunction:
          name: functions.addAddressBottomSheet.handleSelectAddressPopUp
          params:
            - name: coloniaName
              string: data.defaultAddress.coloniaName            
      - executeFunction:
          name: functions.checkoutPage.assertPageLoaded

      # Select cvv ..
      - log:
          message: "Select cvv.."
          color: PURPLE_BOLD_BRIGHT         
      - executeFunction:
          name: functions.checkoutPage.scrollToCVVTextfield
      - executeFunction:
          name: functions.checkoutPage.addCVV
          params:
            - name: CVV
              string: data.global.card.cvv.1234

      # Validate free shipping cost and place order..
      - log:
          message: "Validate free shipping cost and place order.."
          color: PURPLE_BOLD_BRIGHT   
      - executeFunction:
          name: functions.checkoutPage.scrollToPOS
      - executeFunction:
            name: functions.checkoutPage.validateNoShippingCharge
      - executeFunction:
          name: functions.checkoutPage.tapPlaceOrderButton

# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      - log: 'R2_SUBFLOW_POST_TRANSACTION'
# # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

      # Verify the Thank you page..
      - log:
          message: "Verify the Thank you page.."
          color: PURPLE_BOLD_BRIGHT      
      - executeFunction:
          name: functions.thankYouPage.verifyThankYouPageDisplayed

      # Navigate to ODP using deeplink..
      - log:
          message: "Navigate to ODP using deeplink.."
          color: PURPLE_BOLD_BRIGHT    
      - executeFunction:
          name: functions.global.navigateToODPUseDeeplink

      # Verify the fulfillment and payment method displayed..
      - log:
          message: "Verify the fulfillment and payment method displayed.."
          color: PURPLE_BOLD_BRIGHT    
      - executeFunction:
          name: functions.orderDetailPage.verifySectionDisplayed
      - executeFunction:
          name: functions.orderDetailPage.verifyDeliveryType
          params:
            - name: expectedDeliveryType
              string: data.global.deliveryText.delivery
      - executeFunction:
          name: functions.orderDetailPage.verifyCardPayment
          params:
            - name: expectedCardLastFourDigit
              string: data.global.creditCard.amex.last4DigitsOnly

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
#   A F T E R   S C E N A R I O                                                                                       #
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #              
      - storeIn:
          key: testStatus
          value: passed

  - name: After
    after: true
    executeOnFailure: false
    flow:
      - executeFunction:
          name: functions.utils.after     