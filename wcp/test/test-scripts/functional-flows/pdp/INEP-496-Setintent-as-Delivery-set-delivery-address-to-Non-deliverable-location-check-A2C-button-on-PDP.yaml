#######################################################################################################################
#
# TEST CASE DETAILS: 
#
#   TC - INEP-496
#       Flow - Set intent as Delivery set delivery address to Non deliverable location check A2C button on PDP
#    
#
#   CONFLUENCE TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/COMM/WCP+Merging+Hallways+-+Weekly+Summary#25049188467b442a39856942ffbf14209cc3ea19a5
#
#   CONFLUENCE AUTOMATION TRACKING DASHBOARD:
#     https://confluence.walmart.com/display/~vn54czd/Native+Apps+Automation
#
#   JIRA OPIF TC:
#     https://jira.walmart.com/browse/OPIF-196601
#
#   JIRA TEST ID:
#     https://jira.walmart.com/browse/INEP-496
#
#   JIRA Test Plan ID:
#     https://jira.walmart.com/browse/INEP-455
#
#######################################################################################################################


general:
  testCaseId: INEP-496
  tags: INEP-496, OPIF-196601, p1-mh-opif-teflon-d-feb, p1-mh-opif-teflon, native-apps-opif-test-case, p1-mh-opif-prod
  combineScenarios: true

scenarios:

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   B E F O R E   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


  - name: Before
    before: true
    endTestOnFailure: true
    flow:

      - log: "BEFORE SCENARIO"

      - executeFunction:
          name: functions.utils.setMarketInfo

      - log: "BEFORE SCENARIO END"


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#   M A I N   S C E N A R I O
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


  - name: "Set intent as Delivery set delivery address to Non deliverable location check A2C button on PDP"
    flow:

     # Create account using astro api.
      - log:
          message: PREREQUISITE â€” Creating user account using Astro API..
          color: PURPLE_BOLD_BRIGHT
      - if: 
          condition: ${environment} == 'Production'
          then:
            - executeFunction: 
                name: functions.login.storeEmail
                params:
                  - name: userAndroidEmail
                    string: data.mh.inep-496.userEmail-android # Need to update
                  - name: useriOSEmail
                    string: data.mh.inep-496.userEmail-ios # Need to update
          else:
            - executeFunction:
                name: functions.astroApi.createNewAccountWithCreatePayload

      # Onboard to application..
      - log:
          message: "Onboard to the application.."
          color: PURPLE_BOLD_BRIGHT      
      - executeFunction:
          name: functions.onboardingToHomePage.usingPostalCode
          params:
            - name: PostalCode
              string: data.onboarding.userPostalCode
            - name: ShoppingExperience
              string: data.onboarding.onlineExclusiveStore          
      - executeFunction:
         name: functions.homePage.assertPageLoaded

      # Click on login and select sign in.
      - log:
          message: "Click on Login and Select Sign in.."
          color: PURPLE_BOLD_BRIGHT  
      - executeFunction:
          name: functions.global.tapAccountBtn          
      - executeFunction:
          name: functions.accountPage.tapSignInBtn

      # Login with existing user user.
      - log:
          message: "Login with existing user using password as authentication method and ensure user is logged in.."
          color: PURPLE_BOLD_BRIGHT       
      - executeFunction:
          name: functions.loginPage.userAuthentication
          params:
            - name: userEmail
              string: ${userEmail}
            - name: userPassword
              string: data.global.password.Password2

      - executeFunction:
          name: functions.global.tapShopBtn  

      - if: 
          condition: ${environment} == 'Production'
          then:
            - executeFunction: 
                name: functions.cartPage.clearCart

      # Select delivery intent from gic..
      - log:
          message: "Select delivery intent from gic"
          color: PURPLE_BOLD_BRIGHT
      - executeFunction:
          name: functions.global.gic.selectDeliveryIntent
          params:
            - name: page
              string: home

      # Select non deliverable Province address from GIC[Pending due to address]        

      # Navigate to PDP for 1P item
      - log:
          message: "Navigate to PDP for 1P item"
          color: PURPLE_BOLD_BRIGHT
      - executeFunction:
          name: functions.searchPage.getTheFirstAvailableItemAndNavigateToPDP
          params:
            - name: productArray
              string: data.global.items.1P.pickup

      # Validate add to cart in pdp [Pending due to address].        


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
#   A F T E R   S C E N A R I O                                                                                       #
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

  - name: After
    after: true
    executeOnFailure: false
    flow:
      - log: "AFTER SCENARIO"

      - log:
          message: "Main Scenario passed successfully."
          color: GREEN_BOLD

      - log: "AFTER SCENARIO ENDED"