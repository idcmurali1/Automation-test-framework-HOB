functions:

#--------------------------------------------------------------------------------------------------------------------

  # Description: This function validate add address panel text for new user in cart page
  # No param 
  - name: functions.cartPage.validateAddAddressPanelText
    platform: ios
    flow:
      - verifyIdentifier:
          label:
            - identifier: cartPage.addAddressPanelText
              contains: data.paymentMethod.addAddressText
      - log:
          message: "End function: cartPage.validateAddAddressPanelText"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validate shipping charge in cart page
  # No params
  - name: functions.cartPage.validateShippingCharge
    platform: ios
    flow:
      - scroll:
          direction: down
          untilIdentifier: cartPage.shippingChargeText
      - verifyIdentifier:
          present:
            - identifier: cartPage.shippingChargeText
            - identifier: cartPage.shippingChargeValue
      - getString:
          identifier: cartPage.shippingChargeValue
          attribute: label
          storeIn: productPrice
      - executeNode:
          file: wcp/test/helpers/Price/cleanPrice.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: cleanProductPrice
      - storeIn:
          key: shippingChargeAmountCartPage
          value: ${cleanProductPrice} 
      - log:
          message: Shipping charge is ${shippingChargeAmountCartPage}
      - if:
          condition: ${shippingChargeAmountCartPage} > 0 && ${shippingChargeAmountCartPage} != 'Free'
          then:
            - log:
                message: Shipping charge is present
      - log:
          message: "End function: cartPage.validateShippingCharge"
          color: BLUE

# #--------------------------------------------------------------------------------------------------------------------
# Description: To validate pickup address 
  - name: functions.cartPage.fulfillmentAddress
    platform: ios
    flow:
      - getString:
          identifier: cartPage.fulfillmentAddress
          attribute: label
          storeIn: fulfillmentAddressLabel
      - log: "Address dispalyed in cart - ${fulfillmentAddressLabel}"          
      - log:
          message: "End function: cartPage.fulfillmentAddress"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------
  # Description: This function validates delivery address on cart page.
  # Params:      ${streetAddress}
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__] ]
  - name: functions.cartPage.verifyDeliveryAddress
    platform: ios
    flow:
      - log:
          message: Expected Delivery address - "${streetAddress}".
          color: CYAN
      - try:
          flow:
            - verifyIdentifier:
                label:
                  - identifier: cartPage.fulfillmentAddress
                    contains: ${streetAddress}
          catch:
            flow:
              - getString:
                  identifier: cartPage.fulfillmentAddress
                  attribute: label
                  storeIn: returnedAddress
              - failTest:
                  message: Returned Delivery address - "${returnedAddress}".
      - log:
          message: "End function: cartPage.verifyDeliveryAddress"
          color: BLUE
#--------------------------------------------------------------------------------------------------------------------
 # Description: Validate if the fufillment type is contains expected text
  - name: function.cartPage.validateFufillmentType
    platform: ios
    flow:
      - verifyIdentifier:
          label:
            - identifier: cartPage.fulfillmentMethod
              contains: ${expectedFulfillmentType}
      - log:
          message: "End function: cartPage.validateFufillmentType" 
          color: BLUE
  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function generates a JSON object containing all the elements in the money box for the cart page.
  #     Note: The function currently retrieves the following elements:
  #           * Subtotal/Old subtotal
  #           * Savings
  #           * New Subtotal
  #           * Tax
  #           * 3P seller fee
  #           * Pickup and delivery fee
  #           * Estimated total
  #     TODO: This function may require validation to handle fees other than those mentioned above, as it may produce 
  #           unexpected results if the money box contains additional or different fees.
  # No params
  - name: functions.cartPage.getMoneyBoxData
    platform: ios
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.moneyBox.feeSummaryContainer
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.moneyBox.feeSummaryContainer
          else:
            - log : money box is dispalyed 
          
#       - numberOfChildElements:
#           identifier: cartPage.moneyBox.feeSummaryContainer
#           storeIn: indexCount
#           filterBy: cartPage.moneyBox.feeSummary.feeLabel
#       - loop:
#           begin: 0
#           end: ${indexCount}
#           mode: increment
#           storeIndex: i
#           flow:
#             - getString:
#                 identifier: cartPage.moneyBox.feeSummary.feeLabel
#                 storeIn: feeLabel
#                 attribute: label
#                 index: ${i}
#             - getString:
#                 identifier: cartPage.moneyBox.feeSummary.feeValue
#                 storeIn: feeValue
#                 attribute: label
#                 index: ${i}
#             - executeNode:
#                 file: wcp/test/helpers/checkoutPage/getMoneyBox.js
#                 args:
#                   - value: ${feeLabel}
#                   - value: ${feeValue}
#                   - value: ${moneyBoxValueArray}
#                 getResponse:
#                   storeIn: moneyBoxValueArray
#       - if:
#           identifier:
#             present:
#               - identifier: cartPage.moneyBox.feeSummary.oldSubTotal
#           then:
#             - executeFunction:
#                 name: function.moneyBox.savingsCalculation
#       - log:
#           message: 'Money box data in JSON format: ${moneyBoxValueArray}'
#           color: CYAN
#       - log:
#           message: "End functions: cartPage.getMoneyBoxData"
#           color: BLUE

    #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate cart quantity 
  # No params
  - name: functions.cartPage.validateCartIconSubTotal
    platform: ios
    flow:
      - verifyIdentifier:
          label:
            - identifier: homePage.cartTotalPrice
              contains: ${subTotalCart}
      - log:
          message: "End functions: cartPage.validateCartIconSubTotal"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate cart quantity 
  # No params
  - name: functions.cartPage.reserveTime.updateAndVerifyStore
    platform: ios
    flow:
      - getString:
          identifier: cartPage.reserveTimePage.storeName
          storeIn: storeDetails
          attribute: label
      - log: 
          message: 'Current pickup store: ${storeDetails}'
          color: GREEN_BOLD
      - executeFunction:
          name: functions.cartPage.reserveTime.tapchangeStoreLink
      - sleep:
          duration: 10000
      - executeFunction:
          name: functions.cartPage.reserveTime.storeSelection.storeRadioButton
          params:
            - name: storeIndex
              string: "2"
      - executeFunction:
          name: functions.cartPage.tapSavePickupStore
      - sleep:
          duration: 10000
      - getString:
          identifier: cartPage.reserveTimePage.storeName
          storeIn: updateStoreDetails
          attribute: label
      - log: 
          message: 'Updated pickup store: ${updateStoreDetails}'
          color: GREEN_BOLD
      - if:
          condition: ${storeDetails} != ${updateStoreDetails}
          then:
            - log: 
                message: "[✓] Store is successfully updated."
                color: GREEN_BOLD
          else:
            - log:    
                message: "[X] Failed to update the store."
                color: RED_BOLD
      - log:
          message: "End functions: cartPage.reserveTime.updateAndVerifyStore"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Descriotion: This function validate the slot time and fulfilment details in reserve time page and cart.
  # Params:      ${platform}   Platform the execution is happening.
  - name: functions.cartPage.reserveTime.validateFulfillmentTime
    platform: ios
    flow:
      - loop:
          begin: 0
          end: 3
          mode: increment
          storeIndex: slotIndex
          flow:
            - arithmetic:
                expression: ${slotIndex} + 1;
                storeIn: locatorIndex
            - executeFunction:
                name: functions.reserveATime.tapBookSlotDateBtn
                params:
                  - name: index
                    string: ${locatorIndex}
            - click:
                identifier: cartPage.reserveTime.firstSlotRadioBtn
            - getString:
                identifier: cartPage.reserveTime.firstSlotRadioBtnText
                attribute: label
                storeIn: timeSlot
            - executeNode:
                file: wcp/test/helpers/CartPage/slotReservationDetails
                args:
                  - value: ${timeSlot}
                  - value: ${slotIndex}
                  - value: ${platform}
                getValue:
                  - key: day
                    storeIn: day
                  - key: date
                    storeIn: date
                  - key: cartSlotDetails
                    storeIn: cartSlotDetails
            - log: 
                message: "Day: ${day} | Data: ${date} | Fulfillment Time : ${cartSlotDetails}"
                color: GREEN_BOLD
            - verifyIdentifier:
                label:
                  - identifier: cartPage.reserveTime.carouselDayText #<-----${locatorIndex}
                    contains: ${day}
            - verifyIdentifier:
                label:
                  - identifier: cartPage.reserveTime.carouselDateText #<-----${locatorIndex}
                    contains: ${date}
            - executeFunction:
                name: functions.reserveATime.tapReserveBtn
            - if:
                identifier:
                  present:
                    - identifier: cartPage.reserveTime.errorTitle
                then:
                  - click:
                      identifier: cartPage.reserveTime.retryButton
                else:
                  - break: true
      - verifyIdentifier:
          present:
            - identifier: cartPage.fulfillmentTime #cartPage.fulfillmentTimeText #<----${cartSlotDetails}
      - log:
          message: "End functions: cartPage.reserveTime.validateFulfillmentTime"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates below minimum fee
  # Params expectedbelowOrderMinFee
  - name: functions.cartPage.validateBelowMinimumFee
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.POSSection.belowOrderMinFeeLabel
          value:
            - identifier: cartPage.POSSection.belowOrderMinFeeValue
              contains: ${expectedbelowOrderMinFee}

      - log:
          message: "End functions: cartPage.validateBelowMinimumFee"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates the price of an specific product in cart.
  # Params: 
  #     ${productName} [Mandatory] Product to validate in cart.
  #     ${expectedUnitPrice} [Mandatory] Unit price of the product. 
  #     ${expectedCurrentPrice} [Mandatory] Current price of the product.
  #     ${isProductDiscounted} [Optional] When true, adds an aditional validation for a discounted product. 
  #     ${expectedOriginalPrice} [Optional] Original price of the product (before savings).

  - name: functions.cartPage.assertProductPriceDetails
    platform: ios
    flow:
      - executeFunction:
          name: functions.cartPage.assertUnitPrice
          params:
            - name: productName
              string: ${productName}
            - name: expectedUnitPrice
              string: ${expectedUnitPrice}
      - if:
          identifier:
            label:
              - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
                contains: "${expectedCurrentPrice}"
          then:
            - log:
                message: "[✓] Current product price is the expected one"
                color: GREEN_BOLD
            - if:
                condition: ${isProductDiscounted} 
                then:
                  - verifyIdentifier:
                      label:
                        - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
                          contains: "${expectedOriginalPrice}"
                  - log:
                        message: "[✓] Original price is the expected one"
                        color: GREEN_BOLD
                  - verifyIdentifier:
                      label:
                        - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
                          contains: "${expectedPriceSavings}"
                  - log:
                        message: "[✓] Price savings are the expected ones"
                        color: GREEN_BOLD  
          else:
            - failTest:
                message: "[X] There was a problem while trying to obtain the product price details"
      - log:
          message: "End function: cartPage.assertProductPriceDetails"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates the price of an specific product in cart.
  # Params: 
  #     ${productName} [Mandatory] Product to validate in cart.
  #     ${expectedUnitPrice} [Mandatory] Current price of the product.

  - name: functions.cartPage.assertUnitPrice
    platform: ios
    flow:
      - if:
          identifier:
            label:
              - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
                contains: data.itemMeasures.pieces
          then:
              - verifyIdentifier:
                    label:
                      - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
                        contains: "${expectedUnitPrice}"
              - log:
                  message: "[✓] Expected unit price for eaches product is correct"
                  color: GREEN_BOLD
          else:
            - if:
                identifier:
                  label:
                    - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
                      contains: "data.itemMeasures.weight" #TODO - Modify expected text for weightable products
                then:
                  - verifyIdentifier:
                      label:
                        - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
                          contains: "${expectedUnitPrice}"
                  - log:
                        message: "[✓] Expected unit price for weightable product is correct"
                        color: GREEN_BOLD
          else:
            - failTest:
                message: "[X] There was a problem while trying to obtain the product unit price and measure"
      - log:
          message: "End function: cartPage.assertUnitPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function will validate if the alert text is present for unavailable item
  # Params:   ${ItemCount}      [Mandatory]  Item count
  - name: functions.cartPage.validatOOSAlertText
    platform: ios
    flow:
      - scroll:
          direction: up
          untilIdentifier: cartPage.addAddressPanel           
      - verifyIdentifier:
          present:
            - identifier: cartPage.addAddressPanel
            - identifier: cartPage.addAddressPanelText
      - verifyIdentifier:
          label:
            - identifier: cartPage.addAddressPanelText
              contains: ${ItemCount}
      - log:
          message: "End function: cartPage.oosAlertText.isPageDisplayed"
                  
  #--------------------------------------------------------------------------------------------------------------------
 # Description: This functions validate range of EDD
  # NoParam 
  - name: functions.cartPage.validateEDDRange
    platform: ios
    flow:
      - getString:
          identifier: cartPage.arrivesByDate.item1
          attribute: label
          storeIn: EDD1
      - log:
          message: "EDD of first item is ${EDD1}"
      - getString:
          identifier: cartPage.arrivesByDate.item2
          attribute: label
          storeIn: EDD2
      - log:
          message: "EDD of second item is ${EDD2}"             
      - log:
          message: "End function: cartPage.validateEDDRange"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------                                
  # Description: This function will validates the quantity added in cart
  # ${productName} [Mandatory] Product to validate in cart.
  # ${productQty} [Mandatory] Product to validate in cart.
  - name: functions.cartPage.validateQuantity 
    flow:          
      - verifyIdentifier:
            label:
            - identifier: cartPage.itemQuantityValidation  # Mappings need to be updated.
              contains: "${productQty}"          
      - log:
          message: "End function: cartPage.validateQuantity"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Navigate to bank promotion bottom sheet

  - name: functions.cartPage.navigateToBankPromationBottomSheet
    platform: ios
    flow:
      - scroll:
          direction: down
          untilIdentifier: cartPage.itemDetails.containerView
          position: center
      - click :
          identifier: cartPage.itemDetails.containerView       
          coordinates: 50%, 50%
      - if: 
          identifier:
            notPresent:
              - identifier: bankPromotion.subtitle
          then:
            - click :
                identifier: cartPage.itemDetails.firstContainer
                coordinates: 50%, 50%
      - log:
          message: "End function: cartPage.navigateToBankPromationBottomSheet"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
