functions:
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps on start shopping button in cart page
  # No params
  - name: functions.cartPage.tapStartShoppingBtn
    flow:
      - click:
          identifier: cartPage.startShoppingBtn
          wait: 5000
      - log:
          message: "End function: cartPage.tapStartShoppingBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps on remove button in cart page
  # No params
  - name: functions.cartPage.tapRemoveBtn
    flow:
      - executeFunction:
          name: functions.cartPage.scrollDownToRemoveBtn
      - click:
          identifier: cartPage.removeBtn
          wait: 1000
      - log:
          message: "End function: functions.cartPage.tapRemoveBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function scroll down remove button in cart page
  # No params
  - name: functions.cartPage.scrollDownToRemoveBtn
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.removeBtn
          then:
              - log: "Remove button is visible"
          else:    
              - scroll:
                  direction: down
                  untilIdentifier: cartPage.removeBtn
                  scrollLimit: 2
                  position: center
      - log:
          message: "End function: cartPage.scrollDownToRemoveBtn"
          color: BLUE
      

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps on change/reserve button in cart page , then user will be navigated to reserve time page
  # No params
  - name: functions.cartPage.tapReserveATimeBtn
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.reserveATimeBtn
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.reserveATimeBtn
      - sleep:
          duration: 5000
      - click:
          identifier: cartPage.reserveATimeBtn
      - log:
          message: "End function: cartPage.tapReserveATimeBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates change/reserve button is displayed in cart page
  # No params
  - name: functions.cartPage.verifyReserveATimeBtnIsDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.reserveATimeBtn
          then:
            - log: "Reserve a time button is displayed"
          else:
            - failTest:
                message: "Reserve a time button is not displayed"
      - log:
          message: "End function: cartPage.verifyReserveATimeBtnIsDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps on Continue button in cart page
  # [Option] closeWplusBottomSheet[US ONLY] ture-> close W+ bottome sheet, false -> do not close W+ bottom sheet
  - name: functions.cartPage.tapContinueToCheckoutBtn
    flow:
      - sleep:
          duration: 15000                      
      - click:
          identifier: cartPage.continueToCheckout
      - if:
          condition: ${market} == 'US'
          then:
            - executeFunction:
                name: functions.checkoutPage.walletPopup.tapCloseBtn      
      - if:
          condition: ${environment} == 'Teflon'
          then:
            - sleep:
                duration: 15000
            - loop:
                begin: 0
                end: 3
                mode: increment
                flow:
                  - if:
                      identifier:
                        notPresent:
                          - identifier: checkOutPage.placeOrder.errorPopUpTitle
                      then:
                        - break: true
                      else:
                        - click:
                            identifier: checkOutPage.placeOrder.errorPopUpReturnToCart
                        - sleep:
                            duration: 5000
                  - click:
                      identifier: cartPage.continueToCheckout
      - if:
          condition: ${closeWplusBottomSheet} == 'null'
          then:
            - storeIn:
                key: closeWplusBottomSheet
                value: true
      - executeFunction:
          name: functions.checkoutPage.closeWplusBottomSheet
      - log:
          message: "End function: cartPage.continueToCheckout"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
   # Description: This functions check if the smart nudge is displayed
  # No Param
  - name: functions.cartPage.isSmartNudgeViewDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if: 
          identifier:
            present:
              - identifier: cartPage.smartNudgeView
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: cartPage.isSmartNudgeViewDisplayed (Displayed)"
                color: BLUE
          else: 
            - log:
                message: "End function: cartPage.isSmartNudgeViewDisplayed (Not displayed)"
                color: BLUE

  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This method taps on smart nudge close button
  # No Param
  - name: functions.cartPage.smartNudgeView.tapCloseBtn
    flow:
      - click:
          identifier: cartPage.smartNudgeView.closeBtn
      - log:
          message: "End function: cartPage.smartNudgeView.tapCloseBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function dismiss the Smart Nudge view if displayed.
  # No Params
  - name: functions.cartPage.dismissSmartNudgeView.ifDisplayed
    flow:
      - executeFunction:
          name: functions.cartPage.isSmartNudgeViewDisplayed
      - if:
          condition: ${returnedIsDisplayed}
          then:
            - executeFunction:
                name: functions.cartPage.smartNudgeView.tapCloseBtn
      - log:
          message: "End function: functions.cartPage.isSmartNudgeViewDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function check if the cart page is displayed
  # No params
  - name: functions.cartPage.isCartPageDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if:
          identifier:
            present:
              - identifier: cartPage.continueToCheckout
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: cartPage.isPageDisplayed (Displayed)"
                color: BLUE
          else: 
            - log:
                message: "End function: searchResultPage.protectionPlan.isPageDisplayed (Not displayed)"
                color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Scroll down to POS
  - name: functions.cartPage.scrollDownToPOS
    flow:
      - scroll:
          direction: down
          untilIdentifier: cartPage.estimatedTotalValue
      - log:
          message: "End function: cartPage.scrollDownToPOS"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Reduced price validation
  - name: functions.cartPage.pos.validateReducedPrice
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.pos.savePrice
            - identifier: cartPage.pos.savedPriceText
      - log:
          message: "End function: cartPage.pos.validateReducedPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validate product price.
  # Params:      ${productName}  Name of the product to validate in cart.
  #              ${productPrice}  Price of the product to validate in cart.
  - name: functions.cartPage.validateProductPrice
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.productPrice # <-${productName},${productPrice}
      - log:
          message: "End function: cartPage.cartPage.validateProductPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validate product quantity label.
  - name: functions.cartPage.validateQuantityLabelDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.quantityLabel
      - log:
          message: "End function: cartPage.validateQuantityLabelDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: No shipping charge validation
  - name:  functions.cartPage.pos.validateNoShippingCharge
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.pos.shippingFreeValue
            - identifier: cartPage.pos.shippingFreeTitle
      - log:
          message: "End function: cartPage.pos.validateNoShippingCharge"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validate moneybox in cart page
  # No params
  - name: functions.cartPage.validateMoneybox
    flow:
      - executeFunction:
          name: functions.cartPage.scrollDownToPOS
      - verifyIdentifier:
          present:
            - identifier: cartPage.subtotalText
            - identifier: cartPage.subtotalValue
            - identifier: cartPage.estimatedTotalLabel
            - identifier: cartPage.estimatedTotalValue
      - log:
          message: "End function: cartPage.validateMoneybox"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validate item details in cart page
  # No params
  - name: functions.cartPage.validateItemDetails
    flow: 
      - sleep:
          duration: 10000
      - if:
          identifier:
            present:
              - identifier: cartPage.seeDetails
          then:
            - click:
                identifier: cartPage.seeDetails
      - verifyIdentifier:
          present:
            - identifier: cartPage.fulfillmentMethod
            - identifier: cartPage.fulfillmentTime
        #   - identifier: cartPage.fulfillmentAddress
            - identifier: cartPage.productImage
            - identifier: cartPage.productName
            - identifier: cartPage.itemCount
            - identifier: cartPage.itemCountIncrementButton
            - identifier: cartPage.itemCountDecrementButton
      - log:
          message: "End function: cartPage.validateItemDetails"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates return details are displayed in cart page
  # No params
  - name: functions.cartPage.validateReturnItemDetails
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.returnText
      - if:
          identifier:
            present:
              - identifier: cartPage.returnDetailsButton
          then:
            - log:
                message: "Returnable item, details button is displayed"
                color: GREEN
      - log:
          message: "End function: cartPage.validateReturnItemDetails"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates return details popup is displayed in cart page
  # No params
  - name: functions.cartPage.validateReturnItemDetailsPopUp
    flow:
      - click:
          identifier: cartPage.returnDetailsButton
      - verifyIdentifier:
          present:
            - identifier: cartPage.returnDetails.returnWithinTitle
            - identifier: cartPage.returnDetails.returnWithinContent
            - identifier: cartPage.returnDetails.returnDetailsTitle
            - identifier: cartPage.returnDetails.returnDetailsContent
            - identifier: cartPage.returnDetails.returnDetailsFooter
      - executeFunction:
          name: functions.global.closePopUp
      - log:
          message: "End function: cartPage.validateReturnItemDetailsPopUp"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Navigate to bank promotion bottom sheet
  - name: functions.cartPaget.navigateToPDP
    flow:
      - click:
          identifier: cartPage.productImage
      - log:
          message: "End function: cartPaget.navigateToPDP"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validate item details like product tile(container), price, quantity, remove btn, 
  # save for later btn in cart page.
  # Params:      ${productName}  Name of the product to validate in cart.
  #              ${productPrice}  Price of the product to validate in cart.
  #              ${productQty}  Quantity of the product to validate in cart.
  - name: functions.cartPage.validateProductDetails
    flow:
      - loop:
          begin: 0
          end: 2
          mode: increment
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: cartPage.productMoveToSaveForLater
                    # - identifier: cartPage.productTile
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: cartPage.productMoveToSaveForLater
                      position: center
                      scrollLimit: 3
            - try:
                flow:
                  - verifyIdentifier:
                      present:
                        - identifier: cartPage.productTile  #params <- ${productName}
                  - break: true
                catch:
                  flow:
                    - scroll:
                        direction: up
                        untilIdentifier: cartPage.productMoveToSaveForLater
                        position: center
                        scrollLimit: 3
      - if:
          identifier:
            present:
              - identifier: cartPage.productTile  #params <- ${productName}
              - identifier: cartPage.productPrice  #params <- ${productPrice}
              - identifier: cartPage.productQty  #params <- ${productQty}
              - identifier: cartPage.productRemoveBtn  #params <- ${productName}
              - identifier: cartPage.productMoveToSaveForLater  #params <- ${productName}
          then:
            - log:
                message: "[✔] Assertion successful: found ${productName} in cart."
                color: GREEN_BRIGHT
          else:
            - failTest:
                message: "[x] Assertion failed: ${productName} not found in cart page."
      - log:
          message: "End Function: functions.cartPage.validateProductDetails"
          color: BLUE_BOLD

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on see details in cart page if present
  # No params
  - name: function.cartPage.tapSeeDetails 
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.seeDetails
            timeout: 5000
          then:
            - click:
                identifier: cartPage.seeDetails
      - log:
          message: "End function: cartPage.tapSeeDetails"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------


  # Description: This function taps on the address link in the cart page
  # No params required
  - name: functions.cartPage.tapOnAddressLink
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.fulfillmentAddress
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.fulfillmentAddress
      - click:
          identifier: cartPage.fulfillmentAddress
      - log: 
          message: "End function: functions.cartPage.tapOnAddressLink" 
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function closes the address selector bottom sheet
  # No params required
  - name: functions.cartPage.dismissAddressSelectorPage
    flow:
      - click:
          identifier: cartPage.addressList.closeButton
      - log:
          message: "End Function: functions.cartPage.dismissAddressSelectorPage"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function scrolls to the top of cart in case of Android
  # No params required
  - name: functions.cartPage.scrollToTopOfCart
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.sectionHeader
          then:
            - loop:
                begin: 0
                storeIndex: i
                end: 3
                flow:
                  - scroll:
                      direction: up
                      untilIdentifier: cartPage.sectionHeader
                  - if:
                      identifier:
                        present:
                          - identifier: cartPage.sectionHeader
                      then:
                        - break: true
          else:
            - log:
                message: "Cart top is already in view, skipping scroll."
                color: GREEN_BOLD
      - log:
          message: "End Function: functions.cartPage.scrollToTopOfCart"
          color: BLUE_BOLD

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function will validate if the Add address panel is displayed in cart page
  # No Param
  - name: functions.cartPage.addAddressPanel.isPageDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - scroll:
          direction: up
          untilIdentifier: cartPage.addAddressPanel           
      - if:
          identifier:
            present:
              - identifier: cartPage.addAddressPanel
              - identifier: cartPage.addAddressPanelText
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: cartPage.addAddressPanel.isPageDisplayed (returnedIsDisplayed)"
                color: CYAN
          else:
            - log:
                message: "End function: cartPage.addAddressPanel.isPageDisplayed (Not displayed)"
                color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Asserts the Cart Subtotal is not null and is greater than $0.00
  # No params
  # Returns: ${cleanSubtotalValue}
  - name: functions.cartPage.assertCartSubtotal.notNull
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.subtotalValue
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.subtotalValue
                wait: 1000
      - getString:
          identifier: cartPage.subtotalValue
          storeIn: displayedSubtotalValue
      - executeNode:
          file: wcp/test/helpers/Price/cleanPrice.js
          args:
            - value: ${displayedSubtotalValue}
          getResponse:
            storeIn: cleanSubtotalValue
      - if:
          condition: ${cleanSubtotalValue} <= 0.00
          then:
            - failTest:
                message: "Subtotal Value is not correct: '${cleanSubtotalValue}'"
      - log:
          message: "End function: functions.cartPage.assertCartSubtotal.notNull"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Asserts the Cart Total is not null and is greater than $0.00
  # No params
  - name: functions.cartPage.assertCartTotal.notNull
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.estimatedTotalValue
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.estimatedTotalValue
                wait: 1000
      - getString:
          identifier: cartPage.estimatedTotalValue
          storeIn: displayedTotalValue
      - executeNode:
          file: wcp/test/helpers/Price/cleanPrice.js
          args:
            - value: ${displayedTotalValue}
          getResponse:
            storeIn: cleanTotalValue
      - if:
          condition: ${cleanTotalValue} <= 0.00
          then:
            - failTest:
                message: "Total Value is not correct: '${cleanTotalValue}'"
      - log:
          message: "End function: functions.cartPage.assertCartTotal.notNull"
          color: BLUE  
 #--------------------------------------------------------------------------------------------------------------------

  # Description: Validate klarna financing info in cart page.
  # No params
  - name: functions.cartPage.validateKlarnaDetailsOnHeader
    flow:
      - sleep:
          duration: 10000
      
      - scroll:
             direction: down
             untilIdentifier: cartPage.klarnaplanInfo
             wait: 1000    
      - verifyIdentifier:
          present:
            - identifier: cartPage.klarnaplanInfo
            - identifier: cartPage.klarnaplanIcon
            - identifier: cartPage.klarnaplaninfoIcon
      - log:
          message: "End functions: functions.cartPage.validateKlarnaDetailsOnHeaderr"
          color: BLUE
#--------------------------------------------------------------------------------------------------------------------

  # Description: Validate sales financing info in cart page.
  # No params
  - name: functions.cartPage.validateSalesFinancingDetailsOnHeader
    flow:
      
      - scroll:
           direction: down
           untilIdentifier: cartPage.salesFinancingplanInfo
           wait: 1000    
      - verifyIdentifier:
          present:
            - identifier: cartPage.salesFinancingplanInfo
            - identifier: cartPage.salesFinancingplanIcon
            - identifier: cartPage.salesFinancingplanInfoIcon
        
      - log:
          message: "End functions: functions.cartPage.validateSalesFinancingDetailsOnHeader"
          color: BLUE          

 #--------------------------------------------------------------------------------------------------------------------

  # Description: Validate sales financing and klarna info in cart page.
  # No params
  - name: functions.cartPage.validateNoFinancingDetailsDisplayed
    flow:
      - verifyIdentifier:
          notPresent:
            - identifier: cartPage.klarnaplanInfo
            - identifier: cartPage.salesFinancingplanInfo
      - log:
          message: "End functions: functions.cartPage.validateNoFinancingDetailsDisplayed"
          color: BLUE          
#--------------------------------------------------------------------------------------------------------------------


  # Description: Tap on change fufillment to pick up button
  - name: functions.cartPage.tapOnPickUpButton
    flow:
      - click:
          identifier: cartPage.selectPickupBtn
      - sleep:
         duration: 5000
      - log: 
          message: "End function: cartPage.tapOnPickUpButton"
          color: BLUE

       
  #--------------------------------------------------------------------------------------------------------------------
  # Description: Verify change fulfillemnt to delivert button is displayed
  - name: functions.cartPage.verifyDeliveryButtonIsDisplayed
    flow:
      - sleep:
          duration: 15000
      - verifyIdentifier:
          present:
            - identifier: cartPage.selectDeliveryBtn
      - log: "Fufillment is Pickup now"
      - log:
          message: "End function: cartPage.verifyDeliveryButtonIsDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This methods taps the button to switch from delivery to pickup
  # No param 
  - name: functions.cartPage.tapDeliveryOption
    flow: 
      - if: 
          identifier:
            present:
              - identifier: cartPage.selectDeliveryBtn
            timeout: 5000
          then:
            - click:
                identifier: cartPage.selectDeliveryBtn #Delivery means shipping in the U.S. market.
            - sleep:
                duration: 5000
      - log: 
          message: "End function: functions.cartPage.tapDeliveryOption"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Asserts the Cart is empty.
  # No Params
  - name: functions.cartPage.assertCartIsEmpty
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.cartEmptyTitle
          timeout: 5000
      - log:
          message: "End function: functions.cartPage.assertCartIsEmpty"
          color: BLUE  

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This method save pickup store once it is selected
  # No param 
  - name: functions.cartPage.tapSavePickupStore
    flow:
      - click:
          identifier: cartPage.confirmStoreForPickupBtn
      - log: 
          message: "End function: cartPage.tapSavePickupStore"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This method select store radio btn
  # No param 
  - name: functions.cartPage.reserveTime.storeSelection.selectStoreRadioBtn
    flow: 
      - click:
          identifier: cartPage.reserveTime.storeSelection.storeSelectorRadioBtn
      - log:
          message: "End function: cartPage.reserveTime.storeSelection.selectStoreRadioBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This method enter postal code in store select page.
  # Param:       ${zipcode}   Zip code to enter in the store selection page.
  - name: functions.cartPage.reserveTime.selectStore.enterZipCodeToSearchStore
    flow:
      - enterText:
          identifier: selectStorePage.locationSearchTextBox
          string: ${zipCode}
          clickFirst: true
          clearField: true
          pressEnter: true
      - log: 
          message: "End function: cartPage.reserveTime.tapchangeStoreLink"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This method taps on change store link. 
  # No param 
  - name: functions.cartPage.reserveTime.tapchangeStoreLink
    flow:
      - click:
          identifier: cartPage.reserveTimePage.changeStoreLink
      - log: 
          message: "End function: cartPage.reserveTime.tapchangeStoreLink"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This method taps on change store link. 
  # Params:      ${storeRadioIndex}  store radio button index
  - name: functions.cartPage.reserveTime.storeSelection.storeRadioButton
    flow:
      - click:
          identifier: cartPage.reserveTime.storeSelection.secondStoreRadioBtn
      - log: 
          message: "End function: cartPage.reserveTime.storeSelection.storeRadioButton"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
    # Description: This function expand Pickup and DeliveryOptions on the cart page.
  # No Param

  - name: functions.cartPage.expandPickupDeliveryOptions
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.PickupDeliveryOptionsContainer
            timeout: 5000
          then:
            - click:
                identifier: cartPage.expandPickupDeliveryOptionsIcon
          else:
            - log :  PickupDeliveryOptions is expanded
      
      - log:
          message: "End function: cartPage.gic.expandIfCollapsed"
          color: BLUE        

  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This method check if the Reduced prices/strikethrough price is shown
  # No param 
  - name: functions.cartPage.validateReducedPrice 
    flow: 
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.savePrice 
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.savePrice 
      - verifyIdentifier:
          present:
            - identifier: cartPage.savePrice 

      - log: 
          message: "End function: cartPage.validateReducedPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description:  This function asserts all the products in the ${productDetailsArray} array are displayed. The function
  #               will fail at the first product not displayed and will not continue asserting for the rest.
  # Params:       ${productDetailsArray}  [Mandatory]  Global Product Details Array created by the functio
  - name: functions.cartPage.assertAllProductsDisplayed
    flow:
      - log:
          message: "Products Array: ${productDetailsArray}"
          color: CYAN
      - sleep:
          duration: 5000
      - executeFunction:
          name: function.cartPage.tapSeeDetails
      - executeFunction:
          name: functions.utils.javascript.getArrayLength # <-- ${productDetailsArray} / RETURNS: ${getArrayLength} -->
      - loop:
          begin: 0
          end: ${getArrayLength}
          storeIndex: index
          flow:
            - executeFunction:
                name: functions.utils.javascript.getProductDetails # <-- ${productDetailsArray}, ${index} / RETURNS: ${productName} -->
            - log:
                message: "Checking product: '${productName}'"
                color: CYAN
            - executeFunction:
                name: functions.cartPage.dismissSmartNudgeView.ifDisplayed
            - executeFunction:
                name: functions.cartPage.scrollToTopOfCart                    
            - if:
                identifier:
                  notPresent:
                    - identifier: cartPage.productNameLabel.byProductName # <-- ${productName}
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: cartPage.productNameLabel.byProductName # <-- ${productName}
                      position: center
                      scrollLimit: 3
            - if:
                identifier:
                  present:
                    - identifier: cartPage.productNameLabel.byProductName # <-- ${productName}
                then:
                  - log:
                      message: "✓ Product Found: '${productName}'"
                      color: GREEN_BOLD
                else:
                  - failTest:
                      message: "X Product Not Found: '${productName}'"
      - log:
          message: "End function: functions.cartPage.assertAllProductsDisplayed"      
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: Assert fufillment Type in the cart
  # Params:       ${fufillmentText} Validate the Fulfillment type displayed in cart
  - name: functions.cartPage.assertFulfillmentTypeInCart
    flow:
      - getString:
            identifier: cartPage.fulfillmentMethod
            storeIn: fulfillment
      - log: 
            message: "Fulfillment Method is '${fulfillment}'"
            color: CYAN

      - if:
          condition: ${fulfillmentText} == 'Delivery from store'
          then: 
            - storeIn:
                  key: viewType
                  value: data.cartPage.deliveryfulfillment
          else:
            - if:
                condition: ${fulfillmentText} == 'Shipping' || ${fulfillmentText} == 'shipping' || ${fulfillmentText} == 'Envío'
                then:
                  - storeIn:
                      key: viewType
                      value: data.cartPage.shippingFulfillment
      - if:
          condition: ${fulfillmentText} == 'Curbside pickup' || ${fulfillmentText} == 'Pickup' || ${fulfillmentText} == 'pickup' || ${fulfillmentText} == 'Cueillette'
          then:
            - storeIn:
                key: viewType
                value: data.cartPage.pickupFulfillmentType
            - executeNode:
                file: wcp/test/helpers/stringContains.js
                args:
                  - value: ${fulfillment}
                  - value: ${fulfillmentText}
                getResponse:
                  storeIn: isExpectedFulfillment
      - if:
          condition: ${fulfillment} == ${viewType} || ${isExpectedFulfillment}
          then:
              - log:
                  message: "✓ Fulfillment Method is '${fulfillmentText}'"
                  color: GREEN_BOLD
          else:
              - failTest:
                  message: "X Fulfillment Method is NOT '${fulfillmentText}'. It is displayed as '${fulfillment}' in the cart"
      - log:
            message: "End function: cartPage.assertFulfillmentTypeInCart"
            color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: Get fufillment Type
  - name: functions.cartPage.getFulfillmentType
    flow:
      - executeFunction:
          name: functions.cartPage.storeFulfillmentText
      - executeFunction:
          name: functions.cartPage.storeDefaultFulfillmentValues
      - if:
          condition: ${fufillment} == ${freeDeliveryDefaultFulfillment} || ${fufillment} == ${deliveryDefaultFulfillment}
          then:
            - storeIn:
                key: cartPage.fulfillmentType
                value: Delivery
      - if:
          condition: ${fufillment} == ${freePickupDefaultFulfillment} || ${fufillment} == ${pickupDefaultFulfillment}
          then:
            - storeIn:
                key: cartPage.fulfillmentType
                value: Pickup
      - log:
          message: "End function: cartPage.getFulfillmentType"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Store fufillment Text
  - name: functions.cartPage.storeFulfillmentText
    flow:
      - getString:
          identifier: cartPage.fulfillmentMethod
          storeIn: fufillment
      - log:
          message: "End function: cartPage.storeFulfillmentText"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate MSI Badge
  - name: functions.cartOrProductDetailPage.validateMSIBadge
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartOrProductDetailPage.MSIBadge
      - log:
          message: "End function: cartOrProductDetailPage.validateMSIBadge"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate RollBack Badge
  - name: functions.cartOrProductDetailPage.rollBackBadge
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartOrProductDetailPage.rollBackBadge
      - log:
          message: "End function: cartOrProductDetailPage.rollBackBadge"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: This function tab on save for later button
  # Param:       ${productName}   Product name to move to save for later.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__]   CA [__]]
  - name: functions.cartPage.tabSaveForLaterBtn
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.productContainer
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.productContainer
                position: center
                scrollLimit: 5
                timeout: 10000
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.productMoveToSaveForLater
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.productMoveToSaveForLater
                position: center
      - click:
          identifier: cartPage.productMoveToSaveForLater # <-- #{productName}
      - log:
          message: "End function: cartPage.tabSaveForLaterBtn"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validate if the product is present in save for later.
  # Param:       ${productName}   Product name validate in save for later.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__]   CA [__]]
  - name: functions.cartPage.validateProductInSaveForLater
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.saveForLaterTitle
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.saveForLaterTitle
                timeout: 10000
                scrollLimit: 5
                position: center
      - verifyIdentifier:
          present:
            - identifier: cartPage.saveForLaterProductTile  # <-- ${productName}
      - log:
          message: "End function: cartPage.validateProductInSaveForLater"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: Move product to save for later and validate product in SFL
  # Param:       ${productName}   Product name to move to save for later.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__]   CA [__]]
  - name: functions.cartPage.moveAndVerifyProductMoveToSFL
    flow:
      - executeFunction:
          name: functions.cartPage.tabSaveForLaterBtn # <-- ${productName}
      - log:
          message: ✔ Item ${productName} sucessfully moved to save for later.
          color: GREEN_BOLD
      - executeFunction:
          name: functions.cartPage.validateProductInSaveForLater
      - log:
          message: ✔ Item ${productName} is present in save for later.
          color: GREEN_BOLD
      - log:
          message: "End function: cartPage.moveAndVerifyProductMoveToSFL"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Move product to save for later and validate product in SFL
  # Param:       ${productName}   Product name to move to save for later.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__]   CA [__]]
  - name: functions.cartPage.moveAndValidateProductToCartFromSFL
    flow:
      - executeFunction:
          name: functions.cartPage.tabMoveToCartBtn # <-- ${productName}
      - log:
          message: ✔ Item ${productName} sucessfully moved to cart from save for later.
          color: GREEN_BOLD
      - executeFunction:
          name: functions.cartPage.validateProductInCart # <-- ${productName}
      - log:
          message: ✔ Item ${productName} present in cart.
          color: GREEN_BOLD
      - log:
          message: "End function: cartPage.moveAndVerifyProductMoveToSFL"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate product details are displayed in SFL
  # Param:       ${productName}   Product name to assert.
  # Param:       ${productPrice}  Product price to assert.
  # Param:       ${productQty}    Product quantity to assert.
  - name: functions.cartPage.validateProductDetailsInSFL
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.saveForLaterTitle
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.saveForLaterTitle
                timeout: 10000
                scrollLimit: 5
                position: center

      - verifyIdentifier:
          present:
            - identifier: cartPage.saveForLaterProductTile  # <-- ${productName}
            - identifier: cartPage.saveForLater.ProductPrice # <-- ${productName}, ${productPrice}
            - identifier: cartPage.saveForLater.ProductQuantity # <-- ${productName}, ${productQty}
            - identifier: cartPage.saveForLater.ProductThumbnail # <-- ${productName}
      - log:
          message: "End function: functions.cartPage.validateProductDetailsInSFL"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate save for later is not displayed
  - name: functions.cartPage.validateSFLSectionIsNotDisplayed
    flow:
      - executeFunction:
          name: functions.cartPage.scrollDownToPOS
      - verifyIdentifier:
          notPresent:
            - identifier: cartPage.saveForLaterTitle
      - log:
          message: "End function: functions.cartPage.validateSFLSectionIsNotDisplayed"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: This function tab on move to cart button
  # Param:       ${productName}   Product name to move to cart.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__]   CA [__]]
  - name: functions.cartPage.tabMoveToCartBtn
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.saveForLaterProductTile
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.saveForLaterProductTile
                position: center
                scrollLimit: 5
                timeout: 10000
      - click:
          identifier: cartPage.productMoveToCartBtn # <-- ${productName}
      - log:
          message: "End function: cartPage.tabMoveToCartBtn"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: This function assert the product is present in cart.
  # Param:       ${productName}   Product name to validate in cart.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__]   CA [__]]
  - name: functions.cartPage.validateProductInCart
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.productContainer
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.productContainer
                timeout: 10000
                scrollLimit: 5
      - verifyIdentifier:
          present:
            - identifier: cartPage.productContainer # <-- ${productName}
            - identifier: cartPage.itemCountIncrementButton # <-- ${productName}
            - identifier: cartPage.itemCountDecrementButton # <-- ${productName}
      - log:
          message: "End function: cartPage.validateProductInCart"
          color: BLUE

#-------------------------------------------------------------------------------------------------------------------

  # Description: This function valid fields in cart money box
  # Params:  ${moneyBoxFieldName}      [Mandatory]  Money box field name
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__] ]
  - name: functions.cartPage.validateMoneyBoxField
    flow:
      - executeFunction:
          name: functions.globalPages.isMoneyBoxDisplayed
      - if:
          condition: '!${returnedIsDisplayed}'
          then: 
            - failTest:
                message: "Money box not displayed"
      - verifyIdentifier:
          present:
            - identifier: cartPage.moneyBox.fieldName
            - identifier: cartPage.moneyBox.fieldValue
      - log:
          message: "End flow: functions.checkoutPage.applyValidPromoCodeFlow"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------

  # Description: This functions validated the fee in money box in cart. 
  # Params:      ${feeLabel}  [Mandatory]   Label of the fee to validate.
  #              ${feeValue}  [Optional]    Value to check for label.
  - name: functions.cartPage.moneyBox.feeValidation
    flow:
      - sleep:
          duration: 10000
      - executeFunction:
          name: functions.utils.moneyBox.feeValidation
          params:
            - name: subTotalLocator
              string: cartPage.moneyBox.subTotal
            - name: feeLabelLocator
              string: cartPage.moneyBox.feeLabel # <-- ${feeLabel}
            - name: feeAmountLocator
              string: cartPage.moneyBox.feeAmount # <-- ${feeValue}
            - name: feeDisplayedLocator
              string: cartPage.moneyBox.isFeeDisplayed
            - name: feeValue
              string: ${feeValue}
      - log:
          message:  "End functions: cartPage.moneyBox.feeValidation"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates that the fee is not present in the money box at cart.
  # Params:      ${feeLabel}  [Mandatory]   Label of the fee to validate.
  #              ${feeValue}  [Optional]    Value to check for label.
  - name: functions.cartPage.moneyBox.assertFeeNotPresent
    flow:
      - executeFunction:
          name: functions.utils.moneyBox.feeValidation
          params:
            - name: subTotalLocator
              string: cartPage.moneyBox.subTotal
            - name: feeLabelLocator
              string: cartPage.moneyBox.feeLabel # <-- ${feeLabel}
            - name: isVerifyFeeLabelNotPresent
              string: true
      - log:
          message: "End functions: checkoutPage.moneyBox.assertFeeNotPresent"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function calculates the new subtotal for a basket that includes savings.
  #     Note: This function temporarily addresses a limitation in R2, which prevents the 
  #           parameterization of values from one getString call to the next in a loop.
  # No params
  - name: function.moneyBox.savingsCalculation
    flow:
      - executeNode:
          file: wcp/test/helpers/getValueFromJSON
          args:
            - value: ${moneyBoxValueArray}
            - value: "Subtotal"
          getResponse:
            storeIn: subTotal
      - executeNode:
          file: wcp/test/helpers/getValueFromJSON
          args:
            - value: ${moneyBoxValueArray}
            - value: "Savings"
          getResponse:
            storeIn: savings
      - executeNode:
          file: wcp/test/helpers/Price/cleanPrice.js
          args:
            - value: ${subTotal}
          getResponse:
            storeIn: cleanedSubTotal
      - executeNode:
          file: wcp/test/helpers/Price/cleanPrice.js
          args:
            - value: ${savings}
          getResponse:
            storeIn: cleanedSavings
      - arithmetic:
          expression: ${cleanedSubTotal} - ${cleanedSavings}
          storeIn: savings
      - log:
          message: ${savings}
      - executeNode:
          file: wcp/test/helpers/checkoutPage/getMoneyBox.js
          args:
            - value: "New Subtotal"
            - value: $${savings}
            - value: ${moneyBoxValueArray}
          getResponse:
            storeIn: moneyBoxValueArray
      - log:
          message: "End functions: moneyBox.savingsCalculation"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates the schedule delivery Price is waived off for a Delivery Pass user 
  # No Params
  - name: functions.cartPage.validateScheduleDeliveryPriceIsWaivedOff
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.freeDeliveryFromStoreText
            - identifier: cartPage.scheduleDeliveryFeeWaivedOff
      - log:
          message: "End functions: cartPage.validateScheduleDeliveryPriceIsWaivedOff"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates the schedule delivery Price is waived off for a Delivery Pass user 
  # No Params
  - name: functions.cartPage.validateScheduleDeliveryFeeIsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.deliveryFromStoreText
            - identifier: cartPage.scheduleDeliveryFeeValue
      - log:
          message: "End functions: cartPage.validateScheduleDeliveryPriceIsWaivedOff"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function stores the different fulfillment types we can have in variables 
  # No Params
  - name: functions.cartPage.storeDefaultFulfillmentValues
    flow:
      - storeIn:
          key: freeDeliveryDefaultFulfillment
          value: data.cartPage.freeDeliveryFulfillmentType
      - storeIn:
          key: deliveryDefaultFulfillment
          value: data.global.deliveryText.delivery
      - storeIn:
          key: freePickupDefaultFulfillment
          value: data.cartPage.freePickupFulfillmentType
      - storeIn:
          key: pickupDefaultFulfillment
          value: data.cartPage.pickupFulfillmentType
      - log:
          message: "End functions: cartPage.storeDefaultFulfillmentValues"
          color: BLUE

  #------------------------------------------------------------------------------------------------------------------
  # Description: This function validates amends banner in the cart page
  # No Params 
  - name: functions.cartPage.validateAmendsBanner
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.amends.amendsBanner
          then: 
            - failTest:
                message: "Amends Banner is not displayed in cart"
      - log:
          message: "End functions: cartPage.amends.amendsBanner"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------
  # Description: This function validated start a new order cta in the cart page
  # No Params
  - name: functions.cartPage.validateAmendsCartCta
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.amends.startNewOrderButton 
          then: 
            - failTest:
                message: "Start New Order is not displayed in cart"
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.amends.addItemsToOrder
          then:
            - failTest:
                message: "Add items to order cta is not displayed in cart"

      - log:
          message: "End functions: cartPage.amends.startNewOrderButton"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------
  # Description: This function amends an existing order
  # No Params
  - name: functions.cartPage.amendOrder
    flow:
      - click:
          identifier: cartPage.amends.addItemsToOrder
      - log:
          message: "End function: functions.cartPage.amendOrder"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------
  # Description: This function validates success message after amending from the cart
  # No Params
  - name: functions.cartPage.validateAmendsSuccessMsg
    flow:
      - sleep:
          duration: 10000
      - scroll:
            direction: down
      - scroll:
            direction: up
            
      - verifyIdentifier:
          present:
            - identifier: cartPage.amends.successMessage
            - identifier: cartPage.amends.successMsgIcon
            - identifier: cartPage.amends.viewDetailsLinkInSuccessMsg
      - log:
          message: "End functions: functions.cartPage.validateAmendsSuccessMsg"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------
  # Description: This function validate pickup reserve time page for a guest user experience.
  # No Params
  - name: functions.cartPage.validateGuestUserReserveTimePage
    flow:
      - if:
          identifier:
            present:
              - identifier: createAnAccountPage.title
          then:
            - executeFunction:
                name: functions.global.closePopUp  
      - executeFunction:
         name: functions.reserveATime.tapPickupBtn
      - executeFunction:
          name: functions.cartPage.reserveTime.validatePickupTitleDetails
      - if:
          identifier:
            present:
              - identifier: cartPage.reserveTimePage.guestSlotViewLoginInstruction
              - identifier: cartPage.reserveTimePage.guestsignInBtn
              - identifier: cartPage.reserveTimePage.createAccountText
              - identifier: cartPage.reserveTimePage.createAccountLink
          then:
            - log:
                message: "[✓] Successfully validated guest user prompted to sign in from the slot page."
                color: GREEN_BOLD
          else:
            - log:
                message: "[X] Failed validated sign in prompt from reserve a slot page."
                color: GREEN_BOLD
      - log:
          message: "End functions: cartPage.validateGuestUserReserveTimePage"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------
  # Description: This function validate pickup reserve time page for a registered user experience.
  # No Params
  - name: functions.cartPage.reserveTime.validateRegisteredUserReserveTimePage
    flow:
      - executeFunction:
          name: functions.cartPage.reserveTime.validatePickupTitleDetails
      - if:
          identifier:
            present:
              - identifier: cartPage.reserveTimePage.dateCarousel
              - identifier: cartPage.reserveTimePage.timeSlotList
              - identifier: reserveATime.reserveBtn
          then:
            - log:
                message: "[✓] Successfully validated registered user able to view dates and slots"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "[X] Failed validated slot details."
      - log:
          message: "End functions: cartPage.reserveTime.validateRegisteredUserReserveTimePage"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------
  # Description: This function validate pickup title on reserve time page.
  # No Params
  - name: functions.cartPage.reserveTime.validatePickupTitleDetails
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.reserveTimePage.title
              - identifier: cartPage.reserveTimePage.pickupTab
              - identifier: cartPage.reserveTimePage.deliveryTab
              - identifier: cartPage.reserveTimePage.storeName
              - identifier: cartPage.reserveTimePage.storeAddress
          then:
            - log:
                message: "[✓] Successfully validated reserve time page title."
                color: GREEN_BOLD
          else:
            - log:
                message: "[X] Failed to validate reseerve time page title."
                color: RED_BOLD
      - log:
          message: "End functions: cartPage.reserveTime.validatePickupTitleDetails"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------
  # Description: This function validate pickup title on reserve time page.
  # No Params
  - name: functions.cartPage.reserveTime.clickReserveWithoutChoosingSlot.VerifyErrorMsg
    flow:
      - executeFunction:
          name: functions.reserveATime.tapReserveBtn
      - if:
          identifier:
            present:
              - identifier: cartPage.reserveTimePage.errorTextSelectTimeSlot
          then:
            - log:
                message: "[✓] Successfully verified the error message when a user attempts to reserve a slot without selecting time slot."
                color: GREEN_BOLD
          else:
            - log: 
                message: "[X] Failed to validate error message when a user tries to reserve a slot without choosing a time slot."
                color: RED_BOLD
      - log:
          message: "End functions: cartPage.reserveTime.clickReserveWithoutChoosingSlot.VerifyErrorMsg"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------
  # Description: This function validate pickup title on reserve time page.
  # No Params
  - name: functions.cartPage.validatePreorderLabelIsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.preorderLabel
      - log:
          message: "End functions: cartPage.validatePreorderLabelIsDisplayed"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
           
  # Description: This method change to weight option in cart for a dual product
  # Params:  ${productName} [Mandatory] Product to find
  - name: functions.cartPage.switchProductToWeight
    flow: 
      - log:
          message: "Product Name ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: cartPage.productUOMSelector
          then: 
            - log: 
                message: "Product has UOM selector"
                color: CYAN
            - if:
                identifier:
                  present:
                    - identifier: cartPage.productWeightOptionFlag
                then:
                  - log: 
                      message: "Weight selector is already selected"
                      color: CYAN
                else:
                  - click:
                      identifier: cartPage.productWeightOption
                  - sleep:
                      duration: 5000
                  - log:
                      message: "End function: cart.switchProductToWeight"
                      color: BLUE
          else:  
            - failTest:
                message: "Fail: Product is not a dual product, can't change to a different UOM"
      - log:
          message: "End function: cart.switchProductToWeight"
          color: BLUE
                
  #-----------------------------------------------------------------------------------------------------------------------      
  
  # Description: This method change to pieces option in cart for a dual product
  # Param  ${productName} [Mandatory] Product to find
  - name: functions.cartPage.switchProductToPieces
    flow: 
      - log:
          message: "Product Name ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: cartPage.productUOMSelector
          then: 
            - log: 
                message: "Product has UOM selector"
                color: CYAN
            - if:
                identifier:
                  present:
                    - identifier: cartPage.productWeightOptionFlag
                then:
                  - log: 
                      message: "Pieces selector is already selected"
                      color: CYAN
                else:
                  - click:
                      identifier: cartPage.productPiecesOption
                  - sleep:
                      duration: 5000
                  - log:
                      message: "End function: cart.switchProductToPieces"
                      color: BLUE
          else:  
            - failTest:
                message: "Fail: Product is not a dual product, can't change to a different UOM"

#-----------------------------------------------------------------------------------------------------------

  # Description: This function validate cart carousel is present or not.
  # No Params
  - name: functions.cartPage.verifyCartcarousel
    flow:
      - if:
         identifier:
           notPresent:
             - identifier: cartPage.cartCarousel.title
         then:
           - failTest:
               message: "Cart carousel not present" 
         else:
           - verifyIdentifier:
               present:
                 - identifier: cartPage.cartCarousel.title
                 - identifier: cartPage.cartCarousel.ATC.firstitem
                 - identifier: cartPage.cartCarousel.firstProductName
                 - identifier: cartPage.cartCarousel.firstProduct.price
                 - identifier: cartPage.cartCarousel.firstItem.image
                 - identifier: cartPage.cartCarousel.itemfullfilmenttypes
      - log:
         message: "End of function: functions.cartPage.verifyCartcarousel"
         color: BLUE

#-----------------------------------------------------------------------------------------------------------

  # Description: This function validate cart carousel is present or not.
  # No Params
  - name: functions.cartPage.cartcarousel.ATC.firstItem
    flow:
      - if:
         identifier:
           notPresent:
             - identifier: cartPage.cartCarousel.firstItem.image
         then:
           - scroll:
               direction: down
               scrollLimit: 2
         else:
           - click:
               identifier: cartPage.cartCarousel.ATC.firstitem
           - getString:
              identifier: cartPage.cartCarousel.firstProductName
              storeIn: productName
           - getString:
              identifier: cartPage.cartCarousel.firstProduct.price
              storeIn: productPrice
           - log:
              message: "${productName} Added to cart"
           - log:
              message: "End of function: functions.cartPage.cartcarousel.ATC.firstItem"
              color: BLUE
 
 #-----------------------------------------------------------------------------------------------------------
 
  # Description: This function validate .
  # No Params
  - name: functions.cartPage.validateMultisaveItemSavingsAreApplied
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.multisaveSavingsApplied
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.multisaveSavingsApplied
                scrollLimit: 1
                position: center
      - verifyIdentifier:
          present:
            - identifier: cartPage.multisaveSavingsApplied
      - log:
          message: "End functions: cartPage.validateMultisaveItemSavingsAreApplied"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  - name: functions.cartPage.validateNoIntentisSelected
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.fulfillmentMethodNoIntentSelected
      - log:
          message: "End functions: cartPage.validateNoIntentisSelected"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function scrolls to the top up to the page title.
  # NO PARAMS
  - name: functions.cartPage.scrollToPageTitle
    flow:
      - sleep:
          duration: 3000
      - loop:
          begin: 1
          end: 3
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: cartPage.pageTitle
                then:
                  - scroll:
                      direction: up
                      untilIdentifier: cartPage.pageTitle
                      wait: 1000
                      scrollLimit: 3
                      position: center
                  - if:
                      identifier:
                        present:
                          - identifier: cartPage.pageTitle
                      then:
                        - break: true
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.pageTitle
            timeout: 1000
          then:
            - failTest:
                message: X Cart's Page Title never displayed after scrolling to top.
          else:
            - log:
                message: ✔︎ Cart's Page Title displayed after scrolling to top.
                color: GREEN
      - log:
          message: "End Function: cartPage.scrollToPageTitle"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  - name: functions.cartPage.validateNoSlotSelected
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.slotNotReservedMessage
      - log:
          message: "End functions: cartPage.validateNoSlotSelected"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates scheduled pickup card
  - name: functions.cartPage.scheduledPickup.verifyCard
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.pickupBanner 
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.pickupBanner 
      - verifyIdentifier:
          present:
            - identifier: cartPage.pickupBanner 
            - identifier: cartPage.fulfillmentTime
            - identifier: cartPage.changeFullfilmentBtn
  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates scheduled delivery card
  - name: functions.cartPage.scheduledDelivery.verifyCard
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.deliveryBanner
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.deliveryBanner
      - verifyIdentifier:
          present:
            - identifier: cartPage.deliveryBanner 
            - identifier: cartPage.fulfillmentTime
            - identifier: cartPage.changeFullfilmentBtn
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates that the image of a product exists in cart.
  # Params: ${productName} [Mandatory] Product name to search for in cart.
  - name: functions.cartPage.assertProductImageExists
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.productImage.byProductName # <- ${productName}
          then:
            - log:
                message: "[✓] Assertion Passed: Product image is displayed"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "[X] Assertion Failed: Product image is not displayed"
      - log:
          message: "End function: cartPage.assertProductImageExists"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates that a specific product name exists in cart.
  # Params: ${productName} [Mandatory] Product name to validate in cart.
  - name: functions.cartPage.assertProductName
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.productNameLabel.byProductName #<- ${productName}
          then:
            - log:
                message: "[✓] Assertion Passed: Product name is the expected one"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "[X] Assertion Failed: Product name is not the expected one"
      - log:
          message: "End function: cartPage.assertProductName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the quantity of a product in cart.
  # Params:  ${productName} [Mandatory] Product name to validate in cart.
  #          ${quantity}    [Mandatory] Quantity to increment.
  - name: functions.cartPage.increaseProductQuantityByName
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.itemCountIncrementButtonByName
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.itemCountIncrementButtonByName
      - click:
          identifier: cartPage.itemCountIncrementButtonByName # <---PARAMS---${productName}
          numberOfClicks: ${quantity}
          waitBetweenClicks: 1
      - log:
          message: "End function: cartPage.assertProductName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the quantity of a product in cart.
  # Params:  ${productName} [Mandatory] Product name to validate in cart.
  #          ${quantity}    [Mandatory] Quantity to decrease.
  - name: functions.cartPage.decreaseProductQuantityByName
    flow:
      - click:
          identifier: cartPage.itemCountDecrementButtonByName # <---PARAMS---${productName}
          numberOfClicks: ${quantity}
          waitBetweenClicks: 1
      - log:
          message: "End function: cartPage.assertProductName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates that a specific seller information is displayed in cart.
  # Params: ${expectedSellerInformation} [Mandatory] Seller information to validate in cart.
  - name: functions.cartPage.validateSellerInformation
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.sellerInformation
      - getString:
          identifier: cartPage.sellerInformation
          storeIn: displayedSellerInformation
      - if:
          condition: ${displayedSellerInformation} == ${expectedSellerInformation}
          then:
            - log:
                message: "[✓] Assertion Passed: Seller information is ${displayedSellerInformation}"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "[X] Assertion Failed. Got: ${displayedSellerInformation}, expected: ${expectedSellerInformation}"
      - log:
          message: "End function: cartPage.validateSellerInformation"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Verify Pickup instead section in cart page
  # No Param
  - name: functions.cartPage.verifyPickUpInsteadSection
    flow:
      - executeFunction:
          name: functions.cartPage.tapDeliveryOption
      - verifyIdentifier:
          present:
            - identifier: cartPage.selectPickupBtn
            - identifier: cartPage.partialswitchheaderText
            - identifier: cartPage.deliveryBanner 
      - log: 
          message: "End function: cartPage.verifyPickUpInsteadSection"
          color: BLUE
  #-----------------------------------------------------------------------------------------------------------------
  # Description: This functions prints the EDD
  # NoParam 
  - name: functions.cartPage.getExpectedDeliveryDate
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.deliveryBanner
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.deliveryBanner
      - verifyIdentifier:
          present: 
            - identifier: cartPage.fulfillmentTime
      - getString:
          identifier: cartPage.fulfillmentTime
          storeIn: returnedDeliveryDate
      - log:
          message: "Returned Delivery Date: '${returnedDeliveryDate}'"
          color: CYAN
      - log:
          message: "End function: cartPage.getExpectedDeliveryDate"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates the color  variation of an specific product.
  # Params: 
  #     ${expectedProductVariant} [Mandatory] Product variation to validate in cart.
  #      ${productName} [Mandatory]
  # Works for:   [ MX [no]  US [__]   CA [__]] - No variant information displayed in cart in MX
  - name: functions.cartPage.assertProductColorVariant
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.productColorVariant.byProductName #<- ${productName}
          then:
            - getString:
                identifier: cartPage.productColorVariant.byProductName #<- ${productName}
                storeIn: displayedProductVariant
            - if:
                condition: ${displayedProductVarint} == ${expectedProductVariant}
                then:
                  - log:
                      message: "[✓] Assertion Passed: Product variant is the expected one"
                      color: GREEN_BOLD
          else:
            - failTest:
                message: "[X] Assertion Failed: Product variant is not the expected one"
      - log:
          message: "End function: cartPage.assertProductColorVariant"
          color: BLUE
 
#--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates that a specific product name exists in cart.
  - name: functions.cartPage.assertUnitOfMeasureDisplayed
    flow:
      - if:
          identifier:
            present:
               - identifier: cartPage.unitOfMeasureSelector
          then:
            - log:
                message: "[✓] Assertion Passed: unit of measure selector is dispalayed"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "[X] Assertion Failed: unit of measure selector is not dispalayed"
      - log:
          message: "End function: cartPage.assertUnitOfMeasureDisplayed"
          color: BLUE
 #--------------------------------------------------------------------------------------------------------------------------------
  # Description: This function is used to validate oos section is displayed in cart
  # No Param
  - name: functions.cartPage.oosSection.isPageDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if:
          identifier:
            present:
              - identifier: cartPage.oosHeader
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End Function: cartPage.oosSection.isPageDisplayed (Displayed)"
                color: BLUE
          else:
            - failTest:
                message: "End Function: cartPage.oosSection.isPageDisplayed (Not Displayed)"                      
 #--------------------------------------------------------------------------------------------------------------------
  # Description: This function will validate OOS section in cart
  # No Param
  - name: functions.cartPage.validateOOSSectioninCart
    flow:          
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.unavailableItemDetails.oosErrorText
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.unavailableItemDetails.oosErrorText
                position: center
      - verifyIdentifier:
          present:
            - identifier: cartPage.unavailableItemDetails.oosErrorText
            - identifier: cartPage.oosHeader
            - identifier: cartPage.unavailableItemDetails
            - identifier: cartPage.unavailableItemDetails.removeButton
            - identifier: cartPage.unavailableItemDetails.saveForLaterButton
            - identifier: cartPage.unavailableItemDetails.itemCount
      - log:
          message: "End function: cartPage.validateOOSSectioninCart"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function will tap the OOS alert text 
  # No Param
  - name: functions.cartPage.tapOOSAlertText
    flow: 
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.addAddressPanelText
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.addAddressPanelText
      - click:
          identifier: cartPage.addAddressPanelText
      - log:
          message: "End function: cartPage.tapOOSAlertText"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------        
  # Description: This function will validate item update bottom sheet
  # No Param
  - name: functions.cartPage.validateItemUpdateBottomSheet
    flow:          
      - verifyIdentifier:
          present:
            - identifier: cartPage.unavailableItemDetails.itemUpdateSheetTitle
            - identifier: cartPage.unavailableItemDetails.itemUpdateSheet.warningText
            - identifier: cartPage.unavailableItemDetails.itemUpdateSheet.gotItButton
      - log:
          message: "End function: cartPage.validateItemUpdateBottomSheet"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------          
  # Description: This functions prints the fulfillment time
  # NoParam 
  - name: functions.cartPage.getFulfillmentTime
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.pickupBanner 
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.pickupBanner 
      - verifyIdentifier:
          present: 
            - identifier: cartPage.fulfillmentTime
      - getString:
          identifier: cartPage.fulfillmentTime
          storeIn: returnedPickupTime
      - log:
          message: "Returned Fulfillment Time: '${returnedPickupTime}'"
          color: CYAN
      - log:
          message: "End function: cartPage.getFulfillmentTime"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on got it button in item update sheet 
  # No Param
  - name: functions.cartPage.tapGotItButton
    flow: 
      - click:
          identifier: cartPage.unavailableItemDetails.itemUpdateSheet.gotItButton
      - log:
          message: "End function: cartPage.tapGotItButton"
          color: BLUE
  
  - name: functions.cartPage.validateDigitalDeliveryBadgeIsDisplayed
    flow:
      - sleep:
          duration: 30000  
      - verifyIdentifier:
          present:
            - identifier: cartPage.digitalDelivery.EmailBadge  
      - log:
          message: "End functions: cartPage.validateDigitalDeliveryBadgeIsDisplayed"
          color: BLUE 

  - name: functions.cartPage.validateDigitalDeliveryFullfillmentTextIsDisplayed     
    flow:
      - sleep:
          duration: 30000  
      - verifyIdentifier:
          present:
            - identifier: cartPage.fulfillmentMethod 
      - log:
          message: "End functions: cartPage.validateDigitalDeliveryFullfillmentTextIsDisplayed"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This functions validates unscheduled order card
  # Param  ${Delivery} [Optional]   Is set to true to validate Unscheduled delivery
  - name: functions.cartPage.unscheduledOrder.verifyCard
    flow:
      - if:
          condition: ${Delivery}
          then:
            - log: 
                message: "Validate Unscheduled Delivery in cart"
                color: YELLOW_BOLD_BRIGHT                
            - if:
                identifier:
                  notPresent:
                    - identifier: cartPage.deliveryBanner
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: cartPage.deliveryBanner
          else:
            - log: 
                message: "Validate Unscheduled Pickup in cart"
                color: YELLOW_BOLD_BRIGHT
            - if:
                identifier:
                  notPresent:
                    - identifier: cartPage.pickupBanner 
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: cartPage.pickupBanner 
      - verifyIdentifier:
          present:
            - identifier: cartPage.fulfillmentTime
            - identifier: cartPage.fulfillmentAddress
      - executeFunction:
          name: functions.cartPage.getExpectedDeliveryDate
      - log:
          message: "End function: cartPage.unscheduledOrder.verifyCard"
          color: BLUE          
  #-----------------------------------------------------------------------------------------------------------------
  # Description: This functions validates savings text for specific item
  # Param [required]: itemName
  - name: functions.cartPage.validatePromotions
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.itemDetails.savingText
            timeout: 5000
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.itemDetails.savingText
      - verifyIdentifier:
          present:
            - identifier: cartPage.itemDetails.savingText #<--${itemName}
      - log:
          message: "End function: cartPage.validatePromotions"
          color: BLUE

  #----------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Checks whether the Pickup Option in the Basket Switching Section is disabled or not.
  # RETURNS:  ${isPickupButtonDisabled}  Whether the option is disabled or not.
  - name: functions.cartPage.basketSwitchingSection.isPickupOptionDisabled
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.basketSwitchingSection.disabledPickupButton
            timeout: 3000
          then:
            - storeIn:
                key: isPickupButtonDisabled
                value: true
          else:
            - storeIn:
                key: isPickupButtonDisabled
                value: false
      - log:
          message: "Is Pickup option in Basket Switching Section disabled? [ ${isPickupButtonDisabled} ]"
          color: GREEN
      - log:
          message: "End function: cartPage.basketSwitchingSection.isPickupOptionDisabled"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function expands the Basket Switching Section if it's collapsed.
  # NO PARAMS
  - name: functions.cartPage.expandBasketSwitchingSectionIfCollapsed
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.basketSwitchingSection.expandButton
            timeout: 3000
          then:
            - click:
                identifier: cartPage.basketSwitchingSection.expandButton
      - log:
          message: "End functions: cartPage.expandBasketSwitchingSectionIfCollapsed"
          color: BLUE
#--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates start a shopping button is displayed in cart page
  # No params
  - name: functions.cartPage.verifyStartShoppingBtnIsDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.startShoppingBtn
          then:
            - log: "Start shopping button is displayed"
          else:
            - failTest:
                message: "Start shopping button is not displayed"
      - log:
          message: "End function: cartPage.verifyStartShoppingBtnIsDisplayed"
          color: BLUE
  #-----------------------------------------------------------------------------------------------------------------    
  # Description: This function click on sign in button in reserve a slot page
  # No params
  - name: functions.cartPage.reserveTime.selectSignInBtn
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.reserveTimePage.guestsignInBtn
          then:
            - click:
                identifier: cartPage.reserveTimePage.guestsignInBtn
      - log:
          message: "End function: cartPage.reserveTime.selectSignInBtn"
          color: BLUE  
  #-----------------------------------------------------------------------------------------------------------------    
  # Description: This function validates that a signIn btn exists in reserve a slot page when in guest mode. 
  # No params
  - name: functions.cartPage.reserveTime.signInBtn.isDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.reserveTimePage.guestsignInBtn
          then:
            - log:
                message: "Sign in button is displayed"
      - log:
          message: "End function: cartPage.reserveTime.signInBtn.isDisplayed"
          color: BLUE  
#-----------------------------------------------------------------------------------------------------------------                 
# Description: This function validates that OOS alert message on header is displayed
  - name: functions.cartPage.assertOOSHeaderAlertMessage.isDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - scroll:
          direction: up
          untilIdentifier: cartPage.OOS.HeaderAlertMessage
      - if:
          identifier:
            present:
              - identifier: cartPage.OOS.HeaderAlertMessage
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function:  cartPage.asserOOSHeaderAlertMessage.isDisplayed (Displayed)"
                color: BLUE
          else:
            - failTest:
                message: "End Function: cartPage.assertOOSHeaderAlertMessage.isDisplayed (Not displayed)" 
#--------------------------------------------------------------------------------------------------------------------
  # Description: This function tap the OOS alert message
  # No Param
  - name: functions.cartPage.tapOOSHeaderAlertMessage
    flow: 
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.OOS.HeaderAlertMessage
          then:
            - scroll:
                direction: up
                untilIdentifier: cartPage.OOS.HeaderAlertMessage
      - click:
          identifier: cartPage.OOS.HeaderAlertMessage
      - sleep:
                duration: 3000
      - log:
          message: "End function: cartPage.tapOOSHeaderAlertMessage"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------              
  # Description: This flow is used to validate OOS alert message and move OOS items to SFL
  # Param:       ${productName}   Product name to move to save for later.
  - name: functions.cartPage.moveOOSItemSFL
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.unavailableItemDetails.oosErrorText
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.unavailableItemDetails.oosErrorText
                position: center
      - executeFunction:
          name: functions.cartPage.oosSection.isPageDisplayed    
      - if: 
          condition: ${returnedIsDisplayed} == true
          then:  
            - executeFunction:
                name: functions.cartPage.assertOOSHeaderAlertMessage.isDisplayed 
            - if: 
                condition: ${returnedIsDisplayed} == true
                then: 
                     - scroll:
                        direction: down
                        untilIdentifier: cartPage.unavailableItemDetails.oosErrorText
                        position: center
                     - click:
                        identifier: cartPage.productMoveToSaveForLater # <-- #{productName}
                     - log:
                         message: ✔ Item ${productName} sucessfully moved to SFL.
                         color: GREEN_BOLD
      - log: 
          message: "End function: cartPage.moveOOSItemSFL"
          color: BLUE   
#--------------------------------------------------------------------------------------------------------------------              
  # Description: This flow is used to validate OOS alert message and remove OOS items from cart
  # Param:       ${productName}   Product name
  - name: functions.cartPage.removeOOSItemSFL
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.unavailableItemDetails.oosErrorText
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.unavailableItemDetails.oosErrorText
                position: center
      - executeFunction:
          name: functions.cartPage.oosSection.isPageDisplayed    
      - if: 
          condition: ${returnedIsDisplayed} == true
          then:  
            - executeFunction:
                name: functions.cartPage.assertOOSHeaderAlertMessage.isDisplayed 
            - if: 
                condition: ${returnedIsDisplayed} == true
                then:  
                    - scroll:
                       direction: down
                       untilIdentifier: cartPage.unavailableItemDetails.oosErrorText
                       position: center
                    - click:
                        identifier: cartPage.productRemoveBtn # <-- #{productName}
                    - log:
                         message: ✔ Item ${productName} sucessfully remove from cart.
                         color: GREEN_BOLD
      - log: 
          message: "End function: cartPage.removeOOSItemSFL"
          color: BLUE



 #--------------------------------------------------------------------------------------------------------------------
  # Description: This function attempts to set the product quantity to its maximum value by its name.
  # Params:
  #   - productName: The name of the product whose quantity needs to be set to the maximum value.
  - name: functions.cartPage.setProductQuantityToMaxByName
    flow:
      - log:
          message: "Attempting to increasing product quantity to max: ${productName}"
          color: BLUE
      - storeIn:
          key: iterationCount
          value: 0
      - executeFunction:
          name: functions.cartPage.incrementProductQuantityToMax
      - log:
          message: "Successfully increased product quantity to max: ${productName}"
          color: GREEN_BOLD
      - log:
          message: "End function: functions.cartPage.setProductQuantityToMaxByName"
          color: BLUE


  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function attempts to increment the quantity of a product in the cart to its maximum value.
  # Steps:
  # 1. Continuously checks if the product's maximum quantity has been reached.
  # 2. Tracks the number of attempts using an iteration counter (`iterationCount`).
  # 3. Fails the test if the maximum number of attempts (10) is reached without success.
  # 4. Clicks the increment button to increase the product quantity if the maximum is not yet reached.
  #
  # Params:
  #   - productName: The name of the product whose quantity needs to be incremented to the maximum value.
  - name: functions.cartPage.incrementProductQuantityToMax
    doWhile: true
    flow:
      - verifyIdentifier:
          notPresent:
            - identifier: cartPage.quantityStepper.productMaxQuantity # <--- ${productName}
      - arithmetic:
          expression: ${iterationCount} + 1
          storeIn: iterationCount
      - if:
          condition: ${iterationCount} == 10
          then:
            - failTest:
                message: " ❌ Failed to set product quantity to max after 10 attempts"
      - click:
          identifier: cartPage.productQtyIncrementBtn # <--- ${productName}

  #-----------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function expands all the Fulfillment Groups if they are not expanded.
  # NO PARAMS
  - name: functions.cartPage.expandAllFulfillmentGroupsIfContracted
    flow:
      - loop:
          begin: 1
          end: 3
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: cartPage.fulfillmentGroupCard.expandGroupButton
                then:
                  - if:
                      condition: ${platform} == 'Android'
                      then:
                        - scroll:
                            direction: down
                            untilIdentifier: cartPage.fulfillmentGroupCard.expandGroupButton
                            position: center
                            wait: 1000
            - if:
                identifier:
                  present:
                    - identifier: cartPage.fulfillmentGroupCard.expandGroupButton
                then:
                  - click:
                      identifier: cartPage.fulfillmentGroupCard.expandGroupButton
            - sleep:
                duration: 3000
      - log:
          message: "End functions: cartPage.expandAllFulfillmentGroupsIfContracted"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function will validate OOS card details is displayed in cart
  # No Param
  - name: functions.cartPage.validateOOSCardDetails.isDisplayed
    flow:          
        - if:
            identifier:
             present:
              - identifier: cartPage.OOSUnavailableItemsTitle
            then:
              - verifyIdentifier:
                 present:
                  - identifier: cartPage.OOSCard.unavailableItemDetails.oosErrorText
                  - identifier: cartPage.productName
                  - identifier: cartPage.unavailableItemDetails
                  - identifier: cartPage.unavailableItemDetails.removeButton
                  - identifier: cartPage.unavailableItemDetails.saveForLaterButton
                  - identifier: cartPage.unavailableItemDetails.itemCount

        - log:
            message: "End function: cartPage.validateOOSSCardDetails.isDisplayed"
            color: BLUE  

#--------------------------------------------------------------------------------------------------------------------              
  # Description: This flow is used to validate OOS alert message is displayed and OOS popup details is displayed
  - name: functions.cartPage.OOSAlertMessageHeader.isDisplayed
    flow: 
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.unavailableItemDetails.oosErrorText
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.unavailableItemDetails.oosErrorText
                position: center
      - executeFunction:
          name: functions.cartPage.oosSection.isPageDisplayed    
      - if: 
          condition: ${returnedIsDisplayed} == true
          then:  
            - executeFunction:
                name: functions.cartPage.validateOOSSectioninCart
            - executeFunction:
                name: functions.cartPage.assertOOSHeaderAlertMessage.isDisplayed 
            - if: 
                condition: ${returnedIsDisplayed} == true
                then:            
                  - executeFunction:
                     name: functions.cartPage.tapOOSHeaderAlertMessage        
      - log:
          message: "End function: cartPage.OOSAlertMessageHeader.isDisplayed"
          color: BLUE 

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on 'Shop Similar' button from cart
  - name: functions.cartPage.tapShopSimilarButton
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.unavailableItemDetails.oosErrorText
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.unavailableItemDetails.oosErrorText
                position: center
                scrollLimit: 2
      - click:
          identifier: cartPage.BuySimilarProductsButton
      - log:
          message: "End Functions: functions.cartPage.tapShopSimilarButton"
          color: BLUE   

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function is used to validate simililar products displayed
  - name: functions.cartPage.assertSimilarProductsCard.isDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: cartPage.BuySimilarProducts.Title
      - log:
          message: "End function: cartPage.assertSimilarProductsCard.isDisplayed"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function dismissess Unavailable item popup if displayed when going to cart 
  - name: functions.cartPage.dismissUnavailableItemPopUpIfDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: cartPage.unavailableItemPopupTitle
          then:
            - if:
                condition: ${platform} == 'iOS'
                then:
                  - click:
                      identifier: cartPage.unavailableItemPopupCloseBtn
                else:
                  - click:
                      identifier: global.closeBtn
      - log:
          message: "End function: cartPage.dismissUnavailableItemPopUpIfDisplayed"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates item has variants
  # No params
  - name: functions.cartPage.validateVariantOptionsLabelIsDisplayed
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.variantLabel
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.variantLabel
                scrollLimit: 1
                position: center
      - verifyIdentifier:
          present:
            - identifier: cartPage.variantLabel
      - log:
          message: "End function: cartPage.assertSimilarProductsCard.isDisplayed"
          color: BLUE
