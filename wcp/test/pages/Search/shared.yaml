functions:

#--------------------------------------------------------------------------------------------------------------------

  # Description: Add first available product to cart.
  # No Params
  - name: functions.searchResultPage.addItemToCart
    flow:
      - executeFunction:
          name: functions.searchResultPage.scrollDownToFirstAddToCartButton
      # If ad item is displayed, will add the second item which is the right item
      - if:
          identifier:
            present:
              - identifier: searchPage.secondAddToCartBtn
          then:
              - executeFunction:
                  name: functions.searchResultPage.clickOnSecondAddToCartButton
          else:
              - executeFunction:
                  name: functions.searchResultPage.clickOnFirstAddToCartButton
      - executeFunction:
          name: functions.searchResultPage.protectionPlan.isPageDisplayed
      - if:
          condition: ${returnedIsDisplayed}
          then:
            - executeFunction:
                name: functions.searchResultPage.protectionPlan.tapDecline
      - if:
          condition: ${market} == 'US'
          then:
            - executeFunction:
                name: functions.searchPage.handle3PPickupBottomSheet
  
      - log:
          message: "End functions: searchResultPage.addProductToCart"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------

  # Description: Scroll down to first add to cart button
  # No Params
  - name: functions.searchResultPage.scrollDownToFirstAddToCartButton
    flow: 
      - if:
          identifier:
            notPresent:
              - identifier: searchPage.addToCartBtn
            timeout: 5000
          then:
            - scroll:
                direction: down
                untilIdentifier: searchPage.addToCartBtn
                timeout: 10000
      - log:
          message: "End functions: searchResultPage.scrollDownToFirstAddToCartButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Click on second add to cart button
  # No Params
  - name: functions.searchResultPage.clickOnSecondAddToCartButton
    flow: 
      - click:
          identifier: searchPage.secondAddToCartBtn
      - log:
          message: "End functions: searchResultPage.clickOnSecondAddToCartButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Click on first add to cart button
  # No Params
  - name: functions.searchResultPage.clickOnFirstAddToCartButton
    flow: 
      - click:
          identifier: searchPage.addToCartBtn
      - log:
          message: "End functions: searchResultPage.clickOnFirstAddToCartButton"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: Adds the given Product to Cart. If product is already added to cart, function will fail.
  # Params:  ${productName}  [Mandatory]  Product Name to ad to cart.
  # Works for:    [ MX [✓]   MX-Bodega [_TBD_]   US [_TBD_] ]
  - name: functions.searchResultPage.addProductToCart.byName
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: searchResultPage.addToCartBtn.byProductName # <-- ${productName}
      - log:
          message: "End function: functions.searchResultPage.addProductToCart.byName"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: Tap decline on protection plan page
  # No Params
  - name: functions.searchResultPage.protectionPlan.tapDecline
    flow:
      - click:
          identifier: searchPage.protectionPlan.declineBtn
      - log:
          message: "End functions: searchResultPage.protectionPlan.tapDecline"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: This function check if the protection plan page is displayed
  # No Params
  - name: functions.searchResultPage.protectionPlan.isPageDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if:
          condition: ${market} == 'US'
          then:
            - sleep:
                duration: 2000
            - if:
                identifier:
                  present:
                    - identifier: searchPage.protectionPlan
                then:
                  - storeIn:
                      key: returnedIsDisplayed
                      value: true
                  - log:
                      message: "End function: searchResultPage.protectionPlan.isPageDisplayed (Displayed)"
                      color: BLUE
                else: 
                  - log:
                      message: "End function: searchResultPage.protectionPlan.isPageDisplayed (Not displayed)"
                      color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: Select first item from search result
  # No Params
  - name: functions.searchResultPage.selectFirstItem
    flow:
      - click:
          identifier: searchPage.firstItem
      - sleep:
          duration: 3000
      - log:
          message: "End functions: searchResultPage.selectFirstItem"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function increments the product quantity after "add to cart".
  # Params:      ${productName}   [Mandatory]   Product name for which quantity needs to be increased.
  #              ${quantity}      [Mandatory]   Product quantity to increment.
  - name: functions.searchResultPage.increaseProductQuantity
    flow:
      - if: 
          condition: ${quantity} > 1
          then:
            - loop:
                begin: 1
                end: ${quantity}
                flow:
                  - if:
                      identifier:
                        notPresent:
                          - identifier: searchResultPage.plusBtn
                      then:
                        - click:
                            identifier: searchResultPage.quantityMutationExpansionPanel  #params <- productName
                  - click: 
                      identifier: searchResultPage.plusBtn
      - log:
          message: "End Functions: searchResultPage.increaseProductQuantity"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: Verify search result displayed
  # Params:    ${searchText}  [Mandatory]   Text entered for searching for product.
  - name: functions.searchResultPage.verifySearchResultsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: searchPage.allFilterPills
            - identifier: searchPage.searchResultText # <-- ${searchText}
            - identifier: searchPage.allProductCells
      - log:
          message: "End Functions: searchResultPage.verifySearchResultsDisplayed"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates the price slider
  # No Params
  - name: functions.searchResultPage.validatePriceSlider
    flow:
      - executeFunction:
          name: functions.searchResultPage.tapOnPriceFilterButton
      - if:
          identifier:
            present:
              - identifier: searchPage.sliderLeftKnob
              - identifier: searchPage.sliderRightKnob
          then:
            - log:
                message: "Price slider is displayed and functioning as expected"
                color: GREEN
            - executeFunction:
                name: functions.searchResultsPage.closeBottomsheet
          else:
            - log:
                message: "❌ Price slider should be shown but is not"
                color: RED_BOLD
      
#--------------------------------------------------------------------------------------------------------------------

  # Description: This function verifies the functionality of Clear individual filter button
  # Params required: Filter name
  - name: functions.searchResultPage.validateFiltersOnSearchResultsPage
    flow:
      - if:
          condition: ${filter} == 'price'
          then:
            - executeFunction:
                name: functions.searchResultPage.validatePriceSlider
          else:
            - if:
                condition: ${filter} == 'brand'
                then:
                  - executeFunction:
                      name: functions.searchResultsPage.tapOnBrandFilter
                  - if:
                      identifier:
                        present:
                          - identifier: searchPage.filter.textField
                      then:
                        - log: 
                            message: "✔️ Brands are present in the filter"
                            color: GREEN
                        - executeFunction:
                            name: functions.searchResultsPage.closeBottomsheet
                else:
                  - if:
                      condition: ${filter} =='general'
                      then:
                        - executeFunction:
                            name: functions.searchResultsPage.tapOnSortAndFilterButton
                        - if:
                            identifier:
                              present:
                                - identifier: searchPage.filter.sortAndFilterHeader
                            then:
                              - log: 
                                  message: " ✔️ General filters visible"
                                  color: GREEN
                              - executeFunction:
                                  name: functions.searchResultsPage.closeBottomsheet
      - log:
          message: "End Function: functions.searchResultPage.validateFiltersOnSearchResultsPage"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function verifies if the "International Seller" tag is visible in the item tile
  # No params required
  - name: functions.searchResultPage.verifyInternationalSellerTagDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: searchPage.results.internationalSellerTag
          then:
            - log: "International seller tag is displayed as expected"
          else:
            - failTest:
                message: "International Seller tag should be displayed but is not"
      - log:
          message: "End Function: functions.searchResultPage.verifyInternationalSellerTagDisplayed"
          color: GREEN_BOLD
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on the Price Filter
  # No Params required
  - name: functions.searchResultPage.tapOnPriceFilterButton
    flow:
      - click:
          identifier: searchPage.priceFilterButton
      - log:
          message: "End function: functions.searchResultPage.tapOnPriceFilterButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps on the Brand filter in search result page
  # No params required
  - name: functions.searchResultsPage.tapOnBrandFilter
    flow:
      - click:
          identifier: searchPage.brandFilterButton
      - log:
          message: "End function: functions.searchResultsPage.tapOnBrandFilter"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This functions taps on Sort And Filter button
  # No Params required
  - name: functions.searchResultsPage.tapOnSortAndFilterButton
    flow:
      - click:
          identifier: searchPage.filter.sortAndFilterButton
      - log:
          message: "End function: functions.searchResultsPage.tapOnSortAndFilterButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function closes the bottomsheet
  # No params required
  - name: functions.searchResultsPage.closeBottomsheet
    flow:
      - click:
          identifier: searchPage.results.filter.closeButton
      - log:
          message: "End function: functions.searchResultsPage.closeBottomsheet"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This functions verify if the production is available on search page
  # No Param
  - name: functions.searchResultPage.assertProductStateForBuying
    flow:
      - storeIn:
          key: isProductAvailable
          value: false
      - if:
          condition: "!${internationalSellerTagPresent}"
          then:
            - storeIn : 
                key: internationalSellerTagPresent
                value: true
          else:
            - if: 
                identifier: 
                  present:
                    - identifier: searchResultPage.internationalSellerTag
                then: 
                  - storeIn: 
                      key: internationalSellerTagPresent 
                      value: true
                else:
                  - storeIn:
                      key: internationalSellerTagPresent
                      value: false
      - if:
          identifier:
            present:
              - identifier: searchPage.addToCartBtn
          then:
            - storeIn:
                key: isProductAvailable
                value: true
      - if:
          condition: ${isProductAvailable} && ${internationalSellerTagPresent}
          then:
            - storeIn:
                key: productAvailable
                value: true
          else:
            - storeIn:
                key: productAvailable
                value: false
      - storeIn : 
          key: internationalSellerTagPresent
          value: false
      
      - log:
          message: "End function: utils.assertProductStateForBuying"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: Close the fulfillment bottom sheet
  # No Params
  - name: functions.searchPage.closeFulfillmentReminderBottomSheet
    flow:
      - if:
          condition: ${platform} == 'Android'
          then:
            - if:
                identifier:
                  present:
                    - identifier: searchPage.fulfillmentBottomSheet
                  timeout: 2000
                then:
                  - click:
                      identifier: searchPage.fulfillmentBottomSheetCloseBtn
                  - log: 
                      message: "Fulfillment reminder bottom sheet is closed"
                      color: CYAN
      - log:
          message: "End functions: functions.searchPage.closeFulfillmentReminderBottomSheet"
          color: CYAN


#--------------------------------------------------------------------------------------------------------------------
  # Description: This functions verify if add to cart error is displayed
  # No Param
  - name: functions.searchResultPage.validateAddToCartErrorDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: searchPage.addToCartError
          then:
            - storeIn:
                key: isAddtoCartErrorDisplayed
                value: true
      - log:
          message: "End function:searchResultPage.handleAddToCartError"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This functions verify if add to cart error is displayed and gets the type of error displayed.
  # No Params
  # Returns:     ${isAddToCartErrorDisplayed}  Whether an error popup displayed or not.
  #              ${errorCodeDisplayed}         The type of error shown in case there were one displayed after trying to add the item to the cart.
  #                                               Options returned:
  #                                                  - Error_Undefined:    when the error was not able to be identified.
  #                                                  - Error_DigitalItem:  when the error is related to Digital Item that can only be purchased individually.
  #                                                  - Error_Availability: when the error is related to item that has no availability.
  #                                                  # TODO: ⚠️ Code additional options once required.
  - name: functions.searchResultPage.validateAddToCartErrorDisplayed-GetErrorType
    flow:
      # Set defaults...
      - log:
          message: Setting default value for 'isAddToCartErrorDisplayed' and 'errorCodeDisplayed'...
          color: GREEN
      - storeIn:
          key: isAddToCartErrorDisplayed
          value: false
      - storeIn:
          key: errorCodeDisplayed
          value: ''
      # Check for error popup displayed...
      - if:
          identifier:
            present:
              - identifier: searchPage.addToCartError
            timeout: 5000
          then:
            - log:
                message: Add to Cart error displayed.
                color: GREEN
            - storeIn:
                key: isAddToCartErrorDisplayed
                value: true
            # Set default for undefined error...
            - log:
                message: Set default error code for 'errorCodeDisplayed'...
                color: GREEN
            - storeIn:
                key: errorCodeDisplayed
                value: data.global.errorCodes.addToCart.undefined
            - getString:
                identifier: searchPage.addToCartError
                storeIn: errorTitle
            # Check if error is related to Digital Item...
            - if:
                condition: ${errorTitle} == 'data.global.errorTitles.addToCart.digitalItem'
                then:
                  - storeIn:
                      key: errorCodeDisplayed
                      value: data.global.errorCodes.addToCart.digitalItem
            # Check if error is related to No Availability...
            - if:
                condition: ${errorTitle} == 'data.global.errorTitles.addToCart.noAvailability'
                then:
                  - storeIn:
                      key: errorCodeDisplayed
                      value: data.global.errorCodes.addToCart.noAvailability
            # TODO: ⚠️ Code additional checks once identified.
            - log:
                message: "Error title found: '${errorTitle}'"
                color: GREEN
            - log:
                message: "Error code found: '${errorCodeDisplayed}'"
                color: GREEN
          else:
            - storeIn:
                key: isAddToCartErrorDisplayed
                value: false
      - log:
          message: "End function: functions.searchResultPage.validateAddToCartErrorDisplayed-GetErrorType"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This functions close the add to cart error
  # No Param
  - name: functions.searchResultPage.closeAddToCartError
    flow:
      - if:
          condition: ${isAddtoCartErrorDisplayed}
          then:
              - click:
                  identifier: searchResultPage.closeAddToCartError
      - log:
          message: "End function: functions.searchResultPage.closeAddToCartError"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: Click on the product to see it's details
  # No Params
  - name: functions.searchPage.tapProductDetails
    flow:
      - if: 
          identifier:
            present:
              - identifier: searchPage.secondItemImage
          then:
            - executeFunction:
                name: functions.searchPage.tapSecondItemImage
          else:
            - click:
                identifier: searchPage.searchResultItemView
                wait: 5000

      - log: 
          message: "End functions: functions.searchPage.tapProductDetails"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function verify international tag
  # No params required
  - name: functions.searchResultsPage.verifyInternationalTag
    flow:
      - if:
          condition: ${market} == 'MX' || ${market} == 'MX-Bodega'
          then:
            - verifyIdentifier:
                present:
                  - identifier: searchResultPage.internationalSellerTag
      - log:
          message: "End function:searchResultsPage.verifyInterTag"
          color: BLUE_BOLD

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Navigate to sort and fliter page
  - name: functions.searchPage.navigateToSortAndFilterPage
    flow:
      - sleep:
          duration: 3000
      - click:
          identifier: searchPage.sortAndFliter
      - sleep:
          duration: 3000
      - log:
          message: "End Functions: searchPage.navigateToSortAndFilterPage"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Filter sold by
  - name: functions.searchPage.sortAndFliterPage.expandSoldBy
    flow:
      - if:
          condition: ${market} == 'CA' && ${platform} == 'Android'
          then:
            - log : Sold By is not part of Sort and Filter
            - click:
                identifier: searchPage.sortAndFliter.closeButton
            - sleep:
                duration: 3000
            - click:
                identifier: searchPage.sortAndFliter.soldByFilterDownArrow
          else :
            - if: 
                identifier:
                  notPresent:
                    - identifier: searchPage.sortAndFliter.soldByFilterDownArrow
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: searchPage.sortAndFliter.soldByFilterDownArrow         
            - click:
               identifier: searchPage.sortAndFliter.soldByFilterDownArrow
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.expandSoldBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Select Walmart as vendor
  - name: functions.searchPage.sortAndFliterPage.selectSoldByWalmart
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: searchPage.sortAndFliter.soldByWalamrtCheckBox
          then:
            - scroll:
                direction: down
                untilIdentifier: searchPage.sortAndFliter.soldByWalamrtCheckBox      
      - click:
          identifier: searchPage.sortAndFliter.soldByWalamrtCheckBox
          wait: 2000
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.selectSoldByWalmart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Scroll down to order by filter
  - name: functions.searchPage.sortAndFilterPage.scrollDownToOrderByFilter
    flow:
      - sleep:
          duration: 3000
      - if:
          identifier:
            notPresent:
              - identifier: searchPage.sortAndFilter.orderByFilterDownArrow
          then:
            - scroll:
                direction: down
                untilIdentifier: searchPage.sortAndFilter.orderByFilterDownArrow
          else:
            - log : 
                message: "Sort by filter is displayed on the page."
                color: GREEN
      - log:
          message: "End Functions: searchPage.sortAndFilterPage.scrollDownToOrderByFilter"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Filter order by
  - name: functions.searchPage.sortAndFliterPage.expandOrderBy
    flow:
      - sleep:
          duration: 3000
      - click:
          identifier: searchPage.sortAndFilter.orderByFilterDownArrow
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.expandOrderBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Scroll down to order by high to low price option
  - name: functions.searchPage.sortAndFliterPage.scrollDownToHighToLowPriceOption
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: searchPage.sortAndFliter.orderByHighToLowPriceRadioButton
          then:
            - scroll:
                direction: down
                untilIdentifier: searchPage.sortAndFliter.orderByHighToLowPriceRadioButton
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.scrollDownToHighToLowPriceOption"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: Select order by high to low price
  - name: functions.searchPage.sortAndFliterPage.selectOrderByHighToLowPrice
    flow:
      - click:
          identifier: searchPage.sortAndFliter.orderByHighToLowPriceRadioButton
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.selectOrderByHighToLowPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Submit filter
  - name: functions.searchPage.sortAndFilterPage.tapOnSubmitButton
    flow:
      - sleep:
          duration: 3000
      - click:
          identifier: searchPage.sortAndFilter.submitButton
      - log:
          message: "End Functions: searchPage.sortAndFilterPage.tapOnSubmitButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates the existence of a badge
  # Params:      ${badge} [Optional] Badges name to check in the UI  [Value: PO, MC, AR, Rebaja]
  - name: functions.searchPage.validateBadges
    flow:
      - if:
          condition: ${badge} == null
          then:
            - storeIn:
                key: isBadgesPresent
                value: true
          else:
            - if:
                condition: ${badge} == 'PO' # Pre-order
                then:
                  - if:
                      identifier:
                        present:         
                          - identifier: searchPage.productTile.preOrderText
                          - identifier: searchPage.productTile.preOrderDate
                      then:
                        - storeIn:
                            key: isBadgesPresent
                            value: true
                      else:
                        - storeIn:
                            key: isBadgesPresent
                            value: false
            - if:
                condition: ${badge} == 'AR'  # Age restriction
                then:
                  - if:
                      identifier:
                        present:         
                          - identifier: searchPage.productTile.ageRestrictionBadge
                      then:
                        - storeIn:
                            key: isBadgesPresent
                            value: true
                      else:
                        - storeIn:
                            key: isBadgesPresent
                            value: false
            - if:
                condition: ${badge} == 'Rebaja' || ${badge} == 'Rollback' || ${badge} == 'Chute de prix' # Rollback
                then:
                  - if:
                      identifier:
                        present:         
                          - identifier: searchPage.productTile.rollBackBadge
                      then:
                        - storeIn:
                            key: isBadgesPresent
                            value: true
                      else:
                        - storeIn:
                            key: isBadgesPresent
                            value: false           
            - if:
                  condition: ${badge} == 'MSI'  # MSI
                  then:
                    - if:
                        identifier:
                          present:         
                            - identifier: searchPage.MSIBadge
                        then:
                          - storeIn:
                              key: isBadgesPresent
                              value: true
                        else:
                          - storeIn:
                              key: isBadgesPresent
                              value: false            
            - if:
                  condition: ${badge} == 'Alcohol'  # Alcohol item
                  then:
                    - if:
                        identifier:
                          present:         
                            - identifier: searchPage.alcoholBadge
                        then:
                          - storeIn:
                              key: isBadgesPresent
                              value: true
                        else:
                          - storeIn:
                              key: isBadgesPresent
                              value: false                                
            - if:
                condition: ${badge} == 'Multisave'  # Multisave
                then:
                  - if:
                      identifier:
                        present:         
                          - identifier: searchPage.multisaveBadge
                      then:
                        - storeIn:
                            key: isBadgesPresent
                            value: true
                      else:
                        - storeIn:
                            key: isBadgesPresent
                            value: false
            - if:
                condition: ${badge} == 'Manufacturer'  # Manufacturer
                then:
                  - if:
                      identifier:
                        present:         
                          - identifier: searchPage.manufacturerCouponBox
                      then:
                        - storeIn:
                            key: isBadgesPresent
                            value: true
                      else:
                        - storeIn:
                            key: isBadgesPresent
                            value: false
            - if:
                condition: ${isBadgesPresent}
                then:
                  - log:
                      message: "${badge} is present in the search page."
                      color: GREEN_BOLD
                else:
                  - log:
                      message: "${badge} is **not** present in the search page."
                      color: RED_BOLD
      - log:
          message: "End Functions: searchPage.validateBadges"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Tap on te second item of the displayed search results
  - name: functions.searchPage.tapSecondItemImage
    flow:
      - click:
          identifier: searchPage.secondItemImage
      - log:
          message: "End Functions: searchPage.tapSecondItemImage"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate Pickup Fulfillment
  # No params
  - name: functions.searchResultPage.validatePickupFulfillmentIsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: searchPage.pickupFulfillment
      - log:
          message: "End Functions: searchResultPage.validatePickupFulfillmentIsDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate Delivery Fulfillment
  # No params
  - name: functions.searchResultPage.validateDeliveryFulfillmentIsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: searchPage.deliveryFulfillment
      - log:
          message: "End Functions: searchResultPage.validateDeliveryFulfillmentIsDisplayed"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function ignores all the recent searches and only verifies if suggestions are displayed.
  # No params
  - name: functions.searchPage.top-menu.search-suggestions.assertSuggestionsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: searchPage.top-menu.search-suggestions.suggestionsContainer
      - log:
          message: "End Functions: searchPage.top-menu.search-suggestions.assertSuggestionsDisplayed"
          color: BLUE      

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates total results displayed.
  # No params
  - name: functions.searchPage.top-menu.search.totalResultsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: searchPage.top-menu.search.totalResultsDisplayed         
      - log:
          message: "End Functions: searchPage.top-menu.search.totalResultsDisplayed"
          color: BLUE       

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates no results displayed.
  # No params
  - name: functions.searchPage.top-menu.search.noResultsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: searchPage.top-menu.search.errorNoResultsDisplayed 
            - identifier: searchPage.top-menu.search.retryResultsDisplayed 
      - log:
          message: "End Functions: searchPage.top-menu.search.noResultsDisplayed"
          color: BLUE      

   #--------------------------------------------------------------------------------------------------------------------
  # Description: Scroll down to order by low to high price option
  # No params
  - name: functions.searchPage.sortAndFliterPage.scrollDownToLowToHighPriceOption
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: searchPage.sortAndFliter.orderByLowToHighPriceRadioButton
          then:
            - scroll:
                direction: down
                untilIdentifier: searchPage.sortAndFliter.orderByLowToHighPriceRadioButton
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.scrollDownToHighToLowPriceOption"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: Select order by low to high price
  # No params
  - name: functions.searchPage.sortAndFliterPage.selectOrderByLowToHighPrice
    flow:
      - click:
          identifier: searchPage.sortAndFliter.orderByLowToHighPriceRadioButton
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.selectOrderByHighToLowPrice"
          color: BLUE   
  #--------------------------------------------------------------------------------------------------------------------                 
  # Description: Select order by most relevant
  # No params
  - name: functions.searchPage.sortAndFliterPage.selectOrderByMostRelevant
    flow:
      - click:
          identifier: searchPage.sortAndFliter.orderByMostRelevantRadioButton
      - log:
          message: "End Functions: searchPage.sortAndFliterPage.selectOrderByMostRelevant"
          color: BLUE   
  #--------------------------------------------------------------------------------------------------------------------                   
  # Description: Validate OOS items in SLP
  # No params
  - name: functions.searchPage.validateOOSIsDisplayed
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: searchPage.OOSItem
          then:
            - scroll:
                direction: down
                untilIdentifier: searchPage.OOSItem
      - getString:
          identifier: searchPage.OOSItem
          storeIn: productName
      - log:
          message: "Found OOS item: ${productName}"
          color: CYAN
      - verifyIdentifier:
          notPresent:
            - identifier: searchPage.addToCartButtonByName # <--- ${productName}
      - log:
          message: "End Functions: searchPage.validateOOSIsDisplayed"
          color: BLUE   
   #--------------------------------------------------------------------------------------------------------------------                   
  # Description: Validate navigation to homepage from SLP.
  # No params
  - name: functions.searchPage.navigateBackToHome
    flow:
      - try:
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: global.shopBtn
                then:
                  - scroll:
                      direction: up
                      untilIdentifier: global.shopBtn
            - verifyIdentifier:
                present:
                  - identifier: global.shopBtn
          catch:
            flow:
            - if:
                identifier:
                  present:
                    - identifier: global.shopBtn
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: global.shopBtn
            - verifyIdentifier:
                present:
                  - identifier: global.shopBtn 
      - click:
          identifier: global.shopBtn 
      - verifyIdentifier:
          present:
            - identifier: homePage.title        

      - log:
          message: "Validate navigation to Homepage"
          color: GREEN_BOLD
      - log:
          message: "End function: searchPage.navigateBackToHome"
          color: BLUE    
  #--------------------------------------------------------------------------------------------------------------------                      
  # Description: Validate autocorrect feature 
  # No params
  - name: functions.searchPage.validateAutoCorrection 
    flow:
      - verifyIdentifier:
          present:
            - identifier: searchPage.validateAutoCorrection.correctText 
            - identifier: searchPage.validateAutoCorrection.continueSearchingText
            - identifier: searchPage.validateAutoCorrection.wrongTextLink    
      - log:
          message: "End Functions: searchPage.validateAutoCorrection"
          color: BLUE   
  #--------------------------------------------------------------------------------------------------------------------  
  # Description: This function clicks on down arrow in departments inside sort and filter
  - name: functions.searchPage.sortAndFilterPage.expandDepartment
    flow:
      - click:
          identifier: searchPage.sortAndFilter.departmentByFilterDownArrow
      - log:
          message: "End Functions: searchPage.sortAndFilterPage.expandDepartment"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------               
  # Description: Select filter by department
  # Params:   ${departmentName} [Mandatory] Department to filter by
  - name: functions.searchPage.sortAndFilterPage.selectFilterByDepartment
    flow:
      - click:
          identifier: searchPage.sortAndFilter.filterByDepartmentRadioButton # <--- ${departmentName}
      - log:
          message: "End Functions: searchPage.sortAndFilterPage.selectOrderByMostRelevant"
          color: BLUE   
  #--------------------------------------------------------------------------------------------------------------------    
  # Description: Clear filter
  # No params
  - name: functions.searchPage.sortAndFilterPage.tapOnClearFilter
    flow:
      - click:
          identifier: searchPage.sortAndFilter.clearFilterButton
      - log:
          message: "End Functions: searchPage.sortAndFilterPage.tapOnClearFilter"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function clicks on favourite icon from search
  # No Param

  - name: functions.searchPage.addToLists  
    flow:
      - click:
          identifier: searchPage.tapAddToListsIcon
      - log:
          message: "End function: searchPage.addToLists"
          color: BLUE
  # ----------------------------------------------------------------------------------------------------------------


 # Description: handle bottom sheet
  # No params
  - name: functions.searchPage.handle3PPickupBottomSheet
    flow:
      - if:
          condition: ${platform} == 'iOS'
          then:
            - if:
                identifier:
                  present:         
                    - identifier: searchPage.clearCart.pickupItemNearby
                then:
                  - click:
                      identifier: global.gotitBtn
          else:
            - log:
                message: Pickup this item nearby business popup not displayed on cart.
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function scrolls down to Out of Stock item
  # No Param
  - name: functions.searchPage.scrollDownToOOSItem
    flow:
        - if:
            identifier:
              present:
                - identifier: searchPage.oosLabel
            then:
              - log:
                  message: "Out of Stock Element displayed"
                  color: CYAN
            else:
              - scroll:
                  direction: down
                  scrollLimit: 10
                  wait: 2000
                  untilIdentifier: searchPage.oosLabel
        - log:
            message: "End Functions: functions.searchPage.scrollDownToOOSItem"
            color: BLUE   

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on 'Shop Similar' link displayed.
  - name: functions.searchPage.tapShopSimilarLink
    flow:
        - click:
            identifier: searchPage.shopSimilarBtn
        - log:
            message: "End Functions: functions.searchPage.tapShopSimilarLink"
            color: BLUE   

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on 'Shop Similar' link displayed.
  - name: functions.searchPage.assertSeeSimilarCarouselIsDisplayed
    flow:
        # Note: This scroll is required in order to center See Similar Carousel
        - scroll:
            direction: down
            wait: 2000
            untilIdentifier: searchPage.seeSimilarTitle
            position: center
            scrollLimit: 2
        - verifyIdentifier:
            present:
              - identifier: searchPage.seeSimilarTitle
        - log:
            message: "End Functions: functions.searchPage.assertSeeSimilarCarouselIsDisplayed"
            color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Type text in search bar
  # Params:      ${searchText}  [Mandatory]  Product search info
  - name: functions.searchField.typeTextWithoutEnter
    flow:
      - if:
          condition: ${platform} == 'ios'
          then:
            - click:
                identifier: searchPage.searchBar
            - sleep:
                duration: 2000
      - enterText:
          identifier: searchPage.searchField
          string: ${searchText}
          clickFirst: true
          clearField: true
      - log:
          message: "End Functions: searchField.typeTextWithoutEnter"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates Options Btn is displayed in Search Page and returns variable as true
  # No params
  - name: functions.searchPage.validateOptionsBtnIsDisplayed
    flow:
        - if:
            identifier:
              present:
                - identifier: searchPage.optionsBtn
            then:
              - storeIn:
                  key: isOptionsBtnDisplayed
                  value: true
            else:
              - storeIn:
                  key: isOptionsBtnDisplayed
                  value: false
        - log:
            message: "End Functions: functions.searchPage.validateOptionsBtnIsDisplayed"
            color: BLUE 
