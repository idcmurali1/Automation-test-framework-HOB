functions:

#--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps on Add Payment Method button. If there is already a Payment Method selected then it
  #              will tap on Edit Payment Method button.
  # No Params
  - name: functions.checkoutPage.tapAddPaymentMethodBtn
    flow:
      - executeFunction:
          name: functions.checkoutPage.scrollDownToAddPaymentMethodBtn
      - executeFunction:
          name: functions.checkoutPage.clickOnAddPaymentMethodBtn
      - log:
          message: "End functions: checkoutPage.tapAddPaymentMethodBtn"
          color: BLUE

  # Description: Click on add/change payment button
  - name: functions.checkoutPage.clickOnAddPaymentMethodBtn      
    flow: 
      - click:
          identifier: checkoutPage.updatePaymentMethodBtn
          wait: 5000
      - log:
          message: "End functions: checkoutPage.clickOnAddPaymentMethodBtn"
          color: BLUE
  
  # Description: Scroll down to add/change payment button
  - name: functions.checkoutPage.scrollDownToAddPaymentMethodBtn
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.updatePaymentMethodBtn
          then:
            - sleep:
                 duration: 5000
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.updatePaymentMethodBtn
                position: center
                scrollLimit: 5
                timeout: 10000
      - log:
          message: "End functions: checkoutPage.scrollDownToAddPaymentMethodBtn"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function scroll down to invoice section
  # No param 
  - name: functions.checkoutPage.scrollToInvoiceSection
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.fulfillmentMethod
          then:
            - scroll:
                direction: down
                position: center
                untilIdentifier: checkoutPage.invoiceTitle
      - log:
          message: "End functions: checkoutPage.scrollToInvoiceSection"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------
  
  # Description: This functions check for wallet page is opened.
  # No Param
  - name: functions.checkoutPage.isWalletTileDisplayed
    flow: 
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if: 
          identifier:
            present:
              - identifier: checkoutPage.wallet.titleText
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: checkoutPage.isWalletTileDisplayed (Displayed)"
                color: BLUE
          else: 
            - log:
                message: "End function: checkoutPage.isWalletTileDisplayed (Not displayed)"
                color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function performs the basic assertions on the Wallet.
  # No Params
  - name: functions.checkoutPage.assertWalletPopupDisplayed.all
    flow:
      - executeFunction:
          name: functions.checkoutPage.tapAddPaymentMethodBtn
      - executeFunction:
          name: functions.checkoutPage.walletPopup.assertDisplayed.basic
      - executeFunction:
          name: functions.checkoutPage.walletPopup.assertDisplayed.cashiSection
      - executeFunction:
          name: functions.checkoutPage.walletPopup.assertDisplayed.cardsSection
      - executeFunction:
          name: functions.checkoutPage.walletPopup.assertDisplayed.paypalSection
      - executeFunction:
          name: functions.checkoutPage.walletPopup.assertDisplayed.payAtStoreSection
      # TODO: Pay at Delivery section is not displaying in ROP > Wallet for now, uncomment following code once Pay at Delivery should appear.
      # - executeFunction:
      #     name: functions.checkoutPage.walletPopup.assertDisplayed.payAtDeliverySection
      - executeFunction:
          name: functions.checkoutPage.walletPopup.tapCloseBtn
      - log:
          message: ✓ Wallet popup displayed correctly.
          color: GREEN_BOLD
      - log:
          message: "End functions: functions.checkoutPage.assertWalletPopupDisplayed.all"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function performs the basic assertions on the Wallet.
  # No Params
  - name: functions.checkoutPage.walletPopup.assertDisplayed.basic
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.wallet.titleText
      - log:
          message: "End functions: functions.checkoutPage.walletPopup.assertDisplayed.basic"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------
 
  # Description: This function checks if the wallet have credit card attached already.
  # No Params
  - name: functions.checkoutPage.walletPopup.hasPaymentAttached
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.wallet.credit$DebitCard
          then:
            - log:
                message: "No payment method attached to the profile.."
                color: GREEN_BOLD
            - storeIn:
                key: walletStatus
                value: noPaymentAttached
          else:
            - if:
                identifier:
                  present:
                    - identifier: checkoutPage.wallet.continueBtn
                then:
                  - log:
                      message: "Profile contains payment method.."
                      color: GREEN_BOLD
                  - storeIn:
                      key: walletStatus
                      value: profileContainsPayment
                else: 
                  - failTest:
                      message: Wallet page is not loaded properly.
      - log:
          message: "End functions: checkoutPage.walletPopup.hasPaymentAttached"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function performs the Cards Section assertions on the Wallet.
  # No Params
  - name: functions.checkoutPage.walletPopup.assertDisplayed.cardsSection
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.wallet.cardsSection.title.whenCardsAdded
          then:
            - verifyIdentifier:
                present:
                  - identifier: checkoutPage.wallet.cardsSection.anyCardAccessibilitySummary
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.wallet.cardsSection.addCardButton
            timeout: 2000
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.wallet.cardsSection.addCardButton
                wait: 3000
                scrollLimit: 3
            - verifyIdentifier:
                present:
                  - identifier: checkoutPage.wallet.cardsSection.addCardButton
      - log:
          message: "End functions: functions.checkoutPage.walletPopup.assertDisplayed.cardsSection"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function performs the Cashi Section assertions on the Wallet.
  # No Params
  - name: functions.checkoutPage.walletPopup.assertDisplayed.cashiSection
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.wallet.payWithCashiSection
            - identifier: checkoutPage.wallet.payWithCashiTitle
            - identifier: checkoutPage.wallet.payWithCashiIcon
            - identifier: checkoutPage.wallet.payWithCashiRadioButton
      - log:
          message: "End functions: functions.checkoutPage.walletPopup.assertDisplayed.cashiSection"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function performs the Pay at Store Section assertions on the Wallet.
  # No Params
  - name: functions.checkoutPage.walletPopup.assertDisplayed.payAtStoreSection
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.wallet.payAtStoreRadioButton
            timeout: 2000
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.wallet.payAtStoreRadioButton
                scrollLimit: 3
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.wallet.payAtStoreSection
            - identifier: checkoutPage.wallet.payAtStore.estimatedTotalLabel
            - identifier: checkoutPage.wallet.payAtStore.estimatedTotalValue
            - identifier: checkoutPage.wallet.payAtStoreDescription
            - identifier: checkoutPage.wallet.payAtStoreRadioButton
      - log:
          message: "End functions: functions.checkoutPage.walletPopup.assertDisplayed.payAtStoreSection"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function performs the Pay at Delivery Section assertions on the Wallet.
  # No Params
  - name: functions.checkoutPage.walletPopup.assertDisplayed.payAtDeliverySection
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.wallet.payAtDelivery.title
            - identifier: checkoutPage.wallet.payAtDelivery.cashOption.radioBtn
            - identifier: checkoutPage.wallet.payAtDelivery.cardOption.radioBtn
      - log:
          message: "End functions: functions.checkoutPage.walletPopup.assertDisplayed.payAtDeliverySection"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function performs the PayPal Section assertions on the Wallet.
  # No Params
  - name: functions.checkoutPage.walletPopup.assertDisplayed.paypalSection
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.wallet.otherPaymentMethods.container
            - identifier: checkoutPage.wallet.paypalSection.subtitle
            - identifier: checkoutPage.wallet.paypalSection.paypalCta
      - log:
          message: "End functions: functions.checkoutPage.walletPopup.assertDisplayed.paypalSection"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function closes the Wallet Popup on the Checkout Page.
  # No Params
  - name: functions.checkoutPage.walletPopup.tapCloseBtn
    flow:
      - sleep:
          duration: 5000
      - if:
          identifier:
            present:
              - identifier: checkoutPage.wallet.closeBtn
          then:
            - click:
                identifier: checkoutPage.wallet.closeBtn
                wait: 5000
      - log:
          message: "End functions: functions.checkoutPage.walletPopup.tapCloseBtn"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: Taps the Add Card button in the Credit/Debit Cards Section in the Wallet Popup.
  # No Params
  - name: functions.checkoutPage.walletPopup.tapAddCardBtn
    flow:
      - sleep:
          duration: 2000
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.wallet.cardsSection.addCardButton
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.wallet.cardsSection.addCardButton
                scrollLimit: 2
                wait: 2000
      - click:
          identifier: checkoutPage.wallet.cardsSection.addCardButton
      - log:
          message: "End function: functions.checkoutPage.walletPopup.tapAddCardBtn"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: Asserts the Card Saved Confirmation Message is displayed.
  # No Params
  - name: functions.checkoutPage.walletPopup.cardSavedConfirmationMsg.assertDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.wallet.cardSavedConfirmationMessage
          timeout: 10000
      - log:
          message: "End function: checkoutPage.walletPopup.cardSavedConfirmationMsg.assertDisplayed (success)"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: Asserts the Credit/Debit Card is listed.
  # Params:      ${cardLast4Digits}  [Mandatory]  The last 4 digits of the card to be asserted.
  - name: functions.checkoutPage.walletPopup.assertCardListed
    flow:
      - log:
          message: Checking if card ending in '${cardLast4Digits}' is listed...
          color: GREEN
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.wallet.cardsSection.cardContainer.byCardLast4Digits # <-- ${cardLast4Digits}
          timeout: 10000
      - log:
          message: "End function: functions.checkoutPage.walletPopup.assertCardListed (success)"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function selects a card by card last 4 digits.
  # Params:      ${cardLast4Digits}  [Mandatory]  The last 4 digits of the card to be asserted.
  - name: functions.checkoutPage.walletPopup.selectCardByLast4Digits
    flow:
      - log:
          message: Selecting card ending in '${cardLast4Digits}' ...
          color: CYAN
      - click:
          identifier: walletPage.selectCardByLast4Digits # <- ${cardLast4Digits}
      - log:
          message: "End function: functions.checkoutPage.walletPopup.assertCardListed (success)"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------   
 
  # Description: This function select cashi in wallet page
  # No param 
  - name: functions.checkoutPage.wallet.tapPayWithCashiRadioButton
    flow: 
      - click:
         identifier: checkoutPage.wallet.payWithCashiRadioButton
      - log:
          message: "End functions: checkoutPage.tapPayWithCashiRadioButton"
          color: BLUE
 
#--------------------------------------------------------------------------------------------------------------------

  # Description: This function select pay at store in wallet page
  # No param 
  - name: functions.checkoutPage.wallet.tapPayAtStoreButton
    flow: 
      - scroll:
          direction: down
          untilIdentifier: checkoutPage.wallet.payAtStoreRadioButton
      - click:
          identifier: checkoutPage.wallet.payAtStoreRadioButton
      - log:
          message: "End functions: checkoutPage.wallet.tapPayAtStoreButton"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function select pay at store in wallet page
  # No param 
  - name: functions.checkoutPage.wallet.tapPayPalButton
    flow: 
      - scroll:
          direction: down 
          untilIdentifier: walletPage.paypalSection.paypalCta
          timeout: 10000
      - click:
          identifier: walletPage.paypalSection.paypalCta
          coordinates: 30%, 30%
          wait : 5000
      - log: 
          message: "Accepting continue with paypal popup..."
          color: CYAN

      - if: 
          condition: ${platform} == 'iOS'
          then:
            - click:
                identifier: checkoutPage.wallet.paypalConfirmRedirectionBtn
          else:
            - if:
                identifier:
                  present:
                    - identifier: global.acceptBtn
                then:
                    - click:
                        identifier: global.acceptBtn
      - if:
          identifier:
            present:
              - identifier: payPalPage.cookiesPopUp
            timeout: 15000
          then:
            - click:
                identifier: payPalPage.acceptCookies
            - log: 
                message: "Accepting redirection pop from walmart.mx to paypal.com..."
                color: CYAN
      - log:
          message: "End functions: checkoutPage.wallet.tapPayPalButton"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function select continue button 
  # No param 
  - name: functions.checkoutPage.wallet.tapContinueButton
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.wallet.continueBtn
          then:
            - click:
                identifier: checkoutPage.wallet.continueBtn
      - log:
          message: "End functions: checkoutPage.wallet.tapContinueButton"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function select place order button 
  # No param 
  - name: functions.checkoutPage.tapPlaceOrderButton
    flow:
      - sleep:
          duration: 10000
      - click:
          identifier: checkoutPage.placeOrderButton
      - sleep:
          duration: 15000
      - if: 
          condition: ${environment} == 'Teflon'
          then:
            - loop:
                begin: 0
                end: 3 
                mode: increment
                flow:
                  - if:
                      identifier:
                        notPresent:
                          - identifier: checkoutPage.placeOrderButton
                      then:
                        - log: Clicked on Place order button successfully
                      else:
                        - click:
                            identifier: checkoutPage.placeOrderButton
                        - log: Clicking Place order button again                   
                  - if: 
                      identifier:
                        present:
                          - identifier: checkOutPage.placeOrder.errorPopUpTitle
                      then:
                        - if: 
                            condition: ${platform} == 'iOS'
                            then:
                              - click:
                                  identifier: checkoutPage.placeOrder.acceptErrorPopUpBtn
                            else:
                              # Temporary workaround until the place order issue is fixed. Can be removed once issue is fixed.
                              - log: "Executing the click on coordinates to dismiss the Payment error."
                              - executeFunction:
                                  name: functions.global.closePaymentFailureButtonIfDisplayed

#                              # Click on coordinates because to close popup you have to tap outside the window
#                              - click:
#                                  identifier: global.acceptBtn
                        - click:
                            identifier: checkoutPage.placeOrderButton
                      else: 
                        - break: true
      - executeFunction:
          name: functions.utils.handlePopUp
      - log:
          message: "End functions: checkoutPage.tapPlaceOrderButton"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function validate item details in checkout page
  # No params
  - name: functions.checkoutPage.validateItemDetails
    flow: 
      - sleep:
          duration: 5000
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.fulfillmentMethod
            - identifier: checkoutPage.fulfillmentTime
            - identifier: checkoutPage.fulfillmentAddress
      - if:
          condition: ${market} == 'US' && ${platform} == 'Android'
          then: 
            - if:
                identifier:
                  notPresent:
                    - identifier: checkoutPage.productImage
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: checkoutPage.productImage
                      scrollLimit: 1
                      position: center
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.productImage
            - identifier: checkoutPage.itemCount
      - log:
          message: "End function: checkoutPage.validateItemDetails"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function get the Delivery or Pickup date
  # Return: ${returnedFulfillmentDate}
  - name: functions.checkoutPage.getFulfillmentDate
    flow: 
      - getString:
          identifier: checkoutPage.fulfillmentTime
          storeIn: returnedFulfillmentDate
      - log: "Extracted fullfillment date: '${returnedFulfillmentDate}'"
      - log:
          message: "End function: checkoutPage.getFulfillmentDate"
          color: BLUE     
 
 #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function reformats the Delivery or Pickup date to match to the one shown in the thank you page. 
  # Params: ${fulfillmentDate}
  # Return: ${returnedFormattedFulfillmentDate}
  - name: functions.checkoutPage.reformatFulfillmentDate
    flow: 
      - executeNode:
          file: wcp/test/helpers/checkoutPage/formatFulfillmentDate.js
          args:
            - value: ${fulfillmentDate}
          getResponse:
            storeIn: returnedFormattedFulfillmentDate
      - log: "Formatted fullfillment date: '${returnedFormattedFulfillmentDate}'"
      - log:
          message: "End function: checkoutPage.reformatFulfillmentDate"
          color: BLUE     
  #--------------------------------------------------------------------------------------------------------------------  

  # Description: This function validate pay at store
  # No param 
  - name: functions.checkoutPage.validatePayAtStore
    flow: 
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.payAtStore.availableStores
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.payAtStore.availableStores
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.payAtStore.instruction
            - identifier: checkoutPage.payAtStore.availableStoresLabel
            - identifier: checkoutPage.payAtStore.availableStores
      - log:
          message: "End functions: checkoutPage.validatePayAtStore"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------         

  # Description: This functions check for invoice section.
  # No Param
  - name: functions.checkoutPage.isInvoiceDisplayed
    flow: 
      - storeIn:
          key: returnedIsDisplayed
          value: false    
      - scroll:
          direction: down
          untilIdentifier: checkoutPage.addPhoneNumberTitle   
      - if:
          identifier:
            present:
              - identifier: checkoutPage.invoiceCheckBox
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: checkoutPage.isInvoiceDisplayed (Displayed)"
                color: BLUE
          else: 
            - log:
                message: "End function: checkoutPage.isInvoiceDisplayed (Not displayed)"
                color: BLUE
  # ----------------------------------------------------------------------------------------------------------------

  # Description: This function validate invoice section 
  # No param 
  - name: functions.checkoutPage.validateInvoice
    flow: 
      - executeFunction:
          name: functions.checkoutPage.isInvoiceDisplayed
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.invoiceTitle
            - identifier: checkoutPage.invoiceCheckBox
          timeout: 10000
      - log:
          message: "End functions: checkoutPage.validateInvoice"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function select invoice 
  # No param 
  - name: functions.checkoutPage.selectInvoice
    flow:
      - if:
          condition: ${market} =='MX' || ${market} =='MX-Bodega'
          then:
            - executeFunction:
                name: functions.utils.scrollToElement
                params:
                  - name: scrollToElement
                    string: checkoutPage.addPhoneNumberTitle
            # - executeFunction:
            #     name: functions.checkoutPage.scrollDonwToInvoice
            - click:
                identifier: checkoutPage.invoiceCheckBox
                wait: 8000
            
          else:
            - log:
                message: "Invoice selection is not applicable for this market"
      - log:
          message: "End functions: checkoutPage.selectInvoice"
          color: BLUE

  # Description: This function scroll down to invoice check box
  # No param
  - name: functions.checkoutPage.scrollDonwToInvoice
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.invoiceCheckBox
          then:
              - log: "Invoice check box is visible"
          else:
              - scroll:
                  direction: down
                  untilIdentifier: checkoutPage.invoiceCheckBox
                  position: center
      - log:
          message: "End functions: checkoutPage.scrollDonwToInvoice"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function validates whether an error message pops up for the item needs invoice if no invoice has been selected.
  # No param 
  - name: functions.checkoutPage.validateErrorWithoutInvoice
    flow: 
        - verifyIdentifier:
            present:
              - identifier: checkoutPage.invoiceRequireMessage
            timeout: 10000
        - log:
           message: "End functions.checkoutPage.validateErrorWithoutInvoice"
           color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function validate if invoice is dispalyed
  # No param

  - name: functions.checkoutPage.validateInvoiceDisplayed
    flow:
      - executeFunction:
          name: functions.checkoutPage.isInvoiceDisplayed
      - if:
          condition: "!${returnedIsDisplayed}"
          then:
            - failTest:
                message: "Invoice not displayed."
      - log:
          message: "End flow: checkoutPage.validateInvoice"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function validates that no error message pops up requesting an invoice 
  # No param

  - name: functions.checkoutPage.validateNoInvoiceRequest
    flow: 
        - verifyIdentifier:
            notPresent:
              - identifier: checkoutPage.invoiceRequireMessage
            timeout: 10000
        - log:
           message: "End functions.checkoutPage.validateNoInvoiceRequest"
           color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function checks promo code header validation
  - name: functions.checkoutPage.isPromoCodeDisplayed
    flow:
      - scroll:
          direction: down
          untilIdentifier: checkoutPage.promoCodeLabel
          scrollLimit: 3
          position: center
      - if:
          identifier:
            present:
              - identifier: checkoutPage.promoCodeLabel
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: functions.checkoutPage.isPromoCodeDisplayed (Displayed)"
                color: BLUE
          else:
            - storeIn:
                key: returnedIsDisplayed
                value: false 
            - log:
                message: "End function: functions.checkoutPage.isPromoCodeDisplayed (Not displayed)"
                color: BLUE
                
#--------------------------------------------------------------------------------------------------------------------

  # Description: This function checks for promo code section is displayed
  # No param 
  - name: functions.checkoutPage.tapPromoCodeBtn
    flow: 
      - click:
          identifier: checkoutPage.tapPromoCodeBtn
      - log:
          message: "End functions: checkoutPage.tapPromoCodeBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function enters Promo Code in the corresponding field.
  # Params:  ${promoCode}  [Mandatory]  Promo code to be entered.
  - name: functions.checkoutPage.enterPromoCode
    flow: 
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.promoCodeField
            timeout: 2000
          then:
            - log:
                message: Promo code input field is not displayed, clicking to expand...
                color: GREEN
            - click:
                identifier: checkoutPage.tapPromoCodeBtn
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.promoCodeField
          timeout: 2000
      - enterText:
          identifier: checkoutPage.promoCodeField
          string: ${promoCode}
          clickFirst: true
          clearField: true
      - executeFunction:
          name: functions.utils.hideKeyboard
      - log:
          message: "End function: functions.checkoutPage.enterPromoCode"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function taps the Apply Promo Code button.
  # No Params
  - name: functions.checkoutPage.tapApplyPromoCodeBtn
    flow: 
      - click:
          identifier: checkoutPage.applyPromoCodeBtn
      - sleep:
          duration: 10000
      - if:
          condition: ${platform} == 'Android'
          then:
            - executeFunction:
                name: functions.utils.hideKeyboard
      - log:
          message: "End functions: functions.checkoutPage.tapApplyPromoCodeBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts correct Promo Code has been displayed and its applied discount is not $0.00.
  # Params:  ${promoCodeText}  [Mandatory]  Promo Code Text expected to be displayed after applied.
  - name: functions.checkoutPage.assertCorrectPromoCodeDisplayed
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: checkOutPage.appliedPromoCode.text # <-- ${promoCodeText}
            timeout: 5000
          then:
            - scroll:
                direction: down
                untilIdentifier: checkOutPage.appliedPromoCode.text # <-- ${promoCodeText}
                scrollLimit: 4
      - verifyIdentifier:
          present:
             - identifier: checkOutPage.appliedPromoCode.text # <-- ${promoCodeText}
             - identifier: checkOutPage.appliedPromoCode.value # <-- ${promoCodeText}
      - log:
          message: ✔︎ Promo Code Applied Correctly
          color: GREEN
      - log: 
          message: "End functions: checkoutPage.assertCorrectPromoCodeDisplayed"
          color: BLUE
          
  #--------------------------------------------------------------------------------------------------------------------                
  # Description: This function validate cashi in checkout page 
  # No param 
  - name: functions.checkoutPage.validateCashi
    flow: 
      - executeFunction:
          name: functions.checkoutPage.scrollDownToEditPaymentButton
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.cashiIcon
            - identifier: checkoutPage.paymentMethod.payableAmount
            - identifier: checkoutPage.cashiDescription
      - log:
          message: "End functions: checkoutPage.validateCashi"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This method asserts whether the Checkout Page loaded properly.
  # No Param
  - name: functions.checkoutPage.assertPageLoaded
    flow:
      - sleep:
          duration: 5000    
      - if:
          condition: ${market} == 'US'
          then:
            - executeFunction:
                name: functions.checkoutPage.walletPopup.tapCloseBtn                    
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.fulfillmentMethod
            - identifier: checkoutPage.rootFragmentContainer
      - log:
          message: "End function: checkoutPage.assertPageLoaded"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function validates if the person who makes the pickup, edit button and general options are displayed
  # No params 
  - name: functions.checkoutPage.isPickupInformationDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.pickupPersonLabel
            - identifier: checkoutPage.pickupPersonEditBtn
            - identifier: checkoutPage.pickupPersonName
      - log: 
          message: "End function: checkoutPage.isPickupInformationDisplayed"
          color: BLUE 

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function clicks on edit information button
  # Params: No params
  - name: functions.checkoutPage.tapEditPickupPersonInformation
    flow:
      - click:
          identifier: checkoutPage.pickupPersonEditBtn
      - sleep:
         duration: 10000
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.editPickuppersonInformation.popuptitle
          then:
            - click:
                 coordinates: 361,326
       
      - log: 
          message: "End function: checkoutPage.tapEditPickupPersonInformation"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function edits Pickup Person Name
  # Params: ${pickupPersonName} [optional] Pickup Person Name to enter
  - name: functions.checkoutPage.enterPickupPersonName
    flow:
      - if: 
          condition: ${pickupPersonName} != null
          then:
            - enterText:
                identifier: checkoutPage.pickupPersonNameTextField
                string: "${pickupPersonName}" 
                clearField: true 
                clickFirst: true 
      - log: 
          message: "End function: checkoutPage.enterPickupPersonName"
          color: BLUE 

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function edits Pickup Person Last Name
  # Params: ${pickupPersonLastName} [optional] Pickup Person Last Name to enter
  - name: functions.checkoutPage.enterpickupPersonLastName
    flow:
      - if: 
          condition: ${pickupPersonLastName} != null
          then:
            - enterText:
                identifier: checkoutPage.pickupPersonLastNameTextField
                string: "${pickupPersonLastName}"
                clearField: true 
                clickFirst: true 
      - log: 
          message: "End function: checkoutPage.enterpickupPersonLastName"
          color: BLUE 

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function edits Pickup Person Phone Number
  # Params: ${pickupPersonPhoneNumber} [optional] Pickup Person Phone Number to enter
  - name: functions.checkoutPage.enterPickupPersonPhoneNumber
    flow:
      - if: 
          condition: ${market} == 'MX' || ${market} == 'MX-Bodega'
          then:
            - if: 
                condition: ${pickupPersonPhoneNumber} != null
                then:
                  - enterText:
                      identifier: checkoutPage.pickupPersonPhoneNumberTextField
                      string: "${pickupPersonPhoneNumber}"
                      clearField: true 
                      clickFirst: true 
      - log: 
          message: "End function: checkoutPage.enterPickupPersonPhoneNumber"
          color: BLUE 

  #---------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on save new person information button
  # Params: No params
  - name: functions.checkoutPage.tapSavePickupPersonInformation
    flow:
      - if: 
          condition: ${platform} == 'Android'
          then:
            - click:
                identifier: addAddressPage.geoPointView.confirmLocation
                wait: 5000
          else: 
            - click:
                identifier: checkoutPage.savePickupPersonDataBtn
                wait: 5000
      - sleep:
          duration: 15000
      - log: 
          message: "End function: checkoutPage.tapSavePickupPersonInformation"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function is used to validate the paypal in checkout.
  # Params: No params
  - name: functions.checkoutPage.paymentMethod.validatePaypalModule
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.paymentMethod.paypalEmailId
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.paymentMethod.paypalEmailId
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.paymentMethod.paypalIcon
            - identifier: checkoutPage.paymentMethod.paypalEmailId
            - identifier: checkoutPage.paymentMethod.payableAmount
            - identifier: checkoutPage.editPaymentMethod
      - log: 
          message: "End function: checkoutPage.paymentMethod.validatePaypalModule"
          color: BLUE  

  #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function tap on edit link from bottom sheet
  # No param 
  - name: functions.checkoutPage.tapInvoiceEditButton
    flow: 
      - click:
          identifier: checkoutPage.invoiceBottomSheet.editLink
      - log:
          message: "End functions: checkoutPage.tapInvoiceEditButton"
          color: BLUE         

  #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function tap on edit link from bottom sheet
  # No param 
  - name: functions.checkoutPage.scrollDownInvoicePageSaveButton
    flow:
      - scroll:
          direction: down
          position: center
          untilIdentifier: checkoutPage.invoicePage.saveButton
      - log:
          message: "End functions: checkoutPage.scrollDownInvoicePageSaveButton"
          color: BLUE 

#--------------------------------------------------------------------------------------------------------------------
# Description: This function will validate that the taxpayer full name for the invoice displayed on the checkout page is the same as that on the selected invoice.
  # No Param
  - name: functions.checkoutPage.validateSelectedInvoiceTaxPayerInformation
    flow:  
      - executeFunction:
          name: functions.checkoutPage.getSelectedInvoiceTaxPayerName

      - if:
          condition: ${displayedInvoiceTaxPayerFullName} == ${selectedInvoiceTaxPayerFullName}
          then:
            - log:
                message: "Successful Assertion for invoice tax payer name: '${displayedInvoiceTaxPayerFullName}' (expected: '${selectedInvoiceTaxPayerFullName}')"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "Displayed invoice information is not correct: '${displayedInvoiceTaxPayerFullName}' (expected: '${selectedInvoiceTaxPayerFullName}')"
      - log:
          message: "End function: functions.checkoutPage.validateSelectedInvoiceTaxPayerInformation"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function check preferred check box
  # No param 
  - name: functions.checkoutPage.tapOnPreferredCheckBox
    flow:
      - click:
          identifier: checkoutPage.invoicePage.preferredCheckBox
      - log:
          message: "End functions: checkoutPage.tapOnPreferredCheckBox"
          color: BLUE 

 #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function tap on edit link from bottom sheet
  # No param 
  - name: functions.checkoutPage.tapOnPageSaveButton
    flow:
      - click:
          identifier: checkoutPage.invoicePage.saveButton
      - log:
          message: "End functions: checkoutPage.tapOnPageSaveButton"
          color: BLUE 

  #-------------------------------------------------------------------------------------------------------------------- 

 # Description: This function check if the invoice page loaded sucessfully.
  # No Params
  - name: functions.checkoutPage.isInvoiceBottomSheetDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if:
          identifier:
            present:
              - identifier: invoiceBottomSheet.pageTitle
            timeout: 10000
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function:checkoutPage.isInvoiceBottomSheetDisplayed (Displayed)"
                color: BLUE
          else: 
            - log:
                message: "End function: checkoutPage.isInvoiceBottomSheetDisplayed (Not displayed)"
                color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: Asserts the Delivery Instructions Section is displayed.
  # No Params
  - name: functions.checkoutPage.deliveryInstructions.assertSectionDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.deliveryInstructions.container
      - log:
          message: "End function: functions.checkoutPage.deliveryInstructions.assertSectionDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: Taps the Add Instructions button.
  # No Params
  - name: functions.checkoutPage.deliveryInstructions.tapAddInstructionsBtn
    flow:
      - click:
          identifier: checkoutPage.deliveryInstructions.addInstructionsBtn
          wait: 3000
      - log:
          message: "End function: functions.checkoutPage.deliveryInstructions.tapAddInstructionsBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

 # Description: This function checks for delivery instruction pop up is displayed 

  # No Params
  - name: functions.checkoutPage.deliveryInstructions.assertEnterInstructionsPopupDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.deliveryInstructions.assertEnterInstructionsPopup
          timeout: 3000
      - log:
          message: "End function: functions.checkoutPage.deliveryInstructions.assertEnterInstructionsPopupDisplayed"
          color: BLUE
 #--------------------------------------------------------------------------------------------------------------------

  # Description: This function checks for add delivery instruction field is displayed.
  # RETURNS: [boolean] ${sectionIsPresent}
  # No Params
  - name: functions.checkoutPage.deliveryInstructions.isAddDeliveryInstructionsDislpayed
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.deliveryInstructions.titleLabel
          then:
            - log:
                message: "Enter Description Section is present"
                color: CYAN
            - storeIn:
                key: sectionIsPresent
                value: true
          else:
            - log:
                message: "Enter Description Section is not present"
                color: ORANGE
            - storeIn:
                key: sectionIsPresent
                value: false
      - log:
          message: "End function: functions.checkoutPage.deliveryInstructions.isAddDeliveryInstructionsDislpayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: Enters the given Delivery Instructions.
  # Params:  ${deliveryInstructions}  Delivery Instructions to be entered in the corresponding field.
  - name: functions.checkoutPage.deliveryInstructions.enterDeliveryInstructions
    flow:
      - enterText:
          identifier: checkoutPage.addDeliveryInstructions.deliveryNotes
          string: data.checkout.deliveryInstructions
          clickFirst: true
          clearField: true
      - sleep:
          duration: 2000
      - if:
          condition: ${platform} == 'iOS' && (${market} == 'US' || ${market} == 'CA')
          then:          
              - executeFunction:
                    name: functions.utils.hideKeyboard
      - log:
          message: "End function: functions.checkoutPage.deliveryInstructions.enterDeliveryInstructions"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: Taps the Delivery Instructions Save button.
  # No Params
  - name: functions.checkoutPage.deliveryInstructions.tapSaveBtn
    flow:
      - click:
          identifier: checkoutPage.addDeliveryInstructions.save
          wait: 3000
      - log:
          message: "End function: functions.checkoutPage.deliveryInstructions.tapSaveBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: Asserts the displayed Delivery Instructions are correct.
  # Params: ${deliveryInstructions}  [Mandatory]  Expected Delivery Instructions to be displayed.
  - name: functions.checkoutPage.deliveryInstructions.assertCorrectDeliveryInstructionsDisplayed
    flow:
      - if:
          condition: ${platform} == 'Android'
          then:
            - verifyIdentifier:
                contentDescription:
                  - identifier: checkoutPage.deliveryInstructions.displayedInstructionsLabel 
                    contains: data.checkout.deliveryInstructions          
          else:
            - verifyIdentifier:
                label:
                  - identifier: checkoutPage.deliveryInstructions.displayedInstructionsLabel
                    contains: data.checkout.deliveryInstructions
      - log:
          message: "End function: functions.checkoutPage.deliveryInstructions.addDeliveryInstructions"
          color: BLUE

  #----------------------------------------------------------------------------------------------------------------

  # Description: Asserts whether a Credit/Debit Card was selected as Payment Method.
  # Params:      ${cardLast4Digits}  [Mandatory]  The last 4 digits of the Card to be asserted.
  - name: functions.checkoutPage.paymentMethod.assertCreditOrDebitCardSelected
    flow:
      - log:
          message: Asserting if Card ending in '${cardLast4Digits}' was selected as Payment Method...
          color: GREEN
      - sleep:
          duration: 5000
      - if:
          condition: ${market} == 'CA'  
          then: 
           - if:
               identifier:
                 notPresent:
                    - identifier: checkoutPage.paymentMethodSection.selectedCreditOrDebitCardLabel.byCardLast4Digits
               then:
                  - scroll:
                     direction: down
                     untilIdentifier: checkoutPage.paymentMethodSection.selectedCreditOrDebitCardLabel.byCardLast4Digits   
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.paymentMethodSection.selectedCreditOrDebitCardLabel.byCardLast4Digits # <-- ${cardLast4Digits}
      - log:
          message: ✓ Selected card '${cardLast4Digits}' is displaying correctly in checkout page.
          color: GREEN_BOLD
      - log:
          message: "End function: checkoutPage.paymentMethod.assertCreditOrDebitCardSelected (success)"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------  

  # Description: This function scroll up to cvv text field from bottom
  - name: functions.checkoutPage.scrollToCVVTextfieldFromBottom
    flow: 
      - scroll:
          direction: up
          position: center
          untilIdentifier: checkoutPage.addCvvTextField
          scrollLimit: 5
      - log:
          message: "End functions: checkoutPage.scrollToCVVTextfieldFromBottom"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------  

  # Description: This function scroll down to cvv text field from top
  - name: functions.checkoutPage.scrollToCVVTextfieldFromTop
    flow: 
      - scroll:
          direction: down
          position: center
          untilIdentifier: checkoutPage.addCvvTextField
          scrollLimit: 8
      - log:
          message: "End functions: checkoutPage.scrollToCVVTextfieldFromTop"
          color: BLUE

   #--------------------------------------------------------------------------------------------------------------------
   # Description: This function is for scrolling down to bottom of page
   # No param  
  - name:  functions.checkoutPage.scrollToPOS
    flow:
      - scroll:
          direction: down
          position: center
          untilIdentifier: checkoutPage.posSummary
      - log:
          message: "End functions: checkoutPage.scrollToPOS"
          color: BLUE



  #--------------------------------------------------------------------------------------------------------------------  

  # Description: This function validtes the reduced/strikethrough price
  - name: functions.checkoutPage.validateReducedPrice 
    flow: 
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.reducePrice
      - log:
          message: "End functions: checkoutPage.validateReducedPrice"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------  

  # Description: This function validte pick up free shipping message is showing 
  - name: functions.checkoutPage.validatePickUpFreeShipping
    flow: 
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.pickUpFree
      - log:
          message: "End functions.checkoutPage.validatePickUpFreeShipping"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------  

  # Description: This function validte no shipping charges applied
  - name: functions.checkoutPage.validateNoShippingCharge
    flow: 
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.freeShippingToHome
      - log:
          message: "End functions: checkoutPage.validateNoShippingCharge"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Validates wallet is displayed
  # No params
  - name: functions.checkoutPage.validateWalletIsDisplayed
    flow:
        - if:
            condition: ${market} == 'CA' || ${market} == 'US'
            then:
              - if:
                  identifier:
                     notPresent:
                         - identifier: checkoutPage.walletContainer
                  then:      
                     - scroll:
                         direction: down
                         untilIdentifier: checkoutPage.walletContainer
                         scrollLimit: 5
              - if:
                  identifier:
                     notPresent:
                         - identifier: checkoutPage.walletContainer
                  then:      
                     - scroll:
                         direction: up
                         untilIdentifier: checkoutPage.walletContainer
                         scrollLimit: 8
        - verifyIdentifier:
           present:
            - identifier: checkoutPage.walletContainer
        - log:
           message: "End function: functions.checkoutPage.validateWalletIsDisplayed"
           color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Validates MSI options displayed
  # No params
  - name: functions.checkoutPage.validateMsiOptionsDisplayed
    flow:
      - executeFunction:
          name: functions.checkoutPage.scrollDownToEditPaymentButton    
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.msiOptionsContainer
      - log:
          message: "End function: functions.checkoutPage.validateMsiOptionsDisplayed"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function checks if cvv field is present in review order page
  - name: functions.checkoutPage.isCVVFieldDisplayed
    flow:
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.addCvvTextField
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.addCvvTextField
      - if:
          identifier:
            present:
              - identifier: checkoutPage.addCvvTextField
              - identifier: checkoutPage.editPaymentMethod
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: checkoutPage.isCVVFieldDisplayed (Displayed)"
                color: BLUE
          else:
            - storeIn:
                key: returnedIsDisplayed
                value: false 
            - log:
                message: "End function: checkoutPage.isCVVFieldDisplayed (Not displayed)"
                color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function scrolls down to Edit Payment btn
  # No params
  - name: functions.checkoutPage.scrollDownToEditPaymentButton
    flow:
      - scroll:
          direction: down
          untilIdentifier: checkoutPage.editPaymentMethod
          position: center
      - log: 
          message: "End function: checkoutPage.scrollDownToEditPaymentButton"
          color: BLUE  

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function scrolls to top of review Order page
  # No params
  - name: functions.checkoutPage.scrolltoTopOfReviewOrderPage
    flow:
      - scroll:
          direction: up
          untilIdentifier: checkoutPage.fulfillmentCard
          position: center
      - log: 
          message: "End function: checkoutPage.scrolltoTopOfReviewOrderPage"
          color: BLUE  

   #-------------------------------------------------------------------------------------------------------------------- 
         
  # Description: This function scrolls down to Edit Payment btn
  # No params
  - name: functions.checkoutPage.scrollUpToEditPaymentButton
    flow:
      - scroll:
          direction: up
          untilIdentifier: checkoutPage.editPaymentMethod
          position: center
          scrollLimit: 5
      - log: 
          message: "End function: checkoutPage.scrollUpToEditPaymentButton"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 

  # Description: This function clicks on the edit payment method button
  # No params
  - name: functions.checkoutPage.tapOnEditPaymentMethodButton
    flow:
      - click:
          identifier: checkoutPage.editPaymentMethod
      - log:
          message: "End function: checkoutPage.tapOnEditPaymentMethodButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Asserts whether address selected in cart is correctly dispalyed in checkout
  # Param:      ${returnedSelectedAddressName}  [Mandatory]  Selected address name to be asserted
  - name: functions.checkoutPage.assertCorrectFulfillmentAddressIsDisplayed
    flow:
      - executeFunction:
          name: functions.checkoutPage.assertFulfillmentAddressName # <-- ${returnedSelectedAddressName}
      - executeFunction:
          name: functions.checkoutPage.assertFulfillmentAddress   
      - log:
          message: "End function: checkoutPage.assertCorrectFulfillmentAddressIsDisplayed"
          color: BLUE
          
#--------------------------------------------------------------------------------------------------------------------  

  # Description: This function valid fields in checkout page money box
  # Params:  ${moneyBoxFieldName}      [Mandatory]  Money box field name
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__] ]
  - name: functions.checkoutPage.validateMoneyBoxField
    flow:
      - executeFunction:
          name: functions.globalPages.isMoneyBoxDisplayed
      - if:
          condition: '!${returnedIsDisplayed}'
          then: 
            - failTest:
                message: "Money box not displayed"
      - verifyIdentifier:
          present:
            - identifier: checkOutPage.moneyBox.fieldName
            - identifier: checkOutPage.moneyBox.fieldValue
      - log:
          message: "End flow: checkoutPage.validateMoneyBoxField"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------
  # Description: This function store value to expectedFulfillmentType variable since text are different
  - name: function.checkout.storeValueToExpectedFulfillmentTypeAsDelivery
    flow:
      - if:
          condition: ${platform} == 'iOS'
          then:
            - storeIn:
                key: expectedFulfillmentType
                value: data.cxo.fufillmentText.delivery.ios  # Android/iOS & MX/BO has different text
          else:
              - storeIn:
                  key: expectedFulfillmentType
                  value: data.cxo.fufillmentText.delivery.android

#-----------------------------------------------------------------------------------------------------------------
  # Description: This function checks and click on clear button 
  # No Param
  - name: functions.checkoutPage.addDeliveryInstructions.clear
    flow: 
      - if:
          identifier:
            present:
              - identifier: checkoutPage.addDeliveryInstructions.clear
          then:
            - click:
                identifier: checkoutPage.addDeliveryInstructions.clear
      - log:
          message: "End functions: checkoutPage.addDeliveryInstructions.clear"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------------
# Description: This function checks property type text
  # No Param
  - name: functions.checkoutPage.addDeliveryInstructions.propertyTypeText.displayed
    flow: 
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.addDeliveryInstructions.propertyTypeText
      - log:
          message: "End functions: addDeliveryInstructions.propertyTypeText"
          color: BLUE
#-----------------------------------------------------------------------------------------------------------------
# Description: This function checks on property type in delivery instructions 
  # No Param
  - name: functions.checkoutPage.addDeliveryInstructions.propertyTypeHouse
    flow: 
      - click:
          identifier: checkoutPage.addDeliveryInstructions.propertyTypeHouse
      - log:
          message: "End functions: heckoutPage.addDeliveryInstructions.propertyType.house"
          color: BLUE
#-----------------------------------------------------------------------------------------------------------------
# Description: This function checks on dropoff type  in delivery instructions 
  # No Param
  - name: functions.checkoutPage.addDeliveryInstructions.dropoffLocation
    flow: 
      - click:
          identifier: checkoutPage.addDeliveryInstructions.dropoffLocation
      - log:
          message: "End functions: checkoutPage.addDeliveryInstructions.propertyType.house"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------------
# Description: This function checks on dropoff type  in delivery instructions 
  # No Param
  - name: functions.checkoutPage.addDeliveryInstructions.dropoffLocationType
    flow: 
      - click:
          identifier: checkoutPage.addDeliveryInstructions.dropoffLocationType
      - log:
          message: "End functions: checkoutPage.addDeliveryInstructions.dropoffLocationType"
          color: BLUE
#-----------------------------------------------------------------------------------------------------------------
  # Description: This function enter access code in delivery instructions
  # Params:      
  - name: functions.checkoutPage.addDeliveryInstructions.accessCode
    flow:
      - enterText:
          identifier: checkoutPage.addDeliveryInstructions.accessCode
          string: data.checkout.accessCode
          pressEnter: true
          clearField: true
      - log:
          message: "End function: addDeliveryInstructions.accessCode"
          color: BLUE
#-----------------------------------------------------------------------------------------------------------------

  # Description: Asserts whether a Credit/Debit Card was selected as Payment Method.
  # No params
  - name: functions.checkoutPage.paymentMethod.assertGiftCardAttached
    flow:
      - log:
          message: Asserting if Gift Card is selected as Payment Method...
          color: GREEN
      - sleep:
          duration: 5000
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.paymentMethodSection.selectedGiftCardLabel
      - log:
          message: ✓ Gift card is displaying correctly in checkout page.
          color: GREEN_BOLD
      - log:
          message: "End function: checkoutPage.paymentMethod.assertCreditOrDebitCardSelected (success)"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: Navigate to wallet and select PayPal if PayPal is not defaut payment
  # No params
  - name: functions.checkoutPage.selectPayPal
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.paymentMethod.paypalIcon
          then: 
            - log: "PayPal is default payment on checkout page" 
          else:
            - executeFunction:
                name: functions.checkoutPage.clickOnAddPaymentMethodBtn
            - executeFunction:
                name: functions.checkoutPage.walletPage.selectPayPalAsPayment
      - log:
          message: "End function: checkoutPage.selectPayPal"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validated the fee in money box in checkout. 
  # Params:      ${feeLabel}  [Mandatory]   Label of the fee to validate.
  #              ${feeValue}  [Optional]    Value to check for label.
  - name: functions.checkoutPage.moneyBox.assertFeeValidation
    flow:
      - executeFunction:
          name: functions.utils.moneyBox.feeValidation
          params:
            - name: subTotalLocator
              string: checkoutPage.moneyBox.subTotal
            - name: feeLabelLocator
              string: checkoutPage.moneyBox.feeLabel # <-- ${feeLabel}
            - name: feeAmountLocator
              string: checkoutPage.moneyBox.feeAmount # <-- ${feeValue}
            - name: feeDisplayedLocator
              string: checkoutPage.moneyBox.isFeeDisplayed
      - log:
          message: "End functions: checkoutPage.moneyBox.feeValidation"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates that the fee is not present in the money box at checkout.
  # Params:      ${feeLabel}  [Mandatory]   Label of the fee to validate.
  #              ${feeValue}  [Optional]    Value to check for label.
  - name: functions.checkoutPage.moneyBox.assertFeeNotPresent
    flow:
      - executeFunction:
          name: functions.utils.moneyBox.feeValidation
          params:
            - name: subTotalLocator
              string: checkoutPage.moneyBox.subTotal
            - name: feeLabelLocator
              string: checkoutPage.moneyBox.feeLabel # <-- ${feeLabel}
            - name: isVerifyFeeLabelNotPresent
              string: true
      - log:
          message: "End functions: checkoutPage.moneyBox.assertFeeNotPresent"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------------
  
  # Description: This function used to apply Rewards Point
  # No Param

  - name: functions.checkoutPage.paymentMethod.tapRewardsPointCheckbox
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.paymentMethod.rewardsPointCheckbox
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.paymentMethod.rewardsPointCheckbox
                scrollLimit: 2
      - click:
          identifier: checkoutPage.paymentMethod.rewardsPointCheckbox
      - sleep:
          duration: 5000
      - log:
          message: "End Function: checkoutPage.paymentMethod.tapRewardsPointCheckbox"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------------
  
  # Description: The function checks if the preferred credit card is available on PayPal's payment selection page.
  # No Param
  - name: functions.payPalPage.selectCard.checkPaymentExists
    flow:
      - storeIn:
          key: isCreditCardPresent
          value: false
      - if:
          identifier:
            present:
              - identifier: payPalPage.creditCard.byLast4Digits
          then:
            - storeIn:
                key: isCreditCardPresent
                value: true
      - log:
          message: "End flow: payPalPage.selectCard.checkPaymentExists"
          color: GREEN_BOLD_BRIGHT

#-----------------------------------------------------------------------------------------------------------------
  
  # Description: This function verify Choose substitution preferences section is displayed
  # No Param
  - name: functions.checkoutPage.validateChooseSubstitutionPreferencesIsDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: checkoutPage.substitutionPreferencesTitle
          then:
              - log: "substitution is visible" 
          else:
              - scroll:
                  direction: down
                  untilIdentifier: checkoutPage.substitutionPreferencesTitle
                  scrollLimit: 3
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.substitutionPreferencesTitle
      - log:
          message: "End flow: checkoutPage.validateChooseSubstitutionPreferencesIsDisplayed"
          color: BLUE

#-----------------------------------------------------------------------------------------------------------------
  
  # Description: This function verify Choose substitution preferences section is displayed
  # No Param
  - name: functions.checkoutPage.tapChooseSubstitutionPreferencesBtn
    flow:
      - click:
          identifier: checkoutPage.substitutionPreferencesTitle
      - log:
          message: "End flow: chekoutPage.tapChooseSubstitutionPreferencesBtn"
          color: BLUE
  
#-----------------------------------------------------------------------------------------------------------------
  
  # Description: This function enters mobile number in review order page.
  # No Param
  - name: functions.checkoutPage.enterPhoneNumber
    flow:
      - try:
          flow:
              - if:
                  condition: ${market} == 'CA' # Removed the platform condition as it is required for both Android and iOS to pass the digital delivery flow. Wouldn't impact any other market as this function is called in MX flow and the conditions are not as per MX market
                  then:
                    - if:
                        identifier:
                          notPresent:
                            - identifier: checkoutPage.mobileFieldModule
                        then:
                          - scroll:
                              direction: down
                              untilIdentifier: checkoutPage.mobileFieldModule
                              position: center
                    - if:
                        condition: ${platform} == 'Android'
                        then:
                          - enterText:
                              identifier: checkoutPage.mobileTextField
                              string: data.defaultAddress.phoneNumber
                          - hideKeyboard: true
                        else: # Putting the platform condition here as the identifiers for both Android and iOS are different and have different accessibility values
                          - enterText:
                              identifier: checkoutPage.mobileFieldModule
                              string: data.defaultAddress.phoneNumber
                              clickFirst: true
                              clearField: true
                          - executeFunction:
                              name: functions.checkout.hideKeyboard  
          catch:
            flow:
              - log: 
                  message: "Phone number field either not present or already filled"
                  color: GREEN
      - log:
          message: "End flow: functions.checkoutPage.enterPhoneNumber"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------
  
  # Description: This function scrolldown to paypal button
  # No Param
  - name: functions.checkoutPage.scrollDownToPayPalButton
    flow:
      - scroll:
          direction: down
          untilIdentifier: checkOutPage.paypalSection.paypalCta
          scrollLimit: 8
      - log:
          message: "End flow: checkoutPage.scrollDownToPayPalButton"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------
  
  # Description: This function tap on paypal button
  # No Param
  - name: functions.checkoutPage.navigateToPayPalPage
    flow:
      - executeFunction:
          name: functions.checkoutPage.scrollDownToPayPalButton
      - click:
          identifier: checkOutPage.paypalSection.paypalCta
          coordinates: 30%, 30%
      - if:
          condition: ${platform} == 'iOS'
          then:
            - click:
                identifier: checkoutPage.wallet.paypalConfirmRedirectionBtn
      - log:
          message: "End flow: checkoutPage.navigateToPayPalPage"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions close W+ bottom sheet for US market
  # No Param
  - name: functions.checkoutPage.closeWplusBottomSheet
    flow:
      - if: 
          condition: ${market} == 'US' && ${closeWplusBottomSheet}
          then:
            - executeFunction:
                name: functions.homePage.isWplusBottomsheetDisplayed
            - if:
                condition: ${returnedIsDisplayed}
                then:
                  - executeFunction:
                      name: functions.homePage.wplusBottomsheet.tapCloseBtn
      - log:
          message: "End flow: checkoutPage.closeWplusBottomSheet"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions clicks on see Details in Checkout Page
  # No Param
  - name: functions.checkoutPage.tapViewDetailsBtn
    flow:
      - click:
          identifier: checkoutPage.viewDetailsBtn
      - log:
          message: "End flow: checkoutPage.tapViewDetailsBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions validates arrival date is displayed in item details
  # No Param
  - name: functions.checkoutPage.itemDetails.validateArrivalDateIsDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.itemDetails.arrivalDate
      - log:
          message: "End flow: checkoutPage.itemDetails.validateArrivalDateIsDisplayed"
          color: BLUE
  #-----------------------------------------------------------------------------------------------------------------

  # Description: This functions validates the regular express schedule delivery Price is waived off for a Delivery Pass user 
  # No Params
  - name: functions.checkoutPage.DPuserValidateExpressScheduleDeliveryFee
    flow:
      - verifyIdentifier:
          present:
            - identifier: checkout.DPuserDeliveryFromStoreText
            - identifier: checkout.DPuserExpressScheduleDeliveryFeeValue
      - log:
          message: "End functions: checkout.validateExpressScheduleDeliveryFeeIsDisplayed"
          color: BLUE
  

  #-----------------------------------------------------------------------------------------------------------------
  # Description: This function store value to expectedFulfillmentType variable since text are different
  - name: functions.checkoutPage.storeValueToExpectedFulfillmentTypeAsDigitalDelivery 
    flow:
      - if:
          condition: ${platform} == 'iOS'
          then:
            - storeIn:
                key: expectedFulfillmentType
                value: data.cxo.fufillmentText.Digitaldelivery.ios
          else:
              - storeIn:
                  key: expectedFulfillmentType
                  value: data.cxo.fufillmentText.Digitaldelivery.android
                  
      - log: 
          message: "End function: checkoutPage.storeValueToExpectedFulfillmentTypeAsDigitalDelivery"
          color: BLUE            

#-----------------------------------------------------------------------------------------------------------------         

  - name: functions.checkoutPage.validateDigitalDeliveryArrivaltext
    flow:
      - sleep:
          duration: 5000
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.fulfillmentTime
      - log:
          message: "End function: checkoutPage.validateDigitalDeliveryArrivaltext"
          color: BLUE    

  - name: functions.checkoutPage.validateDigitalDeliveryViewDetails  
    flow:
      - sleep:
          duration: 5000
      - click:
          identifier: checkoutPage.viewDetailsBtn
      - sleep:
          duration: 5000
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.DigitalDeliveryInstructions   
      - log:
          message: "End function: checkoutPage.validateDigitalDeliveryViewDetails"
          color: BLUE  
  #--------------------------------------------------------------------------------------------------------------------
  #
  # PARAMS:
  #     ${expectedDeliverySlot}  [Mandatory]  Expected delivery slot to be displayed. The value passed in this
  #         param must be the string value returned by the 'wcp/test/helpers/checkoutPage/parseDeliverySlotForAssertion.js'       
  #         helper (see helper's documentation).
  #
  # FLAGS USED:
  #     ${ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION}
  #         If set to 'true', the function will perform the assertion of the Delivery Slot.
  #         If set to 'false' or not set at all, the function will skip the assertion.
  - name: functions.checkoutPage.assertDeliverySlot
    flow:
      - if: 
          condition: ${ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION} == true
          then:
            - log: 
                message: "Expected Delivery Slot: ${expectedDeliverySlot}"
                color: CYAN
            - getString:
                identifier: cartPage.fulfillmentTime
                storeIn: currentDeliverySlot
            - executeNode:
                file: wcp/test/helpers/checkoutPage/stringCleanerForDeliverySlotAssertion.js
                args:
                  - value: ${currentDeliverySlot}
                getResponse:
                  storeIn: currentDeliverySlot
            - log:
                message: "Displayed Delivery Slot: ${currentDeliverySlot}"
                color: CYAN
            - if:
                condition: ${currentDeliverySlot} != ${expectedDeliverySlot}
                then:
                  - failTest:
                      message: "Displayed: ${currentDeliverySlot} != Expected: ${expectedDeliverySlot}"
          else: 
            - log: 
                message: '[!] Flag: ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION = ${ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION} - Assertion will skip.'
                color: YELLOW
      - log:
          message: "End function: functions.checkoutPage.assertDeliverySlot"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: Asserts the fulfillment delivery method image in checkout.
  - name: functions.checkoutPage.assertFulfillmentDeliveryMethodImageView
    flow:
      - if:
          identifier:
            present:
              - identifier:  checkoutPage.deliveryMethodImageView
          then:
              - log:
                  message: "Successful assertion for fulfillment method image in checkout"
                  color: GREEN_BOLD
          else:
              - log:
                  message: "Fulfillment image(bag/car) is not displayed in checkout" 
      - log:
          message: "End function: checkoutPage.assertFulfillmentDeliveryMethodImageView"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Asserts the fulfillment delivery method image in checkout.
  # No params
  - name: functions.checkoutPage.validateMFCouponDiscountisApplied
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: checkoutPage.manufacturerCoupon.feeTitle
          then:
            - scroll:
                direction: down
                untilIdentifier: checkoutPage.manufacturerCoupon.feeTitle
                scrollLimit: 5
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.manufacturerCoupon.feeTitle
            - identifier: checkoutPage.manufacturerCoupon.feeValue
      - log:
          message: "End function: checkoutPage.validateMFCouponDiscountisApplied"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          
  # Description: This functions validates the PickupPerson information(First name & last name) is pre-populated
  # params:       ${firstName}      Expected pickup person first name.
  #               ${secondName}     Expedted pickup person second name.
  - name: functions.checkoutPage.verify.pickupPersonInformation.isPrePopulated
    flow:
      - getString:
          identifier: checkoutPage.pickupPersonNameTextField
          storeIn: pickupPersonFirstName
      - getString:
          identifier: checkoutPage.pickupPersonLastNameTextField
          storeIn:  pickupPersonLastName
      - if:
          condition: ${pickupPersonFirstName} != null && ${pickupPersonLastName} !=null
          then:
            - if:
                condition: ${firstName} == ${pickupPersonFirstName} && ${secondName} == ${pickupPersonLastName} 
                then:
                  - log:
                      message: " ✔ Pickup person details are correctly populated"
                      color: CYAN
          else:
            - failTest:
                message: " ❌ pickup person information not retrieved correctly"
      - log:
          message: "End of function: checkoutPage.verify.pickupPersonInformation.isPrePopulated"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions validates the PickupPerson Error message displayed or not in the shard feild
  # Params: field [required]
  - name: functions.checkoutPage.validate.pickupPersonInfo.errorMessage
    flow: 
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.pickupPerson.ErrorMessage #<--- ${field}
      - log:
          message: "End of function: checkoutPage.validate.pickupPersonInfo.errorMessage"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This functions fetching the PickupPerson information(firstname & lastname)
  - name: functions.checkoutPage.fetchingPickupPerson.info
    flow:
      - getString:
          identifier: checkoutPage.pickupPersonNameTextField
          storeIn: firstname
      - getString:
          identifier: checkoutPage.pickupPersonLastNameTextField
          storeIn: lastname
      - log:
          message: "FirstName = '${firstname}'' && Lastname = '${lastname}'"
          color: YELLOW
      - log:
          message: "End of function: checkoutPage.fetchingPickupPerson.info"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------- 
  # Description: This function validate item details in View details in checkout page
  # No params
  - name: functions.checkoutPage.viewDetails.verifyItemDetailSection
    flow: 
      - verifyIdentifier:
          present:
            - identifier: checkoutPage.viewDetails.titleText
            - identifier: checkoutPage.viewDetails.itemDetails
            - identifier: checkoutPage.viewDetails.discountLabel
            - identifier: checkoutPage.viewDetails.doneButton
      - log:
          message: "End function: checkoutPage.viewDetails.verifyItemDetailSection"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions clicks on Done in in view details page
  # No Param
  - name: functions.checkoutPage.viewDetails.tapDone
    flow:
      - click:
          identifier: checkoutPage.viewDetails.doneButton
      - log:
          message: "End flow: checkoutPage.viewDetails.tapDone"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------          
  # Description: This functions validates savings text in View details section for specific item
  # Param [required]: itemName
  - name: functions.checkoutPage.viewdDetails.validateSavingDetails
    flow:
      -  verifyIdentifier:
           present:
             - identifier: checkoutPage.viewDetails.savingText #<-- ${itemName}
      - log:
          message: "End function: checkoutPage.viewdDetails.validateSavingDetails"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------            
  # Description: This functions clicks on second items see Details in Checkout Page
  # No Param
  - name: functions.checkoutPage.tapViewDetailsSecondBtn
    flow:
      - click:
          identifier: checkoutPage.secondViewDetailsBtn
      - log:
          message: "End flow: checkoutPage.tapViewDetailsSecondBtn"
          color: BLUE
