functions:

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function enters user password in the text field
  # Param:       ${UserPassword}  [Mandatory] User Password
  - name: functions.createAnAccountPage.enterUserCreatePassword
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: createAnAccountPage.passwordField
          then: 
            - scroll:
                direction: up
                untilIdentifier: createAnAccountPage.passwordField
                scrollLimit: 5
      - enterText:
          identifier: createAnAccountPage.passwordField
          string: ${UserCreatePassword}
          
      #Putting this condition because in case of iOS FR, tapping on Next button doesn't seem to work
      - if:
          condition: ${platform} == 'Android' 
          then:
          - executeFunction:
              name: functions.utils.hideKeyboard
          else:
            - hideKeyboard: true
      - log: 
          message: "End functions: createAnAccountPage.enterUserCreatePassword"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function enters the user email.
  # Param:       ${userEmail}  [Mandatory]  User Email
  - name: functions.createAnAccountPage.enterUserEmail
    flow:
      - enterText:
          identifier: createAccountPage.emailField
          string: ${userEmail}
          clickFirst: true
          clearField: true
      - executeFunction:
          name: functions.utils.hideKeyboard
      - log: 
          message: "End function: functions.createAnAccountPage.enterUserEmail"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function tap on contiune button in create an account page
  # No Params
  - name: functions.createAnAccountPage.tapContiuneBtn
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: loginPage.continueBtn
          then: 
            - scroll:
                direction: up
                untilIdentifier: loginPage.continueBtn
                scrollLimit: 5
      - click:
          identifier: loginPage.continueBtn
      - log: 
          message: "End functions: createAnAccountPage.tapContiuneBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validate if error is displayed while creating an account
  # No Params
  - name: functions.createAnAccountPage.validateErrorNotDisplayed
    flow:
      - try:
          flow:
            - verifyIdentifier:
                notPresent:
                  - identifier: createAnAccountPage.firstNameField.errorMsg
                  - identifier: createAnAccountPage.lastNameFieldErrorMsg
                  - identifier: createAnAccountPage.phoneNumberFieldErrorMsg
                  - identifier: createAnAccountPage.passwordFieldErrorMsg
          catch:
            flow:
              - failTest:
                  message: "Error displayed in create an account page!"
      - log:
          message: "End function: createAnAccountPage.validateErrorNotDisplayed (no error displayed)"
          color: BLUE

  # #--------------------------------------------------------------------------------------------------------------------
  # # Description: This function fills out and completes the OTP process for Account Creation.
  # # Params:   ${userEmail}        [Mandatory]  User email of the new account.
  # #           ${userPhoneNumber}  [Mandatory]  Phone Number registered for the new account.
  # - name: functions.createAnAccountPage.fillOutOTP.ifDisplayed
  #   flow:
  #     - if:
  #         identifier:
  #           present:
  #             - identifier: otpPage.digitCells
  #           timeout: 10000
  #         then:
  #           - executeFunction:
  #               name: utils.astro.fetch.phoneNumberOtp # <-- ${userEmail}, ${userPhoneNumber}
  #                                                      # --> ${returnedOtpCode}
  #           - storeIn:
  #               key: position
  #               value: '1'
  #           - enterText:
  #               identifier: optPage.digitCell.byPosition # <-- ${position}
  #               string: ${returnedOtpCode}
  #               clickFirst: true
  #               clearField: true
  #           - click:
  #               identifier: otpPage.continueBtn
  #         else:
  #           - log:
  #               message: OTP Page not displayed, process will continue without OTP...
  #               color: GREEN
  #     - log:
  #         message: "End function: functions.createAnAccountPage.fillOutOTP.ifDisplayed"
  #         color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function forces fill out and complete OTP process for Account Creation.
  # Params:   ${userEmail}        [Mandatory]  User email of the new account.
  #           ${userPhoneNumber}  [Mandatory]  Phone Number registered for the new account.
  - name: functions.createAnAccountPage.fillOutOTP
    flow:
      - executeFunction:
          name: utils.astro.fetch.phoneNumberOtp # <-- ${userEmail}, ${userPhoneNumber} # RETURN: ${returnedOtpCode}
      - enterText:
          identifier: optPage.firstDigitCell
          string: ${returnedOtpCode}
          clickFirst: true
      - click:
          identifier: otpPage.continueBtn
      - log:
          message: "End function: functions.createAnAccountPage.fillOutOTP"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function asserts Account Validation Popup is correctly displayed.
  # Params:  ${userEmail}                [Optional]  User's email address.
  #          ${userFirstName}            [Optional]  User's first name.       
  #          ${userLastName}             [Optional]  User's last name.
  #          ${motherLastNameRequired}   [Optional]  Boolean if true will enter mother's last name.
  #          ${userMotherLastName}       [Optional]  User's mother last name.
  #          ${userPhoneNumber}          [Optional]  User's phone number.
  - name: functions.createAnAccountPage.accountValidationPopup.assertDisplayed
    flow:
      - verifyIdentifier:
          present:
            - identifier: accountValidationPopup.title
            - identifier: accountValidationPopup.fullName
            - identifier: accountValidationPopup.phoneNumber
            - identifier: accountValidationPopup.email
            - identifier: accountValidationPopup.continueButton
      # Validation of correct Full Name...
      - if:
          condition: ${motherLastNameRequired}
          then:
            - storeIn:
                key: fullName
                value: ${userFirstName} ${userLastName} ${userMotherLastName}
          else:
            - storeIn:
                key: fullName
                value: ${userFirstName} ${userLastName}
      - if:
          condition: ${platform} == 'Android'
          then:
            - verifyIdentifier:
                text:
                  - identifier: accountValidationPopup.fullName
                    equals: ${fullName}
          else:
            - verifyIdentifier:
                label:
                  - identifier: accountValidationPopup.fullName
                    equals: ${fullName}
      # Validation of correct Phone Number...
      - getString:
          identifier: accountValidationPopup.phoneNumber
          storeIn: displayedPhoneNumber
          extractNumbers: true
      - if:
          condition: ${displayedPhoneNumber} != ${userPhoneNumber}
          then:
            - failTest:
                message: Displayed Phone Number (${displayedPhoneNumber}) not equal to expected Phone Number (${userPhoneNumber})
      # Validation of correct Email...
      - getString:
          identifier: accountValidationPopup.email
          storeIn: displayedEmail
      - if:
          condition: ${displayedEmail} != ${userEmail}
          then:
            - failTest:
                message: Displayed Email (${displayedEmail}) not equal to expected Email (${userEmail})
      - log:
          message: "End function: functions.createAnAccountPage.accountValidationPopup.assertDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps the Continue Button in the Account Validation Popup.
  # No Params
  - name: functions.createAnAccountPage.accountValidationPopup.tapContinueBtn
    flow:
      - click:
          identifier: accountValidationPopup.continueButton
      - log:
          message: "End function: functions.createAnAccountPage.accountValidationPopup.tapContinueBtn"
          color: BLUE
