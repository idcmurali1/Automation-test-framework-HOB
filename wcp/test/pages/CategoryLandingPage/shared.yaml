 functions:

 #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Scrolls down until the given section name is displayed.
  # PARAM: ${carouselName}  [Mandatory]  Name of the section to scroll down to.

  - name: functions.categoryLandingPage.scrollDownToSectionCarousel
    flow:
      - log:
          message: "Scrolling down to carousel: ${carouselName}"
          color: CYAN
      - scroll:
          direction: down
          untilIdentifier: categoryLandingPage.carouselName # <--PARAM--${carouselName}
          scrollLimit: 15
          wait: 5000
      - if:
          identifier:
            present:
              - identifier: categoryLandingPage.carouselName # <--PARAM--${carouselName}
          then:
          - log:
              message: "Found '${carouselName}' section"
              color: GREEN_BOLD
          else:
            - failTest:
                message: "Test Failed: Unable to locate carousel '${carouselName}'" 
      - log:  
          message: "End function: functions.categoryLandingPage.scrollDownToSectionCarousel"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Verifies that items get displayed inside a specific carousel
  # PARAM: ${carouselName}  [Mandatory]  Name of the section to scroll down to.

  - name: functions.categoryLandingPage.assertItemsInSpecificCarousel
    flow:
      - if:
          identifier:
            present:
              - identifier: categoryLandingPage.itemInsideCarousel # <--PARAM--${carouselName}
          then:
            - log:
                message: "Found items inside the ${carouselName} carousel"
                color: GREEN_BOLD
      - log:
          message: "End function: functions.categoryLandingPage.assertItemsInSpecificCarousel"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Verifies the product details (Product image, Brand name, Heart Icon, Product name, Product price, Fulfillment label) in a specific section.
  # PARAM: ${carouselName}  [Mandatory]  Name of the section
  - name:  functions.categoryLandingPage.specificCarousel.assertNonPerishableProductDetails
    flow:
      - if:
          identifier:
            present:
              - identifier: categoryLandingPage.specificCarousel.productImage # <--PARAM--${carouselName}
              #- identifier: categoryLandingPage.specificCarousel.heartIcon - TODO: Add once merge hallways is ready.
              - identifier: categoryLandingPage.specificCarousel.brandName # <--PARAM--${carouselName}
              - identifier: categoryLandingPage.specificCarousel.productName # <--PARAM--${carouselName}
              - identifier: categoryLandingPage.specificCarousel.productPrice # <--PARAM--${carouselName}
              #- identifier: categoryLandingPage.specificCarousel.fulfillmentLabel - No fulfillment labels in MX
          then:
            - log:
                message: "Assertion Succeeded: Product details are correct"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "Failed: There was a problem while trying to obtain the product details"
      - log:
          message: "End function: functions.categoryLandingPage.specificCarousel.assertProductDetails"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Verifies the product details (Product image, Heart Icon, Product name, Product price, Fulfillment label, weighted/eaches(for Grocery)) in a specific section.
  # PARAM: ${carouselName}  [Mandatory]  Name of the section
  - name:  functions.categoryLandingPage.specificCarousel.assertPerishableProductDetails
    flow:
      - if:
          identifier:
            present:
              - identifier: categoryLandingPage.specificCarousel.productImage # <--PARAM--${carouselName}
              #- identifier: categoryLandingPage.specificCarousel.heartIcon - TODO: Add once merge hallways is ready.
              - identifier: categoryLandingPage.specificCarousel.productName # <--PARAM--${carouselName}
              - identifier: categoryLandingPage.specificCarousel.productPrice # <--PARAM--${carouselName}
              #- identifier: categoryLandingPage.specificCarousel.fulfillmentLabel - No fulfillment labels in MX
              - identifier: categoryLandingPage.specificCarousel.productMeasureSelector # <--PARAM--${carouselName}
          then:
            - log:
                message: "Assertion Succeeded: Product details are correct"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "Failed: There was a problem while trying to obtain the product details"
      - log:
          message: "End function: functions.categoryLandingPage.specificCarousel.assertPerishableProductDetails"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Verifies the existence of a generic promotion in a specific section.
  # PARAM: ${carouselName}  [Mandatory]  Name of the section to scroll down to.
  - name: functions.categoryLandingPage.specificCarousel.assertLabelsAndBadges
    flow:
      - if:
          identifier:
            present:
              - identifier: categoryLandingPage.specificCarousel.genericProductPromotion  # <--PARAM--${carouselName}
          then:
            - log:  
                message: "Product with promotion displayed. No need to scroll in carousel"
                color: CYAN
          else:
            - scroll:
                direction: left
                withinIdentifier: categoryLandingPage.specificCarousel.carouselContainer  # <--PARAM--${carouselName}
                untilIdentifier: categoryLandingPage.specificCarousel.genericProductPromotion  # <--PARAM--${carouselName}
                scrollLimit: 5
                wait: 700
            - if:
                identifier:
                  present:
                    - identifier: categoryLandingPage.specificCarousel.genericProductPromotion # <--PARAM--${carouselName}
                then:
                  - log: 
                      message: "Assertion Succeeded: Found a product with a badge or label"
                      color: BLUE
                else: 
                  - log: 
                      message: "Assertion Failed: There was a problem while trying to find a product poromoting"
                      color: BLUE
      - log:  
          message: "End function: functions.categoryLandingPage.specificCarousel.scrollRightUntilPromotion"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Opens the product detail page of a specific product by name. 
  # PARAM: ${productName}  [Mandatory]  Name of the product. 

  - name: functions.categoryLandingPage.openPDPbyName
    flow:
      - if:
          identifier:
            present:
              - identifier: categoryLandingPage.productByName # <--PARAM--${productName}
          then:
            - click:
                identifier: categoryLandingPage.productByName
            - log:
                message: "Opening PDP of item: ${productName}"
                color: GREEN_BOLD
          else:
             - log:
                message: "There was a problem while trying to open the PDP of the product"
                color: GREEN_BOLD
      - log:
          message: "End function: functions.categoryLandingPage.openPDPbyName"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
# Description: Scroll to the first available item in a carousel to cart.
# Note: This function ensures the "Opciones" button is ignored and continues scrolling when present.
# Params: ${carouselName} -> Name of the specific carousel

  - name: functions.categoryLandingPage.scrollToFirstAvailableItemInCarousel
    doWhile: true
    flow:
      - log:
          message: "Carousel Name to select a product from: '${carouselName}'"
          color: CYAN
      - verifyIdentifier:
          notPresent:
            - identifier: categoryLandingPage.specificCarousel.ATCAvailableButton # <--PARAM--${carouselName}
      - scroll:
          direction: left
          wait: 2000
          position: center
      - log:
          message: "End function: functions.categoryLandingPage.getFirstAvailableItemInCarousel"
          color: BLUE