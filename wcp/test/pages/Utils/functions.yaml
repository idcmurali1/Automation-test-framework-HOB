functions:

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Set up variables ${platform}, ${market}, ${language},${mappingLabel}. Handle tenants diversity
  # Params       No params
  - name: functions.utils.setMarketInfo
    flow:      
      - storeIn:
            key: appPackage
            value: ${dependencies.general.appPackage}

      - storeIn:
          key: language 
          value: ${dependencies.general.language}

      - storeIn:
          key: mappingLabel
          value: ${dependencies.general.mappingLabels}

      - storeIn:
          key: bundleId
          value: ${dependencies.general.bundleId}

      - if:
          condition: ${appPackage} == null
          then:
            - storeIn:
                key: platform
                value: iOS
          else:
            - storeIn:
                key: platform
                value: Android
      - if:
          condition: ${appPackage} == 'com.walmart.android.debug' || ${bundleId} == 'com.walmart.beta.electronics'
          then:
            - storeIn:
                key: market
                value: US  
            - storeIn:
                key: tenantId
                value: elh9ie
      - if:
          condition: ${appPackage} == 'ca.walmart.ecommerceapp.qa' || ${bundleId} == 'ca.walmart.ecommerceapp.qa'
          then:
            - storeIn:
                key: market
                value: CA
            - storeIn:
                key: tenantId
                value: qxjed8
      - if:
          condition: ${appPackage} == 'com.walmart.mg.debug' || ${bundleId} == 'com.walmartmexico.WalmartMG.qa'
          then:
            - storeIn:
                key: market
                value: MX
            - if:
                condition: ${mappingLabel} == 'mx_ea_android_teflon_merge_hallways' || ${mappingLabel} == 'mx_ea_android_prod_merge_hallways' || ${mappingLabel} == 'mx_ea_ios_teflon_merge_hallways' || ${mappingLabel} == 'mx_ea_ios_prod_merge_hallways'
                then:
                  - storeIn:
                      key: tenantId
                      value: hvgqan
                  - storeIn:
                      key: merge-hallways
                      value: true
                else:
                  - storeIn:
                      key: tenantId
                      value: hvgqan
                  - storeIn:
                      key: merge-hallways
                      value: false
      - if:
          condition: ${appPackage} == 'com.mx.walmart.bodega.debug' ||  ${bundleId} == 'com.walmart.bodegaGM.qa'
          then:
            - storeIn:
                key: market
                value: MX-Bodega
            - storeIn:
                key: tenantId
                value: klfyok
      - if:
          condition: ${appPackage} == 'ca.walmart.ecommerceapp.qa' || ${bundleId} == 'ca.walmart.ecommerceapp.qa'
          then:
            - storeIn:
                key: market
                value: CA
      
      - if:
          condition: ${mappingLabel} == 'us_en_ios_teflon' || ${mappingLabel} == 'mx_ea_ios_teflon' || ${mappingLabel} == 'bo_ea_ios_teflon' || ${mappingLabel} == 'ca_ios_teflon' || ${mappingLabel} == 'ca-fr_ios_teflon' || ${mappingLabel} == 'us_en_android_teflon' || ${mappingLabel} == 'mx_ea_android_teflon' || ${mappingLabel} == 'bo_ea_android_teflon' || ${mappingLabel} == 'ca_android_teflon' || ${mappingLabel} == 'ca-fr_android_teflon' || ${mappingLabel} == 'mx_ea_android_teflon_merge_hallways' || ${mappingLabel} == 'mx_ea_ios_teflon_merge_hallways'
          then:
            - storeIn:
                key: environment
                value: Teflon
          else:
            - storeIn:
                key: environment
                value: Production
      - if:
          condition: ${market}  == 'MX'
          then:
            - log:
                message: environment is ${environment}, platform is ${platform}, market is ${market}, language is ${language}, mappingLabel is ${mappingLabel}, merge-hallways is ${merge-hallways}
                color: GREEN_BOLD
          else:
            - log:
                message: environment is ${environment}, platform is ${platform}, market is ${market}, language is ${language}, mappingLabel is ${mappingLabel}
                color: GREEN_BOLD

      - log:
          message: 'End function: functions.utils.setMarketInfo'
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  - name: utils.astro.fetch.emailOtp
    flow:
      - if:
          condition: ${market} == 'US' && ${environment} == 'Teflon'
          then:
            - loop:
                begin: 0
                end: 3
                storeIndex: retryCount
                mode: increment
                flow:
                  - log: Fetches the STEP_UP_OTP from the customer email
                  - log: $email
                  - storeIn:
                      key: errorCode
                      value: 'null'
                  - storeIn:
                      key: OTPGenerationStatus
                      value: 'null'
                  - callAPI:
                      url: http://astro-services.k8s.stage.walmart.com/api/v1/prod/customer/${email}/otp
                      requestMethod: GET
                      header:
                        - key: Content-Type
                          value: application/json
                        - key: Accept
                          value: application/json
                        - key: Cookie
                          value: vtc=ZCswIujhKffjQhrPhq82Gw
                      readTimeout: 180000
                      getValue:
                        - key: astroStatus
                          storeIn: OTPGenerationStatus
                        - key: astroDescription
                          storeIn: astroDetails
                        - key: astroDetails.passcode
                          storeIn: stepUpOtpFromEmail
                      retryDelay: 5000
                  - log: ${OTPGenerationStatus}
                  - if:
                      condition: ${OTPGenerationStatus} == 'SUCCESS'
                      then:
                        - log: OTP generated successfully
                        - break: true
                      else:
                        - log: Failure in otp generation. Retrying after 30 secs
                        - sleep:
                            duration: 30000
            - if:
                condition: ${OTPGenerationStatus} == 'SUCCESS'
                then:
                  - log: OTP generated successfully
                else:
                  - failTest:
                      message: "API_FAILURE - ASTRO - Unable to generate OTP. Error: ${astroDetails}"
      - if: 
          condition: ${market} == 'US' && ${environment} == 'Production'
          then:
              - executeFunction:
                  name: utils.astro.fetch.prod.emailOtp
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: Fetches the OTP Code on prod
  - name: utils.astro.fetch.prod.emailOtp
    flow:
        - log: ${market} Production - Fetches the STEP_UP_OTP from the customer email
        - log: $email
        - callAPI:
            url: https://acolyte.k8s.prod.walmart.com/api/v1/prod/customer/${email}/otp
            requestMethod: GET
            header:
              - key: Content-Type
                value: application/json
              - key: Accept
                value: "*/*"
              - key: Tenant-Id
                value: ${tenantId}
            readTimeout: 180000
            getValue:
              - key: astroStatus
                storeIn: OTPGenerationStatus
              - key: astroDetails.otptoken
                storeIn: stepUpOtpFromEmail
        - log: ${OTPGenerationStatus}
        - if:
            condition: ${OTPGenerationStatus} == 'SUCCESS'
            then:
              - log: OTP generated successfully
            else:
              - failTest:
                  message: "API_FAILURE - ASTRO - Unable to generate OTP. Error: ${astroDetails}"
        - log:
            message: 'End function: astro.fetch.prod.emailOtp'
            color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Fetches the OTP Code required to create a New Account.
  # Params:   ${userEmail}        [Mandatory]  User email of the new account.
  #           ${userPhoneNumber}  [Mandatory]  Phone Number registered for the new account.
  # Returns:  ${returnedOtpCode}         Full OTP code.
  - name: utils.astro.fetch.phoneNumberOtp
    flow:
      - sleep:
          duration: 10000
      # Generate number prefix per market if required...
      - if:
          condition: ${market} == 'US' || ${market} == 'CA'
          then:
            - storeIn:
                key: phoneNumberPrefix
                value: '1'
          else:
            - if:
                condition: ${market} == 'MX' || ${market} == 'MX-Bodega'
                then:
                  - storeIn:
                      key: phoneNumberPrefix
                      value: '52'
      # Retry 3 times OTP fetch and break loop when successful...
      - loop:
          begin: 1
          end: 4
          storeIndex: retryCount
          mode: increment
          flow:
            - log:
                message: "Fetching OTP Code for new user: '${userEmail} / ${userPhoneNumber}'  (Try ${retryCount}/3)"
                color: CYAN
            - storeIn:
                key: errorCode
                value: 'null'
            - storeIn:
                key: OTPGenerationStatus
                value: 'null'
            - callAPI:
                url: http://astro.walmart.com/api/v2/teflon/customer/${userEmail}/otp?phone=${phoneNumberPrefix}${userPhoneNumber}
                requestMethod: GET
                header:
                  - key: Content-Type
                    value: application/json
                  - key: Accept
                    value: application/json
                readTimeout: 180000
                getValue:
                  - key: astroStatus
                    storeIn: OTPGenerationStatus
                  - key: astroDescription
                    storeIn: astroDetails
                  - key: astroDetails.passcode
                    storeIn: returnedOtpCode
                retryDelay: 5000
            - log:
                message: ${OTPGenerationStatus}
                color: GREEN
            - if:
                condition: ${OTPGenerationStatus} == 'SUCCESS'
                then:
                  - log:
                      message: "OTP generated successfully! ('${returnedOtpCode}')"
                      color: GREEN_BOLD
                  - break: true
                else:
                  - log:
                      message: Failure in OTP generation. Retrying after 5 secs...
                      color: CYAN
                  - sleep:
                      duration: 5000
      - if:
          condition: ${OTPGenerationStatus} != 'SUCCESS'
          then:
            - failTest:
                message: 'API_FAILURE - ASTRO - Unable to generate OTP. Error: ${astroDetails}'
      - log:
          message: 'End function: utils.astro.fetch.phoneNumberOtp'
          color: BLUE
          
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This functions handles iCloud popup by "Don't Allow"
  # No Param
  - name: functions.utils.handleICloudAlert
    flow:
      - if: 
          identifier:
            present:
              - identifier: loginPage.icloudAlertTxt
            timeout: 5000
          then:
            - click:
                identifier: loginPage.icloudAlert.dontAllowBtn
      - log:
          message: "End function: utils.handleICloudPopUp"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This functions handles iCloud popup by "Don't Allow"
  # No Param
  - name: functions.utils.handleKeyChainAlert
    flow:
      - if: 
          identifier:
            present:
              - identifier: loginPage.keyChainAlertTxt
          then:
            - click:
                identifier: loginPage.keyChainAlert.notNowBtn
      - log:
          message: "End function: utils.handleKeyChainAlert"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions get array length.
  # No Param
  - name: functions.utils.javascript.getArrayLength
    flow:
      - executeNode:
          file: wcp/test/helpers/CartPage/getArrayLength.js
          args:
            - value: ${productDetailsArray}
          getResponse:
            storeIn: getArrayLength
      - log:
          message: "Given array list contains ${getArrayLength} product details"
          color: CYAN
      - log:
          message: "End function: utils.javascript.getArrayLength"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions get array length.
  # No Param
  - name: functions.utils.javascript.getProductDetails
    flow:
      - executeNode:
          file: wcp/test/helpers/CartPage/getProductDetails.js
          args:
            - value: ${productDetailsArray}
            - value: ${index}
          getValue:
            - key: productName
              storeIn: productName
            - key: productPrice
              storeIn: productPrice
            - key: productQty
              storeIn: productQty
      - executeFunction:
          name: functions.utils.javascript.beautifyProductPrice  #return -> actualPrice, params <- productPrice
          params:
            - name: page
              string: "forCart"
      - log: 
          message: "\nProduct Name: ${productName}\nProduct Price: ${actualPrice}\nProduct Quantity: ${productQty}"
          color: CYAN
      - log:
          message: "End function: utils.javascript.getArrayLength"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions removes characters from product price.
  # Param:   ${productPrice}  [Mandatory]  Product price to remove the currency symbol.
  # returns  ${cleanProductPrice}  -> Product price without currency symbol.
  - name: functions.utils.javascript.cleanProductPrice
    flow:
      - executeNode:
          file: wcp/test/helpers/Price/cleanPrice.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: cleanProductPrice
      - log:
          message: "Returned product price is: '${cleanProductPrice}'"
          color: CYAN
      - log:
          message: "End function: utils.javascript.cleanProductPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This functions removes characters from product price to extract the Original Price.
  # PARAMS:   ${productPrice}  [Mandatory]  Product price to cleanup.
  # RETURNS:  ${cleanProductOriginalPrice}  Product original price.
  - name: functions.utils.javascript.cleanProductOriginalPrice
    flow:
      - executeNode:
          file: wcp/test/helpers/Price/cleanOriginalPrice.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: cleanProductOriginalPrice
      - log:
          message: "Returned Product Original Pice is: '${cleanProductOriginalPrice}'"
          color: CYAN
      - log:
          message: "End function: functions.utils.javascript.cleanProductOriginalPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions removes characters from product price.
  # No Param
  - name: functions.utils.javascript.beautifyProductPrice
    flow:
      - executeNode:
          file: wcp/test/helpers/CartPage/beautifyPrice.js
          args:
            - value: ${productPrice}
            - value: ${page}
            - value: ${platform}
          getResponse:
            storeIn: actualPrice
      - log:
          message: "Beautified product price is ${productPrice}."
          color: CYAN
      - log:
          message: "End function: utils.javascript.beautifyProductPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This functions restart android build for the required market
  # No Param
  - name: functions.utils.restartAndroidBuild
    flow:
      - startActivity:
          packageName: ${appPackage}
          activityName: com.walmart.glass.integration.splash.SplashActivity
      - log:
          message: "End function: functions.utils.restartAndroidBuild"
          color: BLUE

  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function set the default value for create account api
  # No Param
  - name: functions.utils.setDefaultCreateAccountData.forAstroAPI
    flow:
      - storeIn:
          key: addressFirstLine
          value: data.default.astroAPI.createAccount.address.firstLine
      - storeIn:
          key: city
          value: data.default.astroAPI.createAccount.address.city
      - storeIn:
          key: country
          value: data.default.astroAPI.createAccount.address.country
      - storeIn:
          key: postalCode
          value: data.default.astroAPI.createAccount.address.postalCode
      - storeIn:
          key: state
          value: data.default.astroAPI.createAccount.address.state
      - if:
          condition: ${market} == 'MX' || ${market} == 'MX-Bodega' || ${market} == 'US'
          then:
            - storeIn:
                key: addressLineTwo
                value: data.default.astroAPI.createAccount.address.lineTwo
            - storeIn:
                key: locality
                value: data.default.astroAPI.createAccount.address.locality
            - storeIn:
                key: subLocality
                value: data.default.astroAPI.createAccount.address.subLocality
      - log:
          message: "End function: functions.utils.setDefaultCreateAccountData.forAstroAPI"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function sets the default values for the Card Information when creating a New Card.
  # Params:      ${paymentType}   [Mandatory]  The type of card. Options: [ creditCard | debitCard ]
  #              ${brand}  [Mandatory]  The brand of the card. Options: [ visa | masterCard | amex ]
  - name: functions.utils.setDefaultCardInformation.forNewCard
    flow:
      - if:
          condition: ${paymentType} == null
          then:
            - storeIn:
                key: paymentType
                value: creditCard
      - if:
          condition: ${brand} == null
          then:
            - storeIn:
                key: brand
                value: masterCard
      # CC + Visa...
      - if:
          condition: ${paymentType} == 'creditCard' && ${brand} == 'visa'
          then:
            - storeIn:
                key: cardNumber
                value: data.global.creditCard.visa.fullNumber
            - storeIn:
                key: cardLast4Digits
                value: data.global.creditCard.visa.last4DigitsOnly
      # CC + Master Card...
      - if:
          condition: ${paymentType} == 'creditCard' && ${brand} == 'masterCard'
          then:
            - storeIn:
                key: cardNumber
                value: data.global.creditCard.masterCard.fullNumber
            - storeIn:
                key: cardLast4Digits
                value: data.global.creditCard.masterCard.last4DigitsOnly
      # CC + Amex...
      - if:
          condition: ${paymentType} == 'creditCard' && ${brand} == 'amex'
          then:
            - storeIn:
                key: cardNumber
                value: data.global.creditCard.amex.fullNumber
            - storeIn:
                key: cardLast4Digits
                value: data.global.creditCard.amex.last4DigitsOnly
      # DC + Visa...
      - if:
          condition: ${paymentType} == 'debitCard' && ${brand} == 'visa'
          then:
            - storeIn:
                key: cardNumber
                value: data.global.debitCard.visa.fullNumber
            - storeIn:
                key: cardLast4Digits
                value: data.global.debitCard.visa.last4DigitsOnly
      # DC + Master Card...
      - if:
          condition: ${paymentType} == 'debitCard' && ${brand} == 'masterCard'
          then:
            - storeIn:
                key: cardNumber
                value:  data.global.debitCard.masterCard.fullNumber
            - storeIn:
                key: cardLast4Digits
                value: data.global.debitCard.masterCard.last4DigitsOnly
      # WMC + Master Card...
      - if:
          condition: ${paymentType} == 'walmartRewardsCard' && ${brand} == 'masterCard'
          then:
            - storeIn:
                key: cardNumber
                value:  data.global.wmc.masterCard.fullNumber
            - storeIn:
                key: cardLast4Digits
                value: data.global.wmc.masterCard.last4DigitsOnly
      - storeIn:
          key: cardHolderFirstName
          value: data.global.addNewCardInfo.cardHolder.firstName
      - storeIn:
          key: cardHolderLastName
          value: data.global.addNewCardInfo.cardHolder.lastName
      - storeIn:
          key: expirationMonth
          value: data.global.addNewCardInfo.expiration.month
      - storeIn:
          key: expirationMonthNumber
          value: data.global.addNewCardInfo.expiration.month.number
      - getTimestamp:
          storeIn: currentYear
          dateFormat: YYYY
      - arithmetic:
          expression: ${currentYear} + 1
          storeIn: expirationYear
      - arithmetic:
          expression: ${expirationYear} - 2000
          storeIn: expirationYearLast2Digits
      - storeIn:
          key: expirationDate
          value: ${expirationMonthNumber}${expirationYearLast2Digits}
      - storeIn:
          key: addressFirstLine
          value: data.walletPage.creditDebitCard.addressLine
      - storeIn:
          key: city
          value: data.walletPage.creditDebitCard.cityName
      - storeIn:
          key: state
          value: data.walletPage.creditDebitCard.stateName
      - storeIn:
          key: postalCode
          value: data.walletPage.creditDebitCard.postalName
      - if:
          condition: ${brand} == 'amex'
          then:
            - storeIn:
                key: cvv
                value: data.global.card.cvv.1234
          else:
            - storeIn:
                key: cvv
                value: data.global.card.cvv.123
      - storeIn:
          key: phoneNumber
          value: "3654400852"
      - storeIn:
          key: sameBillingAddress
          value: 'true'
      - storeIn:
          key: defaultCard
          value: 'true'
      - log:
          message: "Info: type = '${paymentType}', brand = '${brand}', cardNumber = '${cardNumber}', cardLast4Digits = '${cardLast4Digits}', cardHolderFirstName = '${cardHolderFirstName}', cardHolderLastName = '${cardHolderLastName}', expirationMonth = '${expirationMonthNumber}', expirationYear = '${expirationYear}', expirationDate = '${expirationDate}'cvv = '${cvv}', sameBillingAddress = '${sameBillingAddress}', defaultCard = '${defaultCard'}, AddressLine = '${addressFirstLine}', City = '${city}', 'State = ${state}', 'PostalCode = ${postalCode}'"
          color: GREEN_BOLD
      - log:
          message: "End function: functions.utils.setDefaultCardInformation.forNewCard"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function set the default values for add address.
  # No Params
  - name: functions.utils.setDefaultAddressData
    flow:
      - storeIn:
          key: firstName
          value: data.defaultAddress.firstName
      - storeIn:
          key: lastName
          value: data.defaultAddress.lastName
      - storeIn:
          key: streetAddress
          value: data.defaultAddress.streetAddress
      - storeIn:
          key: exteriorNumber
          value: data.defaultAddress.exteriorNumber
      - storeIn:
          key: interiorNumber
          value: data.defaultAddress.interiorNumber   
      - storeIn:
          key: zipCode
          value: data.defaultAddress.zipCode
      - storeIn:
          key: coloniaName
          value: data.defaultAddress.coloniaName
      - storeIn:
          key: municipality
          value: data.defaultAddress.municipality
      - storeIn:
          key: city
          value: data.defaultAddress.city
      - storeIn:
          key: state
          value: data.defaultAddress.state
      - storeIn:
          key: country
          value: data.defaultAddress.country
      - storeIn:
          key: crossingStreets
          value: data.defaultAddress.crossingStreets
      - storeIn:
          key: references
          value: data.defaultAddress.references
      - storeIn:
          key: phoneNumber
          value: data.defaultAddress.phoneNumber
      - log:
          message: "End function: functions.utils.setDefaultAddressData"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function get deeplink prefix according to market
  # No Param
  - name: functions.utils.getMarketDeeplinkPrefix
    flow:
      - if:
          condition: ${market} == 'MX'
          then:
            - storeIn:
                key: deeplinkMarketPrefix
                value: walmartea://
            - if:
                condition: ${ShoppingExperience} == 'OD' || ${merge-hallways}
                then:
                  - storeIn:
                      key: deeplinkMarketPrefix
                      value: walmartmx://
      - if:
          condition: ${market} == 'MX-Bodega'
          then:
            - storeIn:
                key: deeplinkMarketPrefix
                value: bodegaea:// 
      - if:
          condition: ${market} == 'US'
          then:
            - storeIn:
                key: deeplinkMarketPrefix
                value: walmart://
      - if:
          condition: ${market} == 'CA'
          then:
            - storeIn:
                key: deeplinkMarketPrefix
                value: walmartca://

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function is after steps
  # No Param
  - name: functions.utils.after
    flow:
      - if:
          condition: ${testStatus} == 'passed'
          then:
            - log:
                message: 'Test Passed'
                color: GREEN_BOLD
          else:
            - failTest:
                message: 'Test Failed'

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on navigation icon
  # No params
  - name: functions.utilsPage.navIcon
    flow:
      - click:
          identifier: globalPages.navIcon
      - log:
          message: "End functions: utilsPage.navIcon"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: Validates the fee label and value in the money box for cart and checkout pages. This function 
  #              first determines the page type based on its title, then verifies the fee label and value.
  #              If the fee amount is not provided, it checks for the presence of a displayed value.
  # Params:      ${subTotalLocator}  [Mandatory]  Locator for subtotal text.
  #              ${feeLabelLocator}  [Mandatory]  Locator for fee labels in money box.
  #              ${feeAmountLocator} [Mandatory]  Locator for fee value in money box.
  #              ${feeDisplayedLocator} [Mandatory]  Locator for fee place holder in money box.
  #              ${isVerifyFeeLabelNotPresent}  [Optional]  Boolean for check if the fee not displayed.
  #              ${feeLabel}  [Mandatory]   Label of the fee to validate.
  #              ${feeValue}  [Optional]    Value to check for label. 
  # Works for:   [ MX [__]   MX-Bodega [__]   US [__]   CA [✓]]
  - name: functions.utils.moneyBox.feeValidation
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: ${subTotalLocator}
          then:
            - scroll:
                direction: down
                untilIdentifier: ${subTotalLocator}
                position: center
                scrollLimit: 5
      - if:
          condition: ${isVerifyFeeLabelNotPresent}
          then:
            - verifyIdentifier:
                notPresent:
                  - identifier: ${feeLabelLocator)
            - log:
                message: "`${feeLabel}` fee label is not visible."
                color: CYAN
          else:
            - verifyIdentifier:
                present:
                  - identifier: ${feeLabelLocator}
            - log:
                message: "`${feeLabel}` fee label is visible."
                color: CYAN
            - if:
                condition: ${feeValue} != null
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: ${feeAmountLocator}
                  - log:
                      message: "`${feeValue}` of fee amount is displayed and verified."
                      color: CYAN
                else:
                  - verifyIdentifier:
                      present:
                        - identifier: ${feeDisplayedLocator}
                  - log:
                      message: "Fee value is displayed, but not verified."
                      color: CYAN
      - log:
          message: "End function: utils.moneyBox.feeValidation"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function helps to dismiss pop-up.
  #              It works by reading the pop-up title from the file 
  #              wcp/test/helpers/popUpTitle.txt and checking if the 
  #              current page source contains any of the titles. 
  #              If a match is found, it will handle the pop-up.
  # No Params
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [✓]   CA [✓]]
  - name: functions.utils.handlePopUp
    flow:
      - sleep:
          duration: 10000
      - printPageSource:
          storeIn: pageSource
      - executeNode:
          file: wcp/test/helpers/matchStringToPageSource.js
          args:
            - value: ${pageSource}
          getValue:
            - key: popUpTitle
              storeIn: popUpTitle
      - if:
          condition: ${popUpTitle} != 'Pop not found'
          then:
            - log:
                message: "Found pop with title `${popUpTitle}`"
                color: CYAN
            - click:
                identifier: utils.dismissPopUpBtn
          else:
            - log:
                message: "No pop up found on the page."
                color: CYAN
      - log:
          message: "End function: utils.handlePopUp"
          color: BLUE
  
  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function helps to scroll based on the ratio of sceen. 
  # Param:        ${scrollToElement}  Element to scroll to.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [✓]   CA [✓]]
  - name: functions.utils.scrollToElement
    flow:
      - storeIn:
          key: element
          value: ${scrollToElement}
      - loop:
          begin: 0
          end: 5
          mode: increment
          flow:
            - if:
                identifier:
                  present:
                    - identifier: ${element}
                then:
                  - break: true
                else:
                  - scroll:
                      direction: up
                      config:
                        startRatio: 0.4
                        endRatio: 0.1
      - log:
          message: "End function: utils.scrollToElement"
          color: GREEN_BOLD

#----------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function merges 2 given arrays into single one.
  # PARAMS:
  #    ${array1}  [Mandatory]  First array.
  #    ${array2}  [Mandatory]  Second array.
  # RETURNS:
  #    ${mergedArray} Single array with the elements of both given arrays.
  - name: functions.utils.mergeArrays
    flow:
      - if:
          condition: ${array1} == 'null'
          then:
            - failTest:
                message: X First array is empty (param 'array1').
          else:
            - log:
                message: "Array 1: '${array1}'"
                color: GREEN
      - if:
          condition: ${array2} == 'null'
          then:
            - failTest:
                message: X Second array is empty (param 'array2').
          else:
            - log:
                message: "Array 2: '${array2}'"
                color: GREEN
      - executeNode:
          file: wcp/test/helpers/mergeArrays.js
          args:
            - value: ${array1}
            - value: ${array2}
          getResponse:
            storeIn: mergedArray
      - log:
          message: "✔︎ Merged Array: '${mergedArray}'"
          color: GREEN
      - log:
          message: "End function: utils.mergeArrays"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method builds the delivery slot by using the selected day and time slots from reserve-slot page
  #              and saves it in the global variable ${returnedDeliverySlot}.
  # Params:      ${forPage}          [Mandatory]  Name of the page to construct the Delivery Slot String for. Name of 
  #                                               the available pages are 'Cart', 'ReviewOrder', 'OrderConfirmation', 
  #                                               'OrderHistory' and 'OrderDetails'.
  #              ${selectedDaySlot}  [Mandatory]  Obtained from: functions.reserveATime.getSelectedDaySlot
  #              ${selectedTimeSlot} [Mandatory]  Obtained from: functions.reserveATime.getSelectedTimeSlot
  - name: functions.utils.getDeliverySlot
    flow:
      - log:
          message: "For Page: ${forPage}  /  Selected Day Slot: ${selectedDaySlot}  /  Selected Time Slot: ${selectedTimeSlot}"
          color: CYAN
      - if:
          condition: ${PLATFORM} == 'ios'
          then:
            - storeIn:
                key: forPage
                value: "${forPage}iOS"
      - executeNode:
          file: wcp/test/helpers/checkoutPage/parseDeliverySlotForAssertion.js
          args:
            - value: ${forPage}
            - value: ${selectedDaySlot}
            - value: ${selectedTimeSlot}
          getResponse:
            storeIn: returnedDeliverySlot
      - if:
          condition: ${returnedDeliverySlot} == 'error'
          then:
            - failTest:
                message: "Given page name: ${forPage}, is not valid. Not able to parse Delivery Slot."
      - log:
          message: "Delivery Slot Got: '${returnedDeliverySlot}'"
          color: CYAN
      - log:
          message: "End function: functions.utils.getDeliverySlot"
          color: BLUE

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This function Scrolls up to display bottom bar
  # Param: No params
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [✓]   CA [✓]]
  - name: functions.utils.scrollUpToDisplayBottomBar
    flow:
      - sleep:
          duration: 5000
      - scroll:
          direction: up
          scrollLimit: 1
      - log:
          message: "End function: utils.scrollUpToDisplayBottomBar"
          color: GREEN_BOLD

  #-----------------------------------------------------------------------------------------------------------------

  # Description: This utility fetches healthy items from Fulcrum API 

  - name: functions.utils.fetchFulcrumAvailableItem
    flow:
      - storeIn:
          key: executionStage
          value: FulcrumAPI
      - log: '--Fulcrum begining--'
      - if:
          condition: ${storeId} == null
          then:
            - storeIn:
                key: storeId
                value: 5540
      
      - storeIn:
          key: fetchURL
          value: http://fulcrum.teflon.walmart.com/api/v1/db/fulcrum/itemHealthHistoryCA?orderType=${orderType}&storeId=5540&eligiblePath=${eligiblePath}&isTransactable=true
             
      - storeIn:
          key: version
          value: nextgen
          
#Looping thru API Objects
      - loop:
          begin: 1
          end: 2
          storeIndex: retryValidationCount
          mode: increment
          flow:
            # - sleep:
            #     duration: 50000
            - callAPI:
                url: ${fetchURL}
                readTimeout: 180000
                requestMethod: GET
                verifyResponseCode: 200
                retriesOnFail: 3
                retryDelay: 10000
                getResponse:
                  storeIn: orderResponse
                getValue:
                  - key: itemDetails
                    storeIn: responseItemdetails
                  - key: status
                    storeIn: fetchItemStatus
                  - key: itemDetails[0].details[0].status[0].upc
                    storeIn: firstItem
            - log: --Fulcrum first item response-- ${firstItem}
            - log: --Fulcrum fetch item status-- ${fetchItemStatus}
            - storeIn:
                key: itemFetched
                value: $firstItem

            - log: ${itemFetched}
                 

#----------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: [This is a Support Function] [Supports: functions.utils.CartGroupingJSONBuilder.build]
  #
  #     Initializes the CartGrouping.JSON global variable where the Cart's Grouping Data will be built.
  #
  # RETURNS:  ${CartGrouping.JSON}  Initialized JSON data.
  #
  - name: functions.utils.CartGroupingJSONBuilder.initialize/support_function
    flow:
      - executeNode:
          file: wcp/test/helpers/CartPage/GroupingJsonTools-initialize.js
          getResponse:
            storeIn: CartGrouping.JSON
      - log:
          message: 'CartGrouping.JSON has been initialized: ${CartGrouping.JSON}'
          color: CYAN
      - log:
          message: "End function: utils.CartGroupingJSONBuilder.initialize/support_function"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: [This is a Support Function] [Supports: functions.utils.CartGroupingJSONBuilder.build]
  #
  #     Saves a Fulfillment Group in the CartGrouping.JSON global variable being built as long as it hasn't been saved
  #     already; its Products and EDD Groups arrays will be initialized as empty.
  #
  #     Each time a Fulfillment Group is saved, the control var 'CartGrouping.JSON.currentFulfillmentGroup' is set with
  #     the name of the saved group for the process to be able to identify the group that is currently being processed
  #     (all EDD Groups, Seller Groups & Products found after a Fulfillment Group is saved are assumed as they belong to
  #     the current Fulfillment Group until a new Fulfillment Group is saved and the name of the current group changes).
  #
  #         Fulfillment_Group Schema:
  #             {
  #               name      : String,
  #               products  : [Array of Strings],   // The actual name of the products.
  #               eddGroups : [Array of EDD_Group]
  #             }
  #
  # PARAMS:  ${groupName}  [Mandatory]  Name of the Fulfillment Group to be saved.
  #
  - name: functions.utils.CartGroupingJSONBuilder.saveFulfillmentGroup/support_function
    flow:
      - executeNode:
          file: wcp/test/helpers/CartPage/GroupingJsonTools-saveFulfillmentGroup.js
          args:
            - value: ${CartGrouping.JSON}
            - value: ${groupName}
          getValue:
            - key: message
              storeIn: response.message
            - key: json
              storeIn: CartGrouping.JSON
      - log:
          message: ${response.message}
          color: GREEN
      - log:
          message: "End function: utils.CartGroupingJSONBuilder.saveFulfillmentGroup/support_function"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------
  
  # DESCRIPTION: [This is a Support Function] [Supports: functions.utils.CartGroupingJSONBuilder.build]
  #
  #     Saves an EDD Group in the CartGrouping.JSON global variable being built, in the Fulfillment Group that is defined
  #     as the current Fulfillment Group as long as it hasn't been saved already; its Products and Seller Groups arrays
  #     will be initialized as empty.
  #
  #     Each time an EDD Group is saved, the control var 'CartGrouping.JSON.currentEDDGroup' is set with the name of the
  #     saved group for the process to be able to identify the group that is currently being processed (all Seller Groups
  #     & Products found after an EDD Group is saved are assumed as they belong to the current EDD Group until a new EDD
  #     Group is saved and the name of the current group changes).
  #
  #         EDD_Group Schema:
  #             {
  #               name         : String,
  #               products     : [Array of Strings],   // The actual name of the products.
  #               sellerGroups : [Array of Seller_Group]
  #             }
  #
  # PARAMS:  ${groupName}  [Mandatory]  Name of the EDD Group to be saved.
  #
  - name: functions.utils.CartGroupingJSONBuilder.saveEDDGroup/support_function
    flow:
      - executeNode:
          file: wcp/test/helpers/CartPage/GroupingJsonTools-saveEDDGroup.js
          args:
            - value: ${CartGrouping.JSON}
            - value: ${groupName}
          getValue:
            - key: message
              storeIn: response.message
            - key: json
              storeIn: CartGrouping.JSON
      - log:
          message: ${response.message}
          color: GREEN
      - log:
          message: "End function: utils.CartGroupingJSONBuilder.saveEDDGroup/support_function"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: [This is a Support Function] [Supports: functions.utils.CartGroupingJSONBuilder.build]
  #
  #     Saves Product in the CartGrouping.JSON global variable being built, in the Seller Group that is defined as the
  #     current Seller Group as long as it hasn't been saved already; the Product will be saved not only in the Seller
  #     Group but in the EDD Group that Seller Group belongs to and the Fulfillment Group that EDD Belongs to.
  #
  #     If any of the current group names (Fulfillment, EDD or Seller) cannot be determined or is not already stored in
  #     the CartGrouping.JSON global variable being built, a group with the name 'UNKNOWN_GROUP_NAME' will be created to
  #     store the product there. This way, in the resulting CartGrouping.JSON global variable built the products laying
  #     in this category can be found for debugging purposes.
  #
  # PARAMS:  ${productName}   [Mandatory]  Name of the product to be saved.
  #
  - name: functions.utils.CartGroupingJSONBuilder.saveProduct/support_function
    flow:
      - executeNode:
          file: wcp/test/helpers/CartPage/GroupingJsonTools-saveProduct.js
          args:
            - value: ${CartGrouping.JSON}
            - value: ${productName}
          getValue:
            - key: message
              storeIn: response.message
            - key: json
              storeIn: CartGrouping.JSON
      - log:
          message: ${response.message}
          color: GREEN
      - log:
          message: "End function: utils.CartGroupingJSONBuilder.saveProduct/support_function"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Gets the CartGrouping.JSON built at the moment. It also prints it in the log.
  # RETURNS:  ${CartGrouping.JSON}  The Group Json built.
  - name: functions.utils.CartGroupingJSONBuilder.getGroupsJson
    flow:
      - log:
          message: "CartGrouping.JSON built: '${CartGrouping.JSON}'"
          color: CYAN
      - log:
          message: "End function: utils.CartGroupingJSONBuilder.getGroupsJson"
          color: BLUE
