functions: 
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function is for navigating to the ODP of the latest order in order history page
  # No param  
  - name: functions.orderHistoryPage.navigateToLatestOrder
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: orderHistoryPage.firstOrderDetailsBtn
            timeout: 5000
          then:
            - scroll:
                direction: down
                position: center
                untilIdentifier: orderHistoryPage.firstOrderDetailsBtn
                scrollLimit: 2
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.firstOrderDetailsBtn
      - click:
          identifier: orderHistoryPage.firstOrderDetailsBtn
      - log:
          message: "End functions: orderHistoryPage.navigateToLatestOrder"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function handles barcode pop up for seaching items
  # "Agrega tus tickets y busca los articulos en tus pedidos"
  # "Add your tickets and search for the items in your orders"
  # No Params
  - name: functions.orderHistoryPage.handleQRCodePopUp
    flow:
      - if:
          identifier:
            present:
              - identifier: orderHistoryPage.QRCodePopUp 
            timeout: 5000
          then:
            - verifyIdentifier:
                present:
                  - identifier: orderHistoryPage.closeQRCodePopUp
            - click:
                coordinates: 297,214
                # identifier: orderHistoryPage.closeQRCodePopUp
                # temporary workaround: can't click on the identifier: orderHistoryPage.closeQRCodePopUp
            - log:
                message: "Close seach item QRcode pop up"
                color: CYAN
      - log:
          message: "End function: orderHistoryPage.handleQRCodePopUp"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function verify order details in order history page based on the order id passed.
  # Note: This function is limited to max 2 line items orders.
  # No Params
  - name: functions.orderHistoryPage.validateOrderCardBasedOnOrderId
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: orderHistoryPage.orderCard
          then:
            - scroll:
                direction: down
                untilIdentifier: orderHistoryPage.orderCard
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.orderTitle
            - identifier: orderHistoryPage.orderTotal
      - executeFunction:
          name: functions.orderHistoryPage.orderLineItemsCount
          params:
            - name: orderId
              string: ${orderId}
      - arithmetic:
          expression: ${lineItem} + 1
          storeIn: iteration
      - loop:
          begin: 1
          end: ${iteration}
          mode: increment
          storeIndex: _index
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: orderHistoryPage.fulfillmentType
                then:
                  - scroll:
                      direction: down
                      untilIdentifier: orderHistoryPage.fulfillmentType
            - verifyIdentifier:
                present:
                  - identifier: orderHistoryPage.fulfillmentType     #<- param ${_index}
                  # - identifier: orderHistoryPage.orderStatusMessage  #<- param ${_index}
                  # - identifier: orderHistoryPage.orderDotTrackerView #<- param ${_index}
                  - identifier: orderHistoryPage.itemCount           #<- param ${_index}
      - if:
          identifier:
            notPresent:
              - identifier: orderHistoryPage.viewOrderDetailsBtn
          then:
            - scroll:
                direction: down
                untilIdentifier: orderHistoryPage.viewOrderDetailsBtn
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.viewOrderDetailsBtn
      - if:
          identifier:
            notPresent:
              - identifier: orderHistoryPage.trackOrderCta
          then:
            - log:
                message: "Track shipment cta is not present."
                color: RED_BOLD
      - log:
          message: "End function: orderHistoryPage.handleQRCodePopUp"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function verify order card elements in order history page based on fulfillment type.
  # Params ${fulfillmentType}
  #        ${orderStatus}
  #        ${orderTrackerByIndex:1}
  - name: functions.orderHistoryPage.assertOrderCardElements
    flow:
      # TODO: once final PH UI is finished add support to validate order card based on orderId

      # SKELETON:
      # - if:
      #     condition: ${isMixedOrder:false}
      #     then:
      #       - verifyIdentifier:
      #           present:
      #             - identifier: generaIdentifier.for.mixed.oirder.card # TODO

      - scroll:
          direction: down
          untilIdentifier: orderHistoryPage.orderCardViewByFulfillmentType # Param -> $fulfillmentType
      # NOTE: Each element is validated individually since bad UI performance in iOS PH. some elements taking more time to find
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.orderCardViewByFulfillmentType # Param -> $fulfillmentType
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.orderCardViewByStatus # Param -> $orderStatus
      - storeIn:
          key: _index
          value: ${orderTrackerByIndex:1}
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.orderDotTrackerViewByIndex # Param -> $_index
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.orderCardItemImages
      - log:
          message: "End function: orderHistoryPage.assertOrderCardElements"
          color: BLUE
          
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function check whether the order history page is displayed.
  - name: functions.orderHistoryPage.isPageDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: orderHistoryPage.pageTitle
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: functions.addAddressPage.isPageDisplayed (Displayed)"
                color: BLUE
          else:
            - storeIn:
                key: returnedIsDisplayed
                value: false
            - log:
                message: "End function: functions.addAddressPage.isPageDisplayed (Not Displayed)"
                color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function assert the current status of the order(order tracker) in UI.
  # Note: This function will validate for order with max two line items and the status for
  #       both the items should be same.
  # Params:  ${orderId}           
  #          ${orderStatus}       
  - name: functions.orderHistoryPage.verifyOrderStatus
    flow:
      - executeFunction: 
          name: functions.orderHistoryPage.orderLineItemsCount
          params:
            - name: orderId
              string: ${orderId}
      - arithmetic:
          expression: ${lineItem} + 1
          storeIn: iteration
      - loop:
          begin: 1
          end: ${iteration}
          mode: increment
          storeIndex: _index
          flow:
            - getString:
                identifier: orderHistoryPage.orderDotTrackerView #<- params ${_index}
                attribute: contentDescription
                storeIn: UIOrderStatus
            - executeNode:
                file: wcp/test/helpers/OrderHistory/divideTextAtDelimiterAndSelectTextBasedOnIndex.js
                args:
                  - value: ${UIOrderStatus}
                  - value: ","
                  - value: "1"
                getResponse:
                  storeIn: orderTrackerStatus
            - if:
                condition: ${orderTrackerStatus} == ${expectedOrderStatus}
                then:
                  - log:
                      message: "Successful Assertion for order status for line item ${_index}: '${orderTrackerStatus}' (expected: '${expectedOrderStatus}')"
                      color: GREEN_BOLD
                else:
                  - failTest:
                      message: "Order status not correct for line item ${_index}: '${orderTrackerStatus}' (expected: '${expectedOrderStatus}')"
      - log:
          message: "End function: orderHistoryPage.verifyOrderStatus"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function assert the status of an order(order tracker) in UI given an index. This function does not take in consideration mixed baskets
  # Note: This function is only to assert the correct sorted/sequence in which PH display orders by status priority
  #       PH logic display orders in this priority sequence: “On the way”, “PO created”, “Delivered”, “Returned”, “Cancelled”
  # Params:  ${_index}           
  #          ${orderStatus}       
  - name: functions.orderHistoryPage.verifyOrderStatusByIndex
    flow:
      - if:
         condition: "${platform} == 'Android'"
         then:
           - verifyIdentifier:
              contentDescription:
                - identifier: orderHistoryPage.orderDotTrackerViewByIndex # Param -> $_index
                  contains: ${orderStatus}
         else:
           - verifyIdentifier:
              value:
                - identifier: orderHistoryPage.orderDotTrackerViewByIndex # Param -> $_index
                  contains: ${orderStatus}
      - log:
          message: "End function: orderHistoryPage.verifyOrderStatusByIndex"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function assert the current status of the order(order tracker) in UI.
  # Note: This function will validate for order with max two line items 
  - name: functions.orderHistoryPage.orderLineItemsCount
    flow:
      - numberOfChildElements:
          identifier: orderHistoryPage.orderedItemContainer
          filterBy: orderHistoryPage.orderedItemCount
          storeIn: lineItem
      - log:
          message: "Items found in the current order(${orderId}) : ${lineItem}"
          color: GREEN_BOLD
      - log:
          message: "End function: orderHistoryPage.orderLineItemsCount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on view order details button based on the order id provided.
  # Params:      ${orderId} 
  - name: functions.orderHistoryPage.tapOnViewOrderDetailsBtn
    flow:
      - sleep: 
          duration: 5000
      - click:
          identifier: orderHistoryPage.viewOrderDetailsBtn
      - sleep:
          duration: 10000
      - log:
          message: "End function: orderHistoryPage.tapOnViewOrderDetailsBtn"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function search for an order by order id or item name in order history page
  # Param: ${searchText}
  - name: functions.orderHistoryPage.searchField.enterText
    flow:
      - enterText:
          identifier: orderHistoryPage.searchBar
          string: ${searchText}
          clearField: true
          pressEnter: true
      - log:
          message: "End function: orderHistoryPage.searchField.enterText"
          color:  BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps on back button
  # No params
  - name: functions.purchaseHistoryPage.tapbackButton
    flow:
      - click:
          identifier: purchaseHistoryPage.backButton
      - log:
          message: "End function: purchaseHistoryPage.tapbackButton"
          color:  BLUE    

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function assert all filters are displayed in PH page
  # No params
  - name: functions.orderHistoryPage.assertFiltersDisplayed
    flow:
      # NOTE: Each filter button is validated individually due to performance in iOS PH page
      - verifyIdentifier:
          present: 
            - identifier: orderHistoryPage.allFilterButton
      - verifyIdentifier:
          present: 
            - identifier: orderHistoryPage.byDateFilterButton
      - verifyIdentifier:
          present: 
            - identifier: orderHistoryPage.returnsFilterButton
      - verifyIdentifier:
          present: 
            - identifier: orderHistoryPage.statusFilterButton
      - log:
          message: "End function: orderHistoryPage.assertFiltersDisplayed"
          color:  BLUE    

  #--------------------------------------------------------------------------------------------------------------------
  # No params
  - name: functions.orderHistoryPage.tapOnByDateFilter
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - click:
          identifier: orderHistoryPage.byDateFilterButton
      - log:
          message: "End function: orderHistoryPage.tapOnByDateFilter"
          color:  BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # No params
  - name: functions.orderHistoryPage.tapOnStatusFilter
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - click:
          identifier: orderHistoryPage.statusFilterButton
      - log:
          message: "End function: orderHistoryPage.tapOnStatusFilter"
          color:  BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # No params
  - name: functions.orderHistoryPage.tapOnAllOrdersFilter
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - click:
          identifier: orderHistoryPage.allFilterButton
      - log:
          message: "End function: orderHistoryPage.tapOnAllOrdersFilter"
          color:  BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # No params
  - name: functions.orderHistoryPage.genericFilterView.tapCloseButton
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - click:
          identifier: orderHistoryPage.filterModal.closeButton
      - log:
          message: "End function: orderHistoryPage.genericFilterView.tapCloseButton"
          color:  BLUE 
  
  #--------------------------------------------------------------------------------------------------------------------
  # No params
  - name: functions.orderHistoryPage.genericFilterView.tapOnSeeResults
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - click:
          identifier: orderHistoryPage.filterModal.seeResultsButton
      - log:
          message: "End function: orderHistoryPage.genericFilterView.tapOnSeeResults"
          color:  BLUE 
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: function to validate general elements of a filter modal view. Title, Close button and see results button
  # No params
  - name: functions.orderHistoryPage.genericFilterView.assertBaseElementsDisplayed
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.filterModal.title
            - identifier: orderHistoryPage.filterModal.closeButton
            - identifier: orderHistoryPage.filterModal.seeResultsButton
      - log:
          message: "End function: orderHistoryPage.assertBaseFilterModalView"
          color:  BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # No params
  - name: functions.orderHistoryPage.byDateFilterView.assertIsDisplayed
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - executeFunction:
          name: functions.orderHistoryPage.genericFilterView.assertBaseElementsDisplayed
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.byDateFilter.radioButtonsStackView
      - log:
          message: "End function: orderHistoryPage.byDateFilterView.assertIsDisplayed"
          color:  BLUE 
  
  #--------------------------------------------------------------------------------------------------------------------
  # Param ${dateOption}
  - name: functions.orderHistoryPage.byDateFilterView.selectTimeOption
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - click:
         identifier: orderHistoryPage.byDateFilter.radioButtonByDateOption # Param -> $dateOption
      - log:
          message: "End function: orderHistoryPage.byDateFilterView.selectTimeOption"
          color:  BLUE 
  
  #--------------------------------------------------------------------------------------------------------------------
  # No params
  - name: functions.orderHistoryPage.statusFilterView.assertIsDisplayed
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - executeFunction:
          name: functions.orderHistoryPage.genericFilterView.assertBaseElementsDisplayed
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.statusFilter.checkboxContentStackView
      - log:
          message: "End function: orderHistoryPage.statusFilterView.assertIsDisplayed"
          color:  BLUE 
  
  #--------------------------------------------------------------------------------------------------------------------
  # Param ${statusOption}
  - name: functions.orderHistoryPage.statusFilterView.selectStatusOption
    platform: ios # TODO: remove platform once filters are available in android 
    flow:
      - click:
         identifier: orderHistoryPage.statusFilter.checkboxButtonByStatus # Param -> $statusOption
      - log:
          message: "End function: orderHistoryPage.statusFilterView.selectStatusOption"
          color:  BLUE 
  
  #--------------------------------------------------------------------------------------------------------------------
  # Params: ${expectedOrdersInHistory}
  - name: functions.orderHistoryPage.assertCountOrdersDisplayed
    flow:
      - numberOfChildElements:
         identifier: orderHistoryPage.purchaseHistoryTableView
         filterBy: orderHistoryPage.orderCard
         storeIn: numberOfOrderCardsDisplayed
      - log: Current number of order visibles in PH >>> '${numberOfOrderCardsDisplayed}'
      - verifyCondition: "${numberOfOrderCardsDisplayed} == ${expectedOrdersInHistory}"
      - log:
          message: "End function: orderHistoryPage.assertCountOrdersDisplayed"
          color:  BLUE 

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function search for return link displayed in an order card based on their order status.
  # Params: ${orderStatus}
  # Return: ${returnLinkDislayed}
  - name: functions.orderHistoryPage.verifyReturnLinkIsDisplayedByGivenOrderStatus
    flow:
      - storeIn:
          key: returnLinkDislayed
          value: false
      - scroll:
          direction: down
          untilIdentifier: orderHistoryPage.orderCardViewByStatus
          position: center
      - if:
          identifier:
            present:
              - identifier: orderHistoryPage.returnLinkInOrderCardViewByStatus # Param -> $orderStatus
          then:
            - storeIn:
                key: returnLinkDislayed
                value: true
            - log:
                message: Return link Displayed
                color: GREEN_BOLD
          else:
            - log:
                message: Return link NOT Displayed
                color: YELLOW
      - log:
          message: "End function: orderHistoryPage.verifyReturnLinkIsDisplayedByGivenOrderStatus"
          color:  BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function assert return link displayed in an order card based on a given order status.
  # Params: ${orderStatus}
  #         ${expectedReturnLinkDisplayed:true}
  - name: functions.orderHistoryPage.assertReturnLinkDisplayedInOrderCard
    flow:
      - executeFunction:
          name: functions.orderHistoryPage.verifyReturnLinkIsDisplayedByGivenOrderStatus # Return -> ${returnLinkDislayed}
          params:
            - name: orderStatus
              string: ${orderStatus}
      - verifyCondition: "${returnLinkDislayed} == ${expectedReturnLinkDisplayed:true}"
      - log:
          message: "End function: orderHistoryPage.assertReturnLinkDisplayedInOrderCard"
          color:  BLUE 
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function search for cta Button displayed in an order card based on their order status.
  # Params: ${orderStatus}
  #         ${ctaTextButton}
  # Return: ${returnCTAButtonDislayed}
  - name: functions.orderHistoryPage.verifyCTAButtonIsDisplayedByGivenOrderStatusAndText
    flow:
      - storeIn:
          key: returnCTAButtonDislayed
          value: false
      - scroll:
          direction: down
          untilIdentifier: orderHistoryPage.orderCardViewByStatus
          position: center
      - if:
          identifier:
            present:
              - identifier: orderHistoryPage.ctaButtonByOrderStatusAndText # Param -> $orderStatus, $ctaTextButton
          then:
            - storeIn:
                key: returnCTAButtonDislayed
                value: true
            - log:
                message: Return CTA Button Displayed
                color: GREEN_BOLD
          else:
            - log:
                message: Return CTA Button NOT Displayed
                color: YELLOW
      - log:
          message: "End function: orderHistoryPage.verifyCTAButtonIsDisplayedByGivenOrderStatusAndText"
          color:  BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function search for cta Button displayed in an order card based on their order status.
  # Params: ${fulfillmentType}
  #         ${ctaTextButton}
  # Return: ${returnCTAButtonDislayed}
  - name: functions.orderHistoryPage.verifyCTAButtonIsDisplayedByGivenFulfillmentTypeAndText
    flow:
      - storeIn:
          key: returnCTAButtonDislayed
          value: false
      - scroll:
          direction: down
          untilIdentifier: orderHistoryPage.orderCardViewByFulfillmentType
          position: center
      - if:
          identifier:
            present:
              - identifier: orderHistoryPage.ctaButtonByFulfillmentTypeAndText # Param -> $fulfillmentType, $ctaTextButton
          then:
            - storeIn:
                key: returnCTAButtonDislayed
                value: true
            - log:
                message: Return CTA Button Displayed
                color: GREEN_BOLD
          else:
            - log:
                message: Return CTA Button NOT Displayed
                color: YELLOW
      - log:
          message: "End function: orderHistoryPage.verifyCTAButtonIsDisplayedByGivenFulfillmentTypeAndText"
          color:  BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function assert return CTA Button displayed in an order card based on a given order status or fulfillment type order 
  #              and assert expected CTA text button. By default assertion will be work using given order status. 
  # Params: ${orderStatus}
  #         ${fulfillmentType}
  #         ${ctaTextButton} 
  #         ${isByOrderStatus:true}
  #         ${expectedCTAButtonDisplayed:true}
  - name: functions.orderHistoryPage.assertCTAButtonDisplayedInOrderCard
    flow:
      - if:
          condition: ${isByOrderStatus:true}
          then:
            - executeFunction:
                name: functions.orderHistoryPage.verifyCTAButtonIsDisplayedByGivenOrderStatusAndText # Return -> ${returnCTAButtonDislayed}
                params:
                  - name: orderStatus
                    string: ${orderStatus}
                  - name: ctaTextButton
                    string: ${ctaTextButton}
          else:
            - executeFunction:
                name: functions.orderHistoryPage.verifyCTAButtonIsDisplayedByGivenFulfillmentTypeAndText # Return -> ${returnCTAButtonDislayed}
                params:
                  - name: fulfillmentType
                    string: ${fulfillmentType}
                  - name: ctaTextButton
                    string: ${ctaTextButton}
      - verifyCondition: "${returnCTAButtonDislayed} == ${expectedCTAButtonDisplayed:true}"
      - log:
          message: "End function: orderHistoryPage.assertCTAButtonDisplayedInOrderCard"
          color:  BLUE 

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function assert the info message label displayed in order card view.
  # Params: ${infoMessage}
  - name: functions.orderHistoryPage.assertInfoMessageInOrderCardView
    flow:
      - verifyIdentifier:
          present:
            - identifier: orderHistoryPage.orderCardByInfoMessage # Param -> $infoMessage
      - log:
          message: "End function: orderHistoryPage.assertInfoMessageInOrderCardView"
          color:  BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # Params: ${orderStaus}
  #         ${ctaTextButton}
  - name: functions.orderHistoryPage.tapOnCTAButtonByOrderStatusAndText
    flow:
      - click:
          identifier: orderHistoryPage.ctaButtonByOrderStatusAndText # Param -> $orderstatus, $ctaTextButton
      - log:
          message: "End function: orderHistoryPage.tapOnCTAButtonByOrderStatusAndText"
          color:  BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # NOTE: For now is not required to validate the whole Tracker Page. If it is required in the future this function will be moved to the correct page
  # Param: ${trackerTitleLabel}
  - name: functions.trackerPage.assertTitle
    flow:
      - verifyIdentifier:
          present:
            - identifier: trackerOrderPage.titleLabel # Param -> $trackerTitleLabel 
      - log:
          message: "End function: functions.trackerPage.assertTitle"
          color:  BLUE