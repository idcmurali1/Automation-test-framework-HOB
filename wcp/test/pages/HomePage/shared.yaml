functions:
  #--------------------------------------------------------------------------------------------------------------------
  # Description: Close wplus bottom sheet after navigate to home page (US market only)
  # No params
  - name: functions.homePage.closeWpulsPopup
    flow:
      - if:
          condition: ${market} == 'US'
          then:
            - if:
                identifier:
                  present:
                    - identifier: homePage.wplusPopupCloseBtn
                then:
                  - click:
                      identifier: homePage.wplusPopupCloseBtn

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps on shop button in home page
  # No params
  - name: functions.homePage.tapSignInBtn
    flow:
      - click:
          identifier: homePage.signInBtn
      - log:
          message: "End functions: homePage.tapSignInBtn"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------

  # Description: This functions check if the wplus bottomsheet is displayed
  # No Param
  - name: functions.homePage.isWplusBottomsheetDisplayed
    flow:
      - sleep:
          duration: 5000
      - storeIn:
          key: returnedIsDisplayed
          value: false
      - if: 
          identifier:
            present:
              - identifier: homePage.wplusBottomsheetTitle
          then:
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: "End function: homePage.isWplusBottomsheetDisplayed (Displayed)"
                color: BLUE
          else: 
            - log:
                message: "End function: homePage.isWplusBottomsheetDisplayed (Not displayed)"
                color: BLUE

  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This method taps on wplus bottom sheet close button
  # No Param
  - name: functions.homePage.wplusBottomsheet.tapCloseBtn
    flow:
      - click:
          identifier: homePage.wplusBottomsheet.closeBtn
      - log:
          message: "End function: homePage.wplusBottomsheet.tapCloseBtn"
          color: BLUE
  
  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This method asserts whether the Home Page loaded properly.
  # No Param
  - name: functions.homePage.assertPageLoaded
    flow:
      - executeFunction:
          name: functions.homePage.personalizedShoppingExperiencePopup.dismissIfDisplayed
      - executeFunction:
          name: functions.homePage.orderDiscountUpdatesAlert.tapLaterBtn
      - executeFunction:
          name: functions.homePage.gic.collapseIfExpanded
      - if:
          identifier:
            present:
              - identifier: homePage.technicalError
          then:
            - log:
                message: Retrying due to technical error
                color: CYAN
            - click:
                identifier: homePage.technicalErrorDismissButton
            - sleep:
                duration: 2000
      - if:
          identifier:
            present:
              - identifier: homePage.errorStateView
            timeout: 5000
          then:
            - failTest:
                message: Home Page did not load properly.
      - executeFunction:
          name: functions.homePage.newUpdateAvailablePopUp.dismissIfDisplayed
      - executeFunction:
          name: functions.homePage.isHomePageLoaded
      - log:
          message: "End function: functions.homePage.assertPageLoaded"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This function checks if the homepage has loaded.
  # No Param

  - name: functions.homePage.isHomePageLoaded
    flow:
      - verifyIdentifier:
          present:
            - identifier: homePage.shopFragmentRootContainer
      - log:
          message: "End function: homePage.isHomePageLoaded"
          color: BLUE
  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This function tap on home page OST tracker.
  # No Param

  - name: functions.homePage.taponOrderStatusTracker
    flow:
      - scroll:
          direction: down
          untilIdentifier: homePage.orderStatusTracker
          scrollLimit: 5
      - scroll:
          direction: up 
          untilIdentifier: homePage.orderStatusTracker
          scrollLimit: 10
      - click:
             identifier: homePage.orderStatusTracker
      - log:
          message: "End function: homePage.orderStatusTracker"
          color: BLUE
  
     
  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This function expand GIC on the home page.
  # No Param

  - name: functions.homePage.gic.expandIfCollapsed
    flow:
      - sleep:
          duration: 2000
      - if:
          identifier:
            present:
              - identifier: homePage.gic.collapseIcon
          then:
            - click:
                identifier: homePage.gic.collapseIcon
          else:
            - if:
                identifier:
                  present:
                    - identifier: homePage.gic.expandedIcon
                then:
                  - log :  
                      message: GIC is expanded
                      color: CYAN
      - if:
          identifier:
            present:
              - identifier: global.gotitBtn
          then:
            - click:
                identifier: global.gotitBtn
          else:
            - log :
                message: GIC is not displayed
                color: CYAN
      - log:
          message: "End function: homePage.gic.expandIfCollapsed"
          color: BLUE        

  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This function collapse GIC on the home page.
  # No Param

  - name: functions.homePage.gic.collapseIfExpanded
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.gic.expandedIcon
          then:
            - click:
                identifier: homePage.gic.expandedIcon
          else:
            - log : gic is collapsed
      
      - log:
          message: "End function: homePage.gic.collapseIfExpanded"
          color: BLUE   

 # ----------------------------------------------------------------------------------------------------------------   
 # Description: This function click on store button GIC on the home page.
  # No Param       
  - name: functions.homePage.gic.taponStorebutton
    flow:
       - verifyIdentifier:
            present:
                - identifier: homepage.gic.storelink
              
       - click:
            identifier:  homepage.gic.storelink
      
       - log:
          message: "End function: homePage.gic.taponStorebutton"
          color: BLUE                
            
# ----------------------------------------------------------------------------------------------------------------   
 # Description: This function click on Address button GIC on the home page.
  # No Param       
  - name: functions.homePage.gic.taponAddressBtn
    flow:
      - verifyIdentifier:
          present:
            - identifier: homepage.gic.Addaddresslink
      - click:
          identifier: homepage.gic.Addaddresslink
      - log:
          message: "End function: homePage.gic.taponAddressBtn"
          color: BLUE                
            
  # ---------------------------------------------------------------------------------------------------------------- 
 # Description: This method dismiss the Personalized Shopping Experience Popup that might appear in Home Page in case it is displayed.
  # No Param
  - name: functions.homePage.personalizedShoppingExperiencePopup.dismissIfDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.personalizedShoppingExperiencePopup.title
          then:
            - click:
                identifier: homePage.personalizedShoppingExperiencePopup.dismissBtn
            - log:
                message: Personalized Shopping Experience Popup dismissed.
                color: GREEN
          else:
            - log:
                message: Personalized Shopping Experience Popup didn't display. Nothing to dismiss.
                color: GREEN
      - log:
          message: "End function: functions.homePage.personalizedShoppingExperiencePopup.dismissIfDisplayed"
          color: BLUE
  # ----------------------------------------------------------------------------------------------------------------          

  # Description: This method close the New Update Available popup that might appear in Home Page in case it is displayed.
  # No Param
  - name: functions.homePage.newUpdateAvailablePopUp.dismissIfDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.newUpdateAvailablePopUp.title
          then:
            - click:
                identifier: global.closeBtn
            - log:
                message: New Update Available Popup dismissed.
                color: GREEN
          else:
            - log:
                message: New Update Available Popup didn't display. Nothing to dismiss.
                color: GREEN
      - log:
          message: "End function: functions.homePage.newUpdateAvailablePopUp.dismissIfDisplayed"
          color: BLUE
      

  # ----------------------------------------------------------------------------------------------------------------
  # Description: This function handles order and discount update pop up.
  # No params
  - name: functions.homePage.orderDiscountUpdatesAlert.tapLaterBtn
    flow:    
      - if:
          identifier:
            present:
              - identifier: homePage.orderDiscountUpdatesAlert.title
          then:
            - click:
                identifier: homePage.orderDiscountUpdatesAlert.laterBtn
      - log:
          message: "End functions: homePage.orderDiscountUpdatesAlert.tapLaterBtn"
          color: BLUE


  # ----------------------------------------------------------------------------------------------------------------
  # Description: This function Tap on shipping 
  # No params
  - name: functions.homePage.gic.tapOnShippingIntent
    flow:
      - if:
          identifier:
            present:
              - identifier: homepage.gic.expandedView.ShippingIntentSelected
          then:
              - log: "Shipping intent is selected"
          else:
            - click:
                identifier: homepage.gic.expandedView.ShippingIntent
      - log:
          message: "End functions: homePage.gic.tapOnShippingIntent"
          color: BLUE
 # ----------------------------------------------------------------------------------------------------------------   
 # Description: This function click on address button GIC on the home page.
  # No Param       
  - name: functions.homePage.gic.taponAddressbutton
    flow:
       - verifyIdentifier:
            present:
                - identifier: homepage.gic.addressLink
       - click:
            identifier:  homepage.gic.addressLink
       - log:
          message: "End function: homePage.gic.taponAddressbutton"
          color: BLUE                
# ----------------------------------------------------------------------------------------------------------------   
 # Description: This function verify address bottom sheet in home page
  # No Param       
  - name: functions.homePage.gic.verifyAddressBottomSheet
    flow:
      - verifyIdentifier:
          present:
            - identifier: selectAddressPage.title
            - identifier: reserveATime.selectFirstAddress
            - identifier: selectAddressPage.continuebutton
            - identifier: selectAddressPage.editLink
      - log:
         message: "End function: homePage.gic.verifyAddressBottomSheet"
         color: BLUE                

  # ----------------------------------------------------------------------------------------------------------------
  # Description: Verify GIC is expanded
  # No Param
  - name: functions.homePage.gic.verifyGICIsExpanded
    flow:
      - verifyIdentifier:
          present:
            - identifier: homePage.gic.expandedIcon
            - identifier: homepage.gic.intentOptionsContainer
            - identifier: homepage.gic.animatedContainer
      - log:
          message: "✓ GIC is expanded"
          color: GREEN_BOLD
      - log:
          message: "End function: homePage.gic.verifyGICIsExpanded"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------
  # Description: Verify GIC is not expanded
  # No Param
  - name: functions.homePage.gic.verifyGICIsNotExpanded
    flow:
      - verifyIdentifier:
          notPresent:
            - identifier: homePage.gic.expandedIcon
            - identifier: homepage.gic.intentOptionsContainer
            - identifier: homepage.gic.animatedContainer
      - log:
          message: "✓ GIC is not expanded"
          color: GREEN_BOLD
      - log:
          message: "End function: homePage.gic.verifyGICIsNotExpanded"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------
  # Description: Assert expected delivery address is displayed in GIC
  # Params:   ${expectedDeliveryName}      [Required]  Expected delivery address name.
  # Params:   ${expectedDeliveryAddress}   [Required]  Expected delivery address.
  - name: functions.homePage.gic.assertDeliveryAddressIsDisplayed
    flow:
      - executeFunction:
          name: functions.homePage.gic.expandIfCollapsed    
      - if:
          condition: ${platform} == 'Android'
          then:
            - verifyIdentifier:
                text:
                  - identifier: homepage.gic.deliveryName
                    contains: ${expectedDeliveryName}
            - verifyIdentifier:
                text:
                  - identifier: homepage.gic.deliveryAddress
                    contains: ${expectedDeliveryAddress}
          else:
            - verifyIdentifier:
                label:
                  - identifier: homepage.gic.deliveryName
                    contains: ${expectedDeliveryName}
            - verifyIdentifier:
                label:
                  - identifier: homepage.gic.deliveryAddress
                    contains: ${expectedDeliveryAddress}
      - log:
          message: "✓ Delivery address is displayed in GIC. Name: ${expectedDeliveryName}, Address: ${expectedDeliveryAddress}"
          color: GREEN_BOLD
      - log:
          message: "End function: homePage.gic.assertDeliveryAddressIsDisplayed"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------
  # Description: Assert expected store is displayed in GIC
  # Params:   ${expectedStoreName}      [Required]  Expected store name.
  # Params:   ${expectedStoreAddress}   [Required]  Expected store address.
  - name: functions.homePage.gic.assertStoreIsDisplayed
    flow:
      - if:
          condition: ${platform} == 'Android'
          then:
            - verifyIdentifier:
                text:
                  - identifier: homepage.gic.storeName
                    contains: ${expectedStoreName}
            - verifyIdentifier:
                text:
                  - identifier: homepage.gic.storeAddress
                    contains: ${expectedStoreAddress}
          else:
            - verifyIdentifier:
                label:
                  - identifier: homepage.gic.storeName
                    contains: ${expectedStoreName}
            - verifyIdentifier:
                label:
                  - identifier: homepage.gic.storeAddress
                    contains: ${expectedStoreAddress}
      - log:
          message: "✓ Store is displayed in GIC. Name: ${expectedStoreName}, Address: ${expectedStoreAddress}"
          color: GREEN_BOLD
      - log:
          message: "End function: homePage.gic.assertStoreIsDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function selects delivery address section from gic
  # No params
  - name: homePage.gic.selectDeliveryAddressOption
    flow:
      - click:
          identifier: homepage.gic.deliveryName
      - log:
          message: "End functions: gic.selectDeliveryAddressOption"
          color: BLUE
 #--------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------
  # Description: This function tap on banner in homepage
  # No params
  - name: functions.homePage.browsePage.tapOnBanner
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: homepage.browsePage.additionalBanner
          then:
            - scroll:
                direction: down
                untilIdentifier: homepage.browsePage.additionalBanner
      - click:
          identifier: homepage.browsePage.additionalBanner
      - log:
          message: "End functions: homePage.browsePage.tapOnBanner"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate given carrousel doesn't exist
  # Params:   ${carouselName}   [Required] Carousel name to search for.
  - name: functions.homePage.validateCarouselDoesNotExist
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.carouselName # <--PARAM--${carouselName}
          then:
              - failTest:
                  message: "[x] Carousel with title: ${carouselName} found"
          else:
              - log: 
                  message: "Scrolling down to: '${carouselName}'"
                  color: CYAN
              - scroll:
                  direction: down
                  wait: 1000
                  untilIdentifier: homePage.carouselName # <--PARAM--${carouselName}
                  position: center
                  scrollLimit: 10
              - if: 
                  identifier:
                    notPresent:
                      - identifier: homePage.carouselName # <--PARAM--${carouselName}
                  then:
                      - log:
                          message: "[✓] Carousel with title: ${carouselName} not found"
                          color: GREEN_BOLD
                  else: 
                    - failTest:
                        message: "[x] Carousel with title: ${carouselName} found"
      - log:
          message: "End Function: homePage.validateCarouselDoesNotExist"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate given carrousel exists
  # Params:   ${carouselName}   [Required] Carousel name to search for.
  - name: functions.homePage.validateCarouselExists
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.carouselName # <--PARAM--${carouselName}
          then:
              - log:
                  message: "[✓] Carousel with title: ${carouselName} found"
                  color: GREEN_BOLD
          else:
              - log: 
                  message: "Scrolling down to: '${carouselName}'"
                  color: CYAN
              - scroll:
                  direction: down
                  wait: 1000
                  untilIdentifier: homePage.carouselName # <--PARAM--${carouselName}
                  position: center
                  scrollLimit: 10
              - if: 
                  identifier:
                    present:
                      - identifier: homePage.carouselName # <--PARAM--${carouselName}
                  then:
                      - log:
                          message: "[✓] Carousel with title: ${carouselName} found"
                          color: GREEN_BOLD
                  else: 
                    - failTest:
                        message: "[x] Carousel with title: ${carouselName} not found"
      - log:
          message: "End Function: homePage.validateCarouselExists"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------
  # Description: This function reloads order details page by swipping/dragging up 

  - name: functions.homePage.refreshPage
    flow:
      - scroll:
          direction: up
          untilIdentifier: homePage.firstIdentifiableElement
      - drag:
          from:
            x: 50%
            y: 40%
          to:
            x: 50%
            y: 80%
          longPress: true
          longPressDuration: 5000
      - sleep:
          duration: 10000
      - log:
          message: "End function: homePage.refreshPage"
          color: BLUE

  # ----------------------------------------------------------------------------------------------------------------
  # Description: This function will validate a product name and price is displayed correctly in carousel
  # Params      ${carouselName}         Name of the carousel product is expected to be displayed in.
  # Params      ${productDetailsArray}  Details of the product to assert.
  - name: functions.homePage.carousel.validateItemDetails
    flow:
      - executeFunction:
          name: functions.homePage.validateCarouselExists
          params:
            - name: carouselName
              string: ${carouselName}

      - executeFunction:
          name: functions.utils.javascript.getProductDetails  #return -> productName, actualPrice, productQty
          params:
            - name: productDetailsArray
              string: ${productDetailsArray}
            - name: index
              string: "0"

      - verifyIdentifier:
          present:
            - identifier: homePage.carousel.productByName
            - identifier: homePage.carousel.productPriceByName
      - log:
          message: "[✓] Product is present in carousel. Carousel name: ${carouselName}, Product name: ${productName}"
          color: GREEN_BOLD
      - if:
          condition: ${platform} == 'Android'
          then:
            - verifyIdentifier:
                text:
                  - identifier: homePage.carousel.productPriceByName
                    contains: ${productPrice}
          else:
            - verifyIdentifier:
                label:
                  - identifier: homePage.carousel.productPriceByName
                    contains: ${productPrice}
      - log:
          message: "[✓] Expected product price is displayed in carousel. Product name: ${productName}, Expected price: ${productPrice}"
          color: GREEN_BOLD

      - log:
          message: "End Function: homePage.carousel.validateItemDetails"
          color: BLUE


 #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate OST block appears. 
  # No params

  - name: functions.homePage.validateOSTExistence
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.OSTCardLayout
          then:
              - log:
                  message: "[✓] Order Status Tracker block found"
                  color: GREEN_BOLD
          else:
              - failTest:
                  message: "[x] Order Status Tracker block not found"
      - log:
          message: "End Function: homePage.validateOSTBlock"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: Validate the details of an item's tile in a carousel. 
  # Params: 
  #     {carouselName}  [Mandatory] Name of the carousel 
  #     {_count}  [Mandatory] Index of the element

  - name: functions.homePage.validateCarouselTileDetails
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.carouselProductName # <- ${carouselName} ${_count}
              - identifier: homePage.carouselProductPrice # <- ${carouselName} ${_count}
              - identifier: homePage.carouselProductImage # <- ${carouselName}
          then:
              - log:
                  message: "[✓] Details in the item tile appear correctly."
                  color: GREEN_BOLD
          else:
              - failTest:
                  message: "[x] There was a problem while trying to verify the tile details."
      - log:
          message: "End Function: homePage.validateCarouselTileDetails"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function taps favourites from homepage
  # Param: ${productName}  [Mandatory]  Name of the product to be added to Lists.
  - name: functions.homePage.addToListsByName  
    flow:
      - click:
          identifier: homePage.tapAddToListsIcon     # Mappings need to be updated
      - log:
          message: "End functions: homePage.addToLists"
          color: BLUE

 # ----------------------------------------------------------------------------------------------------------------
  # Description: This function adds an item to cart using the name of the item. 
  # Params:
  #     ${productName}  Name of the item to scroll to and add to cart.
  - name: functions.homePage.addToCartByName
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.addToCartBtn.productByName # <- ${productName}
          then:
            - log:
                message: "Found product: ${productName}"
                color: CYAN
            - click:
                identifier: homePage.addToCartBtn.productByName # <- ${productName}
                wait: 2000
          else:
            - scroll:
                direction: down
                untilIdentifier: homePage.addToCartBtn.productByName # <- ${productName}
                scrollLimit: 18
            - if:
                identifier:
                  present:
                    - identifier: homePage.addToCartBtn.productByName # <- ${productName}
                then:
                  - log:
                      message: "Found product: ${productName}"
                      color: CYAN
                  - click: 
                      identifier: homePage.addToCartBtn.productByName # <- ${productName}
                      wait: 2000
                else:
                  - log:
                      message: "Product: ${productName} not found"
      - log:
          message: "End function: homePage.addToCartByName"
          color: BLUE     
   

  # ----------------------------------------------------------------------------------------------------------------          
  # Description: This function Clicks on gic Button if displayed
  # No Param
  - name: functions.homePage.gic.tapGotItBtnIfDisplayed 
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.gic.gotItBtn
          then:
            - click:
                identifier: homePage.gic.gotItBtn
                wait: 2000
      - log:
          message: "End function: homePage.gic.tapGotItBtnIfDisplayed"
          color: BLUE   

  # ----------------------------------------------------------------------------------------------------------------          
  # Description: This function Clicks on "Try again if there is an error in home Page"
  # No Param
  - name: functions.homePage.dismissTechnicalErrorIfDisplayed 
    flow:
      - if:
          identifier:
            present:
              - identifier: homePage.technicalErrorDismissButton
          then:
            - click:
                identifier: homePage.technicalErrorDismissButton
      - log:
          message: "End function: homePage.dismissTechnicalErrorIfDisplayed"
          color: BLUE   
