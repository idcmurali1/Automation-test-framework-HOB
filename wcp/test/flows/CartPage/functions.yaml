functions:

  #--------------------------------------------------------------------------------------------------------------------
  # Description: The function searche for products based on the input criteria (SKU, keywords, name, or category) 
  #              provided as an array. The function then iterates over each element in the array and adds the first 
  #              product that has an 'Add to Cart' button to the cart.
  # Params:      ${productDetailsArray}  [Mandatory]  Search product using array.
  - name: functions.cartPage.validateProductDetailsUsingShoppingListArray
    flow:
      - executeFunction:
          name: functions.utils.javascript.getArrayLength  #return -> getArrayLength
          params:
            - name: productDetailsArray
              string: ${productDetailsArray}
      - loop:
          begin: 0
          end: ${getArrayLength}
          storeIndex: index
          flow:
            - executeFunction:
                name: functions.utils.javascript.getProductDetails  #return -> productName, actualPrice, productQty
                params:
                  - name: productDetailsArray
                    string: ${productDetailsArray}
            - executeFunction:
                name: functions.cartPage.validateProductDetails
                params:
                  - name: productName
                    string: ${productName}
                  - name: productPrice
                    string: ${actualPrice}
                  - name: productQty
                    string: ${productQty}
      - log:
          message: "End Functions: cartPage.validateProductDetailsUsingShoppingListArray"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function verifies that user gets a list of addresses upon tapping the Shipping address link in Cart Page
  # No Parameters required
  - name: functions.cartPage.verifyAddressList
    flow:
      - executeFunction:
          name: functions.cartPage.tapOnAddressLink
      - if:
          identifier:
            present:
              - identifier: cartPage.addressListHeader
          then:
            - log: "Address list displayed after tapping on address link in Cart Page as expected"
            - executeFunction:
                name: functions.cartPage.dismissAddressSelectorPage
      - log:
          message: "End Function: functions.cartPage.verifyAddressList"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function selects and saves address in the address selector bottomsheet
  # No Params
  # Returns:     ${returnedSelectedAddressName}  The name of the selected Address.
  #              ${returnedSelectedAddress}      The selected address.    
  - name: functions.cartPage.saveAddressFromList
    flow:
      - click:
          identifier: cartPage.addressList.firstAddress
      - if:
          condition: ${platform} == 'Android'
          then:
            - getString:
                identifier: cartPage.addressList.firstAddress
                attribute: text
                storeIn: returnedSelectedAddress
            - getString:
                identifier: cartPage.addressList.firstAddress.name
                attribute: text
                storeIn: returnedSelectedAddressName
          else:
            - getString:
                identifier: cartPage.addressList.firstAddress
                storeIn: returnedSelectedAddress
            - getString:
                identifier: cartPage.addressList.firstAddress.name
                storeIn: returnedSelectedAddressName
      - log:
          message: "Selected Address Name: '${returnedSelectedAddressName}'"
          color: CYAN
      - log:
          message: "Selected Address: '${returnedSelectedAddress}'"
          color: CYAN
      - click:
          identifier: reserveATime.saveAddress
      - log:
          message: "End Function: functions.cartPage.saveAddressFromList"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # Description: This function validate add address panel for new user in cart page
  # No param 
  - name: functions.cartPage.validateAddAddressPanel
    flow:
      - executeFunction:
          name: functions.cartPage.addAddressPanel.isPageDisplayed
      - if:
          condition: '!${returnedIsDisplayed}'
          then: 
            - log:
                message: "End Functions: Add address panel is not dispalyed in cart page"
          else:
            - executeFunction:
                name: functions.cartPage.validateAddAddressPanelText
      - log:
          message: "End Functions: cartPage.validateAddAddressPanel"
          color: GREEN_BOLD

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switch from delivery to pickup selecting the first available store
  # No param
  # Return cartPage.fulfillmentType
  - name: functions.cartPage.switchDeliveryToPickup
    flow: 
      - if:
          condition: ${cartPage.fulfillmentType} == 'Delivery' #Delivery means shipping in the U.S. market.
          then:
            - if: 
                identifier:
                  present:
                    - identifier: cartPage.selectPickupBtn
                then:
                    - executeFunction:
                        name: functions.cartPage.tapOnPickUpButton
                    - sleep:
                        duration: 5000
                    - if:
                        condition: ${market}!= 'US' 
                        then:    
                            - executeFunction:
                                name: functions.selectStorePage.tapFirstStoreForPickup
                            - executeFunction:
                                name: functions.selectStorePage.tapOnSaveButton
                            - if:
                                condition: ${market} == 'MX' || ${market} == 'MX-Bodega'
                                then:
                                  - executeFunction:
                                      name: functions.cartPage.verifyDeliveryButtonIsDisplayed
                    - storeIn:
                        key: cartPage.fulfillmentType  # << Update fulfillment type after changing the fufillment to pick up,
                        value: Pickup
                        
      - log:
          message: "End Functions: cartPage.switchDeliveryToPickup"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the displayed Cart Quantity.
  # Params:      ${expectedQuantity}  [Mandatory]  Expected Quantity to be displayed.
  - name: functions.cartPage.assertCartQuantity
    flow:
      - log:
          message: "Expected Quantity: '${expectedQuantity}'"
          color: CYAN
      - scroll:
          direction: down
          untilIdentifier: cartPage.POSContainer
          scrollLimit: 7
          position: center
      - if:
          condition: ${platform} == 'Android'
          then:
            - getString:
                identifier: cartPage.POSSection.quantityLabel
                attribute: text
                storeIn: displayedQuantity
          else:
            - getString:
                identifier: cartPage.POSSection.quantityLabel
                storeIn: displayedQuantity
      - log:
          message: "Displayed Quantity: '${displayedQuantity}'"
          color: CYAN
      - try:
          flow:
            - if:
                condition: ${platform} == 'Android'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: cartPage.POSSection.quantityLabel
                          contains: ${expectedQuantity} 
                else:
                  - verifyIdentifier:
                      label:
                        - identifier: cartPage.POSSection.quantityLabel
                          contains: ${expectedQuantity} 
            - log:
                message: âœ“ Displayed Quantity '${displayedQuantity}' contains Expected Quantity '${expectedQuantity}'.
                color: GREEN_BOLD
          catch:
            flow:
              - failTest:
                  message: X Displayed Quantity '${displayedQuantity}' doesn't contain Expected Quantity '${expectedQuantity}'.
      - log:
          message: "End function: functions.cartPage.assertCartQuantity"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the displayed Cart Totals (Sub Total and Estimated Total).
  # Params:      ${expectedSubTotal}      [Mandatory]  Expected Sub Total to be displayed.
  #              ${assertEstimatedTotal}  [Optional]   Whether to assert the Estimated Total or not. If 'null' or 'false'
  #                                                       the Estimated Total will not be asserted. If 'true', the function
  #                                                       will determine from what is displayed in the page, if there are
  #                                                       additional fees that must be incremented or decremented from the
  #                                                       Sub Total (like shipping fees, discounts, etc.) to calculate the
  #                                                       Estimated Total to be asserted.
  - name: functions.cartPage.assertCartTotals
    flow:
      - log:
          message: "Expected Sub Total: '${expectedSubTotal}'"
          color: CYAN
      - executeNode:
          file: wcp/test/helpers/CartPage/beautifyPrice.js
          args:
            - value: ${expectedSubTotal}
            - value: forCart
            - value: ${platform}
          getResponse:
            storeIn: expectedSubTotalBeautified
      - log:
          message: "Expected Sub Total: '${expectedSubTotalBeautified}'"
          color: CYAN
      - if:
          condition: ${platform} == 'Android'
          then:
            - getString:
                identifier: cartPage.POSSection.subtotalValue
                attribute: text
                storeIn: displayedSubTotal
          else:
            - if:
                identifier:
                  present:
                    - identifier: cartPage.POSSection.subtotalValue.whenOriginalSubtotalIsStrikethrough
                  timeout: 2000
                then:
                  - getString:
                      identifier: cartPage.POSSection.subtotalValue.whenOriginalSubtotalIsStrikethrough
                      storeIn: displayedSubTotal
                else:
                  - getString:
                      identifier: cartPage.POSSection.subtotalValue
                      storeIn: displayedSubTotal
      - log:
          message: "Displayed Sub Total: '${displayedSubTotal}'"
          color: CYAN
      - try:
          flow:
            - if:
                condition: ${platform} == 'Android'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: cartPage.POSSection.subtotalValue
                          contains: ${expectedSubTotalBeautified}
                else:
                  - if:
                      identifier:
                        present:
                          - identifier: cartPage.POSSection.subtotalValue.whenOriginalSubtotalIsStrikethrough
                        timeout: 2000
                      then:
                        - verifyIdentifier:
                            label:
                              - identifier: cartPage.POSSection.subtotalValue.whenOriginalSubtotalIsStrikethrough
                                contains: ${expectedSubTotalBeautified}
                      else:
                        - verifyIdentifier:
                            label:
                              - identifier: cartPage.POSSection.subtotalValue
                                contains: ${expectedSubTotalBeautified}
            - log:
                message: âœ“ Displayed Sub Total '${displayedSubTotal}' contains Expected Sub Total '${expectedSubTotalBeautified}'.
                color: GREEN_BOLD
          catch:
            flow:
              - failTest:
                  message: X Displayed Sub Total '${displayedSubTotal}' doesn't contain Expected Sub Total '${expectedSubTotalBeautified}'.
      - if:
          condition: ${assertEstimatedTotal} != "null" && ${assertEstimatedTotal}
          then:
            - log:
                message: Asserting Estimated Total (assertEstimatedTotal = true)...
                color: GREEN
            # Look for Shipping Fees...
            - if: 
                condition: ${market} == 'CA' && ${displayedSubTotal} < '$35'
                then:
                  - if:
                      condition: ${platform} == 'Android'
                      then:
                        - getString:
                            identifier: cartPage.POSSection.belowOrderMinFeeValue
                            attribute: text
                            storeIn: displayedBelowOrderMinFee
                            extractNumbers: true
                      else:
                        - getString:
                            identifier: cartPage.POSSection.belowOrderMinFeeValue
                            storeIn: displayedBelowOrderMinFee
                            extractNumbers: true  
                else:
                  - storeIn:
                      key: displayedBelowOrderMinFee
                      value: 0
                  - log:
                      message: "No Below Order min Fee found: '0'"
                      color: CYAN       
            - if:
                condition: ${market} == 'MX'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: cartPage.POSSection.shippingFeeValue
                  - if:
                      condition: ${platform} == 'Android'
                      then:
                        - getString:
                            identifier: cartPage.POSSection.shippingFeeValue
                            attribute: text
                            storeIn: displayedShippingFee
                            extractNumbers: true
                      else:
                        - getString:
                            identifier: cartPage.POSSection.shippingFeeValue
                            storeIn: displayedShippingFee
                            extractNumbers: true
                  - log:
                      message: "Shipping Fee found: '${displayedShippingFee}'"
                      color: CYAN
                else:
                  - storeIn:
                      key: displayedShippingFee
                      value: 0
                  - log:
                      message: "No Shipping Fee found: '0'"
                      color: CYAN

            - if:
                identifier:
                  present:
                    - identifier: cartPage.POSSection.FreightShippingFeeValue
                then:
                  - if:
                      condition: ${platform} == 'Android'
                      then:
                        - getString:
                            identifier: cartPage.POSSection.FreightShippingFeeValue
                            attribute: text
                            storeIn: displayedFreightShippingFee
                            extractNumbers: true
                      else:
                        - getString:
                            identifier: cartPage.POSSection.FreightShippingFeeValue
                            storeIn: displayedFreightShippingFee
                            extractNumbers: true
                  - log:
                      message: "Shipping Fee found: '${displayedFreightShippingFee}'"
                      color: CYAN  
                else:
                  - storeIn:
                      key: displayedFreightShippingFee
                      value: 0
                  - log:
                      message: "No Freight Shipping Fee found: '0'"
                      color: CYAN              
            # Look for Discounts...
            # TODO: add similar IF to detect if there are discounts to extract the value for the Estimated Total calculation. Meanwhile, hardcode to 0.
            - storeIn:
                key: displayedDiscounts
                value: 0
            - log:
                message: "No Discounts found: '0'"
                color: CYAN
            # Calculate Estimated Total...
            - arithmetic:
                expression: ${expectedSubTotal} + ${displayedBelowOrderMinFee} + ${displayedShippingFee} + ${displayedFreightShippingFee} - ${displayedDiscounts}
                storeIn: expectedEstimatedTotal
                numberOfDecimalPlaces: 2
            - executeNode:
                file: wcp/test/helpers/CartPage/beautifyPrice.js
                args:
                  - value: ${expectedEstimatedTotal}
                  - value: forCart
                  - value: ${platform}
                getResponse:
                  storeIn: expectedEstimatedTotal
            - log:
                message: "Expected Estimated Total: '${expectedEstimatedTotal}'"
                color: CYAN
            # Assert Estimated Total in POS Section...
            - if:
                condition: ${platform} == 'Android'
                then:
                  - getString:
                      identifier: cartPage.POSSection.estimatedTotalValue
                      attribute: text
                      storeIn: displayedEstimatedTotal
                else:
                  - getString:
                      identifier: cartPage.POSSection.estimatedTotalValue
                      storeIn: displayedEstimatedTotal
            - log:
                message: "Displayed Estimated Total: '${displayedEstimatedTotal}'"
                color: CYAN
            - try:
                flow:
                  - if:
                      condition: ${platform} == 'Android'
                      then:
                        - verifyIdentifier:
                            text:
                              - identifier: cartPage.POSSection.estimatedTotalValue
                                contains: ${expectedEstimatedTotal}
                      else:
                        - verifyIdentifier:
                            label:
                              - identifier: cartPage.POSSection.estimatedTotalValue
                                contains: ${expectedEstimatedTotal}
                  - log:
                      message: âœ“ Displayed Estimated Total (in POS section) '${displayedEstimatedTotal}' contains Expected Estimated Total '${expectedEstimatedTotal}'.
                      color: GREEN_BOLD
                catch:
                  flow:
                    - failTest:
                        message: X Displayed Estimated Total (in POS section) '${displayedEstimatedTotal}' doesn't contain Expected Estimated Total '${expectedEstimatedTotal}'.
            # Assert Estimated Total above Continue Button...
            - if:
                condition: ${platform} == 'Android'
                then:
                  - getString:
                      identifier: cartPage.grandTotalValue
                      attribute: text
                      storeIn: displayedEstimatedTotal
                else:
                  - getString:
                      identifier: cartPage.grandTotalValue
                      storeIn: displayedEstimatedTotal
            - log:
                message: "Displayed Estimated Total: '${displayedEstimatedTotal}'"
                color: CYAN
            - try:
                flow:
                  - if:
                      condition: ${platform} == 'Android'
                      then:
                        - verifyIdentifier:
                            text:
                              - identifier: cartPage.grandTotalValue
                                contains: ${expectedEstimatedTotal}
                      else:
                        - verifyIdentifier:
                            label:
                              - identifier: cartPage.grandTotalValue
                                contains: ${expectedEstimatedTotal}
                  - log:
                      message: âœ“ Displayed Estimated Total (above Continue button) '${displayedEstimatedTotal}' contains Expected Estimated Total '${expectedEstimatedTotal}'.
                      color: GREEN_BOLD
                catch:
                  flow:
                    - failTest:
                        message: X Displayed Estimated Total (above Continue button) '${displayedEstimatedTotal}' doesn't contain Expected Estimated Total '${expectedEstimatedTotal}'.
      - log:
          message: "End function: functions.cartPage.assertCartTotals"
          color: BLUE


#--------------------------------------------------------------------------------------------------------------------  
  # Description: This function scrolls down to the moneybox section from top and validte the reduced/strikethrough price and no shipping charge
  - name: functions.cartPage.validateReducedPriceAndNoShippingCharge
    flow:
      - executeFunction:
          name: functions.cartPage.scrollDownToPOS
      - executeFunction:
          name: functions.cartPage.pos.validateReducedPrice
      - executeFunction:
          name: functions.cartPage.pos.validateNoShippingCharge          
      - log:
          message: "End function: cartPage.validateReducedPriceAndNoShippingCharge"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function removes all items from the user's cart (regular + OOS). It opens the cart and then 
  #              while the 'Start Shopping' button is not displayed it removes the items one by one. Once the cart is
  #              cleared, it clicks the 'Start Shopping' button to return to Home Page.
  # No Params
  - name: functions.cartPage.clearCart
    flow:
      - executeFunction:
          name: functions.global.tapCartIcon
      - executeFunction:
          name: functions.cartPage.dismissUnavailableItemPopUpIfDisplayed
      - executeFunction:
          name: functions.searchPage.handle3PPickupBottomSheet
      - executeFunction:
          name: function.cartPage.tapSeeDetails
      - executeFunction:
          name: functions.cartPage.removeRegularAndOOSItems/loop
      - executeFunction:
          name: functions.cartPage.verifyCartClearedSuccessfully
      - sleep:
          duration: 15000
      - executeFunction:
          name: functions.cartPage.verifyStartShoppingBtnIsDisplayed
      - executeFunction:
          name: functions.cartPage.tapStartShoppingBtn
      - log:
          message: "End function: cartPage.clearCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function removes all Regular and OOS items from Cart one by one while there is any displayed.
  # No Params
  - name: functions.cartPage.removeRegularAndOOSItems/loop
    flow:
      - storeIn:
          key: maxLoopRetries
          value: data.global.maxLoopRetries.forClearCartFunction
      - loop:
          begin: 0
          end: ${maxLoopRetries}
          storeIndex: index
          flow:
            - log:
                message: Trying to remove item ${index}...
                color: GREEN
            # Dismiss Smart Nudge if displayed...
            - executeFunction:
                name: functions.cartPage.dismissSmartNudgeView.ifDisplayed
            # Remove item if any...
            - try:
                flow:
                  # - executeFunction:
                  #     name: functions.cartPage.scrollDownToRemoveBtn
                  - executeFunction:
                      name: functions.cartPage.tapRemoveBtn
                  - log:
                      message: âœ“ Item removed. Loop will continue looking for more items to remove.
                      color: GREEN
                catch:
                  flow:
                    - log:
                        message: "! No items found to remove. Process will continue."
                        color: GREEN
                    - break: true
      - log:
          message: "End function: functions.cartPage.removeRegularAndOOSItems/loop"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function verifies if Cart is Cleared successfully.
  # No Params
  - name: functions.cartPage.verifyCartClearedSuccessfully
    flow:
      - scroll:
          direction: up
          untilIdentifier: cartPage.startShoppingBtn
          position: center
          scrollLimit: 1
      - if:
          identifier:
            present:
              - identifier: cartPage.startShoppingBtn
            timeout: 2000
          then:
            - log:
                message: âœ“ Cart already cleared or cleared successfully.
                color: GREEN_BOLD
          else:
            - failTest:
                message: X There are no more items to remove, but the 'Start Shopping' button didn't display either. It seems the Cart wasn't cleared properly.
      - log:
          message: "End function: functions.cartPage.verifyCartClearedSuccessfully"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: validate bank promotion bottom sheet
  - name: functions.cartPage.validateBankPromotionBottomSheet
    flow:
      - executeFunction:
          name: functions.cartPage.navigateToBankPromationBottomSheet      
      - executeFunction:
          name: functions.global.bankPromationBottomSheet.validateIsDisplayed
      - log:
            message: "End function: cartPage.validateBankPromotionBottomSheet"
            color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switch from Pickup To Delivery 
  # No param
  # Return cartPage.fulfillmentType
  - name: functions.cartPage.switchPickupToDelivery
    flow: 
      - if:
          condition: ${cartPage.fulfillmentType} == 'Pickup'
          then:
            - executeFunction:
                name: functions.cartPage.tapDeliveryOption  # Delivery means shipping in the U.S. market.
            - storeIn:
                  key: cartPage.fulfillmentType  # << Update fulfillment type after changing the fufillment to delivery,
                  value: Delivery
      - log:
          message: "End Functions: cartPage.switchPickupToDelivery"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
   
  # Description: This function used to validate Cart Empty after place Order
  # No Param
  - name: functions.cartPage.cartEmptyAfterPlaceOrder
    flow:
      - executeFunction:
          name: functions.thankYouPage.tapOnContinueShoppingButton
      - executeFunction:
          name: functions.global.tapCartIcon
      - if:
          identifier:
            present:
              - identifier: cartPage.startShoppingBtn
          then:
            - executeFunction:
                name: functions.cartPage.tapStartShoppingBtn
      - log: 
          message: "End function: cartPage.cartEmptyAfterPlaceOrder"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function validates the benefits in POS 
  # Params:      ${userType}              [Mandatory]  Type of user if it is Regular OR Delivery Pass.
  #              ${fulfillment}           [Mandatory]  Type of fulfillment, can be Unschedule Delivery, Schedule Delivery, Unschedule Pickup, Schedule Pickup.
  #              ${feeLabel}              [Mandatory]  The label which should be displayed.
  #              ${feeValue}              [Mandatory]  The value of the fee we are expecting to be displayed.
  - name: functions.cartPage.validatePOSBenefits
    flow:
      - executeFunction:
          name: functions.cartPage.scrollDownToPOS
      - executeFunction:
          name: functions.cartPage.assertCartSubtotal.notNull  # Returns -> ${cleanSubtotalValue}
      - if: 
          condition: ${cleanSubtotalValue} < 35 
          then:
            - executeFunction:
                name: functions.cartPage.moneyBox.feeValidation  # <- ${feeLabel} ${feeValue}
          else:
            - executeFunction:
                name: functions.cartPage.moneyBox.assertFeeNotPresent  # <- ${feeLabel} ${feeValue}
      - if:
          condition: ${fulfillment} == 'Schedule Delivery'
          then:
            - if:
                condition: ${userType} == 'Regular'
                then:
                  - executeFunction:
                      name: functions.cartPage.validateScheduleDeliveryFeeIsDisplayed
                else:
                  - executeFunction:
                      name: functions.cartPage.validateScheduleDeliveryPriceIsWaivedOff
      - log: 
          message: "End function: cartPage.validatePOSBenefits"
          color: BLUE

#-------------------------------------------------------------------------------------------------------

# Description: This function validates financing options against all the four financing condition.
  # No params
  - name: functions.cartPage.verifyFinancingOptions
    flow:
      - executeFunction:
          name: functions.cartPage.assertCartSubtotal.notNull 
      - if:
          condition: ${cleanSubtotalValue} < 199 && ${cleanSubtotalValue} >= 50
          then: 
            - log: 
                message: Product price is between $50-$199 | Validating only klarna details are displayed.
                color: GREEN_BOLD
            - executeFunction:
                name: functions.cartPage.validateKlarnaDetailsOnHeader
      - if:
          condition: ${cleanSubtotalValue} < 3000 && ${cleanSubtotalValue} >= 199
          then:
            - log:
                message: Product price is between $199-$3000 | Validating both klarna and sales financing details are displayed.
                color: GREEN_BOLD
            - executeFunction:
                name: functions.cartPage.validateKlarnaDetailsOnHeader
            - executeFunction:
                name: functions.cartPage.validateSalesFinancingDetailsOnHeader   
            
      - if:
          condition: ${cleanSubtotalValue} > 3000
          then:
            - log:
                message: Product price is above $3000 | Validating only sales financing details are displayed.
                color: GREEN_BOLD
            - executeFunction:
                name: functions.cartPage.validateSalesFinancingDetailsOnHeader
      - if:
          condition: ${cleanSubtotalValue} < 50
          then:
            - log:
                message: Product price is below $50 | Validating either klarna or sales financing details are displayed.
                color: GREEN_BOLD
            - executeFunction:
                name: functions.cartPage.validateNoFinancingDetailsDisplayed
      - log:
          message: "End functions: cartPage.verifyFinancingOptions"
          color: BLUE


  # Description: This function amends an order from cart screen
  # No Param
  - name: functions.cartPage.amendOrderFromCart
    flow:
      - executeFunction:
          name: functions.cartPage.validateAmendsBanner
        
      - executeFunction:
          name: functions.cartPage.validateAmendsCartCta
        
      - executeFunction:
          name: functions.cartPage.amendOrder
        
      - executeFunction:
          name: functions.cartPage.validateAmendsSuccessMsg
  
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function validates the express in POS 
  # Params expectedbelowOrderMinFee
  - name: functions.cartPage.validatebelowMinFeeAndExpressSlotFee
    flow:
      - executeFunction:
          name: functions.cartPage.scrollDownToPOS
      - executeFunction:
          name: functions.cartPage.validateBelowMinimumFee
      # Prod Pending: Validate express delivery fee when change to DP accounts
      - if:
          condition: ${environment} == 'Teflon'
          then:
            - executeFunction:
                name: functions.cartPage.DPuserValidateExpressScheduleDeliveryFee
      - log: 
          message: "End function: cartPage.validatebelowMinFeeAndExpressSlotFee"
          color: BLUE

  - name: functions.cartPage.ValidateDigitalDelivery
    flow:
      - executeFunction:
          name: functions.cartPage.validateDigitalDeliveryBadgeIsDisplayed
      - executeFunction:
          name: functions.cartPage.validateDigitalDeliveryFullfillmentTextIsDisplayed      
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function is used to change store after selecting pickup instaed option
  # Params  [Mandatory]  ${Zip_Code} Enter the zipcode 
  # Params  [Mandatory]  ${storeName} Enter name of the store   
  - name: functions.cartPage.switchToPickup.changeStore
    flow:
      - executeFunction:
          name: functions.cartPage.tapOnPickUpButton
      - executeFunction:
          name: functions.selectStorePage.assertPageDisplayed
      - executeFunction:
          name: functions.selectStorePage.enterZipcode # <-- ${Zip_Code}
      - executeFunction:
          name: functions.selectStorePage.selectStore  # <-- ${storeName}
      - executeFunction:
            name:  functions.selectStorePage.tapOnSaveButton   
      - log: 
          message: "End function: cartPage.switchToPickup.changeStore"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This flow edits delivery address from cart page
  # ${streetAddress} [Mandatory] Enter street address
  - name: functions.cartPage.editDeliveryAddress
    flow:
      - executeFunction:
          name: functions.cartPage.tapOnAddressLink
      - executeFunction:
          name: functions.addAddressBottomSheet.tapOnEditLink
      - executeFunction:
          name: functions.addAddressPage.scrollUpToDeliveryAddressFirstName          
      - executeFunction:
          name: functions.addAddressPage.enterStreetAddress  # < -- ${streetAddress}
      - executeFunction:
          name: functions.utils.hideKeyboard
      - executeFunction:
          name: functions.addAddressPage.selectColonia # <-- ${coloniaName}
          params:
            - name: coloniaName
              string: data.defaultAddress.coloniaName         
      - executeFunction:
          name: functions.addAddressPage.tapSaveButton
      - executeFunction:
          name: functions.addAddressPage.confirmExactLocationOnMap      
      - executeFunction:
              name: functions.addAddressBottomSheet.tapOnContinueButton
      - sleep:
         duration: 5000          
      - log: 
          message: "End function: cartPage.editDeliveryAddress"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------          
  # Description: This flow is used to select second address from cart page
  # No Param
  - name: functions.cartPage.selectSecondDeliveryAddress
    flow:
      - executeFunction:
          name: functions.cartPage.tapOnAddressLink
      - executeFunction:
          name: functions.addAddressPage.selectSecondAddress
      - executeFunction:
          name: functions.addAddressBottomSheet.tapOnContinueButton  
      - log: 
          message: "End function: cartPage.selectSecondDeliveryAddress"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------              

  # Description: This flow is used to validate oos details and item update pop up in cart page
  # Param  ${ItemCount} [Mandatory] OOS Item count
  - name: functions.cartPage.validateOOSandItemUpdateSheet
    flow:
      - executeFunction:
          name: functions.cartPage.oosSection.isPageDisplayed    
      - if: 
          condition: ${returnedIsDisplayed}
          then:            
            - executeFunction:
                name: functions.cartPage.validatOOSAlertText # <--- ${ItemCount} OOS Item count
            - executeFunction:
                name: functions.cartPage.validateOOSSectioninCart
            - executeFunction:
                name: functions.cartPage.tapOOSAlertText
            - executeFunction:
                name: functions.cartPage.validateItemUpdateBottomSheet
            - executeFunction:
                name: functions.cartPage.tapGotItButton
      - log: 
          message: "End function: cartPage.validateOOSandItemUpdateSheet"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Assert that the Pickup Option is not displayed in the Cart. This option should display as disabled in
  #              the Basket Switching Section.
  - name: functions.cartPage.assertPickupOptionIsNotOfferedInTheCart
    flow:
      - if:
          condition: ${platform} == 'iOS'
          then:
            - fetchPageSource: false
      - executeFunction:
          name: functions.cartPage.expandBasketSwitchingSectionIfCollapsed
      - sleep:
          duration: 2000
      - executeFunction:
          name: functions.cartPage.basketSwitchingSection.isPickupOptionDisabled # RETURNS ---> ${isPickupButtonDisabled}
      - if:
          condition: '!${isPickupButtonDisabled}'
          then:
            - failTest:
                message: X Pickup Option is still offered in the cart.
      - log:
          message: âœ”ï¸Ž Pickup Option is not offered in the cart
          color: GREEN_BOLD
      - log:
          message: "End function: cartPage.assertPickupOptionIsNotOfferedInTheCart"
          color: BLUE
          