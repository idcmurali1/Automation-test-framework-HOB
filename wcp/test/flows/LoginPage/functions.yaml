functions:

  #--------------------------------------------------------------------------------------------------------------------

  # Description:  This flow identifies the type of login that is displayed after clicking on Sign In button.
  #               Returns: ${returnedLoginType}: [ TraditionalLogin | SSOLogin ]
  # No Param
  # Works for:    [ MX [✓]   MX-Bodega [✓]   US [TBD] ]
  - name: functions.loginPage.getLoginType
    flow:
      - if:
          identifier:
            present:
              - identifier: loginPage.unifiedAccountPopup.subtitle
            timeout: 10000
          then:
            - storeIn:
                key: returnedLoginType
                value: SSOLogin
          else:
            - if:
                identifier:
                  present:
                    - identifier: loginPage.createAccountBtn
                then:
                  - storeIn:
                      key: returnedLoginType
                      value: TraditionalLogin
                else:
                  - if:
                      identifier:
                        present:
                          - identifier: loginPage.ssoLogin.emailFieldLabel
                      then:
                        - storeIn:
                            key: returnedLoginType
                            value: SSOLogin
      - log:
          message: "Login Type identified: '${returnedLoginType}'"
          color: GREEN
      - log:
          message: "End function: functions.loginPage.getLoginType"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description:  This flow completes successful user login based on the new SSO Login Flow.
  #                  * This is only a support function, if you need to execute login use function ´functions.loginPage.userAuthentication´.
  # Params:       ${userEmail}     [Mandatory]  User login Email ID.
  #               ${userPassword}  [Mandatory]  User login Password.
  # Works for:    [ MX [✓]   MX-Bodega [✓]   US [TBD] ]
  - name: functions.loginPage.userAuthentication.forSSOFlow
    flow:
      - if:
          condition: ${platform} == 'iOS'
          then:
            - executeFunction:
                name: functions.loginPage.unifiedAccountPopup.tapContinue
      - executeFunction:
          name: functions.loginPage.enterEmail.forSSOFlow # <-- ${userEmail}
      - executeFunction:
          name: functions.loginPage.tapContinue
      - executeFunction:
          name: functions.loginPage.enterPassword.forSSOFlow # <-- ${userPassword}
      - executeFunction:
          name: functions.loginPage.tapSignInBtn
      - log:
          message: "End function: functions.loginPage.userAuthentication.forSSOFlow"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description:  This flow completes successful user login based on the Traditional Login Flow.
  #                  * This is only a support function, if you need to execute login use function ´functions.loginPage.userAuthentication´.
  # Params:       ${userEmail}     [Mandatory]  User login Email ID.
  #               ${userPassword}  [Mandatory]  User login Password.
  # Works for:    [ MX [✓]   MX-Bodega [✓]   US [TBD] ]
  - name: functions.loginPage.userAuthentication.forTraditionalFlow
    flow:
      - executeFunction:
          name: functions.loginPage.isUnifiedAccountPopupDisplayed
      - if:
          condition: ${returnedIsDisplayed}
          then:
            - executeFunction:
                name: functions.loginPage.unifiedAccountPopup.tapContinue
      - executeFunction:
          name: functions.login.isSignInPageDisplayed
      - if:
          condition: "!${returnedIsDisplayed}"
          then:
            - failTest:
                message: "Login page not displayed."
      - executeFunction:
          name: functions.loginPage.enterEmail # <-- ${userEmail}
      - if:
           identifier:
              present:
                - identifier: loginPage.passwordField
           then:
                - executeFunction:
                   name: functions.loginPage.enterPassword # <-- ${userPassword}
           else:
                - executeFunction:
                    name: functions.loginPage.tapContinue
                - sleep:
                    duration: 3000
                - executeFunction:
                    name: functions.login.isChoiceSignInPageDisplayed
                - executeFunction:
                    name: functions.loginPage.enterPassword # <-- ${userPassword}
      - executeFunction:
          name: functions.loginPage.tapSignInBtn
      - log:
          message: "End function: functions.loginPage.userAuthentication.forTraditionalFlow"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description:  This flow completes successful user login.
  # Params:       ${userEmail}     [Mandatory]  User login Email ID.
  #               ${userPassword}  [Mandatory]  User login Password.
  # Works for:    [ MX [✓]   MX-Bodega [✓]   US [TBD] ]
  - name: functions.loginPage.userAuthentication
    flow:
      # Execute Traditional Login or SSO Login depending which one displayed, default is TraditionalLogin
      - storeIn:
          key: returnedLoginType
          value: TraditionalLogin
      - if:
          condition: ${market} == 'MX' || ${market} == 'MX-Bodega'
          then:
            - executeFunction:
                name: functions.homePage.personalizedShoppingExperiencePopup.dismissIfDisplayed
            - executeFunction:
                name: functions.homePage.newUpdateAvailablePopUp.dismissIfDisplayed
            - executeFunction:
                name: functions.loginPage.getLoginType # --> ${returnedLoginType}
            - executeFunction:
                name: functions.icashMobile.handlePhoneNumberPopUp

      - if:
          condition: ${returnedLoginType} == 'SSOLogin'
          then:
            - log:
                message: SSO Login Flow will be executed...
                color: GREEN
            - executeFunction:
                name: functions.loginPage.userAuthentication.forSSOFlow # <-- ${userEmail}, ${userPassword}
      - if:
          condition: ${returnedLoginType} == 'TraditionalLogin'
          then:
            - log:
                message: Traditional Login Flow will be executed...
                color: GREEN
            - executeFunction:
                name: functions.loginPage.userAuthentication.forTraditionalFlow # <-- ${userEmail}, ${userPassword}

    
      # The following is common code that is the same no matter what Login flow was executed in lines above...
      - executeFunction:
          name: functions.loginPage.isSecurityCheckDisplayed
      - if:
          condition: ${returnedIsDisplayed}
          then:
            - executeFunction:
                name: functions.loginPage.selectEmailOptOption
            - executeFunction:
                name: functions.loginPage.securityCheck.tapSendCode
            - executeFunction:
                name: utils.astro.fetch.emailOtp
                params:
                  - name: email
                    string: ${userEmail}
            - executeFunction:
                name: functions.loginPage.enterVerificationCodes
            - executeFunction:
                name: functions.loginPage.enterVerificationCode.submitBtn
            - executeFunction:
                name: functions.loginPage.handleInvalidCode
      - executeFunction:
          name: functions.accountPage.handleVerifyPhoneNumberPopups
      - executeFunction:
          name: functions.homePage.newUpdateAvailablePopUp.dismissIfDisplayed
      - executeFunction:
          name: functions.accountPage.PostLogInhandlePopUpandAlerts
      - log:
          message: "End function: functions.loginPage.userAuthentication"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description:  This flow completes successful account creation (WRAPPER FUNCTION).
  # Params:  ${userEmail}               [Optional]  User's email address.
  #          ${userFirstName}           [Optional]  User's first name.       
  #          ${userLastName}            [Optional]  User's last name.
  #          ${motherLastNameRequired}  [Optional]  Boolean if true will enter mother's last name.
  #          ${userMotherLastName}      [Optional]  User's mother last name.
  #          ${userPhoneNumber}         [Optional]  User's phone number.
  #          ${userCreatePassword}      [Optional]  User's password.
  # Works for:  [ MX [✓]   MX-Bodega [✓]   US [TBD] ]
  - name: functions.login.createUserAccount
    flow:
      - executeFunction:
          name: functions.loginPage.unifiedAccountPopup.tapContinue
      - if:
          condition: ${userEmail} == "null"
          then:
            - getTimestamp:
                storeIn: currentTimestamp
                dateFormat: YYMMddHHmmss
            - storeIn:
                key: userEmail
                value: testwcp${currentTimestamp}@walmart.com
      - if:
          condition: ${userFirstName} == "null"
          then:
            - storeIn:
                key: userFirstName
                value: "ACCEPT"
      - if:
          condition: ${userLastName} == "null"
          then:
            - storeIn:
                key: userLastName
                value: "ACCEPT"
      - if:
          condition: ${userMotherLastName} == "null"
          then:
            - storeIn:
                key: userMotherLastName
                value: "ACCEPT"
      - if:
          condition: ${userPhoneNumber} == "null"
          then:
            - storeIn:
                key: userPhoneNumber
                value: ${__randomUSPhone:702}
          
      - if:
          condition: ${userCreatePassword} == "null"
          then:
            - storeIn:
                key: userCreatePassword
                value: "Password1*"
      - log:
          message: "PARAMS: userEmail = '${userEmail}' , userFirstName = '${userFirstName}' , userLastName = '${userLastName}' , userMotherLastName = '${userMotherLastName}'"
          color: CYAN
      - log:
          message: "PARAMS: motherLastNameRequired = '${motherLastNameRequired}' , userPhoneNumber = '${userPhoneNumber}' , userCreatePassword = '${userCreatePassword}'"
          color: CYAN
      # Execute Traditional or SSO flow depending which one displayed, default is Traditional flow...
      - storeIn:
          key: returnedLoginType
          value: SSOLogin
      # - if:
      #     condition: ${market} == 'MX' || ${market} == 'MX-Bodega'
      #     then:
      #       - executeFunction:
      #           name: functions.loginPage.getLoginType # --> ${returnedLoginType}
      # SSO flow...
      - if:
          condition: ${returnedLoginType} == 'SSOLogin'
          then:
            - log:
                message: SSO Flow will be executed...
                color: GREEN
            - executeFunction:
                name: functions.login.createUserAccount.forSSOFlow # <-- ${userEmail}, ${userFirstName}, ${userLastName}, ${motherLastNameRequired}, ${userMotherLastName}, ${userPhoneNumber}, ${userCreatePassword}
      # # Traditional flow...
      # - if:
      #     condition: ${returnedLoginType} == 'TraditionalLogin'
      #     then:
      #       - log:
      #           message: Traditional Flow will be executed...
      #           color: GREEN
      #       - executeFunction:
      #           name: functions.login.createUserAccount.forTraditionalFlow # <-- ${userEmail}, ${userFirstName}, ${userLastName}, ${motherLastNameRequired}, ${userMotherLastName}, ${userPhoneNumber}, ${userCreatePassword}
      - executeFunction:
          name: functions.accountPage.assertUserLoggedInSuccessfully                
      - log:
          message: "End function: functions.login.createUserAccount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Function to fill up the whole create account form and create account with assertions for no errors in
  #              create account process.
  # Params:  ${userEmail}                [Optional]  User's email address.
  #          ${userFirstName}            [Optional]  User's first name.       
  #          ${userLastName}             [Optional]  User's last name.
  #          ${motherLastNameRequired}   [Optional]  Boolean if true will enter mother's last name.
  #          ${userMotherLastName}       [Optional]  User's mother last name.
  #          ${userPhoneNumber}          [Optional]  User's phone number.
  #          ${userCreatePassword}       [Optional]  User's password.
  # Works for:  [ MX [✓]   MX-Bodega [✓]   US [TBD] ]
  - name: functions.login.createUserAccount.forTraditionalFlow
    flow:
      - executeFunction:
          name: functions.login.isSignInPageDisplayed
      - if:
          condition: "!${returnedIsDisplayed}"
          then:
            - failTest:
                message: "Login page not displayed."
      - executeFunction:
          name: functions.loginPage.tapCreateAccountBtn
      - executeFunction:
          name: functions.createAnAccountPage.assertPageDisplayed
      - if:
          condition: "!${returnedIsDisplayed}"
          then:
            - failTest:
                message: Create an account page not displayed.
      - executeFunction:
          name: functions.createAnAccountPage.enterUserFirstName
          params:
            - name: UserFirstName
              string: ${userFirstName}
      - executeFunction:
          name: functions.createAnAccountPage.enterUserLastName
          params:
            - name: UserLastName
              string: ${userLastName}
      - if:
          condition: ${motherLastNameRequired} != "null"
          then:
            - executeFunction:
                name: functions.createAnAccountPage.enterMotherLastName
                params:
                  - name: UserMotherLastName
                    string: ${userMotherLastName}
      - executeFunction:
          name: functions.createAnAccountPage.enterUserEmail
      - executeFunction:
          name: functions.createAnAccountPage.enterUserCreatePassword
          params:
            - name: UserCreatePassword
              string: ${userCreatePassword}
      - executeFunction:
          name: functions.createAnAccountPage.tapContiuneBtn
      - executeFunction:
          name: functions.createAnAccountPage.validateErrorNotDisplayed
      - log:
          message: "End flow: functions.login.createUserAccount.forTraditionalFlow"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Function to fill up the whole create account form and create account with assertions for no errors in
  #              create account process.
  # Params:  ${userEmail}                [Optional]  User's email address.
  #          ${userFirstName}            [Optional]  User's first name.       
  #          ${userLastName}             [Optional]  User's last name.
  #          ${motherLastNameRequired}   [Optional]  Boolean if true will enter mother's last name.
  #          ${userMotherLastName}       [Optional]  User's mother last name.
  #          ${userPhoneNumber}          [Optional]  User's phone number.
  #          ${userCreatePassword}       [Optional]  User's password.
  # Works for:  [ MX [✓]   MX-Bodega [✓]   US [TBD] ]
  - name: functions.login.createUserAccount.forSSOFlow
    flow:
      - executeFunction:
          name: functions.loginPage.isUnifiedAccountPopupDisplayed # --> ${returnedIsDisplayed}
      - if:
          condition: ${returnedIsDisplayed}
          then:
            - executeFunction:
                name: functions.loginPage.unifiedAccountPopup.tapContinue
      - executeFunction:
          name: functions.loginPage.enterEmail.forSSOFlow # <-- ${userEmail}
      - executeFunction:
          name: functions.loginPage.tapContinue

      - executeFunction:
          name: functions.createAnAccountPage.assertPageDisplayed
      - if:
          condition: "!${returnedIsDisplayed}"
          then:
            - failTest:
                message: Create an account page not displayed.
      - executeFunction:
          name: functions.createAnAccountPage.enterUserFirstName
          params:
            - name: UserFirstName
              string: ${userFirstName}
      - executeFunction:
          name: functions.createAnAccountPage.enterUserLastName
          params:
            - name: UserLastName
              string: ${userLastName}
      - if:
          condition: ${motherLastNameRequired} != "null"
          then:
            - executeFunction:
                name: functions.createAnAccountPage.enterMotherLastName
                params:
                  - name: UserMotherLastName
                    string: ${userMotherLastName}
    
      - executeFunction:
          name: functions.createAnAccountPage.enterUserPhoneNumber
          params:
              - name: UserPhoneNumber
                string: ${userPhoneNumber}
      - executeFunction:
          name: functions.createAnAccountPage.selectPhoneNumberCountryCode.ifDisplayed # RETURNS: ${returnedPhoneNumberPrefix}
          params:
            - name: countryCode
              string: ${market}
      - executeFunction:
          name: functions.createAnAccountPage.enterUserCreatePassword
          params:
            - name: UserCreatePassword
              string: ${userCreatePassword}
      - if:
          condition: ${platform} == 'Android'
          then:
            - executeFunction:
                name: functions.createAnAccountPage.tapContiuneBtn
      - sleep:
          duration: 5000
      # - executeFunction:
      #     name: functions.createAnAccountPage.fillOutOTP.ifDisplayed # <-- ${userEmail}, ${userPhoneNumber}
      - if:
            condition: ${market} == 'CA' || ${market} == 'CA-FR'
            then:
                - log:
                    message: "CA or CA-FR market detected, skipping OTP flow..."
                    color: GREEN
            else:
                # - executeFunction:
                #     name: functions.createAnAccountPage.fillOutOTP.ifDisplayed # <-- ${userEmail}, ${userPhoneNumber}  #Commenting it now as this is commented in the Pages folder
                - executeFunction:
                    name: functions.createAnAccountPage.fillOutOTP # <-- ${userEmail}, ${userPhoneNumber}
                - sleep:
                    duration: 5000
                - executeFunction:
                    name: functions.cashi.closeCashiPopUp
                - if:
                    condition: ${platform} == 'Android'
                    then:
                        - if:
                            condition: ${market} == 'MX' || ${market} == 'MX-Bodega' 
                            then:
                            - executeFunction:
                                name: functions.utils.handlePopUp   
                            - executeFunction:
                                name: functions.createAnAccountPage.accountValidationPopup.assertDisplayed # <-- ${userEmail}, ${userFirstName}, ${userLastName}
                                                                                                            #     ${motherLastNameRequired}, ${userMotherLastName}, ${userPhoneNumber}
                            - executeFunction:
                                name: functions.createAnAccountPage.accountValidationPopup.tapContinueBtn
                            - executeFunction:
                                name: functions.utils.handlePopUp
      - log:
          message: "End flow: functions.login.createUserAccount.forSSOFlow"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Re enter code if message is showing up
  - name: functions.loginPage.handleInvalidCode
    flow:
        - if:
            condition: ${market} == 'US' && ${environment} == 'Production'
            then: 
                - if:
                    identifier:
                        present:
                        - identifier: loginPage.reEnterCodeMessage
                    then:
                        - executeFunction:
                            name: utils.astro.fetch.prod.emailOtp
                            params:
                                - name: email
                                  string: ${userEmail}
                        - executeFunction:
                            name: functions.loginPage.enterVerificationCodes
                        - executeFunction:
                            name: functions.loginPage.enterVerificationCode.submitBtn
        - log:
            message: "End flow: loginPage.handleInvalidCode"
            color: BLUE
