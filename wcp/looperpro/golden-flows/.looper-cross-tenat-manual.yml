inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'
gitShallowDepth: 10
branches:
  - spec: development
    scheduling: concurrent
    triggers:
      - pr:
          scheduling: cancelRunning
      - push:
          manualOnly: true
      - manual:
          name: Run MX Automation
          call: Run_MX_Build
      - manual:
          name: Run CA Automation
          call: Run_CA_Build
      - manual:
          name: Run US Automation
          call: Run_US_Build

  - spec: mx/release-latest
    scheduling: concurrent
    triggers:
      - pr:
          scheduling: cancelRunning
      - push:
          manualOnly: true
      - manual:
          name: Run MX Automation
          call: Run_MX_Build

  - spec: us/release-latest
    scheduling: concurrent

    triggers:
      - pr:
          scheduling: cancelRunning
      - push:
          manualOnly: true

      - manual:
          name: Run CA Automation
          call: Run_CA_Build

#-----------------------------------------------------------------------------------------------------------------------

parameters:

  - Platform: { type: choice, choices: "android,ios"}
  - BuildType: { type: choice, choices: "release,development" }
  - TestTags: { type: choice, choices: "p1-mx-ea-prod,p1-mx-ea-teflon,p1-bodega-ea-prod,p1-bodega-ea-teflon,p1-ca-en-teflon,p1-ca-en-prod,p1-ca-en-exp-teflon,p1-ca-en-exp-prod,p1-ca-fr-teflon,p1-ca-fr-prod,p1-us-teflon,p1-us-prod" }
  - IsTestRailExecution: {type: boolean}

#-----------------------------------------------------------------------------------------------------------------------

envs:
  global:
    variables:
      SAUCE_USERNAME: wcp-apps-e2e
      SAUCE_ACCESS_KEY: ENC[rnmbZWq+9q4Y2NblUl3yKduKKFO9zq86fEbKAl0j4lm4uh5bgYho+//5ZRtDYEqx]
      POST_TO_SPLUNK: false
      POST_TO_XRAY: false
      ELK_HOST: ENC[1daRK3FgaXEjV7OCVK+66P0fcD+RYxs47xG01WmiaDCl0xeJURP612vwYH8/8BZ31h2tnp5FT1B18us0Ag4n6fjGS3DghPw4vafKEr04BII=]
      TEST_RESULTS_INDEX: testresults_apps_wcp
      POST_TO_ES: true
      MARKET: wcp
      APP_PLATFORM: ${Platform}
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: wcp/test/dependencies/${Platform}/${Platform}-default.yaml
      TEST_TAGS: ${TestTags}
      TESTRAIL_PLAN_ID: ''
      GLASS_ENV: ''

flows:
  # Get latest app version from txt
  get_app_version:
    - var(APP_VERSION):
        - shell (name Get App Version For MX Release): head wcp/looper/mx-release/app-version/mx-release-version.txt

  # Get latest app version from saucelabs using api
  get_build_app_version:
    try:
      - var(VERSION_NAME):
          if: |
            %{APP_PLATFORM == 'ios'}
          then:
            shell (name VERSION_NAME): echo 'short_version'
          else:
            shell (name VERSION_NAME): echo 'version'
      - var(STORAGE_NAME):
          - shell (name STORAGE_NAME): echo ${SAUCE_APP} | cut -f2 -d'='
      - var(BUILD_APP_VERSION):
          - shell (name BUILD_APP_VERSION): |
              curl -s -u "$SAUCE_USERNAME:$SAUCE_ACCESS_KEY" "https://api.us-west-1.saucelabs.com/v1/storage/files?per_page=1&name=${STORAGE_NAME}" | grep -o "\"${VERSION_NAME}\": \"[^\"]*\"" | cut -f4 -d'"' | cut -f1 -d"-"
    catch:
      - echo "Unable to get Sauce Labs build appVersion - $flowErrorMessage"

  # execute build
  Run_MX_Build:
    - declare(SUFIX_DEPENDENCY_PROFILE)
    - declare(appExtension)
    - var(SUFIX_DEPENDENCY_PROFILE):
        if: |
            %{BuildType == 'development'}
        then:
          - shell(name SUFIX_DEPENDENCY_PROFILE): echo ''
        else:
          - shell(name SUFIX_DEPENDENCY_PROFILE): echo -${BuildType}  
    - switch(${APP_PLATFORM}):
            case(android):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '%{Env.toUpperCase()}' # Android App requires environment in upper case.
              - var(appExtension):
                  - shell(name appExtension): echo apk
              - var(TESTRAIL_PLAN_ID):
                  if: |
                      %{BuildType == 'release' && IsTestRailExecution}
                  then:
                    - shell(name TESTRAIL_PLAN_ID): echo '782293'
            case(ios):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '${Env}' # iOS App requires environment in lower case.
              - var(appExtension):
                  - shell(name appExtension): echo zip
              - var(TESTRAIL_PLAN_ID):
                  if: |
                      %{BuildType == 'release' && IsTestRailExecution}
                  then:
                    - shell(name TESTRAIL_PLAN_ID): echo '782291'
            otherwise:
              - fail('Incorrect value for Platform - ${APP_PLATFORM}.')
    - switch(${TEST_TAGS}):
        case(p1-mx-ea-prod):
          - call: build(DEPENDENCY_PROFILE = 'looper-mx-prod${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'mx_ea_${APP_PLATFORM}_production', SAUCE_APP= 'storage:filename=mx-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-mx-ea-teflon):
          - call: build(DEPENDENCY_PROFILE = 'looper-mx-teflon${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'mx_ea_${APP_PLATFORM}_teflon', SAUCE_APP= 'storage:filename=mx-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-bodega-ea-prod):
          - call: build(DEPENDENCY_PROFILE = 'looper-mx-bodega-prod${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'bo_ea_${APP_PLATFORM}_production', SAUCE_APP= 'storage:filename=mx-bodega-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-bodega-ea-teflon):
          - call: build(DEPENDENCY_PROFILE = 'looper-mx-bodega-teflon${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'bo_ea_${APP_PLATFORM}_teflon', SAUCE_APP= 'storage:filename=mx-bodega-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        otherwise:
          - fail('Incorrect value for TestTags - ${TEST_TAGS}.')

  # execute build
  Run_CA_Build:
    - declare(SUFIX_DEPENDENCY_PROFILE)
    - declare(appExtension)
    - var(SUFIX_DEPENDENCY_PROFILE):
        if: |
            %{BuildType == 'development'}
        then:
          - shell(name SUFIX_DEPENDENCY_PROFILE): echo ''
        else:
          - shell(name SUFIX_DEPENDENCY_PROFILE): echo -${BuildType}  
    - switch(${APP_PLATFORM}):
            case(android):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '%{Env.toUpperCase()}' # Android App requires environment in upper case.
              - var(appExtension):
                  - shell(name appExtension): echo apk
              - var(TESTRAIL_PLAN_ID):
                  if: |
                      %{BuildType == 'release' && IsTestRailExecution}
                  then:
                    - shell(name TESTRAIL_PLAN_ID): echo '782459'
            case(ios):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '${Env}' # iOS App requires environment in lower case.
              - var(appExtension):
                  - shell(name appExtension): echo zip
              - var(TESTRAIL_PLAN_ID):
                  if: |
                      %{BuildType == 'release' && IsTestRailExecution}
                  then:
                    - shell(name TESTRAIL_PLAN_ID): echo '782458'
            otherwise:
              - fail('Incorrect value for Platform - ${APP_PLATFORM}.')
    - switch(${TEST_TAGS}):
        case(p1-ca-en-teflon):
          - call: build(DEPENDENCY_PROFILE = 'looper-ca-teflon-english${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'ca_${APP_PLATFORM}_teflon', SAUCE_APP= 'storage:filename=ca-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-ca-en-prod):
          - call: build(DEPENDENCY_PROFILE = 'looper-ca-prod-english${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'ca_${APP_PLATFORM}_production', SAUCE_APP= 'storage:filename=ca-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-ca-en-exp-teflon):
          - call: build(DEPENDENCY_PROFILE = 'looper-ca-teflon${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'ca_${APP_PLATFORM}_teflon', SAUCE_APP= 'storage:filename=ca-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-ca-en-exp-prod):
          - call: build(DEPENDENCY_PROFILE = 'looper-ca-prod-english${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'ca_${APP_PLATFORM}_production', SAUCE_APP= 'storage:filename=ca-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-ca-fr-teflon):
          - call: build(DEPENDENCY_PROFILE = 'looper-ca-teflon-french${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'ca-fr_${APP_PLATFORM}_teflon', SAUCE_APP= 'storage:filename=ca-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-ca-fr-prod):
          - call: build(DEPENDENCY_PROFILE = 'looper-ca-prod-french${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'ca-fr_${APP_PLATFORM}_production', SAUCE_APP= 'storage:filename=ca-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        otherwise:
          - fail('Incorrect value for TestTags - ${TEST_TAGS}.')

  # execute build
  Run_US_Build:
    - declare(SUFIX_DEPENDENCY_PROFILE)
    - declare(appExtension)
    - var(SUFIX_DEPENDENCY_PROFILE):
        if: |
            %{BuildType == 'development'}
        then:
          - shell(name SUFIX_DEPENDENCY_PROFILE): echo ''
        else:
          - shell(name SUFIX_DEPENDENCY_PROFILE): echo -${BuildType}  
    - switch(${APP_PLATFORM}):
            case(android):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '%{Env.toUpperCase()}' # Android App requires environment in upper case.
              - var(appExtension):
                  - shell(name appExtension): echo apk
              - var(TESTRAIL_PLAN_ID):
                  if: |
                      %{BuildType == 'release' && IsTestRailExecution}
                  then:
                    - shell(name TESTRAIL_PLAN_ID): echo '782459'
            case(ios):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '${Env}' # iOS App requires environment in lower case.
              - var(appExtension):
                  - shell(name appExtension): echo zip
              - var(TESTRAIL_PLAN_ID):
                  if: |
                      %{BuildType == 'release' && IsTestRailExecution}
                  then:
                    - shell(name TESTRAIL_PLAN_ID): echo '782458'
            otherwise:
              - fail('Incorrect value for Platform - ${APP_PLATFORM}.')
    - switch(${TEST_TAGS}):
        case(p1-us-teflon):
          - call: build(DEPENDENCY_PROFILE = 'looper-us-teflon-english${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'us_en_${APP_PLATFORM}_teflon', SAUCE_APP= 'storage:filename=us-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        case(p1-us-prod):
          - call: build(DEPENDENCY_PROFILE = 'looper-us-prod-english${SUFIX_DEPENDENCY_PROFILE}', MAPPING_LABELS = 'us_en_${APP_PLATFORM}_production', SAUCE_APP= 'storage:filename=us-${BuildType}-latest.${appExtension}', TEST_TAGS = ${TEST_TAGS}, TESTRAIL_PLAN_ID = ${TESTRAIL_PLAN_ID})
        otherwise:
          - fail('Incorrect value for TestTags - ${TEST_TAGS}.')