inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

#-----------------------------------------------------------------------------------------------------------------------

branches:

  scheduling: concurrent

  triggers:
      - push: disabled
      - pr: disabled
      - manual:
          name: Quick SUCCESS Build
          call: default
      # triggers to NOT log anything in xray Jira and Grafana
      - manual:
          name: Run for MX/Teflon/DevApp (No-Xray-Reporting)
          call: run_with_no_xray_reporting(Market = 'MX', Env = 'teflon', BuildType = 'development')
      - manual:
          name: Run for MX/Production/DevApp (No-Xray-Reporting)
          call: run_with_no_xray_reporting(Market = 'MX', Env = 'production', BuildType = 'development')
      - manual:
          name: Run for MX/Teflon/RCApp (No-Xray-Reporting)
          call: run_with_no_xray_reporting(Market = 'MX', Env = 'teflon', BuildType = 'rc')
      - manual:
          name: Run for MX/Production/RCApp (No-Xray-Reporting)
          call: run_with_no_xray_reporting(Market = 'MX', Env = 'production', BuildType = 'rc')
      # triggers for log xray executions in Jira and Grafana
      - manual:
          name: Run for MX/Teflon/DevApp (Xray-Reporting)
          call: run_xray_reporting(Market = 'MX', Env = 'teflon', BuildType = 'development', JIRA_PROJECT_ID = 'INEP', JIRA_TEST_SUITE = 'FUNCTIONAL', JIRA_SUMMARY_PREFIX = 'MERGE_HALLWAYS')
      - manual:
          name: Run for MX/Production/DevApp (Xray-Reporting)
          call: run_xray_reporting(Market = 'MX', Env = 'production', BuildType = 'development', JIRA_PROJECT_ID = 'INEP', JIRA_TEST_SUITE = 'FUNCTIONAL', JIRA_SUMMARY_PREFIX = 'MERGE_HALLWAYS')
      - manual:
          name: Run for MX/Teflon/RCApp (Xray-Reporting)
          call: run_xray_reporting(Market = 'MX', Env = 'teflon', BuildType = 'rc', JIRA_PROJECT_ID = 'INEP', JIRA_TEST_SUITE = 'FUNCTIONAL', JIRA_SUMMARY_PREFIX = 'MERGE_HALLWAYS')
      - manual:
          name: Run for MX/Production/RCApp (Xray-Reporting)
          call: run_xray_reporting(Market = 'MX', Env = 'production', BuildType = 'rc', JIRA_PROJECT_ID = 'INEP', JIRA_TEST_SUITE = 'FUNCTIONAL', JIRA_SUMMARY_PREFIX = 'MERGE_HALLWAYS')

#-----------------------------------------------------------------------------------------------------------------------

parameters:

  - Platform: { type: choice, choices: "android,ios" }
  - OPIF: { type: string }

#-----------------------------------------------------------------------------------------------------------------------

envs:

  global:
    variables:

      SAUCE_USERNAME: wcp-apps-e2e
      SAUCE_ACCESS_KEY: ENC[rnmbZWq+9q4Y2NblUl3yKduKKFO9zq86fEbKAl0j4lm4uh5bgYho+//5ZRtDYEqx]
      SAUCE_APP: ""

      JIRA_USERNAME: SVCIECMXCART
      JIRA_PASSWORD: ENC[fzAC0kGD9TQRwrAKSdzrQrejhaaFVA7ng5b4dOiAyQI=]

      POST_TO_SPLUNK: false
      POST_TO_XRAY: false

      SLACK_CHANNEL: merge-hallways-native-apps-report
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
        *Tag*: ${TEST_TAGS}\n
        *App Build*: ${SAUCE_APP}\n
        *Build Link*: ${BUILD_URL}\n
        *Test Environment*: ${GLASS_ENV}\n
        *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
        *Report Link*: ${REPORT_URL}\n
        _*Execution Owner:* <@${LOOPER_BUILD_USER_ID}>_\n"

      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      GLASS_ENV: ""
      MARKET: ""
      DEPENDENCY_FILE_NAME: ""
      DEPENDENCY_PROFILE: ""
      MAPPING_LABELS: ""

      R2_VERIFIER_PATH: ""

  android_vars:
    variables:
      VERSION_NAME: version
      APP_PLATFORM: android

  ios_vars:
    variables:
      VERSION_NAME: short_version
      APP_PLATFORM: ios

#-----------------------------------------------------------------------------------------------------------------------

flows:

  #  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
  default:
    - shell(name SUCCESS): |
        echo SUCCESS
        exit 0

  #  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
  run_with_no_xray_reporting:
    - call: config_run
    - call: execute_opif(opifId = '${OPIF}', POST_TO_ES = false, DEPENDENCY_PROFILE = 'looper-${Market}-no-xray-reporting')
  
  #  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
  run_xray_reporting:
    - call: config_run
    - declare(JIRA_TEST_PLAN_KEY)
    - declare(OPIF_SUMMARY)
    - declare(opifFound)
    - group(name Getting Test Plan Key for $OPIF):
        # --- Get Test plan for the given OPIF-ID to execute ---
        - var(opifFound):
          - shell(name opifFound): echo NO
        # Read the pages config from the OPIFDetails.json file...
        - exposeVars(source = json, file = ./wcp/test/helpers/OPIF/OPIFByIdDetails.json):
            vars:
              opifs: '.opifs[*]'
        # Loop through OPIFDetails.pages executing only while desired OPIF for execution is not found...
        - foreach(${opifs}):
            - if: |
                %{opifFound == 'NO'}
              then:
                - var(iterationOpifId): ${value.opifId}
                - if: |
                    %{iterationOpifId == OPIF}
                  then:
                    - shell(name $iterationOpifId found ✔︎): echo "${iterationOpifId} found; Extracting and setting OPIF details..."
                    - var(opifFound): 
                      - shell (name opifFound): echo YES
                    - var(JIRA_TEST_PLAN_KEY): 
                      - shell(name JIRA_TEST_PLAN_KEY): echo ${value.testPlanId}
                    - var(OPIF_SUMMARY): 
                      - shell(name OPIF_SUMMARY): echo '${value.opifSummary}'
                  else:
                    - shell(name Checked $iterationOpifId): echo "${iterationOpifId} from loop iteration is not the desired OPIF to extract details."
    - call: execute_opif(opifId = '${OPIF}', POST_TO_ES = true, DEPENDENCY_PROFILE = 'looper-${Market}-xray-test-plan-reporting', JIRA_TEST_PLAN_KEY = ${JIRA_TEST_PLAN_KEY}, OPIF_SUMMARY = ${OPIF_SUMMARY})

  #  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
  config_run:
    - group(name Configuring run / ...):
        - declare(appExtension)
        - shell(name Platform): echo ${Platform}
        - shell(name Market): echo ${Market}
        - shell(name BuildType): echo ${BuildType}
        - switch(${Platform}):
            case(android):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '%{Env.toUpperCase()}' # Android App requires environment in upper case.
              - var(appExtension):
                  - shell(name appExtension): echo apk
            case(ios):
              - var(GLASS_ENV):
                  - shell(name GLASS_ENV): echo '${Env}' # iOS App requires environment in lower case.
              - var(appExtension):
                  - shell(name appExtension): echo zip
            otherwise:
              - fail('Incorrect value for Platform - ${Platform}.')
        - var(SAUCE_APP):
            - shell(name SAUCE_APP): echo "storage:filename=mx-${BuildType}-latest.${appExtension}"
        - switch(${Market}):
            case(MX):
              - var(MARKET):
                  - shell(name MARKET): echo wcp
              - var(R2_VERIFIER_PATH):
                  - shell(name R2_VERIFIER_PATH): echo wcp
              - var(DEPENDENCY_FILE_NAME):
                  - shell(name DEPENDENCY_FILE_NAME): echo "${MARKET}/test/dependencies/${Platform}/${Platform}-default.yaml"
              - var(MAPPING_LABELS):
                  - shell(name MAPPING_LABELS): echo "mx_ea_${Platform}_${Env}_merge_hallways"
            otherwise:
              - fail('Cant configure MAPPING_LABELS, market ${Market} not yet configured.')

  #  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
  execute_opif:
    - group(name ● $opifId):
        - var(TEST_TAGS = '${opifId}')
        - call: build(${Platform}_vars)

  # OVERWRITTEN FLOWS FROM INHERITED LOOPER FILE  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

  get_app_version:
    - call: get_build_app_version
    - var(APP_VERSION):
        - shell(name APP_VERSION): echo ${BUILD_APP_VERSION}

  #  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
  get_build_app_version:
    try:
      - var(storageName):
          - shell (name Local var storageName): echo ${SAUCE_APP} | cut -f2 -d'='
      - var(buildAppVersion):
          - shell(name Local var buildAppVersion): |
              curl -s -u "$SAUCE_USERNAME:$SAUCE_ACCESS_KEY" "https://api.us-west-1.saucelabs.com/v1/storage/files?per_page=1&name=${storageName}" | grep -o "\"${VERSION_NAME}\": \"[^\"]*\"" | cut -f4 -d'"' | cut -f1 -d"-"
      - echo "${BUILD_APP_VERSION}"
    catch:
      - echo "Unable to get Build App Version - ${flowErrorMessage}"

  #  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
  publish_report:
    try:
      - publishReport:
          context: ${TEST_SESSION_ID}
          dir: report
          index: index.html
          verbose: true
      - var(REPORT_URL):
        - shell (name Report URL): |
            REPORT_VALUE=PUBLISH_REPORT_${TEST_SESSION_ID}
            echo ${!REPORT_VALUE}
    catch:
      - echo "Publish Report step failed. Please check Start R2 Test step. $flowErrorMessage"