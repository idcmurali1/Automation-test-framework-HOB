inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10
branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - push:
          manualOnly: true

      - manual:
          name: Run - Capture Space Ratio Repor[Release]
          call: run_tests


parameters:
  - APP_PLATFORM: {type: choice, choices: "android,ios"}

envs:
  global:
    variables:
      SAUCE_USERNAME: wcp-apps-e2e
      SAUCE_ACCESS_KEY: ENC[rnmbZWq+9q4Y2NblUl3yKduKKFO9zq86fEbKAl0j4lm4uh5bgYho+//5ZRtDYEqx]
      POST_TO_SPLUNK: false
      POST_TO_XRAY: false
      ELK_HOST: ENC[1daRK3FgaXEjV7OCVK+66P0fcD+RYxs47xG01WmiaDCl0xeJURP612vwYH8/8BZ31h2tnp5FT1B18us0Ag4n6fjGS3DghPw4vafKEr04BII=]
      TEST_RESULTS_INDEX: testresults_apps_wcp
      POST_TO_ES: true
      MARKET: wcp
      DEPENDENCY_FILE_NAME: ${MARKET}/test/dependencies/${APP_PLATFORM}/${APP_PLATFORM}-default.yaml
      GLASS_ENV: production
      MAPPING_LABELS: us_en_${APP_PLATFORM}_production
      TEST_TAGS: validatescreens
      DEPENDENCY_PROFILE: looper-us-prod-english-release


  env_android_release_sauce_app:
    variables:
      SAUCE_APP: "storage:filename=us-release-latest.apk"

  env_ios_release_sauce_app:
    variables:
      SAUCE_APP: "storage:filename=us-release-latest.apk.zip"
      


flows:

  # Pick platform specific paramters
  run_tests:
    try:
      - parallel(failsafe):
          - if: |
              %{APP_PLATFORM == 'android'}
            then:
              - call: build(env_android_release_sauce_app)
            else:
              - call: build(env_ios_release_sauce_app)
    catch:
      - shell: exit 1

  get_app_version:
    - if: |
        %{APP_PLATFORM == 'android'}
      then:
        - var(APP_VERSION):
            - shell  (name Get App Version): head us/app-versions/release-latest/android.txt
      else:
        - var(APP_VERSION):
            - shell  (name Get App Version): head us/app-versions/release-latest/ios.txt

  # Get latest app version from saucelabs using api
  get_build_app_version:
    try:
      - var(VERSION_NAME = 'version')
      - var(STORAGE_NAME):
          - shell (name STORAGE_NAME): echo ${SAUCE_APP} | cut -f2 -d'='
      - var(BUILD_APP_VERSION):
          - shell (name BUILD_APP_VERSION): |
              curl -s -u "$SAUCE_USERNAME:$SAUCE_ACCESS_KEY" "https://api.us-west-1.saucelabs.com/v1/storage/files?per_page=1&name=${STORAGE_NAME}" | grep -o "\"${VERSION_NAME}\": \"[^\"]*\"" | cut -f4 -d'"' | cut -f1 -d"-"
    catch:
      - echo "Unable to get Sauce Labs build appVersion - $flowErrorMessage"

  build:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - call: get_app_version
          - call: get_build_app_version
          - call: execute_test
          - call: publish_report
          - shell: node ./wcp/scripts/fetch_content_whitespace_ratios.js
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: post_test_results_json_to_es