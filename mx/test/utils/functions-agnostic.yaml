#======================================================================================================================
#  AUTHOR: Rodrigo Pacheco Cámara (vn53p0i)
#  CREATED: Oct/24/2022
#  REVISION: ---
#
#  Copyright © 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # DESCRIPTION: Waits for the given mapping to disappear from the screen.
  # PARAMS:  ${mapping}  [Mandatory]  Desired mapping to wait for.
  - name: mx.functions.utils.waitUntilMappingDisappear
    flow:
      - log:
          message: "Mapping: ${mapping}"
          color: CYAN
      - verifyIdentifier:
          notPresent:
            - identifier: ${mapping}
      - log:
          message: "End function: utils.waitUntilMappingDisappear"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method builds the delivery slot by using the selected day and time slots from reserve-slot page
  #              and saves it in the global variable ${returnedDeliverySlot}.
  # Params:      ${forPage}          [Mandatory]  Name of the page to construct the Delivery Slot String for. Name of 
  #                                               the available pages are 'Cart', 'ReviewOrder', 'OrderConfirmation', 
  #                                               'OrderHistory' and 'OrderDetails'.
  #              ${selectedDaySlot}  [Mandatory]  Obtained from: mx.functions.reserve-slot.getSelectedDaySlot
  #              ${selectedTimeSlot} [Mandatory]  Obtained from: mx.functions.reserve-slot.getSelectedTimeSlot
  - name: mx.functions.utils.getDeliverySlot
    flow:
      - log:
          message: "For Page: ${forPage}  /  Selected Day Slot: ${selectedDaySlot}  /  Selected Time Slot: ${selectedTimeSlot}"
          color: CYAN
      - if:
          condition: ${APP_PLATFORM} == 'ios'
          then:
            - storeIn:
                key: forPage
                value: "${forPage}iOS"
      - executeNode:
          file: mx/test/helpers/delivery-slot/parseDeliverySlotForAssertion.js
          args:
            - value: ${forPage}
            - value: ${selectedDaySlot}
            - value: ${selectedTimeSlot}
          getResponse:
            storeIn: returnedDeliverySlot
      - if:
          condition: ${returnedDeliverySlot} == 'error'
          then:
            - failTest:
                message: "Given page name: ${forPage}, is not valid. Not able to parse Delivery Slot."
      - log:
          message: "Delivery Slot Got: '${returnedDeliverySlot}'"
          color: CYAN
      - log:
          message: "End function: utils.getDeliverySlot"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Generates a unique email by using the current timestamp with this format "YYYYMMddHHmmssSS" and the
  #                the number of the current test case. For example: If test case number is '005' and timestamp is
  #                '20230328012130404' the result would be: "glass_aut_qaa_e2e_reg_od005_20230328012130404@walmart.com".
  # PARAMS:  ${testCaseNum}  [Mandatory]  Number of the test case.
  # EDITOR: Osmar Juárez (vn56dce)
  - name: mx.functions.utils.getUniqueEmail
    flow:
      - getTimestamp:
          storeIn: returnedTimestamp
          dateFormat: YYYYMMddHHmmssSS
      - storeIn:
          key: returnedUniqueEmail
          value: "glass_aut_qaa_e2e_reg_${testCaseNum}_${returnedTimestamp}@walmart.com"
      - log:
          message: "Generated email: '${returnedUniqueEmail}'"
          color: GREEN_BOLD
      - log:
          message: "End function: utils.generateUniqueEmail"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function is a workaround for when the cart merge service fails. It will click the 'retry' button
  #                Three times, if the popup keeps displaying, then the test fails, if not, the flow will continue.
  #                This function will only be executed when the flag "${cartMergeFailureRetryWorkaroundFlag}" is exported and set to 'true'.
  # ANDROID NOTES: When cart fails merging, user will be prompted to try again, sometimes it fixes itself, sometimes it doesn't.
  # iOS NOTES:     User cannot retry the operation automatically, user can only close the popup without being able to fix the problem.
  - name: mx.functions.utils.something-went-wrong-popup.tapRetryIfPopupDisplayed
    flow:
      - log:
          message: "Executing workaround for when the cart-merge service is known to have issues and want to skip (if possible) and continue the flow."
          color: YELLOW
      - log:
          message: "NOTE that this workaround may or may not work on android but on iOS this function fails because user cannot retry operation."
          color: YELLOW
      - storeIn:
          key: isPopupDisplayed
          value: true
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - loop:
                begin: 0
                end: 3
                flow:
                  - if:
                      identifier:
                        present:
                          - identifier: mx.mappings.utils.something-went-wrong-popup.popupTitle
                      then:
                        - click:
                            identifier: mx.mappings.utils.something-went-wrong-popup.retryButton
                  - if:
                      identifier:
                        present:
                          - identifier: mx.mappings.utils.something-went-wrong-popup.popupTitle
                      then:
                        - log: 
                            message: "Popup still displayed, retrying..."
                            color: CYAN
                      else:
                        - storeIn:
                            key: isPopupDisplayed
                            value: false
                        - break: true
            - if:
                condition: ${isPopupDisplayed} == true
                then:
                  - failTest:
                      message: "Failed: Cart was not able to merge properly."
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.utils.cart-merge-popup.popupTitle
                then:
                  - click:
                      identifier: mx.mappings.utils.cart-merge-popup.acceptButton
                  - failTest:
                      message: "Failed: Cart was not able to merge properly."
      - log:
          message: "End function: utils.something-went-wrong-popup.tapRetryIfPopupDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Gets the added product quantity for weighable products already in cart by using the weight conversion
  #                rate, and that is the amount of grams that are equal to 1 piece of the product.
  # PARAMS:  
  #   ${productWeightConversionRate}   [Mandatory]  How many grams are equal to 1 piece of the product.
  #   ${addedProductQuantityAsWeight}  [Mandatory]  How many grams have been added to cart.
  # RETURNS:
  #   ${returnedAddedQuantityAsPieces}  How many grams are equal to 1 piece of the product.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.utils.getWeighableProductAddedQuantityAsPieces
    flow:
      - log:
          message: "Product Weight Conversion Rate: ${productWeightConversionRate}"
          color: CYAN
      - log:
          message: "Added Product Quantity as Weight: ${addedProductQuantityAsWeight}"
          color: CYAN
      - arithmetic:
          expression: ${addedProductQuantityAsWeight} / ${productWeightConversionRate}
          numberOfDecimalPlaces: 0
          storeIn: returnedAddedQuantityAsPieces
      - log:
          message: "Added Quantity as Pieces got: ${returnedAddedQuantityAsPieces}"
          color: CYAN
      - log:
          message: "End function: utils.getWeighableProductAddedQuantityAsPieces"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.utils.closeGenericPopupIfDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.utils.genericCloseButton
          then:
            - click:
                identifier: mx.mappings.utils.genericCloseButton
      - log:
          message: "No Popup window displayed or already closed."
          color: CYAN
      - log:
          message: "End function: utils.closeGenericPopupIfDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  Gets the xpath of a mapping in the returned variable (mapping value is only retrievable via function parameter).
  # PARAM:        ${mapping}        Mapping to be converted into a variable.
  # RETURNS:      ${returnedXpath}  Value of the desired mapping.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.utils.getXpathFromMapping
    flow:
      - storeIn:
          key: returnedXpath
          value: ${mapping}
      - log:
          message: "Xpath got: '${returnedXpath}'"
          color: GREEN_BOLD
      - log:
          message: "End function: utils.getXpathFromMapping"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Scroll until find in page the first tempo component and return the name of the module founded. 
  #              Tepo modules are verified by priority first one HeroPOV and last one AdMarquee.
  # PARAM:       ${scrollLimit} Max number of scrolls. Default value is set to 5.
  # RETURNS:     ${moduleNameFounded}  Value of the desired component [HeroPOV | Hubspoke | SkinnyBanner | AdMarquee | null]
  # AUTHOR: Osmar Juárez (vn56dce) 
  - name: mx.functions.utils.findFirstTempoModuleInPage
    flow:
      - storeIn:
          key: moduleNameFounded
          value: 'null'
      - loop:
          begin: 0
          end: ${scrollLimit:5}
          storeIndex: i
          mode: increment
          flow:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.home.promotionsCarouselContainer
                then:
                  - if:
                     condition: "!${IS_HERO_POV_PRESENT:false}"
                     then:
                      - storeIn:
                          key: moduleNameFounded
                          value: "HeroPOV"
                      - log:
                          message: "Element founded: '${moduleNameFounded}'"
                          color: GREEN_BOLD
                      - break: true
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.home.categoryHubspokeModuleView
                then:
                  - if:
                     condition: "!${IS_HUBSPOKE_PRESENT:false}"
                     then: 
                      - storeIn:
                          key: moduleNameFounded
                          value: "Hubspoke"
                      - log:
                          message: "Element founded: '${moduleNameFounded}'"
                          color: GREEN_BOLD
                      - break: true
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.home.skinnyBannerView
                then:
                  - if:
                     condition: "!${IS_SKINNY_BANNER_PRESENT:false}"
                     then:
                       - storeIn:
                          key: moduleNameFounded
                          value: "SkinnyBanner"
                       - log:
                          message: "Element founded: '${moduleNameFounded}'"
                          color: GREEN_BOLD
                       - break: true
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.home.adsMarqueeView
                then:
                  - if:
                     condition: "!${IS_AD_MARQUEE_PRESENT:false}"
                     then:
                       - storeIn:
                          key: moduleNameFounded
                          value: "AdMarquee"
                       - log:
                          message: "Element founded: '${moduleNameFounded}'"
                          color: GREEN_BOLD
                       - break: true
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.slp.sortAndFilterButton
                then:
                  - break: true
            - scroll:
                direction: down
                withinIdentifier: mx.mappings.home.pageContainer # Selector is a generic page container valid in different pages besides home 
      - log:
          message: "End function: mx.functions.utils.findFirstTempoModuleInPage"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Checks whether the given array contains an element.
  # PARAMS:      ${arrayToCheck}    [Mandatory]  The array to check whether it contains the given element.
  #              ${elementToCheck}  [Mandatory]  The element to check to be contained.
  # RETURNS:     ${returnedArrayContains}  Wether the array contained the given element.
  # AUTHOR:      Sergio Fernandez (vn0t1qt)
  - name: mx.functions.utils.arrayContains
    flow:
      - storeIn:
          key: returnedArrayContains
          value: false
      - loop:
          each: ${arrayToCheck}
          storeElement: currentElement
          flow:
            - if:
                condition: ${elementToCheck} == ${currentElement}
                then:
                  - storeIn:
                      key: returnedArrayContains
                      value: true
                  - break: true
      - if:
          condition: ${returnedArrayContains}
          then:
            - log:
                message: ✓ The array contains the given value.
                color: GREEN
          else:
            - log:
                message: X The array does not contain the given value.
                color: GREEN
      - log:
          message: "End function: mx.functions.utils.arrayContains"
          color: BLUE
      
  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  Navigates to a deep link URL in the form of <deepLinkApp>://<path>/<sub-path>.
  #                 i.e. walmartea://orders/1234567890
  #
  # PARAMS:   ${deepLinkApp}  [Optional]   Deep link App.
  #           ${path}         [Mandatory]  Path of the deeplink URL.
  #           ${subPath}      [Optional]   Sub-path of the deeplink URL.
  #
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.utils.navigateToDeepLink
    flow:
      # Check for optional ${deepLinkApp}...
      - if:
          condition: ${deepLinkApp} == null
          then:
            - storeIn:
                key: deepLinkApp
                value: mx.data.global.deepLinkAppPrefix.EA
      # Construct deep link url...
      - storeIn:
          key: url
          value: ${deepLinkApp}://${path}/${subPath}
      - log:
          message: "Deep Link: [ url = '${url}', platform = '${platform}' ]"
          color: CYAN
      # Platform-based deep linking...
      - if:
          condition: ${platform} == 'Android'
          then:
            - executeAppiumScript:
                method: "mobile: deepLink"
                params:
                  - key: url
                    value: ${url}
                  - key: package
                    value: ${appPackage}
          else:
            - executeAppiumScript:
                method: "mobile: deepLink"
                params:
                  - key: url
                    value: ${url}
                  - key: bundleId
                    value: ${bundleId}
      # Set <deepLinkApp> to defaults...
      - storeIn:
          key: deepLinkApp
          value: mx.data.global.deepLinkAppPrefix.EA
      - log:
          message: "End function: mx.functions.utils.navigateToDeepLink"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS:  ${upc}  [Mandatory]  UPC of the product to open its PDP through deep link.
  # AUTHOR:  Sergio Fernandez (vn0t1qt)
  - name: mx.functions.utils.navigateToDeepLink.PDP
    flow:
      - storeIn:
          key: path
          value: ip
      - log:
          message: "PDP Deep Link: [ path = '${path}', upc = '${upc}' ]"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.navigateToDeepLink # <-- ${deepLinkApp}, ${path}
          params:
            - name: subPath
              string: ${upc}
      - log:
          message: "End function: mx.functions.utils.navigateToDeepLink.PDP"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS:  ${orderNumber}  [Mandatory]  Order Number to open through deep link.
  # AUTHOR:  Sergio Fernandez (vn0t1qt)
  - name: mx.functions.utils.navigateToDeepLink.OrderDetails
    flow:
      - storeIn:
          key: path
          value: orders
      - log:
          message: "Order Details Deep Link: [ path = '${path}', orderNumber = '${orderNumber}' ]"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.navigateToDeepLink # <-- ${deepLinkApp}, ${path}
          params:
            - name: subPath
              string: ${orderNumber}
      - log:
          message: "End function: mx.functions.utils.navigateToDeepLink.OrderDetails"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR:  Sergio Fernandez (vn0t1qt)
  - name: mx.functions.utils.navigateToDeepLink.Account
    flow:
      - storeIn:
          key: path
          value: account
      - log:
          message: "Account Deep Link: [ path = '${path}' ]"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.navigateToDeepLink # <-- ${deepLinkApp}, ${path}
          params:
            - name: subPath
              string: ''
      - log:
          message: "End function: mx.functions.utils.navigateToDeepLink.Account"
          color: BLUE
