#======================================================================================================================
#    AUTHOR: Rodrigo Pacheco C. (vn53p0i)
#   CREATED: Feb/21/2023
#  REVISION: ---
#
#  Copyright Â© 2023 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This flow performs all the assertions necessary for this page that are not related to product assertions.
  # Param:  ${expectedOrderNumber}    [Mandatory]  Order number to assert.
  # Param:  ${expectedDeliveryMethod} [Mandatory]  Expected selected delivery method (Input: [ HomeDelivery
  #                                                | PickupDelivery ]).
  # Param:  ${expectedOrderStatus}    [Mandatory]  Expected order status. (input: [ Recibido | Preparando | Listo para pickup
  #                                                | En camino | Entregado ]).
  # Param:  ${expectedBanner}         [Mandatory]  Expected banner, comes coded with the delivery slot. (input: [ Walmart
  #                                                | WalmartExpress ]).
  #         ${expectedDaySlot}        [Mandatory]  Expected day slot to be displayed.
  #                                                  Value: as returned by the function:
  #                                                  mx.functions.reserve-slot.getSelectedDaySlot
  #         ${expectedTimeSlot}       [Mandatory]  Expected time slot to be displayed.
  #                                                  Value: as returned by the function:
  #                                                  mx.functions.reserve-slot.getSelectedTimeSlot
  # Param:  ${expectedHomeAddressName}        [Mandatory]  Home address name.
  # Param:  ${expectedStoreName}              [Mandatory]  Store name to assert.
  # Param:  ${expectedProductsCount}  [Mandatory]  Expected total quantity of purchased products (does not count how 
  #                                                many times a product was added, only how many different products 
  #                                                were purchased). Example: for 5 apples and 3 carrots ${productsCount} 
  #                                                would be equal to 2.
  # Param:  ${expectedPaymentMethod}          [Mandatory]  Expected payment method (Input: [ Credito / Debito | Pagar al recibir | Paypal ]).
  # Param:  ${assertDiscount}         [Optional]   Set to 'true' to assert discount and 'false' or 'null' to skip.
  # Param:  ${expectedDiscount}       [Optional]   Expected Discount to be applied.
  # Param:  ${expectedSubtotal}       [Mandatory]  Expected amount to assert. This value should not include the '$' sign.
  # Param:  ${expectedDeliveryFee}    [Mandatory]  Expected amount to assert. This value should not include the '$' sign
  #                                                and must contain two decimals.
  # Param:   ${expectedTotal}               [Mandatory]  Expected amount to assert. This value should not include the '$' sign.
  #                                                        and must contain two decimals.
  # Param:   ${expectedUserStreet}          [Mandatory]  Expected user street to be displayed, obtained from:
  #                                                        mx.functions.reserve-slot.getSelectedAddress or
  #                                                        mx.functions.address-selector-popup.getSelectedAddress
  # Param:   ${expectedUserExteriorNumber}  [Mandatory]  Expected user extNum to be displayed, obtained from:
  #                                                        mx.functions.reserve-slot.getSelectedAddress or
  #                                                        mx.functions.address-selector-popup.getSelectedAddress
  # Param:   ${expectedUserCity}            [Mandatory]  Expected user city to be displayed, obtained from:
  #                                                        mx.functions.reserve-slot.getSelectedAddress or
  #                                                        mx.functions.address-selector-popup.getSelectedAddress
  # Param:   ${expectedUserState}           [Mandatory]  Expected user state to be displayed, obtained from:
  #                                                        mx.functions.reserve-slot.getSelectedAddress or
  #                                                        mx.functions.address-selector-popup.getSelectedAddress
  # Param:   ${expectedUserZipCode}         [Mandatory]  Expected user ZIP Code to be displayed, obtained from:
  #                                                       mx.functions.reserve-slot.getSelectedAddress or
  #                                                       mx.functions.address-selector-popup.getSelectedAddress
  # Params:  ${expectedOrderedDate}         [Mandatory]  Expected Ordered Date, obtained the correct format from
  #                                                       mx/test/helpers/utils/getTodaysDateAsStringForAssertion.js
  #                                                       Note: This value must be obtained exactly when the order 
  #                                                       is placed, otherwise there could be errors during SL and Looper executions.
  # USES FLAGS:
  #     ${ASSERT_DELIVERY_SLOT_IN_ORDER_DETAILS}
  #         If set to 'true', the flow will perform assertion for the Delivery Slot in Order Details page.
  #         If set to 'false' or not set at all, it will perform the Delivery Slot assertion as expected.
  #
  - name: mx.flows.od.order-details.assertOrderDetails
    flow:
      - log:
          message: "Performing Order Details Assertions..."
          color: CYAN
      - executeFunction:
          name: mx.functions.order-details.assertCorrectOrderDisplayed
      - executeFunction:
          name: mx.functions.order-details.assertOrderedDate
      - executeFunction:
          name: mx.functions.order-details.assertDeliveryMethod
      - executeFunction:
          name: mx.functions.order-details.assertStatus
      - executeFunction:
          name: mx.functions.order-details.assertBanner
      - executeFunction:
          name: mx.functions.utils.getDeliverySlot
          params:
              - name: forPage
                string: 'OrderDetails'
              - name: selectedDaySlot
                string: ${expectedDaySlot}
              - name: selectedTimeSlot
                string: ${expectedTimeSlot}
      - executeFunction:
          name: mx.functions.order-details.assertDeliverySlot
          params:
              - name: expectedDeliverySlot
                string: ${returnedDeliverySlot}
      - if:
          condition: ${expectedDeliveryMethod} == 'HomeDelivery'
          then:
            - log:
                message: "Executing Home Delivery assertions..."
                color: CYAN
            - executeFunction:
                name: mx.functions.order-details.assertHomeDeliveryAddressName
            - executeFunction:
                name: mx.functions.order-details.assertHomeDeliveryAddressByIndividualValues
                params:
                  - name: streetName
                    string: ${expectedUserStreet}
                  - name: exteriorNumber
                    string: ${expectedUserExteriorNumber}
                  - name: city
                    string: ${expectedUserCity}
                  - name: state
                    string: ${expectedUserState}
                  - name: zipCode
                    string: ${expectedUserZipCode}
          else:
            - if:
                condition: ${expectedDeliveryMethod} == 'PickupDelivery'
                then:
                  - log:
                        message: "Executing Pickup Delivery assertions..."
                        color: CYAN
                ##### DELETE THIS COMMENT AFTER VALIDATING PICKUP ASSERTIONS. #####
                  - log:
                        message: "THESE FUNCTIONS HAVE NOT BEEN TESTED YET. PLEASE VALIDATE AND DELETE THIS LOG"
                        color: YELLOW
                  - executeFunction:
                      name: mx.functions.order-details.assertStoreName
                  - executeFunction:
                      name: mx.functions.order-details.assertStoreAddress
                else:
                  - failTest:
                      message: "Error: verify delivery method supplied: ${expectedDeliveryMethod}"
      - executeFunction:
          name: mx.functions.order-details.assertTotalProductsCount
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.order-details.totalValue
          scrollLimit: 10
          wait: 1000
      - executeFunction:
          name: mx.functions.order-details.assertPaymentMethod
      - executeFunction:
          name: mx.functions.order-details.assertSubtotal
      - if:
          condition: ${assertDiscount}
          then:
            - log:
                message: "Discount detected, flow will validate discount amount..."
                color: CYAN
            - executeFunction:
                name: mx.functions.order-details.assertDiscount
      - executeFunction:
          name: mx.functions.order-details.assertDeliveryFee
      - executeFunction:
          name: mx.functions.order-details.assertTotal
      - log:
          message: "End flow: od.order-details.assertOrderDetails"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This flow performs all the Order Details assertions except for the Delivery Location. If you want to
  #     perform the Delivery Location assertions, call the desired function from the Order Details page.
  #
  # PARAMS:
  #     ${orderNumber}              [Mandatory]
  #         The Order Number expected to be displayed its details in the screen.
  #
  #     ${expectedOrderedDate}      [Mandatory]
  #         Ordered Date expected to be displayed.
  #         NOTE: when the order is placed the backend will obtain the date and assign it to the Order. When executing
  #         the automation the date can be obtained too, but separate from the backend process. Specially, near midnight,
  #         these 2 dates may differ due to the gap in time between the 2 calculations. To reduce the risk of this gap,
  #         obtain the order date right after placing the order. You can do it in 2 ways:
  #             1) By executing the 'mx/test/helpers/utils/getTodaysDateAsStringForAssertion.js' helper, or
  #             2) If you executed function 'mx.functions.review-order.tapPlaceOrder', this function will execute the
  #                helper mentioned in (1) and return the date.
  #
  #     ${expectedDeliveryMethod}   [Mandatory]
  #         Delivery Method expected to be displayed. Values: [ HomeDelivery | PickupDelivery ].
  #
  #     ${expectedOrderStatus}      [Mandatory]
  #         Expected Status the order should display. Values: [ Received | Preparing | Ready4Pickup | OnTheWay | Delivered ].
  #
  #     ${expectedBanner}           [Mandatory]
  #         Banner expected to be displayed. Values: [ Walmart | WalmartExpress ].
  #
  #     ${expectedDaySlot}          [Mandatory]
  #         Expected day the Delivery Slot should display. Use the value returned by 'mx.functions.reserve-slot.getSelectedDaySlot'.
  #                                                  
  #     ${expectedTimeSlot}         [Mandatory]
  #         Expected time the Delivery Slot should display. Use the value returned by 'mx.functions.reserve-slot.getSelectedTimeSlot'.
  #
  #     ${expectedProductsCount}    [Mandatory]
  #         Expected total quantity of purchased products. This value represents how many different products were
  #         added to the cart and not a sum of the quantity of all the products.
  #         i.e. If the user purchased 5 apples and 2 oranges, the ${expectedProductsCount} must be 2 (the number
  #         of products) instead of 7 (the sum of the quantities).
  #         
  #     ${expectedPaymentMethod}    [Mandatory]
  #         Expected Payment Method to be displayed. Values: [ CC/DC | PayAtDelivery | Paypal ].
  #
  #     ${expectedSubtotal}         [Mandatory]
  #         Expected Subtotal to be displayed. Provide a value without currency symbol '$' and with 2 decimals.
  #
  #     ${assertDiscount}           [Mandatory]
  #         Wether to perform or not the assertion of the discount applied to the order. Values: [ true | false ].
  #
  #     ${expectedDiscount}         [Conditioned]
  #         Discount expected to be displayed. This value is only used to perform the assertion when the param
  #         ${assertDiscount} is set to 'true', otherwise, the flow will ignore it.
  #         If the assertion is going to be done, provide a value without currency symbol '$' and with 2 decimals.
  #
  #     ${expectedDeliveryFee}      [Mandatory]
  #         Delivery Fee expected to be displayed. Provide a value without currency symbol '$' and with 2 decimals.
  #
  #     ${expectedTotal}            [Mandatory]
  #         Total expected to be displayed. Provide a value without currency symbol '$' and with 2 decimals.
  #
  # USES FLAGS:
  #     ${ASSERT_DELIVERY_SLOT_IN_ORDER_DETAILS}
  #         If set to 'true', the flow will perform assertion for the Delivery Slot in Order Details page.
  #         If set to 'false' or not set at all, it will perform the Delivery Slot assertion as expected.
  #
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.flows.od.order-details.assertOrderDetailsWithoutDeliveryLocationAssertion
    flow:
      - log:
          message: "For Order: ${orderNumber}"
          color: CYAN
      - executeFunction:
          name: mx.functions.order-details.assertCorrectOrderDisplayed
          params:
            - name: expectedOrderNumber
              string: ${orderNumber}
      - executeFunction:
          name: mx.functions.order-details.assertOrderedDate
          params:
            - name: expectedOrderedDate
              string: ${expectedOrderedDate}
      - executeFunction:
          name: mx.functions.order-details.assertDeliveryMethod
          params:
            - name: expectedDeliveryMethod
              string: ${expectedDeliveryMethod}
      - executeFunction:
          name: mx.functions.order-details.assertStatus
          params:
            - name: expectedOrderStatus
              string: ${expectedOrderStatus}
      - executeFunction:
          name: mx.functions.order-details.assertBanner
          params:
            - name: expectedBanner
              string: ${expectedBanner}
      - executeFunction:
          name: mx.functions.utils.getDeliverySlot
          params:
              - name: forPage
                string: 'OrderDetails'
              - name: selectedDaySlot
                string: ${expectedDaySlot}
              - name: selectedTimeSlot
                string: ${expectedTimeSlot}
      - executeFunction:
          name: mx.functions.order-details.assertDeliverySlot
          params:
            - name: expectedDeliverySlot
              string: ${returnedDeliverySlot}
      - executeFunction:
          name: mx.functions.order-details.assertTotalProductsCount
          params:
            - name: expectedProductsCount
              string: ${expectedProductsCount}
      - executeFunction:
          name: mx.functions.order-details.assertPaymentMethod
          params:
            - name: expectedPaymentMethod
              string: ${expectedPaymentMethod}
      - executeFunction:
          name: mx.functions.order-details.assertSubtotal
          params:
            - name: expectedSubtotal
              string: ${expectedSubtotal}
      - if:
          condition: ${assertDiscount} == true
          then:
            - executeFunction:
                name: mx.functions.order-details.assertDiscount
                params:
                  - name: expectedDiscount
                    string: ${expectedDiscount}
          else:
            - log:
                message: "Discount Assertion has been disabled (assertDiscount = false)"
                color: CYAN
      - if:
          condition: ${expectedDeliveryMethod} == 'HomeDelivery'
          then:
            - executeFunction:
                name: mx.functions.order-details.assertDeliveryFee
                params:
                  - name: expectedDeliveryFee
                    string: ${expectedDeliveryFee}
      - executeFunction:
          name: mx.functions.order-details.assertTotal
          params:
            - name: expectedTotal
              string: ${expectedTotal}
      - log:
          message: "End flow: od.order-details.assertOrderDetailsWithoutDeliveryLocationAssertion"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This flow executes the proper assertion method from the Order Details page to assert the Delivery
  #     Location based on the selected Delivery Method.
  #
  # PARAMS:
  #     ${deliveryMethod}       [Mandatory]
  #         Selected Delivery Method. The flow will execute the proper assertion method based on the given option.
  #         Options: [ HomeDelivery | PickupDelivery].
  #
  #     ${expectedRawName}      [Mandatory]
  #         Expected raw value to be displayed as Delivery Location Name.
  #         Read the documentation of the following functions to understand how to provide the value:
  #             'mx.functions.order-details.assertDeliveryLocationForHomeDelivery'
  #             'mx.functions.order-details.assertDeliveryLocationForPickupDelivery'
  #
  #     ${expectedRawAddress}   [Mandatory]
  #         Expected raw value to be displayed as Delivery Location Address.
  #         Read the documentation of the following functions to understand how to provide the value:
  #             'mx.functions.order-details.assertDeliveryLocationForHomeDelivery'
  #             'mx.functions.order-details.assertDeliveryLocationForPickupDelivery'
  #
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.flows.od.order-details.assertRawDeliveryLocation
    flow:
      - if:
          condition: ${deliveryMethod} != 'HomeDelivery' && ${deliveryMethod} != 'PickupDelivery'
          then:
            - failTest:
                message: "Failure: Provided deliveryMethod is incorrect: '${deliveryMethod}'"
      - log:
          message: "Delivery Method: '${deliveryMethod}'"
          color: CYAN
      - log:
          message: "Expected Delivery Location Name: '${expectedRawName}'"
          color: CYAN
      - log:
          message: "Expected Delivery Location Address: '${expectedRawAddress}'"
          color: CYAN
      - if:
          condition: ${deliveryMethod} == 'HomeDelivery'
          then:
            - executeFunction:
                name: mx.functions.order-details.assertRawDeliveryLocationForHomeDelivery
                params:
                  - name: expectedRawHomeName
                    string: ${expectedRawName}
                  - name: expectedRawHomeAddress
                    string: ${expectedRawAddress}
          else:
            - if:
                condition: ${deliveryMethod} == 'PickupDelivery'
                then:
                  - executeFunction:
                      name: mx.functions.order-details.assertRawDeliveryLocationForPickupDelivery
                      params:
                        - name: expectedRawStoreName
                          string: ${expectedRawName}
                        - name: expectedRawStoreAddress
                          string: ${expectedRawAddress}
      - log:
          message: "End flow: od.order-details.assertRawDeliveryLocation"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # # Description: This flow performs all the assertions related to products. It first asserts the product is listed, if
  # #              not, the flow throws an error, else the flow continues with product price assertion and ordered quantity
  # #              assertions by using the product type (collected before in previous steps of the TC) and asserts quantities
  # #              as pieces or weight (if dual, asserts both). After that, it verifies if the product is available (checks
  # #              if the 'add to cart' button is displayed or not), if false, the flow ends, if true, the flow continues.
  # #              Then it checks if the product has been added to cart or not, if false, the flow ends, if true, the flow
  # #              ends with product added quantity assertions depending on the product type (dual, pieces and weight).
  # # Param:  ${productName}                      [Mandatory]  Expected product name.
  # # Param:  ${expectedProductPrice}             [Mandatory]  Expected product price to assert.
  # # Param:  ${productType}                      [Mandatory]  Use a 'getProductType' function to get this value.
  # # Param:  ${expectedOrderedQuantityAsPieces}  [Mandatory]  Quantity to assert as pieces. (Ignored if not needed).
  # # Param:  ${expectedOrderedQuantityAsWeight}  [Mandatory]  Quantity to assert as weight (no need to add the "g" but 
  # #                                                          value must be in grams). (Ignored if not needed).
  # # Param:  ${expectedAddedQuantityAsPieces}    [Mandatory]  Quantity of pieces to assert. (Ignored if not needed).
  # # Param:  ${expectedAddedQuantityAsWeight}    [Mandatory]  Weight value to assert. (Ignored if not needed).
  # - name: mx.flows.od.order-details.assertProductDetails
  #   flow:
  #     - executeFunction:
  #         name: mx.functions.order-details.assertProductListed
  #     - executeFunction:
  #         name: mx.functions.order-details.assertProductPrice
  #     - if:
  #           condition: ${productType} == 'pieces'
  #           then:
  #             - executeFunction:
  #                 name: mx.functions.order-details.assertProductOrderedQuantityAsPieces
  #           else:
  #             - if:
  #                   condition: ${productType} == 'weight'
  #                   then:
  #                     - executeFunction:
  #                         name: mx.functions.order-details.assertProductOrderedQuantityAsWeight
  #                   else:
  #                     - if:
  #                           condition: ${productType} == 'dual'
  #                           then:
  #                             - executeFunction:
  #                                 name: mx.functions.order-details.switchProductToPieces
  #                             - executeFunction:
  #                                 name: mx.functions.order-details.assertProductOrderedQuantityAsPieces
  #                             - executeFunction:
  #                                 name: mx.functions.order-details.switchProductToWeight
  #                             - executeFunction:
  #                                 name: mx.functions.order-details.assertProductOrderedQuantityAsWeight
  #                           else:
  #                             - failTest:
  #                                 message: "There was a problem with the product type: ${productType}"
  #     - executeFunction:
  #         name: mx.functions.order-details.isProductAvailable
  #     - if:
  #           condition: ${returnedIsProductAvailable} == false
  #           then:
  #             - log: 
  #                   message: "The product is not available, skipping assertions for available products..."
  #                   color: CYAN
  #           else:
  #             - log: 
  #                   message: "The product is available, flow will continue..."
  #                   color: CYAN
  #             - executeFunction:
  #                 name: mx.functions.order-details.isProductAddedToCart
  #             - if:
  #                   condition: ${returnedIsProductAddedToCart} == false
  #                   then:
  #                     - log:
  #                           message: "The product is not in cart, skipping added product assertions..."
  #                           color: CYAN
  #                   else:
  #                     - if:
  #                           condition: ${returnedIsProductAddedToCart} == true
  #                           then:
  #                             - log:
  #                                 message: "The product is in cart, flow will continue..."
  #                                 color: CYAN
  #                             - if:
  #                                   condition: ${productType} == 'pieces'
  #                                   then:
  #                                     - executeFunction:
  #                                         name: mx.functions.order-details.assertProductAddedQuantityAsPieces
  #                                   else:
  #                                     - if:
  #                                           condition: ${productType} == 'weight'
  #                                           then:
  #                                             - executeFunction:
  #                                                 name: mx.functions.order-details.assertProductAddedQuantityAsWeight
  #                                           else:
  #                                             - if:
  #                                                   condition: ${productType} == 'dual'
  #                                                   then:
  #                                                     - executeFunction:
  #                                                         name: mx.functions.order-details.switchProductToPieces
  #                                                     - executeFunction:
  #                                                         name: mx.functions.order-details.assertProductAddedQuantityAsPieces
  #                                                     - executeFunction:
  #                                                         name: mx.functions.order-details.switchProductToWeight
  #                                                     - executeFunction:
  #                                                         name: mx.functions.order-details.assertProductAddedQuantityAsWeight
  #                                                   else:
  #                                                     - failTest:
  #                                                         message: "There might be a problem with the product type received: ${productType}"
  #     - log:
  #           message: "End flow: od.order-details.assertProductDetails"
  #           color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Performs all the assertions related to products. The assertions include: whether the product is listed
  #   or not, price, subtotal, and ordered quantity. These group of assertions are the assertions related to the order
  #   creation; all the assertions related to add the products to the Cart from the Order Details Page should be
  #   handled separately.
  # Params:  ${productName}                      [Mandatory]  Expected product name.
  #          ${expectedPrice}                    [Mandatory]  Expected product price to assert.
  #          ${expectedSubtotal}                 [Mandatory]  Expected product subtotal to assert.
  #          ${productType}                      [Mandatory]  Use a 'getProductType' function to get this value.
  #          ${expectedOrderedQuantityAsPieces}  [Mandatory]  Quantity to assert as pieces. (Ignored if not needed).
  #          ${expectedOrderedQuantityAsWeight}  [Mandatory]  Quantity to assert as weight (no need to add the "g" but 
  #                                                           value must be in grams). (Ignored if not needed).
  - name: mx.flows.od.order-details.assertProductDetails
    flow:
      - executeFunction:
          name: mx.functions.order-details.assertProductListed # Use ${productName} param automatically
      - executeFunction:
          name: mx.functions.order-details.assertProductPrice # Use ${productName} and ${expectedPrice} params automatically
      - executeFunction:
          name: mx.functions.order-details.assertProductSubtotal # Use ${productName} and ${expectedSubtotal} params automatically
      - log:
          message: "Product Type: '${productType}'"
          color: CYAN
      - if:
          condition: ${productType} == 'Pieces'
          then:
            - executeFunction:
                name: mx.functions.order-details.assertProductOrderedQuantityAsPieces # Use ${productName} and ${expectedOrderedQuantityAsPieces} params automatically
          else:
            - if:
                condition: ${productType} == 'Weight' || ${productType} == 'Weighable'
                then:
                  - executeFunction:
                      name: mx.functions.order-details.assertProductOrderedQuantityAsWeight # Use ${productName} and ${expectedOrderedQuantityAsWeight} params automatically
                else:
                  - if:
                      condition: ${productType} == 'Dual'
                      then:
                        - executeFunction:
                            name: mx.functions.order-details.assertProductOrderedQuantityAsWeight # Use ${productName} and ${expectedOrderedQuantityAsWeight} params automatically
                      else:
                        - failTest:
                            message: "Incorrect Product Type provided: '${productType}'"
      - log:
          message: "End flow: od.order-details.assertProductDetails"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This flow performs assertions on the first section of the page without Addresses or Totals information.
  #
  # PARAMS:
  #     ${orderNumber}              [Mandatory]
  #         The Order Number expected to be displayed its details in the screen.
  #
  #     ${expectedOrderedDate}      [Mandatory]
  #         Ordered Date expected to be displayed.
  #         NOTE: when the order is placed the backend will obtain the date and assign it to the Order. When executing
  #         the automation the date can be obtained too, but separate from the backend process. Specially, near midnight,
  #         these 2 dates may differ due to the gap in time between the 2 calculations. To reduce the risk of this gap,
  #         obtain the order date right after placing the order. You can do it in 2 ways:
  #             1) By executing the 'mx/test/helpers/utils/getTodaysDateAsStringForAssertion.js' helper, or
  #             2) If you executed function 'mx.functions.review-order.tapPlaceOrder', this function will execute the
  #                helper mentioned in (1) and return the date.
  #
  #     ${expectedDeliveryMethod}   [Mandatory]
  #         Delivery Method expected to be displayed. Values: [ HomeDelivery | PickupDelivery ].
  #
  #     ${expectedOrderStatus}      [Mandatory]
  #         Expected Status the order should display. Values: [ Received | Preparing | Ready4Pickup | OnTheWay | Delivered ].
  #
  #     ${expectedBanner}           [Mandatory]
  #         Banner expected to be displayed. Values: [ Walmart | WalmartExpress ].
  #
  #     ${expectedDaySlot}          [Mandatory]
  #         Expected day the Delivery Slot should display. Use the value returned by 'mx.functions.reserve-slot.getSelectedDaySlot'.
  #                                                  
  #     ${expectedTimeSlot}         [Mandatory]
  #         Expected time the Delivery Slot should display. Use the value returned by 'mx.functions.reserve-slot.getSelectedTimeSlot'.
  #
  #     ${expectedProductsCount}    [Mandatory]
  #         Expected total quantity of purchased products. This value represents how many different products were
  #         added to the cart and not a sum of the quantity of all the products.
  #         i.e. If the user purchased 5 apples and 2 oranges, the ${expectedProductsCount} must be 2 (the number
  #         of products) instead of 7 (the sum of the quantities).
  #
  # USES FLAGS:
  #     ${ASSERT_DELIVERY_SLOT_IN_ORDER_DETAILS}
  #         If set to 'true', the flow will perform assertion for the Delivery Slot in Order Details page.
  #         If set to 'false' or not set at all, it will perform the Delivery Slot assertion as expected.
  #
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.flows.od.order-details.assertDetailsWithoutAddressAndTotalsInformation
    flow:
      - log:
          message: "For Order: ${orderNumber}"
          color: CYAN
      - executeFunction:
          name: mx.functions.order-details.assertCorrectOrderDisplayed
          params:
            - name: expectedOrderNumber
              string: ${orderNumber}
      - executeFunction:
          name: mx.functions.order-details.assertOrderedDate
          params:
            - name: expectedOrderedDate
              string: ${expectedOrderedDate}
      - executeFunction:
          name: mx.functions.order-details.assertDeliveryMethod
          params:
            - name: expectedDeliveryMethod
              string: ${expectedDeliveryMethod}
      - executeFunction:
          name: mx.functions.order-details.assertStatus
          params:
            - name: expectedOrderStatus
              string: ${expectedOrderStatus}
      - executeFunction:
          name: mx.functions.order-details.assertBanner
          params:
            - name: expectedBanner
              string: ${expectedBanner}
      - executeFunction:
          name: mx.functions.utils.getDeliverySlot
          params:
              - name: forPage
                string: 'OrderDetails'
              - name: selectedDaySlot
                string: ${expectedDaySlot}
              - name: selectedTimeSlot
                string: ${expectedTimeSlot}
      - executeFunction:
          name: mx.functions.order-details.assertDeliverySlot
          params:
            - name: expectedDeliverySlot
              string: ${returnedDeliverySlot}
      - executeFunction:
          name: mx.functions.order-details.assertTotalProductsCount
          params:
            - name: expectedProductsCount
              string: ${expectedProductsCount}
      - log:
          message: "End flow: od.order-details.assertDetailsWithoutAddressAndTotalsInformation"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This flow performs all the assertions related to Totals and Payment.
  # NOTE:   The expected subtotal must always be equal to the sum of all the product's subtotals, but if there's a
  #           product with the multi-savings promotion activated, then it is important that the tester retrieves the
  #           returned product subtotal value from: mx.flows.od.cart.quickPerformProductAssertions
  #           or: mx.flows.od.cart.performProductAssertions
  #           To calculate the new subtotal. This flow also calculates the final Total of the purchase.
  #
  # PARAMS:
  #     ${expectedPaymentMethod}    [Mandatory]
  #         Expected Payment Method to be displayed. Values: [ CC/DC | PayAtDelivery | Paypal ].
  #
  #     ${expectedSubtotal}         [Mandatory]
  #         Expected Subtotal to be displayed. Provide a value without currency symbol '$' and with 2 decimals.
  #
  #     ${expectedDeliveryFee}      [Mandatory]
  #         Delivery Fee expected to be displayed. Provide a value without currency symbol '$' and with 2 decimals.
  #         If 'null', assertion will be skipped and flow will assume Delivery Fee equals '0.00'.
  #
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.flows.od.order-details.assertTotals
    flow:
      # Payment Method Assertion...
      - executeFunction:
          name: mx.functions.order-details.assertPaymentMethod
          params:
            - name: expectedPaymentMethod
              string: ${expectedPaymentMethod}

      # Delivery Fee assertion...
      - log:
          message: "Delivery Fee assertion..."
          color: CYAN
      - if:
          condition: ${expectedDeliveryFee} == null
          then:
            - log:
                message: "Delivery Fee Assertion Skipped (expectedDeliveryFee = null)"
                color: CYAN
            - storeIn:
                key: expectedDeliveryFee
                value: '0.00'
          else:
            - executeFunction:
                name: mx.functions.order-details.assertDeliveryFee
                params:
                  - name: expectedDeliveryFee
                    string: ${expectedDeliveryFee}
      - arithmetic:
          expression: ${expectedSubtotal} + ${expectedDeliveryFee}
          numberOfDecimalPlaces: 2
          storeIn: expectedGrandTotal

      # Subtotal assertion...
      - log:
          message: "Subtotal assertion..."
          color: CYAN
      # Checking if there are discounts present...
      - log: 
          message: "Checking if there are Discounts present"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.order-details.discountIndicator
          then:
            - log:
                message: "No Discounts detected..."
                color: CYAN
            - executeFunction:
                name: mx.functions.order-details.assertSubtotal
                params:
                  - name: expectedSubtotal
                    string: ${expectedSubtotal}
          else:
            - log:
                message: "Discounts detected..."
                color: CYAN
            - executeFunction:
                name: mx.flows.od.order-details.assertSubtotalsIfDiscountsArePresent
                params:
                  - name: subtotalAfterDiscount
                    string: ${expectedSubtotal}

      # Final Total assertion...
      - log:
          message: "Calculated Grand Total: ${expectedGrandTotal}"
          color: CYAN
      - executeFunction:
          name: mx.functions.order-details.assertTotal
          params:
            - name: expectedTotal
              string: ${expectedGrandTotal}
      - log:
          message: "End flow: od.order-details.assertTotals"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # Description:
  #   This method asserts the subtotal before and after discounts, it assumes there were discounts in the cart.
  # PARAMS:
  #   ${subtotalAfterDiscount}  [Mandatory]  Cart Subtotal Amount. Do not change this param name.
  #                                   If there were discounts in cart, this value should be equal to the sum of all product subtotals
  #                                   after the discounts (the multi-savings promotion affects product subtotal).
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.flows.od.order-details.assertSubtotalsIfDiscountsArePresent
    flow:
      - log:
          message: "Subtotal After Discount Amount: '${subtotalAfterDiscount}'"
          color: CYAN
      # Retrieving displayed discount value...
      - executeFunction:
          name: mx.functions.order-details.getDiscountFromTotalsSection #--[RETURNS]--${returnedDiscount}-->
      # Calculating Subtotal value before Discount...
      - log:
          message: Calculating Subtotal value Before Discount...
          color: CYAN
      - arithmetic:
          expression: ${subtotalAfterDiscount} + (${returnedDiscount} * (-1)) # This is because the discount value contains the minus sign.
          numberOfDecimalPlaces: 2
          storeIn: subtotalBeforeDiscount
      - log:
          message: "Calculated Subtotal value before discount got: '${subtotalBeforeDiscount}'"
          color: CYAN
      - executeFunction:
          name: mx.functions.order-details.assertSubtotal
          params:
            - name: expectedSubtotal
              string: ${subtotalBeforeDiscount}
      - log:
          message: "End function: order-details.assertSubtotalsIfDiscountsArePresent"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Cancels the order from Order Details page.
  # PARAMS:  ${cancelReason}       [Optional]  Option to be selected as cancel reason.
  #                                              If not provided or provided as 'null', default option will be selected.
  #          ${performValidation}  [Optional]  Whether to perform validation of cancellation or not. If not provided or
  #                                            provided as null, it will be taken as false.
  # AUTHOR:  Rodrigo Pacheco (vn53p0i)
  # EDITOR:  Sergio Fernandez (vn0t1qt)
  - name: mx.flows.od.order-details.cancelOrder
    flow:
      # Check for params...
      - if:
          condition: ${cancelReason} == null
          then:
            - storeIn:
                key: cancelReason
                value: mx.data.order-cancellation.defaultReason
      - storeIn:
          key: reasonsArray
          value: mx.data.order-cancellation.reasonsArray
      - executeFunction:
          name: mx.functions.utils.arrayContains
          params:
            - name: arrayToCheck
              string: ${reasonsArray}
            - name: elementToCheck
              string: ${cancelReason}
      - if:
          condition: "!${returnedArrayContains}"
          then:
            - failTest:
                message:  "X Order Cancellation Failed: invalid value '${cancelReason}' for param <cancelReason>."
      - if:
          condition: ${performValidation} == null
          then:
            - storeIn:
                key: performValidation
                value: 'false'
      - if:
          condition: ${performValidation} != true && ${performValidation} != false
          then:
            - failTest:
                message:  "X Order Cancellation Failed: invalid value '${performValidation}' for param <performValidation>."
      - log:
          message: "Params: [ cancelReason = '${cancelReason}', performValidation = '${performValidation}' ]"
          color: CYAN
      # Cancel Order...
      - executeFunction:
          name: mx.functions.order-details.tapCancelOrder
      - executeFunction:
          name: mx.functions.order-details.cancel-order-popup.assertPopupDisplayed
      - executeFunction:
          name: mx.functions.order-details.cancel-order-popup.selectReason
          params:
            - name: reason
              string: ${cancelReason}
      - executeFunction:
          name: mx.functions.order-details.cancel-order-popup.tapConfirmCancelButton
      # Perform validation if required...
      - if:
          condition: ${performValidation} == true
          then:
            - sleep:
                duration: 3000
            - executeFunction:
                name: mx.functions.utils.scrollToTop
                params:
                  - name: elementAtTheTop
                    string: mx.mappings.order-details.orderNumberLabel
            - executeFunction:
                name: mx.functions.order-details.assertCancelledOrderDisplayed
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.order-details.totalLabel
            - executeFunction:
                name: mx.functions.order-details.assertInvoiceNotAvailable
            - executeFunction:
                name: mx.functions.order-details.assertOrderTotal
                params:
                  - name: orderTotal
                    string: "0.00"
            - log:
                message: 'â Successful Assertion: Order Cancelled.'
                color: GREEN_BOLD
      # Set back default optional parameters...
      - storeIn:
          key: cancelReason
          value: 'null'
      - storeIn:
          key: performValidation
          value: false
      - log:
          message: "End flow: mx.flows.od.order-details.cancelOrder"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Asserts the information of the given Order number in the Orders History Page.
  #              The Order Number is provided in the variable ${orderInfo}.
  #
  # PARAMS: ${orderInfo}  [Mandatory]
  #             A Json string containing the Order Information displayed in the Order Confirmation/Thank You Page.
  #             This value is obtained by the function 'mx.functions.order-confirmation.getOrderInformation', see its
  #             documentation for additional details.
  #
  # AUTHOR: Isis Tolentino (vn53dge)
  - name: mx.flows.od.order-details.assertOrderInformation
    flow:
      - log:
          message: 'Order Information to be asserted: ${orderInfo}'
          color: CYAN
      # Extract the individual values to use from the ${orderInfo} Json string...
      - executeNode:
          file: mx/test/helpers/utils/getJsonValues.js
          args:
            - value: ${orderInfo}
          getValue:
            - key: orderNumber
              storeIn: orderNumber
            - key: fulfillmentType
              storeIn: fulfillmentType
            - key: fulfillmentAddressRaw
              storeIn: fulfillmentAddressRaw
            - key: itemsCount
              storeIn: productsCount
            - key: paymentMethod
              storeIn: paymentMethod
            - key: orderTotal
              storeIn: orderTotal

      # Perform assertions...
      - sleep:
          duration: 5000
      - executeFunction:
          name: mx.functions.order-details.assertCorrectOrderDisplayed # <-- ${orderNumber}
      - executeFunction:
          name: mx.functions.order-details.assertOrderFulfillmentType # <-- ${fulfillmentType}
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.order-details.statusMessageLabel
      - executeFunction:
          name: mx.functions.order-details.assertOrderedFulfillmentDate
      - executeFunction:
          name: mx.functions.order-details.assertFulfillmentAddress # <-- ${fulfillmentAddressRaw}
      - executeFunction:
          name: mx.functions.order-details.assertOrderProductsCount # <-- ${productsCount}
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.order-details.totalLabel
      - executeFunction:
          name: mx.functions.order-details.assertPaymentMethod # <-- ${paymentMethod}
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.order-details.subtotalLabel
            - identifier: mx.mappings.order-details.discountLabel
            - identifier: mx.mappings.order-details.deliveryFeeLabel
      - executeFunction:
          name: mx.functions.order-details.assertOrderTotal # <-- ${orderTotal}
      - log:
          message: 'â Successful Assertion: Order Information correct.'
          color: GREEN_BOLD
      - log:
          message: "End flow: mx.flows.od.orders-history.assertOrderInformation"
          color: BLUE
