#======================================================================================================================
#    AUTHOR: Octavio Cabrales Zárate (vn53g23)
#   CREATED: Aug/02/2023
#  REVISION: ---
#
#  Copyright © 2023 Walmart. All rights reserved.
#======================================================================================================================

functions:

# Description: This flow adds two random products to cart. 
  - name: mx.flows.od.home.addFirst2ProductsToCart
    platform: ios
    flow: 
      - storeIn:
          key: subtotalHome
          value: 0
      - storeIn:
          key: expectedProductsCount
          value: 0
      - loop:
          begin: 1
          storeIndex: i
          mode: increment
          end: 3
          flow:
            - executeFunction:
                name: mx.functions.utils.searchItemInPage
                params: 
                  - name: elementToFind
                    string: mx.mappings.home.notTuesdaySection
                  - name: direction
                    string: down
            - getString:
                identifier: mx.mappings.home.genericNameWithAddToCartButtonAndIndex
                storeIn: productName
            - click:
                identifier: mx.mappings.home.carousel.addToCartButtonByProductName
            - sleep:
                duration: 3000
            - arithmetic:
                expression: ${expectedProductsCount} + 1
                storeIn: expectedProductsCount
            - getString:
                identifier: mx.mappings.home.carousel.carouselNameByProductName
                storeIn: carouselName
            - if:
                condition: ${i} == 1
                then:
                  - storeIn:
                      key: product1Name
                      value: ${productName}
                else:
                  - storeIn:
                      key: product2Name
                      value: ${productName}
            - getString:
                identifier: mx.mappings.home.carousel.productPriceByProductName
                storeIn: productUnitPrice
            - executeNode:
                file: mx/test/helpers/home/isPreviousPricePresent.js
                args:
                  - value: ${productUnitPrice}
                getResponse:
                  storeIn: twoPricesFlag
            - if:
                condition: ${twoPricesFlag}
                then:
                  - if:
                      condition: ${i} == 1
                      then:
                        - executeNode:
                            file: mx/test/helpers/home/getPreviousPrice.js
                            args:
                              - value: ${productUnitPrice}
                            getResponse:
                              storeIn: originalPrice1
                        - executeNode:
                            file: mx/test/helpers/slp/sanitizePrice.js
                            args:
                              - value: ${originalPrice1}
                            getResponse:
                              storeIn: originalPrice1
                      else:
                        - executeNode:
                            file: mx/test/helpers/home/getPreviousPrice.js
                            args:
                              - value: ${productUnitPrice}
                            getResponse:
                              storeIn: originalPrice2
                        - executeNode:
                            file: mx/test/helpers/slp/sanitizePrice.js
                            args:
                              - value: ${originalPrice2}
                            getResponse:
                              storeIn: originalPrice2
            - executeNode:
                file: mx/test/helpers/home/isKgPresent.js
                args:
                  - value: ${productUnitPrice}
                getResponse:
                  storeIn: flag
            - if:
                condition: ${flag} == true
                then:
                  - executeFunction:
                      name: mx.functions.home.carousel.switchProductToWeight
                  - getString:
                      identifier: mx.mappings.home.carousel.weightQuantity
                      storeIn: productQuantity
                  - executeNode:
                      file: mx/test/helpers/slp/sanitizePrice.js
                      args:
                        - value: ${productUnitPrice}
                      getResponse:
                        storeIn: productUnitPrice
                  - executeNode:
                      file: mx/test/helpers/home/getDiscountPrice.js
                      args:
                        - value: ${productUnitPrice}
                      getResponse:
                        storeIn: productUnitPrice
                  - if:
                      condition: ${i} == 1
                      then:
                        - storeIn:
                            key: product1UnitPrice
                            value: ${productUnitPrice}
                      else:
                        - storeIn:
                            key: product2UnitPrice
                            value: ${productUnitPrice}
                  - executeNode:
                      file: mx/test/helpers/slp/sanitizePrice.js
                      args:
                        - value: ${productQuantity}
                      getResponse:
                        storeIn: productQuantity
                  - if:
                      condition: ${i} == 1
                      then:
                        - storeIn:
                            key: product1Quantity
                            value: ${productQuantity}
                      else:
                        - storeIn:
                            key: product2Quantity
                            value: ${productQuantity}
                  - arithmetic:
                      expression: ${productQuantity} / 1000
                      storeIn: productQuantity
                      numberOfDecimalPlaces: 3 
                else:
                  - getString:
                      identifier: mx.mappings.home.carousel.piecesQuantity
                      storeIn: productQuantity
                  - if:
                      condition: ${i} == 1
                      then:
                        - storeIn:
                            key: product1Quantity
                            value: ${productQuantity}
                      else:
                        - storeIn:
                            key: product2Quantity
                            value: ${productQuantity}
                  - executeNode:
                      file: mx/test/helpers/slp/sanitizePrice.js
                      args:
                        - value: ${productUnitPrice}
                      getResponse:
                        storeIn: productUnitPrice
                  - executeNode:
                      file: mx/test/helpers/home/getDiscountPrice.js
                      args:
                        - value: ${productUnitPrice}
                      getResponse:
                        storeIn: productUnitPrice
                  - if:
                      condition: ${i} == 1
                      then:
                        - storeIn:
                            key: product1UnitPrice
                            value: ${productUnitPrice}
                      else:
                        - storeIn:
                            key: product2UnitPrice
                            value: ${productUnitPrice}
            - arithmetic:
                expression: (${productUnitPrice} * ${productQuantity})
                storeIn: subtotalProduct
                numberOfDecimalPlaces: 3
            - executeNode:
                file: mx/test/helpers/home/roundUp.js
                args:
                  - value: ${subtotalProduct}
                getResponse:
                  storeIn: subtotalProduct
            - executeFunction:
                name: mx.functions.home.assertSubtotalAdditionToCart
                params:
                  - name: subtotal
                    string: ${subtotalProduct}
                  - name: previousCartSubtotal
                    string: ${subtotalHome}
      - storeIn:
          key: totalQuantity
          value: 2
      - log:
          message: Succesfully added 2 products to cart
          color: CYAN
      - log:
          message: "End flow: od.home.addFirst2ProductsToCart"
          color: BLUE
            

