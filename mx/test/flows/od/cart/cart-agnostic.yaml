#======================================================================================================================
#    AUTHOR: Sergio Fernandez Aldana (vn0t1qt))
#   CREATED: Feb/17/2023
#  REVISION: ---
#
#  Copyright Â© 2023 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This function goes back to cart.
  # AUTHOR: Rodrigo Pacheco - vn53p0i
  - name: mx.flows.od.cart.backToCart
    flow:
      - loop:
          begin: 1
          end: 10
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: mx.mappings.cart.cartBanner
                then:
                  - log:
                      message: "Cart page not displayed, navigating to previous page..."
                      color: GREEN
                  - goBack: true
                  - if:
                      identifier:
                        present:
                          - identifier: mx.mappings.review-order.almost-done-popup.exitPaymentButton
                      then:
                        - click:
                            identifier: mx.mappings.review-order.almost-done-popup.exitPaymentButton
                  - sleep:
                      duration: 1000
                else:
                  - log:
                      message: "Successfully back to Cart."
                      color: CYAN
                  - break: true
      - log:
          message: "End flow: flows.od.cart.backToCart"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # Description: This method verifies all the data inside the selected delivery method slot.
  #                If HomeDelivery is selected, the function validates: Delivery slot, user short address and delivery fee.
  #                If PickupDelivery is selected: Store address and delivery slot.
  # Params: ${deliveryMethod}    [Mandatory]  Expected selected delivery method (Input: [ HomeDelivery | PickupDelivery ]).
  #         ${deliverySlot}      [Mandatory]  Expected delivery slot, obtained from mx.functions.utils.getDeliverySlot
  #         ${userShortAddress}  [Mandatory]  Expected short version of user address ( {steet} + {extNum} ).
  #                                             Set to 'null' if pickup delivery is selected.
  #         ${storeAddress}      [Mandatory]  Expected store address. Set to 'null' if home delivery is selected.
  #       ${expectedDeliveryFee} [Mandatory]  Expected delivery fee cost, obtained from mx.functions.cart.getDeliveryFee
  #                                             or any other function that extracts this value from a different page.
  #                                             Set to 'null' if pickup delivery is selected.
  #                                             This value must be an integer for iOS, it does not have decimals.
  - name: mx.flows.od.cart.assertDeliveryMethodSlot
    flow:
      - if:
          condition: ${deliveryMethod} != 'HomeDelivery' && ${deliveryMethod} != 'PickupDelivery'
          then:
            - failTest:
                message: "Wrong input, verify delivery method supplied: ${deliveryMethod}"
      - executeFunction:
          name: mx.functions.cart.assertDeliveryMethod
      - if:
          condition: ${deliveryMethod} == 'HomeDelivery'
          then:
            - log:
                message: "Checking Home slot contains the next data - User short address: ${userShortAddress} / Delivery fee validation, expected: ${deliveryFee}"
                color: CYAN
            - executeFunction:
                name: mx.functions.cart.assertHomeSlotAddress
            - executeFunction:
                name: mx.functions.cart.assertHomeSlotDeliveryFee
      - if:
          # NOTE: CREATE THE NEEDED FUNCTON(S) FOR PICKUP VALIDATIONS
          condition: ${deliveryMethod} == 'PickupDelivery'
          then:
            - log:
                message: "Create the needed function(s) that uses the parameter: storeAddress"
                color: YELLOW
      - executeFunction:
          name: mx.functions.cart.assertDeliverySlot
      - log:
          message: "End flow: cart.assertDeliveryMethodSlot"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # Description: This method verifies all the data inside the home delivery method slot after selecting a date slot.
  #                This function validates: Delivery method is 'HomeDelivery', Delivery slot, user address and delivery fee.
  # Params: 
  #         ${deliverySlot}                [Mandatory]  Expected delivery slot, obtained from mx.functions.utils.getDeliverySlot
  #         ${expectedUserStreet}          [Mandatory]  User's street gotten from: mx.functions.reserve-slot.getSelectedAddress
  #         ${expectedUserExteriorNumber}  [Mandatory]  User's extNum gotten from: mx.functions.reserve-slot.getSelectedAddress
  #         ${expectedDeliveryFee}         [Mandatory]  Expected delivery fee cost, obtained from mx.functions.cart.getDeliveryFee
  #                                                       or any other function that extracts this value from a different page.
  #                                                       This value must be an integer for iOS, it does not have decimals.
  - name: mx.flows.od.cart.assertHomeSlotSelected
    flow:
      - log:
          message: "Checking Home slot contains the next data - Selected delivery method is: 'HomeDelivery' / User Street: ${expectedUserStreet} and User Exterior Number: ${expectedUserExteriorNumber} / Delivery fee validation, expected: ${expectedDeliveryFee}"
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.assertDeliveryMethod
          params:
            - name: deliveryMethod
              string: "HomeDelivery"
      - executeFunction:
          name: mx.functions.cart.assertHomeSlotAddressByIndividualValues
          params:
            - name: streetName
              string: ${expectedUserStreet}
            - name: exteriorNumber
              string: ${expectedUserExteriorNumber}
      - sleep:
          duration: 5000
      - executeFunction:
          name: mx.functions.cart.assertHomeSlotDeliveryFee
      - executeFunction:
          name: mx.functions.cart.assertDeliverySlot
      - log:
          message: "End flow: cart.assertHomeSlotSelected"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Executes the process to reserve a slot and performs the appropriate assertions. This method is able to
  #   select both Pickup or Home Delivery methods, as well as to perform the different appropriate actions upon the
  #   delivery place based on the selected Delivery Method (review the list of parameters to understand these).
  #
  # PARAMS:
  #   ${deliveryMethod}   [Mandatory]
  #       Delivery Method to be selected during the slot selection process. Options: [ HomeDelivery | PickupDelivery ]
  #
  #   ${deliveryPlaceAction}   [Mandatory]
  #       Action to be performed upon the current selected Store/Address. Options: [ Maintain | AddAddress | Change ]
  #         - Maintain:
  #               Used for both Home and Pickup Delivery methods. Keeps the current selected Store/Address.
  #         - AddAddress:
  #               Used only for Home Delivery method. Adds a new Address during the reservation process and selects it
  #               as the home address where the order will be delivered. If 'PickupDelivery' method is selected in
  #               combination with this action, the process will disregard this action and will maintain the currently
  #               selected store as no other action can be performed.
  #         - Change:
  #               Used for both Home and Pickup Delivery methods. Selects a different store or home address where the
  #               order will be delivered. In the case of Home Delivery, the address to be selected should be an existing
  #               address.
  #
  #   ${zipCode}   [Conditional]
  #       Used only for Pickup Delivery when the selected action is to Change Store (disregarded for Home Delivery).
  #       ZIP code where to find for the desired store to be changed to.
  #
  #   ${storeName}   [Conditional]
  #       Used only for Pickup Delivery when the selected action is to Change Store (disregarded for Home Delivery).
  #       Name of the store to be changed to.
  #
  #   ${addressName}   [Conditional]
  #       Used only for Home Delivery when the selected action is to Change the Delivery Address (disregarded for Pickup Delivery).
  #        Name of the address to be changed to.
  #
  #   ${slotDate}   [Mandatory]
  #       Desired Slot Date to select. Options: [ today | tomorrow | dayAfterTomorrow | firstAvailable | lastAvailable | random ]
  #
  #   ${slotTime}   [Mandatory]
  #       Desired Slot Time to select. Options: [ firstAvailable | lastAvailable | random ]
  #
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.flows.od.cart.reserveSlot
    flow:
      - executeFunction:
          name: mx.functions.cart.tapReserveSlot
      - executeFunction:
          name: mx.functions.reserve-slot.address-message-popup.closePopupIfDisplayed
      - executeFunction:
          name: mx.functions.reserve-slot.assertPageDisplayed
      # Delivery Method Selection... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      - log:
          message: "Delivery Method Option: '${deliveryMethod}'"
          color: CYAN
      # Delivery Method check...
      - if:
          condition: ${deliveryMethod} != 'HomeDelivery' && ${deliveryMethod} != 'PickupDelivery'
          then:
            - failTest:
                message: "Function Failed: 'deliveryMethod' option not valid: '${deliveryMethod}'"
      # Select Home Delivery...
      - if:
          condition: ${deliveryMethod} == 'HomeDelivery'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.tapHomeDeliveryMethod
     # Select Pickup Delivery...
      - if:
          condition: ${deliveryMethod} == 'PickupDelivery'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.tapPickupDeliveryMethod
      # Delivery Place Action... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      - log:
          message: "Delivery Place Action: '${deliveryPlaceAction}'"
          color: CYAN
      # Delivery Place Action check...
      - if:
          condition: ${deliveryPlaceAction} != 'Maintain' && ${deliveryPlaceAction} != 'AddAddress' && ${deliveryPlaceAction} != 'Change'
          then:
            - failTest:
                message: "Function Failed: 'deliveryPlaceAction' not valid: '${deliveryPlaceAction}'"
      # Maintain + HomeDelivery | PickupDelivery = Maintain Store / Address...
      - if:
          condition: ${deliveryPlaceAction} == 'Maintain'
          then:
            - log:
                message: Currently selected Store/Address will be maintained
                color: CYAN
      # Change + HomeDelivery = Change Address...
      - if:
          condition: ${deliveryPlaceAction} == 'Change' && ${deliveryMethod} == 'HomeDelivery'
          then:
            - executeFunction:
                name: mx.flows.od.reserve-slot.changeDeliveryAddress # <--PARAM--${addressName}
      # Change + PickupDelivery = Change Store...
      - if:
          condition: ${deliveryPlaceAction} == 'Change' && ${deliveryMethod} == 'PickupDelivery'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.tapChange
            - executeFunction:
                name: mx.functions.store-selector-popup.assertPageDisplayed
            - executeFunction:
                name: mx.functions.store-selector-popup.enterZipCode # <--PARAM--${zipCode}
            - executeFunction:
                name: mx.functions.utils.waitUntilMappingDisappear
                params:
                  - name: mapping
                    string: mx.mappings.store-selector-popup.loadingSpinner
            - executeFunction:
                name: mx.functions.store-selector-popup.selectStore # <--PARAM--${storeName}
            - executeFunction:
                name: mx.functions.store-selector-popup.tapSave
            - executeFunction:
                name: mx.functions.reserve-slot.assertSelectedStore # <--PARAM--${storeName}
      # AddAddress + HomeDelivery = Add New Address...
      - if:
          condition: ${deliveryPlaceAction} == 'AddAddress' && ${deliveryMethod} == 'HomeDelivery'
          then:
            # TODO: CODE THIS BRANCH ONCE IT IS NEEDED IN ANY OF THE TEST CASES !!!!!
            - log:
                message: "Reserve Slot cannot 'AddAddress' for 'HomeDelivery' yet. Process will do nothing and will tyr to continue."
                color: YELLOW
            - log:
                message: "TODO: CODE 'AddAddress' + 'HomeDelivery' ONCE IS REQUIRED IN ANY OF THE TEST CASES."
                color: YELLOW
      # AddAddress + PickupDelivery = Invalid Combination of options (handle as Maintain Store)...
      - if:
          condition: ${deliveryPlaceAction} == 'AddAddress' && ${deliveryMethod} == 'PickupDelivery'
          then:
            - log:
                message: Delivery Place Action '${deliveryPlaceAction}' not valid for Delivery Method '${deliveryMethod}'
                color: CYAN
            - log:
                message: The Store that is currently selected will be maintained
                color: CYAN
      # Get selected Store or Address based on the Delivery Method (for future assertions)... . . . . . . . . . . . . .
      - if:
          condition: ${deliveryMethod} == 'PickupDelivery'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.getSelectedStore
                # --RETURNS--${returnedStoreName}-->
          else:
            - executeFunction:
                name: mx.functions.reserve-slot.getSelectedAddress
                # --RETURNS--${returnedDeliveryAddress}-->
                # --RETURNS--${returnedStreetName}--${returnedExteriorNumber}--${returnedCity}--${returnedState}--${returnedZipCode}-->
      # Delivery Slot - Date Selection... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      - log:
          message: "Slot Date Option: '${slotDate}'"
          color: CYAN
      # Delivery Slot Date check...
      - if:
          condition: ${slotDate} != 'today' && ${slotDate} != 'tomorrow' && ${slotDate} != 'dayAfterTomorrow' && ${slotDate} != 'firstAvailable' && ${slotDate} != 'lastAvailable' && ${slotDate} != 'random'
          then:
            - failTest:
                message: "Function Failed: 'slotDate' option not valid: '${slotDate}'"
      # Today...
      - if:
          condition: ${slotDate} == 'today'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectTodaySlot
      # Tomorrow...
      - if:
          condition: ${slotDate} == 'tomorrow'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectTomorrowSlot
      # Day After Tomorrow...
      - if:
          condition: ${slotDate} == 'dayAfterTomorrow'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectDayAfterTomorrowSlot
      # First Available...
      - if:
          condition: ${slotDate} == 'firstAvailable'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectFirstAvailableDateSlot
      # Last Available...
      - if:
          condition: ${slotDate} == 'lastAvailable'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectLastAvailableDateSlot
      # Random...
      - if:
          condition: ${slotDate} == 'random'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectRandomDateSlot
      # Delivery Slot - Time Selection... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      - log:
          message: "Slot Time Option: '${slotTime}'"
          color: CYAN
      # Delivery Slot Time check...
      - if:
          condition: ${slotTime} != 'firstAvailable' && ${slotTime} != 'lastAvailable' && ${slotTime} != 'random'
          then:
            - failTest:
                message: "Function Failed: 'slotTime' option not valid: '${slotTime}'"
      # First Available...
      - if:
          condition: ${slotTime} == 'firstAvailable'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectFirstAvailableTimeSlot
      # Last Available...
      - if:
          condition: ${slotTime} == 'lastAvailable'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectLastAvailableTimeSlot
      # Random...
      - if:
          condition: ${slotTime} == 'random'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.selectRandomTimeSlot
      # Get Delivery Fee for Home Delivery (for future assertions)... . . . . . . . . . . . . . . . . . . . . . . . . .
      - if:
          condition: ${deliveryMethod} == 'HomeDelivery'
          then:
            - executeFunction:
                name: mx.functions.reserve-slot.getSelectedTimeSlotDeliveryFee
                # --RETURNS--${returnedDeliveryFee}-->
      # Get Selected Slot (for future assertions)... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      - executeFunction:
          name: mx.functions.reserve-slot.getSelectedDaySlot
          # --RETURNS--${returnedSelectedDaySlot}-->
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            # In android, some times, when the last available slot is selected, it ends up behind the 'Reservar' button.
            # So, we need to execute a small process to make it visible again, to be able to get the values we need.
            - executeFunction:
                name: mx.functions.reserve-slot.fixForFindingSelectedTimeSlot
            - if:
                condition: ${slotTime} == 'lastAvailable'
                then:
                  - scroll:
                      direction: down
                      scrollLimit: 1
                      wait: 500
      - executeFunction:
          name: mx.functions.reserve-slot.getSelectedTimeSlot
          # --RETURNS--${returnedSelectedTimeSlot}-->
      # Reserve Slot... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      - executeFunction:
          name: mx.functions.reserve-slot.tapReserve
      # Delivery Slot Assertions (in Cart)... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
      - executeFunction:
          name: mx.functions.cart.assertPageDisplayed
      - executeFunction:
          name: mx.functions.utils.getDeliverySlot
          params:
            - name: forPage
              string: Cart
            - name: selectedDaySlot
              string: ${returnedSelectedDaySlot}
            - name: selectedTimeSlot
              string: ${returnedSelectedTimeSlot}
              # --RETURNS--${returnedDeliverySlot}-->
      # Assert for Pickup Delivery...
      - if:
          condition: ${deliveryMethod} == 'PickupDelivery'
          then:
            - executeFunction:
                name: mx.functions.cart.assertPickupSlotSelected
                params:
                  - name: deliverySlot
                    string: ${returnedDeliverySlot}
                  - name: storeName
                    string: ${returnedStoreName}
      # Assert for Home Delivery...
          else:
            - executeFunction:
                name: mx.flows.od.cart.assertHomeSlotSelected
                params:
                  - name: deliverySlot
                    string: ${returnedDeliverySlot}
                  - name: expectedDeliveryFee
                    string: ${returnedDeliveryFee}
                  - name: expectedUserStreet
                    string: ${returnedStreetName}
                  - name: expectedUserExteriorNumber
                    string: ${returnedExteriorNumber}
      - log:
          message: "End flow: cart.reserveSlot"
          color: BLUE

  #----------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Octavio Cabrales
  # EDITORS: Rodrigo Pacheco C.
  - name: mx.flows.od.cart.deleteAllProducts
    doWhile: true
    flow:
      - verifyIdentifier:
          present:
            - identifier: Eliminar
      - click:
          identifier: Eliminar
      - if:
          identifier:
            notPresent:
              - identifier: Eliminar
          then:
            - log: "\e[36mAll products have been removed from cart.\e[0m"
            - log:
                message: "End flow: od.cart.deleteAllProducts"
                color: BLUE

  #----------------------------------------------------------------------------------------------------------------------

  # Description:  This method asserts all the values in the totals section (bottom of the page). Estimated total is calculated inside this method.
  # NOTE:         When there are discounts present in cart, tester should calculate the cart Subtotal AFTER the discounts have been applied.
  #                 This function will detect if the label "Ahorras" is present in the totals section, and if it is, then
  #                 the flow will run the assertion on the subtotal AFTER the discounts, then it will capture the discounted
  #                 value from the "Ahorras" label and add it to the subtotal AFTER discounts to get the Subtotal BEFORE
  #                 discounts, and then it will run the assertion for the Subtotal BEFORE discounts. Don't forget to capture
  #                 the updated PRODUCT SUBTOTAL that the functions mx.flows.od.cart.quickPerformProductAssertions or mx.flows.od.cart.performProductAssertions
  #                 return, in case a product with multi-savings promotion was found in cart.
  # Params: 
  #          ${expectedDeliveryFee}     [Optional]    Expected delivery fee cost. Options: [ <numeric value> | null ]
  #                                                     If option is a numeric value, the method will run the delivery fee assertion.
  #                                                     If option is 'null', this assertion will be skipped.
  #          ${expectedSubtotal}        [Mandatory]   Expected subtotal (the result of the addition of all the products subtotals). If there are.
  #                                                     discounts, this value should be equal to the sum of all product subtotals AFTER discount.
  # RETURNS: ${returnedEstimatedTotal}  This is the calculated estimated total after discounts (if there are any).
  # AUTHOR: Rodrigo Pacheco C.
  - name: mx.flows.od.cart.assertTotals
    flow:
      - log:
          message: "Expected Delivery Fee: ${expectedDeliveryFee}"
          color: CYAN
      - log:
          message: "Expected Subtotal: ${expectedSubtotal}"
          color: CYAN
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.cart.estimatedTotalLeftLabel
          scrollLimit: 4
          wait: 1000
      # This scroll is needed, sometimes the estimated total gets behind the continue button.
      - scroll:
          direction: down
          scrollLimit: 1
          wait: 1000
      # Delivery Fee assertion...
      - log:
          message: "Delivery Fee assertion..."
          color: CYAN
      - if:
          condition: ${expectedDeliveryFee} == null
          then:
            - log:
                message: "Delivery Fee Assertion Skipped (expectedDeliveryFee = null)"
                color: CYAN
            - storeIn:
                key: expectedDeliveryFee
                value: '0.00'
          else:
            - executeFunction:
                name: mx.functions.cart.assertDeliveryFee
                params:
                  - name: deliveryFee
                    string: ${expectedDeliveryFee}
      # Subtotal assertion...
      - log:
          message: "Subtotal assertion..."
          color: CYAN
      - log: 
          message: "Checking if Cart has Discounts"
          color: CYAN
      - storeIn:
          key: flowSubtotalAfterDiscounts # because this flow runs similar functions, the variable ${expectedSubtotal} gets overwritten.
          value: ${expectedSubtotal}
      # Checking if cart has discounts...
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.discountLabel
          then:
            - log:
                message: "No Discounts detected..."
                color: CYAN
            - executeFunction:
                name: mx.functions.cart.assertSubtotal
                params:
                  - name: expectedSubtotal
                    string: ${expectedSubtotal}
          else:
            - log:
                message: "Discounts detected..."
                color: CYAN
            - executeFunction:
                name: mx.flows.od.cart.assertSubtotalsIfCartHasDiscounts
                params:
                  - name: cartSubtotal
                    string: ${expectedSubtotal}
      # Estimated Total assertion...
      - arithmetic:
          expression: ${flowSubtotalAfterDiscounts} + ${expectedDeliveryFee}
          numberOfDecimalPlaces: 2
          storeIn: returnedEstimatedTotal
      - log:
          message: "Running Estimated Total assertion..."
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.assertEstimatedTotalFromDetailsSection
          params:
            - name: expectedEstimatedTotal
              string: ${returnedEstimatedTotal}
      - executeFunction:
          name: mx.functions.cart.assertEstimatedTotalFromBottom
          params:
            - name: expectedEstimatedTotal
              string: ${returnedEstimatedTotal}
      - log:
          message: "Returned Estimated Total: '${returnedEstimatedTotal}'"
          color: CYAN
      - log:
          message: "End flow: cart.assertTotals"
          color: BLUE

  #----------------------------------------------------------------------------------------------------------------------

  # Description: This method removes from cart products more expensive than 1000 pesos
  # AUTHOR: Octavio Cabrales
  - name: mx.flows.cart.deleteExpensiveProducts
    flow:
      - numberOfChildElements:
          identifier: mx.mappings.cart.productRoot
          filterBy: mx.mappings.cart.linePrice
          storeIn: availableProductsQuantity
      - arithmetic:
          expression: ${availableProductsQuantity} + 1
          storeIn: itemsBound
      - storeIn:
          key: expensiveProductNamesArray
          value: ""
      - storeIn:
          key: numberOfExpensiveProducts
          value: 0
      - loop:
          begin: 1
          end: ${itemsBound}
          storeIndex: i
          flow:
            - getString:
                identifier: mx.mappings.cart.linePriceByIndex
                storeIn: currentPrice
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${currentPrice}
                getResponse:
                  storeIn: currentPrice
            - if:
                condition: ${currentPrice} > 1000
                then:
                  - getString:
                      identifier: mx.mappings.cart.productNameByIndex
                      storeIn: value
                  - arithmetic:
                      expression: ${numberOfExpensiveProducts} + 1
                      storeIn: numberOfExpensiveProducts
                  - executeNode:
                      file: mx/test/helpers/oos/setOOSArray.js
                      args:
                        - value: ${expensiveProductNamesArray}
                        - value: ${value}
                      getResponse:
                        storeIn: expensiveProductNamesArray
                  - click:
                      identifier: mx.mappings.cart.removeButtonByIndex
                  - arithmetic:
                      expression: ${cartSubtotal} - ${currentPrice}
                      storeIn: cartSubtotal
                      numberOfDecimalPlaces: 2
                  - getString:
                      identifier: mx.mappings.cart.totalBottomSection
                      storeIn: displayedEstimatedTotal
                  - executeNode:
                      file: mx/test/helpers/utils/removeCommaFromValue.js
                      args:
                        - value: ${displayedEstimatedTotal}
                      getResponse:
                        storeIn: displayedEstimatedTotal 
                  - executeNode:
                      file: mx/test/helpers/slp/sanitizePrice.js
                      args:
                        - value: ${displayedEstimatedTotal}
                      getResponse:
                        storeIn: displayedEstimatedTotal
                  - storeIn:
                      key: cartSubtotalLabel
                      value: Total estimado ${cartSubtotal}
                  - if:
                      condition: ${displayedEstimatedTotal} == ${cartSubtotalLabel}
                      then:
                        - log:
                            message: Subtotals match
                            color: CYAN
                      else:
                        - failTest:
                            message: Subtotals don't match
      - log:
          message: "End flow: cart.deleteExpensiveProducts"
          color: BLUE

  #----------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts if the cart contains the products that were not deleted due OOS section or expensive items
  # AUTHOR: Octavio Cabrales        
  - name: mx.flows.cart.assertRemainingProducts
    flow:
      - arithmetic:
          expression: 4 - (${numberOfExpensiveProducts} + ${numberOfOOSProducts})
          storeIn: remainingProducts
      - numberOfChildElements:
          identifier: mx.mappings.cart.productRoot
          filterBy: mx.mappings.cart.itemDetails
          storeIn: availableProductsQuantity
      - if:
          condition: ${remainingProducts}  == 0
          then:
            - if:
                condition: ${availableProductsQuantity} > 0
                then:
                  - failTest:
                      message: No elements should be in cart
            - failTest:
                message: No elements in cart
          else:
            - arithmetic:
                expression: ${availableProductsQuantity} + 1
                storeIn: rightBound
            - loop:
                begin: 1
                end: ${rightBound}
                storeIndex: i
                flow:
                  - getString:
                      identifier: mx.mappings.cart.productNameByIndex
                      storeIn: value
                  - executeNode:
                      file: mx/test/helpers/cart/isNamePresentInArray.js
                      args:
                        - value: ${value}
                        - value: ${oosNamesArray}
                      getResponse:
                        storeIn: presentFlag 
                  - if:
                      condition: ${presentFlag}
                      then: 
                        - if:
                            condition: ${productName} == ${product1Name}
                            then:
                              - storeIn: 
                                  key: productQuantity
                                  value: ${product1Quantity}
                              - storeIn:
                                  key: productUnitPrice
                                  value: ${product1UnitPrice}
                              - arithmetic:
                                  expression: ${product1UnitPrice} * ${product1Quantity}
                                  storeIn: productSubtotal
                        - if:
                            condition: ${productName} == ${product2Name}
                            then:
                              - storeIn: 
                                  key: productQuantity
                                  value: ${product2Quantity}
                              - storeIn:
                                  key: productUnitPrice
                                  value: ${product2UnitPrice}
                              - arithmetic:
                                  expression: ${product2UnitPrice} * ${product2Quantity}
                                  storeIn: productSubtotal
                        - if:
                            condition: ${productName} == ${product3Name}
                            then:
                              - storeIn: 
                                  key: productQuantity
                                  value: ${product3Quantity}
                              - storeIn:
                                  key: productUnitPrice
                                  value: ${product3UnitPrice}
                              - arithmetic:
                                  expression: ${product3UnitPrice} * ${product3Quantity}
                                  storeIn: productSubtotal
                        - if:
                            condition: ${productName} == ${product4Name}
                            then:
                              - storeIn: 
                                  key: productQuantity
                                  value: ${product4Quantity}
                              - storeIn:
                                  key: productUnitPrice
                                  value: ${product4UnitPrice}
                              - arithmetic:
                                  expression: ${product4UnitPrice} * ${product4Quantity}
                                  storeIn: productSubtotal
                        - executeFunction:
                            name: mx.flows.od.cart.performProductAssertions
                            params:
                              - name: productListed
                                string: "listed"
                              - name: availability
                                string: "available"
                              - name: expectedQuantity
                                string: ${productQuantity}
                              - name: expectedWeightQuantity
                                string: "null"
                              - name: expectedPrice
                                string: ${productUnitPrice}
                              - name: expectedSubtotal
                                string: ${productSubtotal}

  #----------------------------------------------------------------------------------------------------------------------

  # Description:  Add item level comment
  # PARAMS:
  #   ${itemLevelComment}  [Mandatory]     Add item level comment
  # RETURNS:
  #   ${getItemLevelComment}
  # AUTHOR: Miguel Caballero (vn55rfi)

  - name: mx.flows.cart.addItemLevelComments
    flow:
      - executeFunction:
          name: mx.functions.cart.clickAddItemLevelComment
      - executeFunction:
          name: mx.functions.cart.addItemLevelComment
      - executeFunction:
          name: mx.functions.cart.saveItemLevelComment
      - executeFunction:
          name: mx.functions.cart.assertItemLevelCommentAdded
      - log:
          message: "End flow: cart.addItemLevelComments"
          color: BLUE

  #----------------------------------------------------------------------------------------------------------------------
  # AUTHOR: Rodrigo Pacheco - vn53p0i
  # Editor: Guillermo Canales - (g0c08aj)
  - name: mx.flows.od.cart.backToListsSearch
    flow:
      - loop:
          begin: 1
          end: 10
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: mx.mappings.top-menu.searchField
                then:
                  - log:
                      message: "Lists page not displayed, navigating to previous page..."
                      color: GREEN
                  - goBack: true
                  - if:
                      identifier:
                        present:
                          - identifier: mx.mappings.review-order.almost-done-popup.exitPaymentButton
                      then:
                        - click:
                            identifier: mx.mappings.review-order.almost-done-popup.exitPaymentButton
                  - sleep:
                      duration: 1000
                else:
                  - log:
                      message: "Successfully back to Lists."
                      color: CYAN
                  - break: true
      - log:
          message: "End flow: flows.od.cart.backToListsSearch"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function increases the quantity of a product on Cart until pay at delivery threshold is exceeded.
  # Param: ${productName} [Mandatory]  Name of the product to be increased.
  # AUTHOR: Isis Tolentino (vn53dge)
  # EDITOR: Guillermo Canales (g0c08aj)

  - name: mx.flows.cart.increaseQuantityToExceedHomeDeliveryThresholdOnCart
    flow:
      - log:
          message: "Increasing quantity product: ${productName}"
          color: CYAN
      - loop:
          begin: 1
          end: 10
          flow:
            - executeFunction:
                name: mx.functions.cart.getEstimatedTotalFromBottom # --RETURNS--${returnedSummarySubtotal}-->
            - if:
                condition: ${totalBottom} < 3000
                then:
                  - log:
                      message: "Pay at delivery threshold is not reached yet..."
                      color: CYAN
                  - executeFunction:
                      name: mx.functions.cart.increaseProductQuantityBy
                      params:
                        - name: increments
                          string: "1"
                        - name: productName
                          string: ${productName}
                        - name: direction
                          string: down
                        - name: ignoreClickException
                          string: 'true'
                  - sleep:
                      duration: 3000
                else:
                  - log:
                      message: "Threshold has been reached."
                      color: CYAN
                  - break: true
      - log:
          message: "End function: cart.increaseQuantityToExceedHomeDeliveryThresholdOnCart"
          color: BLUE