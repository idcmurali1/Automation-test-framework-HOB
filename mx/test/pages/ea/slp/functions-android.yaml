#======================================================================================================================
#  AUTHOR: Rodrigo Pacheco C. (vn53p0i)
#  CREATED: Oct/18/2023
#  REVISION: ---
#
#  Copyright © 2023 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # AUTHOR: Rodrigo Pacheco Cámara (vn53p0i)
  - name: mx.functions.ea.slp.assertPageDisplayed
    platform: android
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.ea.slp.filtersContainer
          then:
              - executeFunction:
                  name: mx.functions.utils.scrollToTop
                  params:
                    - name: elementAtTheTop
                      string: mx.mappings.ea.slp.filtersContainer
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.ea.slp.resultsText
            - identifier: mx.mappings.ea.slp.resultsSection
            - identifier: mx.mappings.ea.slp.filtersContainer
      - log:
          message: "Success: Page is Displayed."
          color: GREEN_BOLD
      - log:
          message: "End function: slp.assertPageDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function asserts results displayed and returns the results number in ${returnedElementsResults}.
  # AUTHOR: Rodrigo Pacheco Cámara (vn53p0i)
  - name: mx.functions.ea.slp.assertResultsDisplayed
    platform: android
    flow:
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.ea.slp.filtersContainer
            - identifier: mx.mappings.ea.slp.resultsSection
            - identifier: mx.mappings.ea.slp.resultsText
      - getString:
          identifier: mx.mappings.ea.slp.resultsText
          storeIn: elementsResults
      - executeNode:
          file: mx/test/helpers/slp/getElementsResults.js
          args:
            - value: ${elementsResults}
          getResponse:
            storeIn: returnedElementsResults
      - log: 
          message: "${returnedElementsResults} results found"
          color: CYAN
      - log: 
          message: "End function: slp.assertResultsDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function loops through the SLP view and retrieves all the product names displayed, if product 
  #                 has a special badge ('Discount', 'Multi-savings', 'Low Stock', etc.) that product's name goes to 
  #                 a list ('List 1' for example, this way we can assert the product has been checked later on), if all
  #                 of the visible products have discounts, flow scrolls down once and starts verifying all od the
  #                 displayed products again, if the product name is already on 'List 1' it is skipped until it finds a
  #                 product without a special badge, and if it does, its name is saved in the returned variable.
  # RETURNS: ${returnedProductName}
  # AUTHOR: Rodrigo Pacheco  (vn53p0i)
  - name: mx.functions.ea.slp.getProductNameWithoutDiscount
    platform: android
    flow:
      # Hiding the bottom menu in case it gets on top of the name label of desired product...
      - executeFunction:
          name: mx.functions.ea.bottom-menu.hideBottomMenu
      # Variables setup...
      - storeIn:
          key: returnedProductName
          value: 'null'
      - storeIn:
          key: checkedProductsList
          value: 'Not Visible' # This value will skip the verification when name label is not visible.
      # This loop determines how many scrolls to perform until a product without discounts is found, 
      # if scrolls run out, function fails.
      - loop:
          begin: 1
          end: 20
          storeIndex: scrollIndex
          flow:
            # This loop checks if any of the displayed products has a special badge.
            - log:
                message: "Checking currently displayed Products..."
                color: CYAN
            - loop:
                begin: 0
                end: 4
                storeIndex: productIndex
                flow:
                  - try:
                      flow:
                        - getString:
                            identifier: mx.mappings.ea.slp.availableProductNameLabelByIndex
                            storeIn: productName
                      catch:
                        flow:
                          - log:
                              message: "Name label is not visible or product is not available, returning 'Not Visible'..."
                              color: GREEN
                          - storeIn:
                              key: productName
                              value: 'Not Visible'
                  - log:
                      message: "['${productIndex}']: '${productName}'"
                      color: CYAN
                  # Verifying if obtained product name is already on the checked products list
                  - executeNode:
                      file: mx/test/helpers/utils/stringContainsAll.js
                      args:
                        - value: ${checkedProductsList}
                        - value: ${productName}
                      getResponse:
                        storeIn: isProductChecked
                  - if:
                      condition: ${isProductChecked} == true
                      then:
                        - log:
                            message: "Product already verified, checking next Product..."
                            color: CYAN
                      else:
                        - log:
                            message: "Product NOT verified. Checking if product contains discounts..."
                            color: CYAN
                        # Verifying if product contains discounts...
                        - if:
                            identifier:
                              present:
                                - identifier: mx.mappings.ea.slp.savingsBadgeByProductName # <--VARIABLE--${productName}
                            then:
                              # Append name of product to 'checkedProductsList'...
                              - log:
                                  message: "Product has discount, adding product name to checked products list..."
                                  color: CYAN
                              - executeNode:
                                  file: mx/test/helpers/utils/appendUniqueToStringArray.js
                                  args:
                                    - value: ${checkedProductsList}
                                    - value: ${productName}
                                  getResponse:
                                    storeIn: checkedProductsList
                            else:
                              # Product without discounts found, exiting Product Verification loop...
                              - log:
                                  message: "Product without discounts found."
                                  color: CYAN
                              - storeIn:
                                  key: returnedProductName
                                  value: ${productName}
                              - break: true
            - if:
                condition: ${returnedProductName} != null
                then:
                  # If Product without discounts is found, exit scroll loop.
                  - log:
                      message: "Product without discounts found, exiting scroll loop..."
                      color: CYAN
                  - break: true
                else:
                  # If desired product hasn't been found with the currently displayed products, then scroll once and repeat...
                  - log:
                      message: "Product without discounts not found, performing scroll number: ['${scrollIndex}']"
                      color: CYAN
                  - drag:
                      from:
                        x: 50%
                        y: 60%
                      to:
                        x: 50%
                        y: 35%
      - if:
          condition: ${returnedProductName} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product without discounts.
          else:
            - log:
                message: "Name of the product without discounts got: '${returnedProductName}'"
                color: CYAN
      - log:
          message: "End function: slp.getProductNameWithoutDiscount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # PARAM:  ${productName}  [Mandatory]  Product to open its PDP.
  # AUTHOR: Rodrigo Pacheco  (vn53p0i)
  - name: mx.functions.ea.slp.openProductDetailsByName
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.ea.slp.productContainerByName #<--PARAM--${productName}
      - log:
          message: "End function: slp.openProductDetailsByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:
  #   Gets the price of the given product. It returns only the number, without '$' symbol or text at the end
  #     (like '/kg', '/pza', etc.).
  # PARAMS:
  #   ${productName}  [Mandatory]  Name of the product.
  # RETURNS:
  #   ${returnedPrice}
  #   ${returnedOriginalPrice} If available, if not, the same value as '${returnedPrice}' will be returned.
  #   ${returnedDiscountAmount} This is the amount that the user will save by purchasing the product. Only if product has discount.
  # AUTHOR:
  #   Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.ea.slp.getProductPrice
    platform: android
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.ea.slp.productPrice # <--VARIABLE--${productName}
          storeIn: productPrice
      - executeNode:
          file: mx/test/helpers/utils/getNumberFromPriceString.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: returnedPrice
      # Verifying if product has a discount...
      - if:
          identifier:
            present:
              - identifier: mx.mappings.ea.slp.productOriginalPrice # <--VARIABLE--${productName}
          then:
            # Extraction of the Original Price...
            - log:
                message: "Discount found, extracting Original Price value..."
                color: CYAN
            - getString:
                identifier: mx.mappings.ea.slp.productOriginalPrice # <--VARIABLE--${productName}
                attribute: text
                storeIn: originalPrice
            - executeNode:
                file: mx/test/helpers/utils/getNumberFromPriceString.js
                args:
                  - value: ${originalPrice}
                getResponse:
                  storeIn: returnedOriginalPrice
            # Extraction of the Discount Amount (used later for Order Details)...
            - getString:
                identifier: mx.mappings.ea.slp.savingsBadgeByProductName # <--VARIABLE--${productName}
                attribute: text
                storeIn: returnedDiscountAmount
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceString.js
                args:
                  - value: ${returnedDiscountAmount}
                getResponse:
                  storeIn: returnedDiscountAmount
          else:
            - log:
                message: "Discount not found, returning Current Price..."
                color: CYAN
            - storeIn:
                key: returnedOriginalPrice
                value: ${returnedPrice}
            - storeIn:
                key: returnedDiscountAmount
                value: '0.00'
      - log:
          message: "Price Got: '${returnedPrice}'"
          color: GREEN_BOLD
      - log:
          message: "Original Price Got: '${returnedOriginalPrice}'"
          color: GREEN_BOLD
      - log:
          message: "Discount Amount Got: '${returnedDiscountAmount}'"
          color: GREEN_BOLD
      - log:
          message: "End function: slp.getProductPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Params:   ${productName}  [Mandatory]  Name of the Product to return its Price.
  # RETURNS:  ${returnedQuantity}
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.ea.slp.getProductQuantity
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.ea.slp.productQuantityByProductName #<--PARAM--${productName}
          storeIn: returnedQuantity
      - log:
          message: "Quantity got: '${returnedQuantity}'"
          color: GREEN_BOLD
      - log:
          message: "End function: slp.getProductQuantity"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  Scrolls down until the given product name is found in the screen (max of 25 swipes). This function is
  #                 used when you need to interact with a product that is in the results list but is not yet loaded in the view.
  # PARAM:        ${productName}  [Mandatory]  Product name to scroll down into.
  # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.ea.slp.scrollDownToProductByName
    platform: android
    flow:
      - log:
          message: "Product: '${productName}'"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.ea.slp.productContainerByName # <--[VARIABLE]--${productName}
          then:
            - executeFunction:
                name: mx.functions.utils.positionElementToTheCenter
                params:
                  - name: elementToPositionCenter
                    string: mx.mappings.ea.slp.productContainerByName # <--[VARIABLE]--${productName}
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.ea.slp.productContainerByName # <--[VARIABLE]--${productName}
                position: center
                scrollLimit: 25
                wait: 3000
            - if:
                identifier:
                  present:
                      - identifier: mx.mappings.ea.slp.productContainerByName # <--[VARIABLE]--${productName}
                then: 
                  - log: 
                      message: "Product Found."
                      color: CYAN
                else:
                  - failTest: 
                      message: "Product Not Found."
      - log:
          message: "End function: slp.scrollDownToProductByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.ea.slp.tapSortAndFilterButton
    platform: android
    flow:
      - click:
          identifier: mx.mappings.ea.slp.sortAndFilterButton
      - log:
          message: "End function: slp.tapSortAndFilterButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Increases the actual quantity of a product by the desired amount of increments. i.e. for a product which
  #     its current quantity is 12, if the desired amount of increments is 5, the final quantity will be 17 (assuming
  #     there was enough stock to supply the demand, otherwise, the app will cap the quantity to the max available stock).
  #
  # PARAMS:
  #     ${productName}  [Mandatory]
  #         Name of the product to increase its quantity.
  #
  #     ${quantity}  [Mandatory]
  #         Amount of increments to to the actual quantity.
  #
  #     ${ignoreClickException}  [Optional]
  #         Flag to tell the clicking action (to perform the quantity increments) to ignore the exception in case the click
  #         cannot be done. This scenario mostly happens when the product reaches the Max Quantity Limit; the increase
  #         button becomes not clickable and so and exception (and a failure) will be thrown. Use this flag only when
  #         necessary.
  #         Options: [ true | false | null ]
  #
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.ea.slp.increaseProductQuantityBy
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Increments: '${quantity}'"
          color: CYAN
      - log:
          message: "Ignore Click Exception: '${ignoreClickException}'"
          color: CYAN
      # This click expands the quantity button so it stays expanded and shows the increment and decrement buttons.
      - click:
          identifier: mx.mappings.ea.slp.productQuantityByProductName # <---PARAMS---${productName}
      - try:
          flow:
            - click:
                identifier: mx.mappings.ea.slp.increaseButtonByProductName # <---PARAMS---${productName}
                numberOfClicks: ${quantity}
                waitBetweenClicks: 1
          catch:
            flow:
              - if:
                  condition: ${ignoreClickException} == true
                  then:
                    - log:
                        message: "Increment Quantity Button not clickable, process will continue..."
                        color: GREEN
                  else:
                    - failTest:
                        message: "Increment Quantity Button not clickable, quantity cannot be incremented"
      # This wait gives time for the button to collapse and lets other functions interact with the elements without errors.
      - sleep:
          duration: 5000
      - log:
          message: "End function: mx.functions.slp.increaseProductQuantityBy"
          color: BLUE 

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Verifies if the product has discount or not and returns the result in a boolean value.
  # PARAM:    ${productName}  [Mandatory]
  # RETURNS:  ${returnedHasDiscount}
  # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.ea.slp.checkIfProductHasDiscount
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.ea.slp.savingsBadgeByProductName # <--PARAM--${productName}
          then:
            - storeIn:
                key: returnedHasDiscount
                value: true
          else:
            - storeIn:
                key: returnedHasDiscount
                value: false
      - log:
          message: "Returned Result: 'returnedHasDiscount' = '${returnedHasDiscount}'"
          color: CYAN
      - log:
          message: "End function: slp.checkIfProductHasDiscount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function scrolls down to a product with the specified combination of characteristics provided
  #                 by params. If it finds it, it returns its name [returnedProductName], if product container is not
  #                 found with the specified characteristics, function fails.
  # PARAMS:
  #   withMSI       [Mandatory] options: [ With | Without | Disregard ]
  #   withDiscount  [Mandatory] options: [ With | Without | Disregard ]
  # RETURNS:
  #   ${returnedProductName}
  # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.ea.slp.findProductByCharacteristics
    platform: android
    flow:
      # Checking inputs...
      - log:
          message: "Checking inputs..."
          color: GREEN
      - if:
          condition: ${withMSI} != 'With' && ${withMSI} != 'Without' && ${withMSI} != 'Disregard'
          then:
            - failTest:
                message: "Invalid 'withMSI' input, valid options: [ With | Without | Disregard ]... provided: '${withMSI}'"
      - if:
          condition: ${withDiscount} != 'With' && ${withDiscount} != 'Without' && ${withDiscount} != 'Disregard'
          then:
            - failTest:
                message: "Invalid 'withDiscount' input, valid options: [ With | Without | Disregard ]... provided: '${withDiscount}'"
      - log:
          message: "Looking for a Product with the next characteristics: 'withDiscount' = '${withDiscount}' | 'withMSI' = '${withMSI}'"
          color: CYAN

      # Find a Product with MSI and Discount...
      - if:
          condition: ${withMSI} == 'With' && ${withDiscount} == 'With'
          then:
            - log:
                message: "Looking for a Product With MSI and With Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithMsiAndDiscount

      # Find a Product with MSI and No Discount...
      - if:
          condition: ${withMSI} == 'With' && ${withDiscount} == 'Without'
          then:
            - log:
                message: "Looking for a Product With MSI and No Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithMsiAndNoDiscount

      # Find a Product with MSI disregarding Discount...
      - if:
          condition: ${withMSI} == 'With' && ${withDiscount} == 'Disregard'
          then:
            - log:
                message: "Looking for a Product With MSI Disregarding Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithMsi

      # Find a Product with No MSI that has Discount...
      - if:
          condition: ${withMSI} == 'Without' && ${withDiscount} == 'With'
          then:
            - log:
                message: "Looking for a Product with No MSI that Has Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithDiscountAndNoMsi

      # Find a Product with No MSI and No Discount...
      - if:
          condition: ${withMSI} == 'Without' && ${withDiscount} == 'Without'
          then:
            - log:
                message: "Looking for a Product with No MSI and No Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithNoMsiAndNoDiscount

      # Find a Product with No MSI Disregarding Discount...
      - if:
          condition: ${withMSI} == 'Without' && ${withDiscount} == 'Disregard'
          then:
            - log:
                message: "Looking for a Product with No MSI Disregarding Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithoutMsi

      # Find a Product Disregarding MSI with Discount...
      - if:
          condition: ${withMSI} == 'Disregard' && ${withDiscount} == 'With'
          then:
            - log:
                message: "Looking for a Product Disregarding MSI With Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithDiscount

      # Find a Product Disregarding MSI without Discount...
      - if:
          condition: ${withMSI} == 'Disregard' && ${withDiscount} == 'Without'
          then:
            - log:
                message: "Looking for a Product Disregarding MSI Without Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.productContainerWithoutDiscount

      # Find a Product Disregarding MSI and Disregarding Discount...
      - if:
          condition: ${withMSI} == 'Disregard' && ${withDiscount} == 'Disregard'
          then:
            - log:
                message: "Looking for a Product Disregarding MSI and Disregarding Discount..."
                color: GREEN_BOLD
            - executeFunction:
                name: mx.functions.ea.slp.getProductNameByMappingFilter
                params:
                  - name: mappingFilter
                    string: mx.mappings.ea.slp.firstAvailableProductContainer
      - log:
          message: "End function: slp.findProductByCharacteristics"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function is a helper for mx.functions.ea.slp.findProductByCharacteristics but can be used anywhere else.
  #               It searches for a product container that has the specific characteristics defined by the xpath.
  # PARAM:        ${mappingFilter}  [Mandatory] This mapping will be used as a filter to find the desired product, it is very
  #                                               important and REQUIRED that this mapping does not include variables and
  #                                               the mappings must point to a product container on SLP.
  # RETURNS:      ${returnedProductName}
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.ea.slp.getProductNameByMappingFilter
    platform: android
    flow:
      - log:
          message: "Mapping filter: '${mappingFilter}'"
          color: CYAN
      # Hiding the bottom menu in case it gets on top of the name label of desired product...
      - executeFunction:
          name: mx.functions.ea.bottom-menu.hideBottomMenu

      # Variables setup...
      - storeIn:
          key: returnedProductName
          value: 'null'
      - storeIn:
          key: checkedProductsList
          value: 'Not Visible' # This value will skip the verification when name label is not visible.

      # This loop determines how many scrolls to perform until the desired product is found,
      # if scrolls run out, function fails.
      - loop:
          begin: 1
          end: 20
          storeIndex: scrollIndex
          flow:
            # This loop checks if any of the displayed products defined by the mapping filter is present.
            - log:
                message: "Checking currently displayed Products..."
                color: GREEN_BOLD
            - loop:
                begin: 0
                end: 4
                storeIndex: productIndex
                flow:
                  - try:
                      flow:
                        - getString:
                            identifier: mx.mappings.ea.slp.availableProductNameLabelByIndex
                            storeIn: productName
                      catch:
                        flow:
                          - log:
                              message: "Name label is not visible or product is not available, returning 'Not Visible'..."
                              color: GREEN_BOLD
                          - storeIn:
                              key: productName
                              value: 'Not Visible'
                  - log:
                      message: "['${productIndex}']: '${productName}'"
                      color: GREEN_BOLD

                  # Verifying if obtained product name is already on the checked products list
                  - executeNode:
                      file: mx/test/helpers/utils/stringContainsAll.js
                      args:
                        - value: ${checkedProductsList}
                        - value: ${productName}
                      getResponse:
                        storeIn: isProductChecked
                  - if:
                      condition: ${isProductChecked} == true
                      then:
                        - log:
                            message: "Product already verified, checking next Product..."
                            color: GREEN_BOLD
                      else:
                        - log:
                            message: "Product NOT verified. Checking if product by mapping filter is present..."
                            color: GREEN_BOLD
                        # Verifying if product by mapping filter is present...
                        - if:
                            identifier:
                              contentDescription:
                                - identifier: (${mappingFilter})[1]
                                  contains: ${productName}
                            then:
                              # Product specified by mapping filter found! Exiting Product Verification loop...
                              - log:
                                  message: "Desired Product has been found! Exiting Product Verification loop..."
                                  color: GREEN_BOLD
                              - storeIn:
                                  key: returnedProductName
                                  value: ${productName}
                              - break: true
                            else:
                              - if:
                                  identifier:
                                    contentDescription:
                                      - identifier: (${mappingFilter})[2]
                                        contains: ${productName}
                                  then:
                                    # Product specified by mapping filter found! Exiting Product Verification loop...
                                    - log:
                                        message: "Desired Product has been found! Exiting Product Verification loop..."
                                        color: GREEN_BOLD
                                    - storeIn:
                                        key: returnedProductName
                                        value: ${productName}
                                    - break: true
                                  else:
                                    # Append name of product to 'checkedProductsList'...
                                    - log:
                                        message: "Desired Product not found, adding product name to checked products list..."
                                        color: GREEN_BOLD
                                    - executeNode:
                                        file: mx/test/helpers/utils/appendUniqueToStringArray.js
                                        args:
                                          - value: ${checkedProductsList}
                                          - value: ${productName}
                                        getResponse:
                                          storeIn: checkedProductsList
            - if:
                condition: ${returnedProductName} != null
                then:
                  # If Desired Product is found, exit scroll loop.
                  - log:
                      message: "Desired Product was found, exiting scroll loop..."
                      color: GREEN_BOLD
                  - break: true
                else:
                  # If desired product hasn't been found with the currently displayed products, then scroll once and repeat...
                  - log:
                      message: "Desired Product not found, performing scroll number: ['${scrollIndex}']"
                      color: GREEN_BOLD
                  - drag:
                      from:
                        x: 50%
                        y: 60%
                      to:
                        x: 50%
                        y: 35%
      - if:
          condition: ${returnedProductName} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product with the specified mapping filter.
          else:
            - executeFunction:
                name: mx.functions.utils.positionElementAtTheTop
                params:
                  - name: elementToPositionUp
                    string: mx.mappings.ea.slp.productContainerByName
            - log:
                message: "Returned Product Name: '${returnedProductName}'"
                color: GREEN_BOLD
      - log:
          message: "End function: slp.getProductNameByMappingFilter"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function taps the Add to cart button specified on Param.
  # NOTE:         Product must be already centered on screen in order to work properly.
  # PARAM:        ${productName}  [Mandatory]   Product name to add to cart.
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  # EDITOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.ea.slp.addProductToCart
    platform: android
    flow:
      - log:
          message: "Product to add to cart: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.ea.slp.addToCartButtonByProductName # <--PARAM--${productName}
      - log:
          message: "End function: slp.addProductToCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function scrolls down to a product with the specified number of customer rating stars defined
  #                 by param. If it finds it, it returns its name [returnedProductName], if product container is not
  #                 found with the specified value, function fails. This function does not consider if the products have
  #                 any other kind of discounts, it only checks if the product is available and also has the specified
  #                 number of stars.
  # NOTE:         It is recommended to use the customer rating filter before running this function for faster response.
  #                 Also, values with decimals will make the function to fail (4.5 | 3.3| 4.9).
  # PARAM: 
  #   ${customerRating}   [Mandatory]   Expected integer number of stars to select, example options: [ 1 | 2 | 5 ].
  # RETURNS:
  #   ${returnedProductName}
  # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.ea.slp.findProductByCustomerRating
    platform: android
    flow:
      # Verifying provided Rating value...
      - log:
          message: "Customer Rating Value: '${customerRating}' Stars."
          color: CYAN
      - if:
          condition: ${customerRating} > 5 || ${customerRating} < 1
          then:
            - failTest:
                message: "Invalid! 'Customer Rating' value can only be an integer between 1 and 5. Input Provided: '${customerRating}'"

      # Find a Product with the specified amount of stars...
      - log:
          message: "Looking for a Product With '${customerRating}' Stars..."
          color: GREEN_BOLD
      - executeFunction:
          name: mx.functions.ea.slp.getProductNameByMappingFilter #--RETURNS--${returnedProductName}
          params:
            - name: mappingFilter
              string: mx.mappings.ea.slp.productContainerByCustomerRating # <--PARAM--${customerRating}
      - log:
          message: "End function: slp.findProductByCustomerRating"
          color: BLUE
