#======================================================================================================================
#  AUTHOR: Isis Rojas Tolentino (vn53dge)
#  CREATED: Mar/13/2023
#  REVISION: ---
#
#  Copyright Â© 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This method asserts the total in order confirmation page
  # Params:   ${expectedTotal} [Mandatory] Order total
  - name: mx.functions.order-confirmation.assertTotal
    flow: 
      - log: 
          message: "Expected total: ${expectedTotal}"
          color: CYAN
      - getString:
          identifier: mx.mappings.order-confirmation.total
          storeIn: displayedTotal
      - executeNode:
          file: mx/test/helpers/order-confirmation/sanitizeTotal.js
          args:
            - value: ${displayedTotal}
          getResponse:
            storeIn: displayedTotal
      - log: 
          message: "Displayed total: ${displayedTotal}"
          color: CYAN
      - if:
          condition: ${expectedTotal} != ${displayedTotal}
          then:
            - failTest:
                message: Expected total ${expectedTotal} and displayed total ${displayedTotal} don't match.
      - log:
          message: "End function: order-confirmation.assertTotal"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the product image is present.
  # Param: ${productName}  [Mandatory]  Product name.
  - name: mx.functions.order-confirmation.assertProductImageDisplayed
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.order-confirmation.productImageByName
      - log:
          message: "End function: order-confirmation.assertProductImageDisplayed"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the product image is present.
  # Param: ${productName}  [Mandatory]  Product name.
  - name: mx.functions.order-confirmation.assertProductImageNotDisplayed
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.order-confirmation.productImageByName
      - log:
          message: "End function: order-confirmation.assertProductImageNotDisplayed"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # Description: Asserts the displayed Order's Delivery Slot is correct.
  # Params: ${expectedDeliveryMethod}  [Mandatory]  Expected delivery method to be displayed (Input: [ HomeDelivery | 
  #                                                   PickupDelivery ]). 
  - name: mx.functions.order-confirmation.assertDeliveryMethod
    flow:
      - log: 
          message: "Expected Delivery Method: ${expectedDeliveryMethod}"
          color: CYAN
      - if:
          condition: ${expectedDeliveryMethod} == 'HomeDelivery'
          then:
            - verifyIdentifier:
                present:
                  - identifier: mx.mappings.order-confirmation.homeDeliveryMethodIsSelected
          else:
            - if:
                condition: ${expectedDeliveryMethod} == 'PickupDelivery'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: mx.mappings.order-confirmation.pickupDeliveryMethodIsSelected
                else:
                  - failTest:
                      message: "Wrong input, verify delivery method supplied: ${expectedDeliveryMethod}"
      - log: 
          message: "End function: order-confirmation.assertDeliveryMethod"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.order-confirmation.assertPageDisplayed
    flow: 
      - verifyIdentifier:
          timeout: 40000
          present:
            - identifier: mx.mappings.order-confirmation.orderNumberLabel
            - identifier: mx.mappings.order-confirmation.total
            - identifier: mx.mappings.order-confirmation.fulfillmentContainer
            - identifier: mx.mappings.order-confirmation.findMoreProductsButton
      - log:
          message: "End function: order-confirmation.assertPageDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  #
  # PARAMS:
  #     ${expectedDeliverySlot}  [Mandatory]  Expected delivery slot to be displayed. The value passed in this
  #         param must be the string value returned by the 'delivery-slot-extraction/parseDeliverySlotForAssertion.js'
  #         helper (see helper's documentation).
  #
  # FLAGS USED:
  #     ${ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION}
  #         If set to 'true', the function will perform the assertion of the Delivery Slot.
  #         If set to 'false' or not set at all, the function will skip the assertion.
  #
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.order-confirmation.assertDeliverySlot
    flow:
      - if: 
          condition: ${ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION} == true
          then:
            - log: 
                message: "Expected Delivery Slot: ${expectedDeliverySlot}"
                color: CYAN
            - getString:
                identifier: mx.mappings.order-confirmation.deliverySlotLabel
                storeIn: currentDeliverySlot
            - executeNode:
                file: mx/test/helpers/delivery-slot/stringCleanerForDeliverySlotAssertion.js
                args:
                  - value: ${currentDeliverySlot}
                getResponse:
                  storeIn: currentDeliverySlot
            - log:
                message: "Displayed Delivery Slot: ${currentDeliverySlot}"
                color: CYAN
            - if:
                condition: ${currentDeliverySlot} != ${expectedDeliverySlot}
                then:
                  - failTest:
                      message: "Displayed: ${currentDeliverySlot} != Expected: ${expectedDeliverySlot}"
          else: 
            - log: 
                message: '[!] Flag: ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION = ${ASSERT_DELIVERY_SLOT_IN_ORDER_CONFIRMATION} - Assertion will skip.'
                color: YELLOW
      - log:
          message: "End function: mx.functions.order-confirmation.assertDeliverySlot"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the address name.
  # Params: ${expectedHomeAddressName} [Mandatory] Expected address name to be displayed.
  - name: mx.functions.order-confirmation.assertHomeDeliveryAddressName
    flow:
      - log:
          message: "Expected Address Name: ${expectedHomeAddressName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.order-confirmation.homeAddressName
          storeIn: currentAddressName
      - executeNode:
          file: mx/test/helpers/order-confirmation/getAddressNameFromString.js
          args:
            - value: ${currentAddressName}
          getResponse:
            storeIn: parsedAddressName
      - log:
          message: "Currently Displayed Home Address Name: ${parsedAddressName}"
          color: CYAN
      - if:
          condition: ${expectedHomeAddressName} != ${parsedAddressName}
          then:
            - failTest:
                message: "Expected '${expectedHomeAddressName}' != Current: '${parsedAddressName}'"
          else:
            - log:
                message: "Correct Address Name."
                color: CYAN
      - log:
          message: "End function: order-confirmation.assertHomeDeliveryAddressName" 
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method asserts the home delivery address.
  # Params: ${expectedHomeAddress} [Mandatory] Expected home address to be displayed.
  # NOTE: On android there's no comma between the [street] and [extNum], iOS has it, so this function will remove the
  #           first comma for correct validations. Please add this comma to your ${expectedHomeAddress} string or retrieve
  #           the address from a previous page and store it in a variable to pass it here as this function's parameter.
  - name: mx.functions.order-confirmation.assertHomeDeliveryAddress
    flow: 
      - log:
          message: "Expected Home Address: ${expectedHomeAddress}"
          color: CYAN
      - getString:
          identifier: mx.mappings.order-confirmation.homeAddress
          storeIn: displayedHomeAddress
      - log:
          message: "Displayed Home Address: ${displayedHomeAddress}"
          color: CYAN
      - if:
          condition: ${expectedHomeAddress} != ${displayedHomeAddress}
          then:
            - failTest:
                message: "Expected: '${expectedHomeAddress}' != Displayed: '${displayedHomeAddress}'"
      - log:
          message: "End function: order-confirmation.assertHomeDeliveryAddress"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method verifies the selected delivery address.
  # NOTE: this assertion must be performed with the returned value of mx.functions.reserve-slot.getSelectedAddress
  # Params  ${streetName}     [Mandatory]   Name of the street to be validated.
  #         ${exteriorNumber} [Mandatory]   Exterior number to be validated.
  #         ${city}           [Mandatory]   City to be validated.
  #         ${state}          [Mandatory]   State to be validated.
  #         ${zipCode}        [Mandatory]   ZIP Code to be validated.
  - name: mx.functions.order-confirmation.assertHomeDeliveryAddressByIndividualValues
    flow:
      # Using '\e[36m' to print in CYAN and '\e[0m' to reset color, to simplify logs.
      - log: "\e[36mExpected StreetName: '${streetName}'\e[0m"
      - log: "\e[36mExpected ExteriorNumber: '${exteriorNumber}'\e[0m"
      - log: "\e[36mExpected City: '${city}'\e[0m"
      - log: "\e[36mExpected State: '${state}'\e[0m"
      - log: "\e[36mExpected ZipCode: '${zipCode}'\e[0m"
      - getString:
          identifier: mx.mappings.order-confirmation.homeAddress
          storeIn: displayedAddress
      - log:
          message: "Displayed Address: ${displayedAddress}"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/utils/stringContainsAll.js
          args:
            - value: ${displayedAddress}
            - value: ${streetName}, ${exteriorNumber}, ${city}, ${state}, ${zipCode}
          getResponse:
            storeIn: isAddressCorrect
      - if:
          condition: ${isAddressCorrect} == true
          then:
            - log:
                message: "Address is correct."
                color: CYAN
          else:
            - failTest:
                message: "Expected address not contained in: '${displayedAddress'}"
      - log:
          message: "End function: order-confirmation.assertHomeDeliveryAddressByIndividualValues"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the products count.
  # Params: ${expectedProductsCount} [Mandatory] Expected displayed products count.
  - name: mx.functions.order-confirmation.assertProductsCount
    flow:
      - log: 
          message: "Expected Products Count: ${expectedProductsCount}"
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.order-confirmation.productsCountText
      - log:
          message: "End function: order-confirmation.assertProductsCount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method gets the order number
  - name: mx.functions.order-confirmation.getOrderNumber
    flow:
      - getString:
          identifier: mx.mappings.order-confirmation.orderNumberLabel
          storeIn: orderNumber
      - executeNode:
          file: mx/test/helpers/order-confirmation/sanitizeOrderNumberValue.js
          args:
            - value: ${orderNumber}
          getResponse:
            storeIn: returnedOrderNumber
      - log: 
          message: "Order number: ${returnedOrderNumber}"
          color: CYAN
      - log:
          message: "End function: order-confirmation.getOrderNumber"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Asserts if product not deleted in cart is present in order
  # PARAMS:
  #   ${productName} - Name of product to be checked
  #
  # AUTHOR: Octavio Cabrales ZÃ¡rate (vn53g23)
  - name: mx.functions.od.order-confirmation.assertProductInOrderIsPresent
    flow:
      - executeNode:
          file: mx/test/helpers/cart/isNamePresentInArray.js
          args:
            - value: ${productName}
            - value: ${oosNamesArray}
          getResponse:
            storeIn: presentFlag 
      - executeNode:
          file: mx/test/helpers/cart/isNamePresentInArray.js
          args:
            - value: ${productName}
            - value: ${expensiveProductNamesArray}
          getResponse:
            storeIn: presentFlag 
      - if:
          condition: ${presentFlag}
          then:
            - executeFunction:
                name: mx.functions.order-confirmation.assertProductImageNotDisplayed
          else:
            - executeFunction:
                name: mx.functions.order-confirmation.assertProductImageDisplayed

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This method returns all the order information displayed in the Order Confirmation/Thank You Page.
  # RETURNS:
  #     ${returnedOrderInfo}  A Json string containing all of the Order Information. The Json structure is as follows:
  #          {
  #             "orderNumber": String,              # Cleaned value.
  #             "orderNumberRaw": String,           # Value as displayed including text.
  #             "email": String,                    # Value as displayed.
  #             "orderTotal": Float,                # Cleaned value.
  #             "orderTotalRaw": String,            # Value as displayed including money symbol.
  #             "fulfillmentType": String,          # Transformed value based on displayed text. Options: [ pickup | delivery ]
  #             "fulfillmentTypeRaw": String,       # Value as displayed.
  #             "fulfillmentDateRaw": String,       # Value as displayed.
  #             "fulfillmentAddressName": String,   # Value as displayed.
  #             "fulfillmentAddressRaw": String,    # Value as displayed.
  #             "itemsCount": Integer,              # Cleaned value.
  #             "itemsCountRaw": String,            # Value as displayed including text.
  #             "paymentMethod": String,            # Transformed value based on displayed text. Options: [ payAtStore | paypal | cashi | cc/dc ]
  #             "paymentMethodRaw": String          # Value as displayed.
  #          }
  # AUTHOR: Sergio FernÃ¡ndez (vn0t1qt)
  - name: mx.functions.order-confirmation.getOrderInformation
    flow:
      # Order Number...
      - getString:
          identifier: mx.mappings.order-confirmation.orderNumberLabel
          storeIn: orderNumberRaw
      - executeNode:
          file: mx/test/helpers/order-confirmation/sanitizeOrderNumberValue.js
          args:
            - value: ${orderNumberRaw}
          getResponse:
            storeIn: orderNumber
      # Email...
      - getString:
          identifier: mx.mappings.order-confirmation.emailLabel
          storeIn: emailFull
      - executeNode:
          file: mx/test/helpers/order-confirmation/sanitizeEmailLabel.js
          args:
            - value: ${emailFull}
          getResponse:
            storeIn: email
      # Order Total...
      - getString:
          identifier: mx.mappings.order-confirmation.total
          storeIn: orderTotalRaw
      - executeNode:
          file: mx/test/helpers/order-confirmation/sanitizeTotal.js
          args:
            - value: ${orderTotalRaw}
          getResponse:
            storeIn: orderTotal
      # Fulfillment Type...
      - if:
          condition: ${platform} == 'iOS'
          then:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.order-confirmation.fulfillmentMethod
                position: center
                scrollLimit: 3
      - getString:
          identifier: mx.mappings.order-confirmation.fulfillmentMethod
          storeIn: fulfillmentTypeRaw
      - executeNode:
          file: mx/test/helpers/order-confirmation/transformFulfillmentTypeRaw.js
          args:
            - value: ${fulfillmentTypeRaw}
          getResponse:
            storeIn: fulfillmentType
      # Fulfillment Date...
      - getString:
          identifier: mx.mappings.order-confirmation.fulfillmentTime
          storeIn: fulfillmentDateRaw
      # Fulfillment Address...
      - getString:
          identifier: mx.mappings.order-confirmation.fulfillmentName
          storeIn: fulfillmentAddressName
      - getString:
          identifier: mx.mappings.order-confirmation.homeAddress
          storeIn: fulfillmentAddressRaw
      # Items Count...
      - getString:
          identifier: mx.mappings.order-confirmation.productsCountRaw
          storeIn: itemsCountRaw
      - executeNode:
          file: mx/test/helpers/order-confirmation/sanitizeItemsCount.js
          args:
            - value: ${itemsCountRaw}
          getResponse:
            storeIn: itemsCount
      # Payment Method...
      - if:
          condition: ${platform} == 'iOS'
          then:
            - scroll:
                direction: up
                untilIdentifier: mx.mappings.order-confirmation.anyPaymentMethodLabel
                position: center
                scrollLimit: 3
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.order-confirmation.anyPaymentMethodLabel
                position: center
                scrollLimit: 3
      - getString:
          identifier: mx.mappings.order-confirmation.anyPaymentMethodLabel
          storeIn: paymentMethodRaw
      - executeNode:
          file: mx/test/helpers/order-confirmation/transformPaymentMethodRaw.js
          args:
            - value: ${paymentMethodRaw}
          getResponse:
            storeIn: paymentMethod
      # Return info...
      - storeIn:
          key: returnedOrderInfo
          value: '{"orderNumber":"${orderNumber}","orderNumberRaw":"${orderNumberRaw}","email":"${email}","orderTotal":${orderTotal},"orderTotalRaw":"${orderTotalRaw}","fulfillmentType":"${fulfillmentType}","fulfillmentTypeRaw":"${fulfillmentTypeRaw}","fulfillmentDateRaw":"${fulfillmentDateRaw}","fulfillmentAddressName":"${fulfillmentAddressName}","fulfillmentAddressRaw":"${fulfillmentAddressRaw}","itemsCount":${itemsCount},"itemsCountRaw":"${itemsCountRaw}","paymentMethod":"${paymentMethod}","paymentMethodRaw":"${paymentMethodRaw}"}'
      - log:
          message: 'Order Information: ${returnedOrderInfo}'
          color: CYAN
      - log:
          message: "End function: mx.functions.order-confirmation.getOrderInformation"
          color: BLUE
