#======================================================================================================================
#    AUTHOR: Isis Rojas Tolentino (vn53dge)
#   CREATED: Dec/19/2022
#  REVISION: ---
#
#  Copyright Â© 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This function clicks on back button.
  - name: mx.functions.department-l1-l2.tapBack
    platform: ios
    flow:
      - click: 
          identifier: mx.mappings.department-l1-l2.backButton

#----------------------------------------------------------------------------------------------------------------------
                 
  # Description: Scrolls up until the given section name is displayed.
  # Param: ${sectionName}  [Mandatory]  Name of the section to scroll.
  - name: mx.functions.department-l1-l2.scrollUpToSection
    platform: ios
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.department-l1-l2.sectionByName
          scrollLimit: 8
          wait: 500
      - log:
          message: "Scroll up until ${sectionName} section."
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------
                 
  # Description: Scrolls down until the given section name is displayed.
  # Param: ${sectionName}  [Mandatory]  Name of the section to scroll.
  - name: mx.functions.department-l1-l2.scrollDownToSection
    platform: ios
    flow:
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.department-l1-l2.sectionByName
          wait: 3000
          position: center
      - log:
          message: "Scroll down until ${sectionName} section."
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # PARAMS: ${categoryName}    [Mandatory]  Name of the Category to open.
  #         ${departmentName}  [Mandatory]  Name of the Department to which the Category belongs. It is required in case
  #                                         the department loads the Categories as cards instead of a horizontal carousel.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l1-l2.selectCategory
    platform: ios
    flow:
      - log:
          message: "[ PARAM: Category Name: '${categoryName}' ]"
          color: CYAN
      - log:
          message: "[ PARAM: Department Name: '${departmentName}' ]"
          color: CYAN
      - executeFunction:
          name: mx.functions.department-l1-l2.isCategoryCardsDesignDisplayed #--RETURNED--${returnedIsDisplayed}-->
      - if:
          condition: ${returnedIsDisplayed} == true
          then:
            - log:
                message: Interacting with the Category Cards Design...
                color: GREEN_BOLD
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.department-l1-l2.categoryContainer.cardDesign
                position: center
            - executeNode:
                file: mx/test/helpers/department-l1-l2/get-category-subcategory-card-position.js
                args:
                  - value: "${departmentName} / ${categoryName}" # <--PARAM--${departmentName}--${categoryName}
                getResponse:
                  storeIn: position
            - click:
                identifier: mx.mappings.department-l1-l2.categoryContainer.cardByPosition # <--PARAM--${position}
          else:
            - log:
                message: Interacting with the Category Horizontal Buttons Design...
                color: GREEN_BOLD
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.department-l1-l2.categoryButtonByName # <--PARAM--${categoryName}
                then:
                  - click:
                      identifier: mx.mappings.department-l1-l2.categoryButtonByName # <--PARAM--${categoryName}
                else:
                  - scroll:
                      direction: left
                      withinIdentifier: mx.mappings.department-l1-l2.categoryContainer
                      untilIdentifier: mx.mappings.department-l1-l2.categoryButtonByName # <--PARAM--${categoryName}
                      position: center
                  - click:
                      identifier: mx.mappings.department-l1-l2.categoryButtonByName # <--PARAM--${categoryName}
      - log:
          message: "End function: mx.functions.department-l1-l2.selectCategory"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # RETURNS:  ${returnedIsDisplayed}  Whether or not the Category Cards Design is displayed.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l1-l2.isCategoryCardsDesignDisplayed
    platform: ios
    flow:
      - try:
          flow:
            - verifyIdentifier:
                present:
                  - identifier: mx.mappings.department-l1-l2.categoryContainer.cardDesign
                timeout: 10000
            - storeIn:
                key: returnedIsDisplayed
                value: true
            - log:
                message: Category Cards Design is displayed
                color: CYAN
          catch:
            flow:
              - log:
                  message: Category Cards Design is Not displayed
                  color: CYAN
              - storeIn:
                  key: returnedIsDisplayed
                  value: false
      - log:
          message: "End function: mx.functions.department-l1-l2.isCategoryCardsDesignDisplayed"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # PARAMS:  ${departmentName}  [Mandatory]  Name of the Department to be asserted to be opened correctly.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l1-l2.assertCorrectDepartmentOpened
    platform: ios
    flow:
      - log:
          message: "[ PARAM: Department Name: '${departmentName}' ]"
          color: CYAN
      - executeFunction:
          name: mx.functions.department-l1-l2.isCategoryCardsDesignDisplayed
      - if:
          condition: ${returnedIsDisplayed} == true
          then:
            - executeNode:
                file: mx/test/helpers/department-l1-l2/get-category-subcategory-mapping-for-correct-page-assertion.js
                args:
                  - value: ${departmentName}
                getValue:
                  - key: containerMapping
                    storeIn: containerMapping
                  - key: assertionMappings
                    storeIn: assertionMappings
                  - key: expectedNumberOfChildren
                    storeIn: expectedNumberOfChildren
            - log:
                message: "Elements to verify: '${assertionMappings}'"
                color: CYAN
            - log:
                message: "Within container: '${containerMapping}'"
                color: CYAN
            - log:
                message: "Number of elements to find: '${expectedNumberOfChildren}'"
                color: CYAN
            - numberOfChildElements:
                identifier: ${containerMapping}
                filterBy: ${assertionMappings}
                storeIn: numberOfChildrenFound
            - log:
                message: "Elements Found: '${numberOfChildrenFound}'"
                color: CYAN
            - if:
                condition: ${expectedNumberOfChildren} != ${numberOfChildrenFound}
                then:
                  - failTest:
                      message: "Assertion Failed: Opened Page is not Correct"
          else:
            - executeNode:
                file: mx/test/helpers/department-l1-l2/assert-department-opened.js
                args:
                  - value: ${departmentName}
                getValue:
                  - key: category1
                    storeIn: categoryName1
                  - key: category2
                    storeIn: categoryName2
            - log:
                message: "Buttons to verify: '${categoryName1}' and '${categoryName2}'"
                color: CYAN
            - verifyIdentifier:
                present:
                #  - identifier: mx.mappings.department-l1-l2.sectionNameByDepartment # Correct Page can be asserted by just checking the buttons.
                  - identifier: mx.mappings.department-l1-l2.categoryButtonByDepartment
      - log:
          message: "Assertion Succeeded: Opened Page is Correct"
          color: CYAN
      - log:
          message: "End function: department-l1-l2.assertCorrectDepartmentOpened"
          color: BLUE

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function scrolls left completely inside any carousel.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel to scroll into home.
  - name: mx.functions.department-l1-l2.section-carousel.scrollLeftCompletely
    platform: ios
    flow:
      - loop:
          begin: 1
          end: 6
          mode: increment
          flow:
            - scroll:
                withinIdentifier: mx.mappings.department-l1-l2.section-carousel.carouselContainerByName
                direction: right
                wait: 500

#----------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls right completely inside any carousel.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel to scroll into home.
  - name: mx.functions.department-l1-l2.section-carousel.scrollRightCompletely
    platform: ios
    flow:
      - loop:
          begin: 1
          end: 6
          mode: increment
          flow:
            - scroll:
                withinIdentifier: mx.mappings.department-l1-l2.section-carousel.carouselContainerByName
                direction: left
                wait: 500

#----------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls right inside carousel until given product.
  # Param: ${productName}  [Mandatory]  Name of the product.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel containing the product.
  - name: mx.functions.department-l1-l2.section-carousel.scrollRightToProduct
    platform: ios
    flow:
      - scroll:
          direction: left
          untilIdentifier: mx.mappings.department-l1-l2.section-carousel.productNameByCarouselName
          withinIdentifier: mx.mappings.department-l1-l2.section-carousel.carouselContainerByName
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.department-l1-l2.section-carousel.productNameByCarouselName
      - log:
          message: "Scroll until find ${productName} inside ${carouselName} carousel"
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------
                 
  # Description: This function scrolls left inside carousel until given product into departments l1-l2..
  # Param: ${productName}  [Mandatory]  Name of the product.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel containing the product.
  - name: mx.functions.department-l1-l2.section-carousel.scrollLeftToProduct
    platform: ios
    flow:
      - scroll:
          direction: right
          untilIdentifier: mx.mappings.department-l1-l2.section-carousel.productNameByCarouselName
          withinIdentifier: mx.mappings.department-l1-l2.section-carousel.carouselContainerByName
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.department-l1-l2.section-carousel.productNameByCarouselName
      - log:
          message: "Scroll until find ${productName} inside ${carouselName} carousel"
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------
  
  # Description: This function clicks on add to favorites button inside carousel into departments l1-l2.
  # Param: ${productName}  [Mandatory]  Name of the product to be added to favorites.
  - name: mx.functions.department-l1-l2.section-carousel.markProductAsFavorite
    platform: ios
    flow: 
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.favoriteHeartButtonByName
      - log:
          message: "${productName} correctly marked as favorite"
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on remove from favorites button inside carousel into departments l1-l2.
  # Param: ${productName}  [Mandatory]  Name of the product to be removed from favorites.
  - name: mx.functions.department-l1-l2.section-carousel.unmarkProductAsFavorite
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l1-l2.section-carousel.markedFavoritesHeartButton
          then:
            - click:
                identifier: mx.mappings.department-l1-l2.section-carousel.markedFavoritesHeartButton
            - log:
                message: "${productName} correctly removed from favorites"
                color: CYAN
          else:
            - failTest:
                message: "Product is not already in favorites!"

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on add product to cart inside carousel into departments l1-l2.
  # Param: ${productName}  [Mandatory]  Name of the product to be added to cart.
  - name: mx.functions.department-l1-l2.section-carousel.addProductToCart
    platform: ios
    flow: 
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.addToCartButtonByProductName
      - log:
          message: "${productName} was added to cart."
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function is a helper for increaseProductQuantityBy function.
  # Param: ${productName}  [Mandatory]  Name of the product to be added to cart.
  - name: mx.functions.department-l1-l2.section-carousel.increaseProductQuantityHelper
    platform: ios
    flow:
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.mainButtonByProductName
      - click:
          identifier: mx.mappings.department-l1-l2.section-carousel.increaseButtonByProductName

#----------------------------------------------------------------------------------------------------------------------
 
  # Description: This function clicks on increment product quantity inside carousel into departments l1-l2. 
  # Note: This function only increments the quantity after the product is already added to cart at least once.
  # Param: ${quantity}  [Mandatory]  number of times to increment the product quantity.
  # Param: ${productName}  [Mandatory]  Name of the product to be added to cart.
  - name: mx.functions.department-l1-l2.section-carousel.increaseProductQuantityBy
    platform: ios
    flow:     
      - loop:
          begin: 0
          end: ${quantity}
          mode: increment
          flow:
            - executeFunction:
                name: mx.functions.department-l1-l2.section-carousel.increaseProductQuantityHelper

#----------------------------------------------------------------------------------------------------------------------
 
  # Description: This function is a helper for decrementProductQuantityBy function.
  # Param: ${productName}  [Mandatory]  Name of the product to be added to cart.
  - name: mx.functions.department-l1-l2.section-carousel.decreaseProductQuantityHelper
    platform: ios
    flow:
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.mainButtonByProductName
      - click:
          identifier: mx.mappings.department-l1-l2.section-carousel.decreaseButtonByProductName

#----------------------------------------------------------------------------------------------------------------------
 
  # Description: This function clicks on increment product quantity inside Carousel. 
  # Note: This function only increments the quantity after the product is already added to cart at least once.
  # Param: ${quantity}  [Mandatory]  number of times to increment the product quantity.
  - name: mx.functions.department-l1-l2.section-carousel.decreaseProductQuantityBy
    platform: ios
    flow:     
      - loop:
          begin: 0
          end: ${quantity}
          mode: increment
          flow:
            - executeFunction:
                name: mx.functions.department-l1-l2.section-carousel.decreaseProductQuantityHelper

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function switches product to pieces.
  # Param: ${productName}  [Mandatory]  Name of the product to be switched to pieces.
  - name: mx.functions.department-l1-l2.section-carousel.switchProductToPieces
    platform: ios
    flow: 
      - fetchPageSource: false
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.mainButtonByProductName
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.piecesButtonByProductName
      - fetchPageSource: true

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function switches product to weight.
  # Param: ${productName}  [Mandatory]  Name of the product to be switched to weight.
  - name: mx.functions.department-l1-l2.section-carousel.switchProductToWeight
    platform: ios
    flow: 
      - fetchPageSource: false
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.mainButtonByProductName
      - click: 
          identifier: mx.mappings.department-l1-l2.section-carousel.weightButtonByProductName
      - fetchPageSource: true

#----------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function gets the product price and saves it in the global variable ${price}.
  # Param: ${productName}  [Mandatory]  Name of the product to get the price.
  - name: mx.functions.department-l1-l2.section-carousel.getProductPrice
    platform: ios
    flow:
      - getString:
          identifier: mx.mappings.department-l1-l2.section-carousel.productPriceByProductName
          attribute: label
          storeIn: price
      - log:
          message: "${productName} price is ${price}"
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function sets the type of product selected on carousel and saves it in the global variable ${productType}
  # Param: ${productName}  [Mandatory]  Name of the product to get the type of product.
  - name: mx.functions.department-l1-l2.section-carousel.getProductType
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.department-l1-l2.section-carousel.mainButtonByProductName
      - if:
          identifier: 
              present: 
                - identifier: mx.mappings.department-l1-l2.section-carousel.piecesAndWeightButtonByProductName
          then:
              - storeIn:
                  key: productType
                  value: "Dual"
              - log: 
                  message: "The product ${productName} is ${productType}"
                  color: CYAN
          else:
              - if:
                  identifier:
                    present:
                        - identifier: mx.mappings.department-l1-l2.section-carousel.labelWeightByProductName
                    notPresent:
                        - identifier: mx.mappings.department-l1-l2.section-carousel.piecesAndWeightButtonByProductName
                  then:
                      - storeIn:
                          key: productType
                          value: "Weighable"
                      - log:
                          message: "The product ${productName} is ${productType}"
                          color: CYAN
                  else:
                    - storeIn:
                          key: productType
                          value: "Pieces"
                    - log: 
                        message: "The product ${productName} is ${productType}"  
                        color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the added to cart quantity as pieces and saves it in the global variable ${returnedQuantityasPieces}.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.department-l1-l2.section-carousel.getProductQuantityAsPieces
    platform: ios
    flow:
      - getString:
          identifier: mx.mappings.department-l1-l2.section-carousel.piecesQuantity
          attribute: name
          storeIn: returnedQuantityasPieces
      - log: 
          message: "The added quantity of the product ${productName}, is ${returnedQuantityasPieces} pieces."
          color: CYAN
 
#----------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function gets the added to cart quantity as pieces and saves it in the global variable ${returnedParsedProductWeight}.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.department-l1-l2.section-carousel.getProductQuantityAsWeight
    platform: ios
    flow:
      - getString:
          identifier: mx.mappings.department-l1-l2.section-carousel.weightQuantity
          attribute: name
          storeIn: returnedQuantityasWeight
      - executeNode:
          file: mx/test/helpers/slp/splitWeightString_iOS.js
          args:
            - value: ${returnedQuantityasWeight}
          getResponse:
            storeIn: returnedParsedProductWeight
      - log: 
          message: "The added quantity of the product ${productName}, is ${returnedParsedProductWeight} grams."
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts specific product displayed.
  # Param: ${productName}  [Mandatory]  Name of the product.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel containing the product.
  - name: mx.functions.department-l1-l2.section-carousel.assertProductDisplayed
    platform: ios
    flow:
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.department-l1-l2.section-carousel.productNameByCarouselName
      - log:
          message: "${productName} is correctly displayed into ${carouselName} carousel."
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts products are displayed.
  - name: mx.functions.department-l1-l2.section-carousel.assertProductsDisplayed
    platform: ios
    flow:
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.department-l1-l2.section-carousel.productsContainer
      - log:
          message: "Products are correctly displayed."
          color: CYAN

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts product is added to cart.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.department-l1-l2.section-carousel.assertProductAddedToCart
    platform: ios
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.department-l1-l2.section-carousel.agregarLabelByProductName
          then:
            - log:
                message: "${productName} was added to cart."
                color: CYAN
          else:
            - failTest:
                message: "The product was not added to cart."

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts product is not added to cart.
  # Params: ${productName} [Mandatory]  Name of the Product
  - name: mx.functions.department-l1-l2.section-carousel.assertProductNotAddedToCart
    platform: ios
    flow:
      - log:
          message: "Verifying ${productName} was not added to cart..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l1-l2.section-carousel.agregarLabelByProductName
          then:
            - log:
                message: "The product was not added to cart"
                color: CYAN
          else:
            - failTest:
                message: "The product was added to cart"

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as pieces.
  # Param: ${productName} [Mandatory]  Name of the Product
  # Param: ${expectedQuantityAsPieces} [Mandatory] quantity of pieces to assert
  - name: mx.functions.department-l1-l2.section-carousel.assertProductQuantityAsPieces
    platform: ios
    flow:
      - log:
          message: "Verifying product quantity added to cart is correct..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l1-l2.section-carousel.productQuantityAsPiecesOnContainer
          then:
            - log:
                message: "The product has the expected pieces"
                color: CYAN
          else:
            - failTest:
                message: "Verify if the product was added to cart or is a weighable product"

#----------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as weight.
  # Param: ${productName} [Mandatory]  Name of the Product
  # Param: ${expectedQuantityAsWeight} [Mandatory] quantity weight to assert (just the number)
  - name: mx.functions.department-l1-l2.section-carousel.assertProductQuantityAsWeight
    platform: ios
    flow:
      - log:
          message: "Verifying product quantity added to cart is correct..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l1-l2.section-carousel.productQuantityAsWeightOnContainer
          then:
            - log: 
                message: "The product has the expected weight"
                color: CYAN
          else:
            - failTest:
                message: "Check if the product was added to cart or is a pieces product"
       
 #--------------------------------------------------------------------------------------------------------------------
  
  # DESCRIPTION: This function clicks on the first brand button
  # RETURNS:  ${returnedBrandName}  name of the first brand button that appears.
  # AUTHOR: Fernanda Peruyero (vn54e7a)

  - name: mx.functions.department-l1-l2.tapFirstBrandButton
    platform: ios
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mapping.department-l1-l2.genericBrandButton
          then:
            - scroll:
                untilIdentifier: mx.mapping.department-l1-l2.genericBrandButton
                position: center
                direction: down
                scrollLimit: 3
                wait: 1000
            - getString:
                identifier: mx.mapping.department-l1-l2.genericBrandButton
                attribute: label
                storeIn: brandName
            - log:
                message: "First available brand found: '${brandName}'"
                color: GREEN_BOLD
            - click:
                identifier: mx.mapping.department-l1-l2.brandButtonByName #<--VAR--${brandName}--
          else:
            - failTest:
                message: "There was a problem while trying to tap the first brand button"
      - log:
          message: "End function: mx.functions.ea.department-l1-l2.tapFirstBrandButton"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  #DESCRIPTION: This function gets the index of the product by using the quantity in cart
  #PARAMS: 
  # ${itemQuantity} Expected quantity of the product in cart
  #RETURNS:
  # ${returnedProductIndexPath}
  #AUTHOR: Fernanda Peruyero (vn54e7a)
  - name: mx.functions.department-l1-l2.getInCartProductIndexPathByQuantity
    platform: ios
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l1-l2.productSectionByQuantity
          then:
            - getString:
                  identifier: mx.mappings.department-l1-l2.productSectionByQuantity
                  attribute: name
                  storeIn: returnedProductIndexPath
            - log:
                message: "Product Index Path: ${returnedProductIndexPath} "
          else:
            - log:
                message: "There was a problem while trying to obtain the product index path"
      - log:
          message: "End function: 'mx.functions.slp.getInCartProductIndexPathByQuantity"
          color: BLUE