#======================================================================================================================
#    AUTHOR: Octavio Cabrales Zárate (vn53g23)
#   CREATED: Jan/06/2023
#  REVISION: ---
#
#  Copyright © 2023 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.scrollDownToProduct
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productByName
          then: 
            - scroll:
                direction: up
                untilIdentifier: mx.mappings.department-l3.productByName
                scrollLimit: 1
                position: center
                wait: 1000
            - log:
                message: "Product Found"
                color: CYAN
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.department-l3.productByName
                scrollLimit: 20
                position: center
                wait: 1000
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productByName
          then: 
            - log:
                message: "Product Found"
                color: CYAN
          else:
            - failTest:
                message: "Product Not Found"
      - log:
          message: "End function: department-l3.scrollDownToProduct"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function will center the product if it is displayed in the lower section of the screen so it
  #                 shows all of its elements.
  # PARAM:  ${productName}  [Mandatory]  Product name to center.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.department-l3.centerProductIfDisplayedInTheLowerSectionOfTheScreen
    platform: android
    flow:
      # Extracting Max Screen Size...
      - log:
          message: "Extracting Max Screen Size..."
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates
          params:
            - name: element
              string: mx.mappings.department-l3.pageContainer
      - storeIn:
          key: maxScreenSize
          value: ${y2}
      - log:
          message: "Max Screen Size: '${maxScreenSize}'" # This is our 100%...
          color: CYAN
      # Getting Product Position (Height)...
      - log:
          message: "Getting Product Position (Height)..."
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates
          params:
            - name: element
              string: mx.mappings.department-l3.productByName # <--[VARIABLE]--${productName}
      - storeIn:
          key: productPosition
          value: ${y}
      - log:
          message: "Product Position (Height): '${productPosition}'"
          color: CYAN
      # Getting Product Position (%)...
      - log:
          message: "Getting Product Position (%)..."
          color: CYAN
      - arithmetic:
          expression: (${productPosition} * 100) / ${maxScreenSize}
          numberOfDecimalPlaces: 0
          storeIn: productPosition
      - log:
          message: "Product Position (%): '${productPosition}%'"
          color: CYAN
      - if:
          condition: ${productPosition} > 75 # If the product is displayed in the lower section of the screen...
          then:
            - log:
                message: "Product is displayed in the lower section of the screen, centering product"
                color: CYAN
            - drag:
                from:
                  x: 50%
                  y: 70%
                to:
                  x: 50%
                  y: 50%
          else:
            - log:
                message: "Product is NOT displayed in the lower section of the screen..."
                color: CYAN
      - log:
          message: "End function: department-l3.centerProductIfDisplayedInTheLowerSectionOfTheScreen"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------
  
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.scrollUpToProduct
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN  
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.department-l3.productByName
          scrollLimit: 20
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productByName
          then: 
            - log:
                message: "Scrolled into Product Successfully!!"
                color: CYAN
          else:
            - failTest:
                message: "Not able to scroll into Product (Product might have not found)"
      - log:
          message: "End function: department-l3.scrollUpToProduct"
          color: BLUE
                
  # -------------------------------------------------------------------------------------------------------------------              
 
  # Description: This function clicks on back button.
  - name: mx.functions.department-l3.tapBack
    platform: android
    flow:
      - log:
          message: Going back to departments L2
          color: CYAN
      - click:
          identifier: mx.mappings.department-l3.backButton
 
  # -------------------------------------------------------------------------------------------------------------------              

  # Description: This method gets the product price from product
  # Params:   ${productName}  Product name
  - name: mx.functions.department-l3.getProductPrice
    platform: android
    flow: 
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.department-l3.productPrice
          attribute: text
          storeIn: returnedPrice
      - executeNode:
          file: mx/test/helpers/utils/getNumberFromPriceString.js
          args:
            - value: ${returnedPrice}
          getResponse:
            storeIn: returnedPrice
      - log:
          message: "Price Got: ${returnedPrice}"
          color: CYAN
      - log:  
          message: "End function: department-l3.getProductPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function get the product type, either dual, pieces or weight.
  # Params: ${productName} [Mandatory] Product to find
  - name: mx.functions.department-l3.getProductType
    platform: android
    flow:
      - log:
          message: "Of Product: '${productName}'"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - storeIn:
                key: returnedProductType
                value: Dual
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.department-l3.productUOMSelectorPiecesActive
                then:
                  - storeIn:
                      key: returnedProductType
                      value: Pieces
                else:
                  - storeIn:
                      key: returnedProductType
                      value: Weighable
      - log: 
          message: "Product Type Got: '${returnedProductType}'"
          color: CYAN
      - log: 
          message: "End function: department-l3.getProductType"
          color: BLUE

 # -------------------------------------------------------------------------------------------------------------------              

  # PARAMS:  ${productName}  [Mandatory]  Name od the Product to be added.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.addProductToCart
    platform: android
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.department-l3.addProductToCartByName # <--PARAM--${productName}
          then:
            - failTest:
                message: "Function Failed: Product not found or was already added to cart."
      - click:
          identifier: mx.mappings.department-l3.addProductToCartByName # <--PARAM--${productName}
      - log:
          message: "End function: department-l3.addProductToCart"
          color: BLUE
          
  # -------------------------------------------------------------------------------------------------------------------
 
  # Description: This function verifies if the product is marked as favorite or not, and clicks the favorite icon of a
  #              product defined on param if it isn't marked.
  # Params:      ${productName}  [Mandatory] Product name
  - name: mx.functions.department-l3.markProductAsFavorite
    platform: android
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - if:
          identifier:
            contentDescription:
              - identifier: mx.mappings.department-l3.favoriteButtonByProductName
                contains: Eliminar
          then:
            - log:
                message: "Product already marked as favorite."
                color: CYAN
          else:
            - log:
                message: "Not marked. Marking product..."
                color: CYAN
            - click:
                identifier: mx.mappings.department-l3.favoriteButtonByProductName
      - log: 
          message: "End function: department-l3.markProductAsFavorite"
          color: BLUE
 
  # -------------------------------------------------------------------------------------------------------------------              
 
  # Description: This function verifies if the product is marked as favorite or not, and clicks the favorite icon of a
  #              product defined on param if it isn't marked.
  # Params:      ${productName}  [Mandatory] Product name
  - name: mx.functions.department-l3.unmarkProductAsFavorite
    platform: android
    flow:
      - log:
          message: Unmarking product ${productName} as favorite
          color: CYAN
      - if:
          identifier:
            contentDescription:
              - identifier: mx.mappings.department-l3.favoriteButtonByProductName
                contains: Agregar
          then:
            - log:
                message: "The product: ${productName}, is not marked as favorite."
                color: CYAN
          else:
            - log:
                message: "Product is marked as favorite, clicking heart icon..."
                color: CYAN
            - click:
                identifier: mx.mappings.department-l3.favoriteButtonByProductName
 
  # -------------------------------------------------------------------------------------------------------------------              
 
  # Description: This method asserts if page has the correct category
  # Params:   ${category}   [Mandatory]   Category
  - name: mx.functions.department-l3.assertCorrectCategoryOpened
    platform: android
    flow:
      - log:
          message: "Category: ${category}"
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.department-l3.categoryTitle
      - log:
          message: "End function: department-l3.assertCorrectCategoryOpened"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the product quantity by n 
  # Params:   ${productName}  [Mandatory] Product name
  #           ${quantity}     [Mandatory] Steps to decrease
  - name: mx.functions.department-l3.decreaseProductQuantityBy
    platform: android
    flow:
      - log:
          message: Decreasing quantity in cart for ${productName} by ${quantity} steps
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.department-l3.mainButtonForProduct
            - click:
                identifier: mx.mappings.department-l3.decreaseButtonForProduct
      - log:
          message: Minus button has been clicked ${quantity} times
          color: CYAN
 
  # -------------------------------------------------------------------------------------------------------------------              
 
  # Description: This function increases the product quantity by n 
  # Params:   ${productName}  [Mandatory] Product name
  #           ${quantity}     [Mandatory] Steps to increase
  - name: mx.functions.department-l3.increaseProductQuantityBy
    platform: android
    flow:
      - log:
          message: Increasing quantity in cart for ${productName} by ${quantity} steps
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.department-l3.mainButtonForProduct
            - click:
                identifier: mx.mappings.department-l3.increaseButtonForProduct
      - log:
          message: Plus button has been clicked ${quantity} times
          color: CYAN
 
  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This method switch to pieces in UOM selector
  # Params: ${productName} [Mandatory] Product name
  - name: mx.functions.department-l3.switchProductToPieces
    platform: android
    flow: 
      - log:  
          message: Changing ${productName} to pieces
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier:
            present: 
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - log:  
                message: ${productName} is dual product
                color: CYAN
          else: 
            - failTest:
                message: ${productName} is not a dual product
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productUOMSelectorPiecesActive
          then:
            - log: 
                message: Product is already set in pieces
                color: CYAN
          else:
            - click:
                identifier: mx.mappings.department-l3.piecesOption
      - verifyIdentifier: 
          present:
            - identifier: mx.mappings.department-l3.productUOMSelectorPiecesActive
 
  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This method switch to weight in UOM selector
  # Params: ${productName} [Mandatory] Product name
  - name: mx.functions.department-l3.switchProductToWeight
    platform: android
    flow: 
      - log:  
          message: Changing ${productName} to weight
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier:
            present: 
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - log:  
                message: ${productName} is dual product
                color: CYAN
          else: 
            - failTest:
                message: ${productName} is not a dual product
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productUOMSelectorPiecesActive
          then:
            - click:
                identifier: mx.mappings.department-l3.weightOption
          else:
            - log: 
                message: Product is already set in weight
                color: CYAN
      - verifyIdentifier: 
          notPresent:
            - identifier: mx.mappings.department-l3.productUOMSelectorPiecesActive
 
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method extracts the product quantity as pieces
  # Param  ${productName} [Mandatory] Product to find    
  - name: mx.functions.department-l3.getProductQuantityAsPieces
    platform: android
    flow: 
      - log:
          message: Extract quantity as pieces
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier: 
            present:
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - executeFunction:
                name: mx.functions.department-l3.switchProductToPieces
      - if:
          identifier:
            present: 
              - identifier: mx.mappings.department-l3.mainButtonForProductAsPieces
          then:
            - getString:
                identifier: mx.mappings.department-l3.mainButtonForProduct
                attribute: text
                storeIn: returnedProductQuantity
            - log:  
                message: "Extracted quantity: ${returnedProductQuantity}"
                color: CYAN
          else:
            - failTest:
                message: ${productName} has no quantity as pieces
        
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method extracts the product quantity as weight
  # Param  ${productName} [Mandatory] Product to find    
  - name: mx.functions.department-l3.getProductQuantityAsWeight
    platform: android
    flow: 
      - log:
          message: Extract quantity as weight
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier: 
            present:
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - executeFunction:
                name: mx.functions.department-l3.switchProductToWeight
      - if:
          identifier:
            notPresent: 
              - identifier: mx.mappings.department-l3.mainButtonForProductAsPieces
          then:
            - getString:
                identifier: mx.mappings.department-l3.mainButtonForProduct
                attribute: text
                storeIn: returnedProductQuantity
            - executeNode:
                file: mx/test/helpers/slp/splitWeightString.js
                args:
                  - value: ${returnedProductQuantity}
                getResponse:
                  storeIn: returnedProductQuantity
            - log:  
                message: "Extracted quantity: ${returnedProductQuantity}"
                color: CYAN
          else:
            - failTest:
                message: ${productName} has no quantity as weight
 
  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This method asserts if page is displayed correctly
  - name: mx.functions.department-l3.assertPageDisplayed
    platform: android
    flow: 
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.department-l3.backButton
            - identifier: mx.mappings.department-l3.productsContainer
            - identifier: mx.mappings.department-l3.filtersContainer
      - log:
          message: "End function: department-l3.assertPageDisplayed (page displayed)"
          color: BLUE
 
  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This method asserts if products are displayed in page
  - name: mx.functions.department-l3.assertProductsDisplayed
    platform: android
    flow: 
      - log:
          message: Checking if Deparments L3 products are displayed
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.department-l3.listView
      - log:
          message: Departments L3 products are displayed
          color: CYAN
 
  # -------------------------------------------------------------------------------------------------------------------
  
  # Description: This method asserts if page has the correct count
  # Params:   ${total}   [Mandatory]   Total count
  - name: mx.functions.department-l3.assertTotalProductsCount
    platform: android
    flow: 
      - log:
          message: Checking if Deparments L3 category count is ${total}
          color: CYAN
      - getString:
          identifier: mx.mappings.department-l3.categoryTitle
          attribute: text
          storeIn: categoryTitle
      - executeNode:
          file: mx/test/helpers/department-l3/getTotalFromText.js
          args:
            - value: ${categoryTitle}
          getResponse:
            storeIn: returnedQuantity
      - if:
          condition: ${returnedQuantity} == ${total}
          then:
            - log:
                message: Departments L3 category count is correct
                color: CYAN
          else:
            - failTest:
                message: Count doesn't match
 
  # -------------------------------------------------------------------------------------------------------------------              
  
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to assert.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.assertProductAddedToCart
    platform: android
    flow: 
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.department-l3.mainButtonForProduct # <--PARAM--${productName}
          storeIn: mainButtonText
      - log:
          message: "Main Button Text: '${mainButtonText}'"
          color: GREEN
      - if:
          condition: ${mainButtonText} != 'Agregar'
          then:
            - log:
                message: "Assertion Successful: Product added to Cart!!"
                color: CYAN 
          else:
            - failTest:
                message: "Assertion Failed: Product not added to Cart"
      - log:
          message: "End function: department-l3.assertProductAddedToCart"
          color: BLUE
          
  # -------------------------------------------------------------------------------------------------------------------
  
  # Description: This method asserts if certain product is displayed in page
  # Params:   ${productName}  [Mandatory]   Product name
  #           ${direction}    [Mandatory]   Direction to scroll
  - name: mx.functions.department-l3.assertProductDisplayed
    platform: android
    flow: 
      - log:
          message: Checking if product ${productName} is displayed
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.department-l3.productByName
      - log:
          message: Product ${productName} is displayed
          color: CYAN
 
  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This method asserts if certain product has been added to cart
  # Params:   ${productName}  [Mandatory]   Product name
  - name: mx.functions.department-l3.assertProductNotAddedToCart
    platform: android
    flow: 
      - log:
          message: Checking if product ${productName} is not added to cart
          color: CYAN
      - if:
          identifier:
            text:
              - identifier: mx.mappings.department-l3.mainButtonForProduct
                equals: Agregar
          then:
            - log:
                message: Product ${productName} has not been added to cart
                color: CYAN 
          else:
            - failTest:
                message: Product ${productName} is added to cart
 
  # -------------------------------------------------------------------------------------------------------------------              
 
  # DESCRIPTION: Asserts the displayed quantity equals the expected quantity. It takes the displayed quantity as weight,
  #   which means, it should contain the 'g' or 'gr' text which identifies the weighable or dual products. If the given
  #   product is a dual product, you should have switched it to grams before calling this function.
  #
  # PARAMS:  ${productName}       [Mandatory]  Product Name for which to assert its Quantity.
  #          ${expectedQuantity}  [Mandatory]  Expected Quantity.
  #
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.assertProductQuantityAsWeight
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected Quantity: '${expectedQuantity}' (grams)"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.collapsedQuantityLabelByProductName # <--PARAMS--${productName}
          then:
            - getString:
                identifier: mx.mappings.department-l3.collapsedQuantityLabelByProductName # <--PARAMS--${productName}
                storeIn: displayedQuantity
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.department-l3.expandedQuantityLabelByProductName  # <--PARAMS--${productName}
                then:
                  - getString:
                      identifier: mx.mappings.department-l3.expandedQuantityLabelByProductName  # <--PARAMS--${productName}
                      storeIn: displayedQuantity
                else:
                  - failTest:
                      message: "Product has not been added to Cart yet"
      - log:
          message: "Displayed Quantity: '${displayedQuantity}'"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/utils/stringContainsAny.js
          args:
            - value: ${displayedQuantity}
            - value: "g | gr | grams"
          getResponse:
            storeIn: isDisplayedAsWeight
      - if:
          condition: ${isDisplayedAsWeight} != true
          then:
            - failTest:
                message: "Displayed Quantity is displayed as pieces. Cannot perform assertion."
      - executeNode:
          file: mx/test/helpers/utils/sanitizeQuantity.js
          args:
            - value: ${displayedQuantity}
          getResponse:
            storeIn: displayedQuantity
      - if:
          condition: ${displayedQuantity} == ${expectedQuantity}
          then:
            - log:
                message: "Successful Assertion: Displayed Quantity and Expected Quantity are equal"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Quantity and Expected Quantity are not equal"
      - log:
          message: "End function: mx.functions.department-l3.assertProductQuantityAsWeight"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------              
  
  # DESCRIPTION: Asserts the displayed quantity equals the expected quantity. It takes the displayed quantity as pieces,
  #   which means, it should not display the 'g' nor 'gr' text which identifies the weighable or dual products. If the
  #   given product is a dual product, you should have switched it to pieces before calling this function.
  #
  # PARAMS:  ${productName}       [Mandatory]  Product Name for which to assert its Quantity.
  #          ${expectedQuantity}  [Mandatory]  Expected Quantity.
  #
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.assertProductQuantityAsPieces
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected Quantity: '${expectedQuantity}' (pieces)"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.collapsedQuantityLabelByProductName # <--PARAMS--${productName}
          then:
            - getString:
                identifier: mx.mappings.department-l3.collapsedQuantityLabelByProductName # <--PARAMS--${productName}
                storeIn: displayedQuantity
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.department-l3.expandedQuantityLabelByProductName  # <--PARAMS--${productName}
                then:
                  - getString:
                      identifier: mx.mappings.department-l3.expandedQuantityLabelByProductName  # <--PARAMS--${productName}
                      storeIn: displayedQuantity
                else:
                  - failTest:
                      message: "Product has not been added to Cart yet"
      - log:
          message: "Displayed Quantity: '${displayedQuantity}'"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/utils/stringContainsAny.js
          args:
            - value: ${displayedQuantity}
            - value: "g | gr | grams"
          getResponse:
            storeIn: isDisplayedAsWeight
      - if:
          condition: ${isDisplayedAsWeight} == true
          then:
            - failTest:
                message: "Displayed Quantity is displayed as weight. Cannot perform assertion."
      - executeNode:
          file: mx/test/helpers/utils/sanitizeQuantity.js
          args:
            - value: ${displayedQuantity}
          getResponse:
            storeIn: displayedQuantity
      - if:
          condition: ${displayedQuantity} == ${expectedQuantity}
          then:
            - log:
                message: "Successful Assertion: Displayed Quantity and Expected Quantity are equal"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Quantity and Expected Quantity are not equal"
      - log:
          message: "End function: mx.functions.department-l3.assertProductQuantityAsPieces"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function loops through the PLP view and retrieves all the product names displayed, if product 
  #                 has a special badge ('Discount', 'Multi-savings', 'Low Stock', etc.) that product's name goes to 
  #                 a list ('List 1' for example, this way we can assert the product has been checked later on), if all
  #                 of the visible products have special badges, flow scrolls down once and starts verifying all od the
  #                 displayed products again, if the product name is already on 'List 1' it is skipped until it finds a
  #                 product without a special badge, and if it does, its name is saved in the returned variable.
  # AUTHOR: Rodrigo Pacheco  (vn53p0i)
  # PARAMS:  ${previousList}  [OPTIONAL]                In order to run this function multiple times on the same page
  #                                                       it is possible to pass a List generated from a previous
  #                                                       execution of this function '${returnedCheckedProductsList}'.
  #                                                       Set to 'null' to restart the product verification process.
  # RETURNS: ${returnedProductNameWithoutSpecialBadges}
  #          ${returnedCheckedProductsList}
  # EDITOR: Osmar Juárez(vn56dce)
  - name: mx.functions.department-l3.getProductNameWithoutSpecialBadges
    platform: android
    flow:
      - if:
          condition: ${previousList} == null
          then:
            # Construct the string array of checked Product Names looping through the department-l3 list and returned variable...
            - storeIn:
                key: checkedProductsList
                value: ""
          else:
            # Using existing list...
            - log: 
                message: "Previous list found..."
                color: CYAN
            - storeIn:
                key: checkedProductsList
                value: ${previousList}
      # Set up of the returned variable...
      - storeIn:
          key: returnedProductNameWithoutSpecialBadges
          value: 'null'
      # This loop determines how many scrolls to perform until a product without special badges is found, 
      # if scrolls run out, function fails.
      - loop:
          begin: 1
          end: 20
          storeIndex: scrollIndex
          flow:
            # This loop checks if any of the displayed products has a special badge.
            - log: "Checking currently displayed Products..."
            - loop:
                begin: 0
                end: 4
                storeIndex: productIndex
                flow:
                  - try:
                      flow:
                        - executeFunction:
                            name: mx.functions.department-l3.getProductNameByIndex # RETURN --${displayedProductName}--
                            params:
                              - name: productIndex
                                string: ${productIndex}
                      catch:
                        flow:
                          - log:
                              message: "Name label is not visible, returning 'Not Visible'..."
                              color: GREEN
                          - storeIn:
                              key: displayedProductName
                              value: 'Not Visible'
                  - log: "Displayed Name got [Index: '${productIndex}']: '${displayedProductName}'"
                  # Verifying if obtained product name is already on the checked products list
                  - executeNode:
                      file: mx/test/helpers/utils/stringContainsAll.js
                      args:
                        - value: ${checkedProductsList}
                        - value: ${displayedProductName}
                      getResponse:
                        storeIn: isProductChecked
                  - if:
                      condition: ${isProductChecked} == true
                      then:
                        - log:
                            message: "Product already verified, checking next Product..."
                            color: CYAN
                      else:
                        - log:
                            message: "Product NOT verified. Checking if product contains special badges..."
                            color: CYAN
                        # Verifying if product contains special badges...
                        - if:
                            identifier:
                              notPresent:
                                - identifier: mx.mappings.department-l3.productWithoutSpecialBadgesByName # <--VARIABLE--${displayedProductName}
                            then:
                              # Append name of product to 'checkedProductsList'...
                              - log:
                                  message: "Product contains special badges, adding product name to checked products list..."
                                  color: CYAN
                              - executeNode:
                                  file: mx/test/helpers/utils/appendUniqueToStringArray.js
                                  args:
                                    - value: ${checkedProductsList}
                                    - value: ${displayedProductName}
                                  getResponse:
                                    storeIn: checkedProductsList
                            else:
                              # Product without special badges found, exiting Product Verification loop...
                              - log:
                                  message: "Product without special badges found."
                                  color: CYAN
                              - storeIn:
                                  key: returnedProductNameWithoutSpecialBadges
                                  value: ${displayedProductName}
                              - break: true
            - if:
                condition: ${returnedProductNameWithoutSpecialBadges} != null
                then:
                  # If Product without special badges is found, exit scroll loop.
                  - log:
                      message: "Product without special badges found, exiting scroll loop..."
                      color: CYAN
                  - break: true
                else:
                  # If desired product hasn't been found with the currently displayed products, then scroll once and repeat...
                  - log:
                      message: "Product without special badges not found, performing scroll number: ${scrollIndex}"
                      color: CYAN
                  - drag:
                      from:
                        x: 50%
                        y: 60%
                      to:
                        x: 50%
                        y: 35%
      - if:
          condition: ${returnedProductNameWithoutSpecialBadges} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product without special badges.
          else:
            - log:
                message: "Name of the product without special badges got: '${returnedProductNameWithoutSpecialBadges}'"
                color: CYAN
      - storeIn:
          key: returnedCheckedProductsList
          value: ${checkedProductsList}
      - log:
          message: "End function: department-l3.getProductNameWithoutSpecialBadges"
          color: BLUE
