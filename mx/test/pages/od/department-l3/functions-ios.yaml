#======================================================================================================================
#    AUTHOR: Octavio Cabrales Zárate (vn53g23)
#   CREATED: Jan/06/2023
#  REVISION: ---
#
#  Copyright © 2023 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This function clicks on back button.
  - name: mx.functions.department-l3.tapBack
    platform: ios
    flow:
      - log:
          message: Going back to departments L2
          color: CYAN
      - click:
          identifier: mx.mappings.department-l3.backButton

  # -------------------------------------------------------------------------------------------------------------------

  # Description: This function scrolls up to product
  # Params:   ${productName}  [Mandatory] Product name
  - name: mx.functions.department-l3.scrollUpToProduct
    platform: ios
    flow:
      - log:
          message: Scrolling up to product ${productName}
          color: CYAN  
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.department-l3.productByName
          scrollLimit: 3
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productByName
          then: 
            - log:
                message: Product ${productName} found
                color: CYAN
          else:
            - failTest:
                message: Product ${productName} not found
      - log:
          message: 'End function: mx.functions.department-l3.scrollUpToProduct'
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # Description: This function scrolls down to product
  # Params:   ${productName}  [Mandatory] Product name
  - name: mx.functions.department-l3.scrollDownToProduct
    platform: ios
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.department-l3.productByName
                value: 'true'
          then:
            - log:
                message: Product found.
                color: CYAN
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.department-l3.productByName
                scrollLimit: 12
                wait: 1000
            - if:
                identifier:
                  visible:
                    - identifier: mx.mappings.department-l3.productByName
                      value: 'true'
                then:
                  - log:
                      message: Product found
                      color: CYAN
                else:
                  - failTest:
                      message: Product ${productName} not found.
      - log:
          message: "End function: department-l3.scrollDownToProduct"
          color: BLUE
  
  # -------------------------------------------------------------------------------------------------------------------

  # Description: This function marks product as favorite
  # Params:  ${productName}  [Mandatory] Product name
  # AUTHOR: Rodrigo Pacheco C.
  - name: mx.functions.department-l3.markProductAsFavorite
    platform: ios
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.department-l3.favoriteButtonByProductName
                contains: Agregar
          then:
            - click:
                identifier: mx.mappings.department-l3.favoriteButtonByProductName
            - log:
                message: Product ${productName} has been added to favorites.
                color: CYAN
          else:
            - log:
                message: Product ${productName} is already added to favorites.
                color: CYAN
      - log:
          message: "End function: department-l3.markProductAsFavorite"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # Description: This function unmarks product as favorite
  # Params:   ${productName}  [Mandatory] Product name
  - name: mx.functions.department-l3.unmarkProductAsFavorite
    platform: ios
    flow:
      - log:
          message: Unmarking product ${productName} as favorite
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.department-l3.productFavoriteButton
                contains: Eliminar
          then:
            - click:
                identifier: mx.mappings.department-l3.productFavoriteButton
            - log:
                message: Product ${productName} has been deleted from favorites
                color: CYAN
          else:
            - log:
                message: Product ${productName} is not a favorite product
                color: CYAN
               
  # -------------------------------------------------------------------------------------------------------------------
  
  # Description: This function decrease the quantity in cart for a product by steps
  # Params:   ${productName}  [Mandatory] Product name
  #           ${quantity}     [Mandatory] Steps quantity
  - name: mx.functions.department-l3.decreaseProductQuantityBy
    platform: ios
    flow:
      - log:
          message: Decreasing items from ${productName} by ${quantity}
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.department-l3.mainButtonForProduct
            - click:
                identifier: mx.mappings.department-l3.decreaseButtonForProduct
      - log:
          message: Minus button has been clicked ${quantity} times
          color: CYAN
         
  # -------------------------------------------------------------------------------------------------------------------              

  # Description: This function increases the product quantity by n 
  # Params:   ${productName}  [Mandatory] Product name
  #           ${quantity}     [Mandatory] Steps to increase
  - name: mx.functions.department-l3.increaseProductQuantityBy 
    platform: ios
    flow:
      - log:
          message: Increasing quantity in cart for ${productName} by ${quantity} steps
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.department-l3.mainButtonForProduct
            - click:
                identifier: mx.mappings.department-l3.increaseButtonForProduct
      - log:
          message: Plus button has been clicked ${quantity} times
          color: CYAN

  # -------------------------------------------------------------------------------------------------------------------              
    
  # Description: This method switch to pieces in UOM selector
  # Params: ${productName} [Mandatory] Product name
  - name: mx.functions.department-l3.switchProductToPieces
    platform: ios
    flow: 
      - log:  
          message: Changing ${productName} to pieces
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier:
            present: 
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - log:  
                message: ${productName} is dual product
                color: CYAN
          else: 
            - failTest:
                message: ${productName} is not a dual product
      - if:
          identifier:
            value:
              - identifier: mx.mappings.department-l3.piecesOption
                equals: '1'
          then:
            - log: 
                message: Product is already set in pieces
                color: CYAN
          else:
            - click:
                identifier: mx.mappings.department-l3.piecesOption
            - log:
                message: Product ${productName} is set to pieces
                color: CYAN
   
  # -------------------------------------------------------------------------------------------------------------------

  # PARAMS: ${productName}  [Mandatory] Product name
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.addProductToCart 
    platform: ios
    flow:
      - log: 
          message: 'Product Name: "${productName}"'
          color: CYAN
      - click:
          identifier: mx.mappings.department-l3.addToCartButtonByProductName # <--PARAM---${productName}
      - log:
          message: Product added to cart
          color: GREEN
      - log:
          message: 'End function: mx.functions.department-l3.addProductToCart'
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------              
    
  # Description: This method switch to weight in UOM selector
  # Params: ${productName} [Mandatory] Product name
  - name: mx.functions.department-l3.switchProductToWeight
    platform: ios
    flow: 
      - log:  
          message: Changing ${productName} to weight
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier:
            present: 
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - log:  
                message: ${productName} is dual product
                color: CYAN
          else: 
            - failTest:
                message: ${productName} is not a dual product
      - if:
          identifier:
            value:
              - identifier: mx.mappings.department-l3.piecesOption
                equals: '1'
          then:
            - click:
                identifier: mx.mappings.department-l3.weightOption
            - log:
                message: Product ${productName} is set to weight
                color: CYAN
          else:
            - log: 
                message: Product is already set in weight
                color: CYAN
            
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function get the product type, either dual, pieces or weight.
  # Params: ${productName} [Mandatory] Product to find
  - name: mx.functions.department-l3.getProductType
    platform: ios
    flow:
      - log:
          message: Getting ${productName} product type
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - storeIn:
                key: returnedProductType
                value: Dual
          else:
            - if:
                identifier:
                  label:
                    - identifier: mx.mappings.department-l3.quantityLabel
                      notContains: g
                then:
                  - storeIn:
                      key: returnedProductType
                      value: Pieces
                else:
                  - storeIn:
                      key: returnedProductType
                      value: Weighable
      - log: 
          message: ${productName} type is - ${returnedProductType}
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method extracts the product quantity as pieces
  # Param  ${productName} [Mandatory] Product to find    
  - name: mx.functions.department-l3.getProductQuantityAsPieces
    platform: ios
    flow: 
      - log:
          message: Extract quantity as pieces
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier: 
            present:
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - executeFunction:
                name: mx.functions.department-l3.switchProductToPieces
      - if:
          identifier:
            label: 
              - identifier: mx.mappings.department-l3.quantityLabel
                notContains: g
          then:
            - getString:
                identifier: mx.mappings.department-l3.quantityLabel
                attribute: label
                storeIn: returnedProductQuantity
            - log:  
                message: "Extracted quantity: ${returnedProductQuantity}"
                color: CYAN
          else:
            - failTest:
                message: ${productName} has no quantity as pieces
                
  #--------------------------------------------------------------------------------------------------------------------
    
  # Description: This method extracts the product quantity as weight
  # Param  ${productName} [Mandatory] Product to find    
  - name: mx.functions.department-l3.getProductQuantityAsWeight
    platform: ios
    flow: 
      - log:
          message: Extract quantity as weight from ${productName}
          color: CYAN
      - click: 
          identifier: mx.mappings.department-l3.mainButtonForProduct
      - if:
          identifier: 
            present:
              - identifier: mx.mappings.department-l3.productUOMSelector
          then:
            - executeFunction:
                name: mx.functions.department-l3.switchProductToWeight
          else:
            - log:
                message: ${productName} is not a dual product, checking if is a weighable product
                color: CYAN
      - if:
          identifier:
            label: 
              - identifier: mx.mappings.department-l3.quantityLabel
                contains: g
          then:
            - getString:
                identifier: mx.mappings.department-l3.quantityLabel
                attribute: label
                storeIn: returnedProductQuantity
            - executeNode:
                file: mx/test/helpers/slp/splitWeightString_iOS.js
                args:
                  - value: ${returnedProductQuantity}
                getResponse:
                  storeIn: returnedProductQuantity
            - log:  
                message: "Extracted quantity: ${returnedProductQuantity}"
                color: CYAN
          else:
            - failTest:
                message: ${productName} has no quantity as weight

  # ------------------------------------------------------------------------------------------------------------------
    
  # Description: This method gets the product price from product
  # Params:   ${productName}  Product name
  - name: mx.functions.department-l3.getProductPrice
    platform: ios
    flow: 
      - log:
          message: Extracting price from ${productName}
          color: CYAN
      - getString:
          identifier: mx.mappings.department-l3.productPrice
          attribute: label
          storeIn: returnedProductPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${returnedProductPrice}
          getResponse:
            storeIn: returnedProductPrice
      - log:  
          message: "Extracted price from ${productName} : ${returnedProductPrice}"
          color: CYAN

  # -------------------------------------------------------------------------------------------------------------------
  
  # Description: This method asserts if page has the correct count
  # Params:   ${categoryCount}   [Mandatory]   Total count
  - name: mx.functions.department-l3.assertTotalProductsCount
    platform: ios
    flow: 
      - log:
          message: Checking if Deparments L3 category count is ${categoryCount}
          color: CYAN
      - getString:
          identifier: mx.mappings.department-l3.categoryByName
          attribute: name
          storeIn: categoryTitle
      - executeNode:
          file: mx/test/helpers/department-l3/getTotalFromText.js
          args:
            - value: ${categoryTitle}
          getResponse:
            storeIn: returnedQuantity
      - if:
          condition: ${returnedQuantity} == ${categoryCount}
          then:
            - log:
                message: Departments L3 category count is correct
                color: CYAN
          else:
            - failTest:
                message: Count doesn't match
                
  # ------------------------------------------------------------------------------------------------------------------
    
  # Description: This method asserts if department L3 category is correct
  # Params:   ${category}  Category name
  - name: mx.functions.department-l3.assertCorrectCategoryOpened
    platform: ios
    flow:
      - log:
          message: "Category: ${category}"
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.department-l3.categoryByName
              contains: ${category}
      - log:
          message: "End function: department-l3.assertCorrectCategoryOpened"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This method asserts if page is displayed correctly
  - name: mx.functions.department-l3.assertPageDisplayed
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.department-l3.backButton
            - identifier: mx.mappings.department-l3.productsContainer
      - log:
          message: "End function: department-l3.assertPageDisplayed (page displayed)"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------
  
  # Description: This method asserts if certain product is displayed in page
  # Params:   ${productName}  [Mandatory]   Product name
  #           ${direction}    [Mandatory]   Direction to scroll
  - name: mx.functions.department-l3.assertProductDisplayed
    platform: ios
    flow: 
      - log:
          message: Checking if product ${productName} is displayed
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.department-l3.productByName
      - log:
          message: Product ${productName} is displayed
          color: CYAN

  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This method asserts if products are displayed in page
  - name: mx.functions.department-l3.assertProductsDisplayed
    platform: ios
    flow: 
      - log:
          message: Checking if Deparments L3 products are displayed
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.department-l3.productsView
      - log:
          message: Departments L3 products are displayed
          color: CYAN

  # -------------------------------------------------------------------------------------------------------------------              
  
  # PARAM: ${productName}  [Mandatory]   Product name
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.department-l3.assertProductAddedToCart
    platform: ios
    flow: 
      - log:
          message: 'Product Name: "${productName}"'
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.department-l3.mainButtonForProduct.addedToCart
          then:
            - log:
                message: Product is added to cart
                color: CYAN
          else:
            - failTest:
                message: Product is not added to cart
      - log:
          message: 'End function: mx.functions.department-l3.assertProductAddedToCart'
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------              

  # Description: This method asserts if certain product has not been added to cart
  # Params:   ${productName}  [Mandatory]   Product name
  - name: mx.functions.department-l3.assertProductNotAddedToCart
    platform: ios
    flow: 
      - log:
          message: Checking if product ${productName} is not added to cart
          color: CYAN   
      - if:
          identifier:
            label:
              - identifier: mx.mappings.department-l3.mainButtonForProduct
                contains: in cart,
          then:
            - failTest:
                message: Product ${productName} is added to cart
          else:
            - log:
                message: Product ${productName} has not been added to cart
                color: CYAN 
              
  # -------------------------------------------------------------------------------------------------------------------              

  # Description: This method asserts the quantity as weight
  # Params:   ${productName}  [Mandatory]   Product name
  #           ${quantity}     [Mandatory]   Quantity
  - name: mx.functions.department-l3.assertProductQuantityAsWeight
    platform: ios
    flow: 
      - log:
          message: Checking if product ${productName} is set to weight
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.department-l3.mainButtonForProductText
                contains: g
          then:
            - log:
                message: Quantity is set to weight
                color: CYAN 
            - getString:
                identifier: mx.mappings.department-l3.mainButtonForProductText
                attribute: label
                storeIn: returnedProductQuantity
            - executeNode:
                file: mx/test/helpers/slp/splitWeightString_iOS.js
                args:
                  - value: ${returnedProductQuantity}
                getResponse:
                  storeIn: returnedProductQuantity
          else:
            - failTest:
                message: Product ${productName} is not set to weight
      - if:
          condition: ${returnedProductQuantity} == ${quantity}
          then:
            - log: 
                message: Quantity is correct
                color: CYAN
          else:
            - failTest:
                message: Quantity is not correct
                
  # -------------------------------------------------------------------------------------------------------------------              

  # Description: This method asserts the quantity as pieces
  # Params:   ${productName}  [Mandatory]   Product name
  #           ${quantity}     [Mandatory]   Quantity
  - name: mx.functions.department-l3.assertProductQuantityAsPieces
    platform: ios
    flow: 
      - log:
          message: Checking if product ${productName} is set to pieces
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.department-l3.mainButtonForProductText
                notContains: g
          then:
            - log:
                message: Quantity is set to pieces
                color: CYAN 
            - getString:
                identifier: mx.mappings.department-l3.mainButtonForProductText
                attribute: label
                storeIn: returnedProductQuantity
          else:
            - failTest:
                message: Product ${productName} is not set to pieces
      - if:
          condition: ${returnedProductQuantity} == ${quantity}
          then:
            - log: 
                message: Quantity is correct
                color: CYAN
          else:
            - failTest:
                message: Quantity is not correct

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function opens the first PDP listed that doesn't have any special badges.
  # RETURNS:  ${returnedProductName}
  # AUTHOR:   Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.department-l3.openPDPWithoutSpecialBadges
    platform: ios
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.department-l3.productNameWithoutSpecialBadges
          then:
            # Using only the scroll functionality on iOS, causes an infinite loop for some reason.
            - loop:
                begin: 1
                end: 15
                mode: increment
                flow:
                  - scroll:
                      direction: down
                      wait: 1000
                      position: center
                      scrollLimit: 1
                  - if:
                      identifier:
                        present:
                          # This mapping finds the first product on screen after the scroll with the name label visible. 
                          # The product container will not have any type of the special badges.
                          - identifier: mx.mappings.department-l3.productNameWithoutSpecialBadges
                      then:
                        - break: true
      # This drag action will hide the bottom menu in case it ends on top of the name label or the heart icon.
      - drag:
          from:
            x: 50%
            y: 55%
          to:
            x: 50%
            y: 50%
      - getString:
          # This mapping gets the product name when the product hasn't been marked as favorite yet.
          identifier: mx.mappings.department-l3.productNameWithoutSpecialBadges
          storeIn: returnedProductName
      - log:
          message: "Product Name got: ${returnedProductName}"
          color: CYAN
      - click:
          identifier: mx.mappings.department-l3.productNameWithoutSpecialBadges
      - log:
          message: "End function: mx.functions.department-l3.openPDPWithoutSpecialBadges"
          color: BLUE
