#======================================================================================================================
#  AUTHOR: Isis Rojas Tolentino (vn53dge)
#  CREATED: Mar/13/2023
#  REVISION: ---
#
#  Copyright © 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # AUTHOR: ??
  # EDITOR: Osmar Juárez (vn56dce)
  - name: mx.functions.order-details.scrollToBottom
    platform: ios
    flow:
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.order-details.elementAtTheBottom
                value: "false"
          then:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.order-details.elementAtTheBottom
                scrollLimit: 15
                wait: 1000
      - log:
          message: "End function: order-details.scrollToBottom"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Isis Tolentino (vn53dge)
  # EDITOR: Osmar Juárez (vn56dce)
  - name: mx.functions.order-details.expandProductsDetailsIfNotExpanded
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.order-details.expandProductDetailsSectionButton
          then:
            - click:
                identifier: mx.mappings.order-details.expandProductDetailsSectionButton
          else:
            - log: 
                message: "Your products section is already expanded"
                color: CYAN
      - log:
          message: "End function: order-details.expandProductsDetailsIfNotExpanded"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.order-details.collapseProductsSection
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.order-details.elementInsideCollapsedProductsSection
          then:
              - log: "Your products section is already collapsed"
          else:
              - click:
                  identifier: mx.mappings.order-details.expandCollapseProductsSectionButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function first scrolls all the way to the top of this view and then scrolls down to find and click
  # the add to cart button of the product specified on param.
  # Param  ${productName}  [Mandatory] Product to find    
  - name: mx.functions.order-details.addProductToCart
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.order-details.findProductInPage
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.order-details.addToCartButtonByProductName
                value: "true"
          then:
            - click:
                identifier: mx.mappings.order-details.addToCartButtonByProductName
          else:
            - failTest:
                message: "Add to cart button is not present or product is out of stock."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the quantity of a product.
  # IMPORTANT NOTE: If this function starts failing you may want to kill and restart the app, that helps sometimes.
  # Param: ${productName}  [Mandatory]  Name of the product to be increased.
  # Param: ${quantity}     [Mandatory]  Number of times to increment the product quantity.
  - name:  mx.functions.order-details.increaseProductQuantityBy
    platform: ios
    flow:
      - fetchPageSource: false
      - loop:
           begin: 0
           end: ${quantity}
           mode: increment
           flow:
                - click: 
                    identifier: mx.mappings.order-details.mainButtonByProductName
                - click:
                    identifier: mx.mappings.order-details.increaseButtonByProductName
      - fetchPageSource: true

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the quantity of a product.
  # IMPORTANT NOTE: If this function starts failing you may want to kill and restart the app, that helps sometimes.
  # Param: ${productName}  [Mandatory]  Name of the product to be increased.
  # Param: ${quantity}     [Mandatory]  Number of times to decrease the product quantity.
  - name:  mx.functions.order-details.decreaseProductQuantityBy
    platform: ios
    flow:
      - fetchPageSource: false
      - loop:
           begin: 0
           end: ${quantity}
           mode: increment
           flow:
                - click: 
                    identifier: mx.mappings.order-details.mainButtonByProductName
                - click:
                    identifier: mx.mappings.order-details.decreaseButtonByProductName
      - fetchPageSource: true

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switches product to pieces (these buttons are always displayed on this view).
  # Param: ${productName}  [Mandatory]  Name of the product to be switched to pieces.
  - name:  mx.functions.order-details.switchProductToPieces
    platform: ios
    flow:
      - click: 
          identifier: mx.mappings.order-details.piecesButtonByProductName

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switches product to weight (these buttons are always displayed on this view).
  # Param: ${productName}  [Mandatory]  Name of the product to be switched to weight.
  - name:  mx.functions.order-details.switchProductToWeight
    platform: ios
    flow:
      - click: 
          identifier: mx.mappings.order-details.weightButtonByProductName

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product type, either dual, pieces or weighable.
  # Param: ${productName}  [Mandatory]  Product to find.
  - name: mx.functions.order-details.getProductType
    platform: ios
    flow:
      - log:
          message: "Extracting product type from: ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.order-details.productUOMSelectorByName
          then:
            - storeIn:
                key: returnedProductType
                value: Dual
          else:
            - if:
                identifier:
                  label:
                    - identifier: mx.mappings.order-details.mainButtonTextByProductName
                      contains: g
                then:
                  - storeIn:
                      key: returnedProductType
                      value: Weighable
                else:
                  - storeIn:
                      key: returnedProductType
                      value: Pieces
      - log: 
          message: "Product type got: ${returnedProductType}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product price.
  # Params:   ${productName} [Mandatory]  Product name.
  - name: mx.functions.order-details.getProductPrice
    platform: ios
    flow: 
      - log:
          message: "Extracting unit price from: ${productName}"
          color: CYAN
      - getString: 
          identifier: mx.mappings.order-details.productPriceByProductName
          attribute: label
          storeIn: displayedPriceLabel
      - log: 
          message: "Price label got: ${displayedPriceLabel}"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${displayedPriceLabel}
          getResponse:
            storeIn: returnedProductPrice
      - log: 
          message: "Product price got: ${returnedProductPrice}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the the product's added quantity as pieces and stores it in the global variable
  # ${returnedPiecesQuantity}.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.order-details.getProductAddedQuantityAsPieces
    platform: ios
    flow:
      - log: 
          message: "Extracting added product quantity as pieces from: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.order-details.piecesProductCounterByProductName
          attribute: label
          storeIn: returnedPiecesQuantity
      - log: 
          message: "Pieces got: ${returnedPiecesQuantity}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the the product's added quantity as weight and stores it in the global variable
  # ${returnedProductWeight}.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.order-details.getProductAddedQuantityAsWeight
    platform: ios
    flow:
      - log: 
          message: "Extracting added product quantity as weight from: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.order-details.weightProductCounterByProductName
          attribute: label
          storeIn: productWeight
      - executeNode:
          file: mx/test/helpers/slp/splitWeightString_iOS.js
          args:
            - value: ${productWeight}
          getResponse:
            storeIn: returnedProductWeight
      - log: 
          message: "Weight got: ${returnedProductWeight} grams"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function gets the the subtotal value at the bottom of the view and stores it in the global variable
  # ${returnedSubtotal}.
  - name: mx.functions.order-details.getSubtotal
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.order-details.scrollToBottom
      - log: 
          message: "Obtaining currently displayed subtotal value..."
          color: CYAN
      - getString:
          identifier: mx.mappings.order-details.subtotalValue
          attribute: label
          storeIn: displayedSubtotal
      - log: 
          message: "Displayed subtotal: ${displayedSubtotal}"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${displayedSubtotal}
          getResponse:
            storeIn: returnedSubtotal
      - log: "Subtotal got: $${returnedSubtotal}"

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function gets the the discount value at the bottom of the view and stores it in the global variable
  # ${returnedDiscount}.
  - name: mx.functions.order-details.getDiscount
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.order-details.scrollToBottom
      - log: 
          message: "Obtaining currently displayed discount value..."
          color: CYAN
      - getString:
          identifier: mx.mappings.order-details.discountValue
          attribute: label
          storeIn: displayedDiscount
      - log: 
          message: "Displayed discount: ${displayedDiscount}"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${displayedDiscount}
          getResponse:
            storeIn: returnedDiscount
      - log: 
          message: "Discount got: $${returnedDiscount}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function gets the the delivery fee value at the bottom of the view and stores it in the global 
  # variable ${returnedDeliveryFee}.
  - name: mx.functions.order-details.getDeliveryFee
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.order-details.scrollToBottom
      - log: 
          message: "Obtaining currently displayed delivery fee value..."
          color: CYAN
      - getString:
          identifier: mx.mappings.order-details.deliveryFeeValue
          attribute: label
          storeIn: displayedDeliveryFee
      - log: 
          message: "Displayed delivery fee: ${displayedDeliveryFee}"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${displayedDeliveryFee}
          getResponse:
            storeIn: returnedDeliveryFee
      - log: 
          message: "Delivery fee got: $${returnedDeliveryFee}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function gets the the total value at the bottom of the view and stores it in the global 
  # variable ${returnedTotal}.
  - name: mx.functions.order-details.getTotal
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.order-details.scrollToBottom
      - log: 
          message: "Obtaining currently displayed total value..."
          color: CYAN
      - getString:
          identifier: mx.mappings.order-details.totalValue
          attribute: label
          storeIn: displayedTotal
      - log: 
          message: "Displayed total: ${displayedTotal}"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${displayedTotal}
          getResponse:
            storeIn: returnedTotal
      - log: 
          message: "Total got: $${returnedTotal}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the store name. Store name might be different from the previously displayed names
  #              Must be verified first before assertion (it is not consistent). 
  # Param:       ${expectedStoreName}  [Mandatory]  Store name to assert.
  - name: mx.functions.order-details.assertStoreName
    platform: ios
    flow: 
      - log: 
          message: "Expected Store Name: ${expectedStoreName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.order-details.storeName
          attribute: label
          storeIn: displayedStoreName
      - log: 
          message: "Displayed Store Name: ${displayedStoreName}"
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.order-details.storeName
              equals: ${expectedStoreName}

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the store address
  # Params:  {expectedStoreAddress}  [Mandatory]  Store address
  - name: mx.functions.order-details.assertStoreAddress
    platform: ios
    flow:
      - log: 
          message: "Expected store address to assert: ${expectedStoreAddress}"
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.order-details.storeAddress
              equals: ${expectedStoreAddress}
      - log: 
          message: "Expected store address matched displayed store address."
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts that a product is not present in order details.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.order-details.assertProductNotListed
    platform: ios
    flow: 
      - log:  
          message: Checking that ${productName} is not present.
          color: CYAN
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.order-details.productContainerByProductName
      - log:  
          message: ${productName} is not present.
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This method asserts the product quantity as weight
  # Param: ${productName}                             [Mandatory]  Name of the certain product.
  # Param: ${expectedOrderedQuantityAsWeight}  [Mandatory]  Quantity to assert as weight (no need to add the "g" but value must be in grams).
  - name: mx.functions.order-details.assertProductOrderedQuantityAsWeight
    platform: ios
    flow: 
      - log:  
          message: "Converting the expected ordered product quantity as weight: ${expectedOrderedQuantityAsWeight}, from gr. to kg."
          color: CYAN
      - arithmetic: 
          expression: ${expectedOrderedQuantityAsWeight} / 1000
          storeIn: expectedQuantityInKg
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.order-details.orderedQuantityAsWeightByProductName
              equals: "${expectedQuantityInKg} kg"
      - log:  
          message: "Expected ordered product quantity as weight: ${expectedQuantityInKg}, matched displayed ordered product quantity."
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts that a product has been added to cart.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.order-details.assertProductAddedToCart
    platform: ios
    flow:
      - log: 
          message: "Verifying if the product: ${productName}, was added to cart."
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.order-details.addToCartTextByProductName
          then:
            - log: 
                message: "The product: ${productName}, was added to cart."
                color: CYAN
          else:
            - failTest:
                message: "The product: ${productName}, was not added to cart."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts that a product was not added to cart.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.order-details.assertProductNotAddedToCart
    platform: ios
    flow: 
      - log: 
          message: "Verifying that the product: ${productName}, was NOT added to cart."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.order-details.addToCartTextByProductName
          then:
            - log: 
                message: "The product: ${productName}, was NOT added to cart."
                color: CYAN
          else:
            - failTest:
                message: "The product: ${productName}, was added to cart."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as pieces.
  # Param: ${productName}                      [Mandatory]  Name of the Product.
  # Param: ${expectedProductQuantityAsPieces}  [Mandatory]  Quantity of pieces to assert.
  - name: mx.functions.order-details.assertProductAddedQuantityAsPieces
    platform: ios
    flow: 
      - log:  
          message: "Expected product added quantity as pieces: ${expectedProductQuantityAsPieces}"
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.order-details.piecesProductCounterByProductName
              equals: ${expectedProductQuantityAsPieces}
      - log:  
          message: "Expected product added quantity as pieces: ${expectedProductQuantityAsPieces}, matched displayed product added quantity."
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This method asserts the product quantity as weight.
  # Param: ${productName}                      [Mandatory]  Name of the certain product.
  # Param: ${expectedProductQuantityAsWeight}  [Mandatory]  Quantity to assert as weight (no need to add the "g").
  - name: mx.functions.order-details.assertProductAddedQuantityAsWeight
    platform: ios
    flow: 
      - log:  
          message: "Expected product added quantity as weight: ${expectedProductQuantityAsWeight} grams"
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.order-details.weightProductCounterByProductName
                contains: "gr"
          then:
            - verifyIdentifier:
                label:
                  - identifier: mx.mappings.order-details.weightProductCounterByProductName
                    equals: "${expectedProductQuantityAsWeight} gr"
            - log:
                message: "Expected product added quantity as weight: ${expectedProductQuantityAsWeight} grams, matched displayed product added quantity."
                color: CYAN
          else:
            - verifyIdentifier:
                label:
                  - identifier: mx.mappings.order-details.weightProductCounterByProductName
                    equals: "${expectedProductQuantityAsWeight} g"
            - log:
                message: "Expected product added quantity as weight: ${expectedProductQuantityAsWeight} grams, matched displayed product added quantity."
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This method asserts the that a specific product defined on param is available and fails if it's not.
  # NOTE: This function should be ran after mx.functions.order-details.isProductAvailable
  # Param:  ${productName}                  [Mandatory]  Product to assert.
  # Param:  ${expectedProductAvailability}  [Mandatory]  Assign to this variable the returned value of 'isProductAvailable' 
  #                                                      function ${returnedIsProductAvailable}.
  - name: mx.functions.order-details.assertProductAvailable
    platform: ios
    flow: 
      - log:  
          message: "Verfying that the product: ${productName}, is available..."
          color: CYAN
      - if:
          condition: ${expectedProductAvailability} == true
          then:
            - log:  
                message: "The product: ${productName}, is available."
                color: CYAN
          else:
            - failTest:
                message: "The product: ${productName}, is not available."

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This method asserts the that a specific product defined on param is NOT available and fails if it is.
  # NOTE: This function should be ran after mx.functions.order-details.isProductAvailable
  # Param:  ${productName}                  [Mandatory]  Product to assert.
  # Param:  ${expectedProductAvailability}  [Mandatory]  Assign to this variable the returned value of 'isProductAvailable' 
  #                                                      function ${returnedIsProductAvailable}.
  - name: mx.functions.order-details.assertProductNotAvailable
    platform: ios
    flow: 
      - log:  
          message: "Verfying that the product: ${productName}, is NOT available..."
          color: CYAN
      - if:
          condition: ${expectedProductAvailability} == false
          then:
            - log:  
                message: "The product: ${productName}, is not available."
                color: CYAN
          else:
            - failTest:
                message: "The product: ${productName}, is available."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the specified product on ${productName} is listed.
  # Params:  {productName}  [Mandatory]  Product to assert.
  - name: mx.functions.order-details.assertProductListed
    platform: ios
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.order-details.productContainerByProductName
      - log:
          message: "The product is listed."
          color: CYAN
      - log:
          message: "End function: order-details.assertProductListed"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
  
  # AUTHOR: Francisco Ramirez (vn53vq4)
  - name: mx.functions.order-details.confirmCancelationWithFirstOption
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.order-details.cancelationConfirmationButton
      - click:
          identifier: mx.mappings.order-details.cancelation-pop.cancelationFirstOption
      - click:
          identifier: mx.mappings.order-details.cancelation-pop.confirmCaancelationButton
      - log:
          message: "End function: order-details.confirmCancelation"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  
  # AUTHOR: Francisco Ramirez (vn53vq4)
  - name: mx.functions.order-details.cancel-order-popup.selectLastOption
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.order-details.cancel-order-popup.lastReasonOption
      - log:
          message: "End function: order-details.cancel-order-popup.selectFirstOption"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  
  # AUTHOR: Francisco Ramirez (vn53vq4)
  - name: mx.functions.order-details.assertOrderIsCanceled
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.order-details.cancelledOrderStatusLabel
      - log:
          message: "Assertion Succeeded: Order has been cancelled."
          color: GREEN_BOLD
      - log:
          message: "End function: order-details.assertOrderIsCanceled"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  
  # AUTHOR: Isis Tolentino (vn53dge)
  - name: mx.functions.order-details.tapBack
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.order-details.backButton
      - log:
          message: "End function: order-details.tapBack"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # PARAM: ${productIndex} [Mandatory]  Index of the product to get name.
  # AUTHOR: Isis Tolentino (vn53dge)
  # EDITOR: Osmar Juárez (vn56dce)
  - name: mx.functions.order-details.getProductNameByIndex
    platform: ios
    flow:
      - getString:
          identifier: mx.mappings.order-details.productNameLabel # PARAM: --${productIndex}--
          storeIn: returnedProductName 
      - log:
          message: "End function: order-details.getProductNameByIndex"
          color: BLUE