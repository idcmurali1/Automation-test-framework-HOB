#======================================================================================================================
#    AUTHOR: Octavio Cabrales Zárate (vn53g23)
#   CREATED: Oct/17/2022
#  REVISION: ---
#
#  Copyright © 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This method asserts if cart page is displayed
  - name: mx.functions.cart.assertPageDisplayed
    flow: 
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.backCartArrow
            - identifier: mx.mappings.cart.cartBanner
      - log:  
          message: "End function: cart.assertPageDisplayed"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method clicks on back arrow button
  - name: mx.functions.cart.tapBack
    flow: 
      - click: 
          identifier: mx.mappings.cart.backCartArrow
      - log:  
          message: "End function: cart.tapBack"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # DESCRIPTION: This method deletes an specific available product.
  # PARAMS: ${productName}  Product to delete
  # AUTHOR: ??
  # EDITOR: Rodrigo Pacheco C. (vn53p0i) - Osmar Juárez (vn56dce)
  - name: mx.functions.cart.deleteAvailableProduct
    flow:
      - log:
          message: "Product to delete: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.deleteProductButton 
      - log:
          message: "End function: cart.deleteAvailableProduct"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # AUTHOR: Sergio Fernandez (vn0t1qt)?
  - name: mx.functions.cart.getProductQuantity
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.cart.mainButtonForProduct
          storeIn: returnedProductQuantity
      - executeNode:
          file: mx/test/helpers/utils/sanitizeQuantity.js
          args:
            - value: ${returnedProductQuantity}
          getResponse:
            storeIn: returnedProductQuantity
      - log:
          message: "Quantity Got: '${returnedProductQuantity}'"
          color: CYAN
      - log:
          message: "End function: cart.getProductQuantity"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the delivery fee
  # Param:  ${deliveryFee}   [Mandatory]   Delivery fee
  # EDITOR: Rodrigo Pacheco (vn53p0i), Teresa Partida (vn55epy)
  - name: mx.functions.cart.assertDeliveryFee
    flow:
      - log:
          message: "Expected delivery fee: ${deliveryFee}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.deliveryFeeToAssert # <--[PARAM]--${deliveryFee}
          then:
            - log:
                message: "Delivery Fee is correct."
                color: CYAN
          else:
            - getString:
                identifier: mx.mappings.cart.deliveryFee
                storeIn: displayedDeliveryFee
            - failTest:
                message: "Delivery Fee is not present or not correct, displayed value: '${displayedDeliveryFee}'"
      - log:
          message: "End function: cart.assertDeliveryFee"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION: Asserts whether the displayed estimated total in the Details section is equal to the given estimated total.
  # PARAM:  ${expectedEstimatedTotal}  [Mandatory]  Estimated total to assert against.
  - name: mx.functions.cart.assertEstimatedTotalFromDetailsSection
    flow: 
      - log:  
          message: "Expected Estimated Total: ${expectedEstimatedTotal}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.estimatedTotalInDetailsSectionValue
          then:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.cart.estimatedTotalInDetailsSectionValue
                position: center
                scrollLimit: 8
                wait: 2000
      - getString:
          identifier: mx.mappings.cart.estimatedTotalInDetailsSectionValue
          storeIn: returnedEstimatedTotal
      - executeNode:
          file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
          args:
            - value: ${returnedEstimatedTotal}
          getResponse:
            storeIn: returnedEstimatedTotal
      - if:
          condition: ${returnedEstimatedTotal} == ${expectedEstimatedTotal}
          then:
            - log:
                message: "Successful Assertion: Estimated Total is correct!"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: expected $${expectedEstimatedTotal} and got $${returnedEstimatedTotal}"
      - log:  
          message: "End function: cart.assertEstimatedTotalFromDetail (Success: Expected Estimated Total == Displayed Estimated Total)"
          color: BLUE
            
  #--------------------------------------------------------------------------------------------------------------------          
            
  # DESCRIPTION: Asserts whether the displayed estimated total at the bottom of the Cart is equal to the given estimated total.
  # PARAMS:  ${expectedEstimatedTotal}  [Mandatory]  Estimated total to assert against.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt), Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertEstimatedTotalFromBottom
    flow: 
      - log:
          message: "Expected Estimated Total: '${expectedEstimatedTotal}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.cart.totalBottomSection
          storeIn: displayedEstimatedTotal
      - executeNode:
          file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
          args:
            - value: ${displayedEstimatedTotal}
          getResponse:
            storeIn: displayedEstimatedTotalCleaned
      - log:
          message: "Displayed Estimated Total (Raw): '${displayedEstimatedTotal}'"
          color: CYAN
      - log:
          message: "Displayed Estimated Total (Cleaned): '${displayedEstimatedTotalCleaned}'"
          color: CYAN
      - if:
          condition: ${displayedEstimatedTotalCleaned} == ${expectedEstimatedTotal}
          then:
            - log:
                message: "Successful Assertion: Displayed Estimated Total is correct!!"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Estimated Total != Expected Estimated Total"
      - log:
          message: "End function: mx.functions.cart.assertEstimatedTotalFromBottom"
          color: BLUE
 
  # -------------------------------------------------------------------------------------------------------------------
 
  # Description: This method asserts if cart is not empty
  - name: mx.functions.cart.assertCartNotEmpty
    flow: 
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.continueButton
            - identifier: mx.mappings.cart.cartProductListAndFulfillmentMethod
      - log:
          message: Cart is not empty
          color: CYAN
      - log:
          message: "End function: cart.assertCartNotEmpty"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method clicks on Continue button
  - name: mx.functions.cart.tapContinue
    flow: 
      - click: 
          identifier: mx.mappings.cart.continueButton
      - log:
          message: "End function: cart.tapContinue"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method verifies the selected short version of the user address inside the selected Home slot.
  # NOTE: this assertion must be performed after reserve slot selection.
  # Param:  ${userShortAddress}       [Mandatory]  Expected short version of user address ( {steet} + {extNum} ).
  - name: mx.functions.cart.assertHomeSlotAddress
    flow:
      - log:
          message: "User short Address: ${userShortAddress}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.userShortAddressForAssertion
          then:
            - getString:
                identifier: mx.mappings.cart.userShortAddress
                storeIn: returnedShortAddress
            - log:
                message: Displayed address - ${returnedShortAddress}
                color: CYAN
            - executeNode:
                file: mx/test/helpers/reserve-slot/sanitizeShortAddress.js
                args:
                  - value: ${returnedShortAddress}
                getResponse:
                  storeIn: parsedShortAddress
            - log:
                message: Parsed displayed address - ${parsedShortAddress}
                color: CYAN
            - if:
                condition: ${parsedShortAddress} != ${userShortAddress}
                then:
                  - failTest:
                      message: Addresses don't match.
      - log:
          message: "End function: cart.assertHomeSlotAddress (Address is correct)"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method verifies the selected user address inside the selected Home slot.
  # NOTE: this assertion must be performed after reserve slot selection.
  # NOTE: this assertion needs the values obtained from the function: mx.functions.reserve-slot.getSelectedAddress
  # Params  ${streetName}     [Mandatory]   Name of the street to be validated.
  #         ${exteriorNumber} [Mandatory]   Exterior number to be validated.
  - name: mx.functions.cart.assertHomeSlotAddressByIndividualValues
    flow:
      - log:
          message: "Expected Street Name: '${streetName}'"
          color: CYAN
      - log:
          message: "Expected Exterior Number: '${exteriorNumber}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.cart.userShortAddress
          storeIn: displayedAddress
      - executeNode:
          file: mx/test/helpers/utils/stringContainsAll.js
          args:
            - value: ${displayedAddress}
            - value: ${streetName}, ${exteriorNumber}
          getResponse:
            storeIn: isAddressCorrect
      - if:
          condition: ${isAddressCorrect} == true
          then:
            - log:
                message: "Address is correct."
                color: CYAN
          else:
            - failTest:
                message: "'${streetName}, ${exteriorNumber}' not contained in: '${displayedAddress'}"
      - log:
          message: "End function: cart.assertHomeSlotAddressByIndividualValues (Address is correct)"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method verifies the delivery fee of the selected time slot inside the selected Home slot.
  # NOTE: this assertion must be performed after reserve slot selection.
  # Param:  ${expectedDeliveryFee}  [Mandatory]  Expected delivery fee cost, obtained from mx.functions.cart.getDeliveryFee
  #                                        or any other function that extracts this value from a different page.
  #                                        This value must be an integer for iOS, it does not have decimals.
  - name: mx.functions.cart.assertHomeSlotDeliveryFee
    flow:
      - log:
          message: "Expected Delivery Fee: ${expectedDeliveryFee}"
          color: CYAN
      - if:
          condition: ${APP_PLATFORM} == 'ios'
          then:
            - arithmetic:
                expression: ${expectedDeliveryFee}
                numberOfDecimalPlaces: 0
                storeIn: expectedDeliveryFee
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.homeSlotDeliveryFee
          then:
            - failTest:
                message: "Delivery fee inside the selected home slot is not present."
          else:
            - log:
                message: "Correct delivery fee."
                color: CYAN
      - log:
          message: "End function: cart.assertHomeSlotDeliveryFee"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method verifies the delivery fee of the selected time slot inside the selected Home slot.
  # NOTE: this assertion must be performed after reserve slot selection.
  # Param:  ${deliveryMethod}  [Mandatory]  Expected selected delivery method (Input: [ HomeDelivery | PickupDelivery ]).
  - name: mx.functions.cart.assertDeliveryMethod
    flow:
      - log:
          message: "Expected Delivery Method: ${deliveryMethod}"
          color: CYAN
      - if:
          condition: ${deliveryMethod} == 'HomeDelivery'
          then:
            - verifyIdentifier:
                present:
                  - identifier: mx.mappings.cart.homeSlot
          else:
            - if:
                condition: ${deliveryMethod} == 'PickupDelivery'
                then:
                  - verifyIdentifier:
                      present:
                        - identifier: mx.mappings.cart.pickupSlot
                else:
                  - failTest:
                      message: "Wrong input, verify delivery method supplied: ${deliveryMethod}"
      - log:
          message: "End function: cart.assertDeliveryMethod"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: Asserts the displayed Order's Delivery Slot is correct.
  # Params: ${deliverySlot}  [Mandatory]  Expected delivery slot to be displayed. The value passed in this param must
  #                                         be the string value returned by the helper:
  #                                         delivery-slot-extraction/parseDeliverySlotForAssertion.js (see helper's documentation).
  #
  #   Flags used:
  #     ${ASSERT_DELIVERY_SLOT_IN_CART}
  #         If set to 'true', the flow will perform assertion for the Delivery Slot in Cart page.
  #         If set to 'false' or not set at all, it will perform the Delivery Slot assertion as expected.
  #
  - name: mx.functions.cart.assertDeliverySlot
    flow:
      - if:
          condition: ${ASSERT_DELIVERY_SLOT_IN_CART} == true
          then:
            - log:
                message: "Expected delivery slot: ${deliverySlot}"
                color: CYAN
            - getString:
                identifier: mx.mappings.cart.deliverySlot
                storeIn: displayedDeliverySlot
            - executeNode:
                file: mx/test/helpers/delivery-slot/stringCleanerForDeliverySlotAssertion.js
                args:
                  - value: ${displayedDeliverySlot}
                getResponse:
                  storeIn: displayedDeliverySlot
            - log:
                message: "Displayed Delivery Slot: ${displayedDeliverySlot}"
                color: CYAN
            - if:
                condition: ${displayedDeliverySlot} != ${deliverySlot}
                then:
                  - failTest:
                      message: "Fail: Displayed Delivery Slot not correct (Expected Delivery Slot != Displayed Delivery Slot)"
          else:
            - log:
                message: "Delivery Slot Assertion has been turned off by flag:'ASSERT_DELIVERY_SLOT_IN_CART'"
                color: YELLOW
      - log:
          message: "End function: cart.assertDeliverySlot"
          color: BLUE
 
# --------------------------------------------------------------------------------------------------------------------          
  
  # Description: This method asserts if a product is present in cart
  # Params: ${productName}  [Mandatory]  Name of the certain product
  - name: mx.functions.cart.assertProductListed
    flow:
      - executeFunction:
          name: mx.functions.utils.closeGenericPopupIfDisplayed 
      - log:  
          message: "Product Name: ${productName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.productByName
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.productByName
      - log:
          message: "End function: cart.assertProductListed (Success: Product Listed)"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
  
  # Description: This method asserts if a product is not present in cart
  # Param: ${productName}  [Mandatory]  Name of the certain product.
  - name: mx.functions.cart.assertProductNotListed
    flow: 
      - log:  
          message: "Product Name: ${productName}"
          color: CYAN
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.cart.fulfillmentMethodCard 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productByName
          then:
            - failTest:
                message: "Fail: Product is listed"
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.cart.productByName
          scrollLimit: 8
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.cart.productByName
      - log:  
          message: "End function: cart.assertProductNotListed (Success: Product Not Listed)"
          color: BLUE
          
  #--------------------------------------------------------------------------------------------------------------------          
  
  # DESCRIPTION: Asserts if the given product name is listed in the Available Products List.
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to assert for.
  - name: mx.functions.cart.assertProductListedAsAvailable
    flow: 
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.productWithStock
            - name: direction
              string: "null"
      - log:  
          message: ${productName} has stock available
          color: CYAN
      - log:
          message: "End function: cart.assertProductListedAsAvailable"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # DESCRIPTION: Asserts if the given product name is not listed in the OOS Products List.
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to assert for.
  #          ${direction}    [Mandatory]  Direction to scroll into.
  - name: mx.functions.cart.assertProductNotListedAsOOS
    flow: 
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.productByName
      - storeIn:
         key: productNameOOS
         value: ${productName}
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.cart.productOOS
      - log:
          message: "End function: cart.assertProductNotListedAsOOS"
          color: BLUE
 
   #----------------------------------------------------------------------------------------------------------------------
 
   # Description: This flow asserts 
   # Params:   ${numberOfOOSProducts}  [Mandatory]   Number of deleted OOS products
  - name: mx.functions.cart.assertOOSProductsAreDeleted
    flow:
      - arithmetic:
          expression: ${numberOfOOSProducts} + 1
          storeIn: rightBound
      - loop:
         begin: 1
         end: ${rightBound}
         storeIndex: i
         flow:
           - executeNode:
               file: mx/test/helpers/oos/getOOSProductName.js
               args:
                 - value: ${oosNamesArray}
                 - value: ${i}
               getResponse:
                 storeIn: productName
           - storeIn:
               key: productNameOOS
               value: ${productName}
           - verifyIdentifier:
              notPresent:
                - identifier: mx.mappings.cart.productOOS
                - identifier: mx.mappings.cart.productWithStock

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Asserts if a product quantity is shown as pieces and if it is correct.
  # PARAMS: ${productName}       [Mandatory]  Name of the product to assert for.
  #         ${expectedQuantity}  [Mandatory]  Expected quantity to assert to be displayed.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.assertProductQuantityAsPieces
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected Quantity: '${expectedQuantity}'"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.piecesQuantityByProductName # <--PARAM--${productName}
          then:
            - executeFunction:
                name: mx.functions.cart.getProductQuantity # <--PARAM--${productName} / RETURNS--${returnedProductQuantity}-->
          else:
            - failTest:
                message: "Failed Assertion: Product is not a Pieces Product, is Dual but UOM is not set to Pieces, or is not found"
      - log:
          message: "Displayed Quantity: '${returnedProductQuantity}'"
          color: CYAN
      - if:
          condition: ${returnedProductQuantity} == ${expectedQuantity}
          then:
            - log: 
                message: "Successful Assertion: Displayed Quantity is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Quantity != Expected Quantity"
      - log: 
          message: "End function: cart.assertProductQuantityAsPieces"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          

  # DESCRIPTION: Asserts if a product quantity is shown as weight and if it is correct.
  # PARAMS: ${productName}       [Mandatory]  Name of the product to assert for.
  #         ${expectedQuantity}  [Mandatory]  Expected quantity to assert to be displayed.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.assertProductQuantityAsWeight
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected Quantity: '${expectedQuantity}'"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.weightQuantityByProductName # <--PARAM--${productName}
          then:
            - executeFunction:
                name: mx.functions.cart.getProductQuantity # <--PARAM--${productName} / RETURNS--${returnedProductQuantity}-->
          else:
            - failTest:
                message: "Failed Assertion: Product is not a Weighable Product, is Dual but UOM is not set to Weight, or is not found"
      - log:
          message: "Displayed Quantity: '${returnedProductQuantity}'"
          color: CYAN
      - if:
          condition: ${returnedProductQuantity} == ${expectedQuantity}
          then:
            - log:
                message: "Successful Assertion: Expected Quantity is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Quantity != Expected Quantity"
      - log:
          message: "End function: cart.assertProductQuantityAsWeight"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This method asserts if the correct discount is applied
  # Param: ${discount}  [Mandatory]  Name of the certain product
  # AUTHOR: Octavio Cabrales Zárate (vn53g23)
  - name: mx.functions.cart.assertDiscountAmount
    flow:
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.estimatedTotalInDetailsSection
      - log:
          message: Expected discount $${discount}
          color: CYAN
      - getString:
          identifier: mx.mappings.cart.discountLabel
          storeIn: subtotalDiscount
      - executeNode:
          file: mx/test/helpers/slp/sanitizePrice.js
          args:
            - value: ${subtotalDiscount}
          getResponse:
            storeIn: subtotalDiscount
      - log:
          message: Extracted discount ${subtotalDiscount}
          color: CYAN
      - if:
          condition: ${discount} == ${subtotalDiscount}
          then:
            - log:
                message: Discounts match.
                color: CYAN
          else:
            - failTest:
                message: Discounts don't match.
      - log:
          message: "End function: cart.assertDiscountAmount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function checks if the product has Multi Savings Promotion.
  # PARAMS:   ${productName}  [Mandatory]  Product name.
  # RETURNS:  ${returnedHasMultiSavingsPromotion} [BOOLEAN]
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.checkIfProductHasMultiSavingsPromotion
    flow: 
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.multiSavingsBadgeByProductName # <--PARAM--${productName}
          then:
            - storeIn:
                key: returnedHasMultiSavingsPromotion
                value: true
          else:
            - storeIn:
                key: returnedHasMultiSavingsPromotion
                value: false
      - log:
          message: "Does Product have Multi Savings Promotion?: '${returnedHasMultiSavingsPromotion}'"
          color: CYAN
      - log:
          message: "End function: cart.checkIfProductHasMultiSavingsPromotionWorkaround"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:
  #   This function calculates the product subtotal once the multi savings promotion has been applied by calculating the
  #     current product subtotal minus the multi savings discount amount.
  # PARAMS:
  #   ${productSubtotal}            [Mandatory]  Subtotal gotten from multiplying added quantity times the unit price.
  #   ${multiSavingsDiscountAmount} [Mandatory]  Discount value under the 'Ahorras' label.
  # RETURNS:
  #   ${returnedFinalSubtotal}
  # AUTHOR:
  #   Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.calculateProductSubtotalAfterMultiSavingsPromotion
    flow: 
      - log:
          message: "Product Subtotal: '${productSubtotal}'"
          color: CYAN
      - log:
          message: "Multi Savings Discount Amount: '${multiSavingsDiscountAmount}'"
          color: CYAN
      - arithmetic:
          expression: ${productSubtotal} - ${multiSavingsDiscountAmount}
          numberOfDecimalPlaces: 2
          storeIn: returnedFinalSubtotal
      - log:
          message: "New Product Subtotal After Multi Savings Promotion: '${returnedFinalSubtotal}'"
          color: CYAN
      - log:
          message: "End function: cart.getProductSubtotalAfterMultiSavingsPromotion"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------          

  # DESCRIPTION: Asserts if a product quantity is shown as dual and if it is correct.
  # PARAMS: ${productName}       [Mandatory]  Name of the product to assert for.
  #         ${expectedQuantity}  [Mandatory]  Expected quantity to assert to be displayed.
  # AUTHOR: Francisco Ramirez (vn53vq4)
  - name: mx.functions.cart.assertProductQuantityAsDual
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected Quantity: '${expectedQuantity}'"
          color: CYAN
      - log: 
          message: ${APP_PLATFORM}
          color: CYAN
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.cart.productUOMSelector
                then:
                  - log:
                        message: "Product: ${productName} is dual type. Getting the current product quantity in grams..."
                        color: CYAN
                  - click:
                      identifier: mx.mappings.cart.productUOMSelector # <--PARAM--${productName}
          else:
          - if:
              identifier: 
                present:
                  - identifier: mx.mappings.cart.UOMSelectorWeightButton
              then:
                  - log:
                      message: "Product: ${productName} is dual type. Getting the current product quantity in grams..."
                      color: CYAN
                  - click:
                      identifier: mx.mappings.cart.UOMSelectorWeightButton # <--PARAM--${productName}
              else:
                  - failTest:
                      message: "Product: ${productName} is not a dual product!"
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.weightQuantityByProductName # <--PARAM--${productName}
          then:
            - executeFunction:
                name: mx.functions.cart.getProductQuantity # <--PARAM--${productName} / RETURNS--${returnedProductQuantity}-->
          else:
            - failTest:
                message: "Failed Assertion: Product is not a Weighable Product, is Dual but UOM is not set to Weight, or is not found"
      - log:
          message: "Displayed Quantity: '${returnedProductQuantity}'"
          color: CYAN
      - if:
          condition: ${returnedProductQuantity} == ${expectedQuantity}
          then:
            - log:
                message: "Successful Assertion: Expected Quantity is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Quantity != Expected Quantity"
      - log:
          message: "End function: cart.assertProductQuantityAsDual"
          color: BLUE


  #--------------------------------------------------------------------------------------------------------------------

  # Description:
  #   This method validate if button add comment is present and then click
  #
  # PARAMS:
  #   ${productName}  [Mandatory]     Find product name in mappings file
  # AUTHOR: Miguel Caballero (vn55rfi)
  - name: mx.functions.cart.clickAddItemLevelComment
    flow:
      - click:
          identifier: mx.mappings.cart.editProductCommentButtonByName
      - log:
          message: "End function: cart.clickAddItemLevelComment"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description:
  #   This method add items level comments
  # PARAMS:
  #   ${itemLevelComment}  [Mandatory]     Add item level comment
  #
  # AUTHOR: Miguel Caballero (vn55rfi)
  - name: mx.functions.cart.addItemLevelComment
    flow:
      - log:
          message: "Item level comment: ${itemLevelComment}"
          color: CYAN
      - enterText:
          identifier: mx.mappings.cart.editProductCommentInputField
          string: ${itemLevelComment}
          pressEnter: false
      - log:
          message: "End function: cart.addItemLevelComment"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description:
  #   This method save item level comment button
  #
  # PARAMS:
  #   ${itemLevelComment}     Added item level comment
  # AUTHOR: Miguel Caballero (vn55rfi)
  - name: mx.functions.cart.saveItemLevelComment
    flow:
      - log:
          message: "Comment added: '${itemLevelComment}'"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.saveProductCommentButton
      - log:
          message: "End function: cart.saveItemLevelComment"
          color: BLUE


  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function clicks the save for later for a specific product
  # PARAMS: ${productName} [Mandatory] Name of the producto to click save for later
  # AUTHOR: Guillermo Canales (g0c08aj)
  - name: mx.functions.cart.tapSaveForLaterByProductName
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.saveForLater # <--PARAM--${productName}
      - log:
          message: "End function: list.tapSaveForLaterByProductName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description:
  #   This method compares item level comment added
  # PARAMS:
  #   ${productName}  [Mandatory]     Find product name in mappings file
  #   ${itemLevelComment}     Added item level comment
  # RETURNS:
  #   ${getItemLevelComment}
  # AUTHOR: Miguel Caballero (vn55rfi)
  - name: mx.functions.cart.assertItemLevelCommentAdded
    flow:
      - getString:
          identifier: mx.mappings.cart.itemCommentAdded
          attribute: text
          storeIn: getItemLevelComment
      - if:
          condition: ${itemLevelComment} == ${getItemLevelComment}
          then:
            - log:
                message: "Successful Assertion: Expected comment is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed: '${getItemLevelComment}' And Expected: '${itemLevelComment}'"
      - log:
          message: "End function: cart.assertItemLevelCommentAdded"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function clicks the "Move to cart" text link for a specific product, returning it to the cart from the "Save For Later" section.
  # PARAMS: ${productName} [Mandatory] Name of the product to click "Move to Cart" text link.
  # AUTHOR: Guillermo Canales (g0c08aj)

  - name: mx.functions.cart.sfl.tapMoveToCartByProductName
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.sfl.moveToCart # <--PARAM--${productName}
      - log:
          message: "End function: mx.functions.cart.sfl.tapMoveToCartByProductName"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function scrolls up until the reserve slot button is shown on screen.
  # AUTHOR: Jorge Carrillo (vn575hp)

  - name: mx.functions.cart.scrollUpToReserveSlotButton
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.cart.reserveSlotButton
      - log: 
          message: "End function: cart.scrollUpToReserveSlotButton"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function clicks the save for later for a specific product
  # PARAMS: ${productName} [Mandatory] Name of the producto to click save for later
  # AUTHOR: Belen García (vn532ri)
  - name: mx.functions.cart.deleteProductSaveForLaterByProductName
    flow:
      - log:
            message: "Delete product from SfL: '${productName}'"
            color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: cartPage.saveForLaterProductTile
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.saveForLaterProductTile
          then:
            - scroll:
                direction: down
                untilIdentifier: cartPage.saveForLaterProductTile
                position: center
                scrollLimit: 5
                timeout: 10000
      - click:
          identifier: mx.mappings.cart.productDeleteFromSaveForLater # <--PARAM--${productName}
      - log:
          message: "End function: mx.functions.cart.deleteSaveForLaterByProductName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the Save for later section is not displayed
  # AUTHOR: Teresa Partida (vn55epy)
  - name: mx.functions.cart.assertSaveForLaterNotDisplayed
    flow:
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.cart.saveForLaterHeader
            - identifier: mx.mappings.cart.saveForLaterItemContainer
      - log:
          message: Save for later section is not displayed
          color: CYAN
      - log:
          message: "End function: cart.assertSaveForLaterNotDisplayed"
          color: BLUE