#======================================================================================================================
#    AUTHOR: Octavio Cabrales Zárate (vn53g23)
#   CREATED: Oct/17/2022
#  REVISION: ---
#
#  Copyright © 2022 Walmart. All rights reserved.
#======================================================================================================================

 functions:
 
  # Description: This method clicks on Start Buying button
  - name: mx.functions.cart.tapStartBuying
    platform: ios
    flow: 
      - log:
          message: Going to home page
          color: CYAN
      - click: 
          identifier: mx.mappings.cart.startBuyingButton
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method asserts if cart is empty
  - name: mx.functions.cart.assertCartIsEmpty
    platform: ios
    flow: 
      - log:
          message: Checking if cart is empty
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.startBuyingButton
      - log:
          message: Cart is empty
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method asserts if there's a box stating a OOS message
  - name: mx.functions.cart.assertOOSMessage
    platform: ios
    flow: 
      - log:
          message: Checking if out of stock item is present in cart
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.oosMessage
      - log:
          message: Out of stock message is present
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if a product is present in cart
  # Param: ${productName}  [Mandatory]  Name of the certain product
  - name: mx.functions.cart.assertCertainProduct
    platform: ios
    flow: 
      - verifyIdentifier:
          present:    
            - identifier: mx.mappings.cart.productByName
      - log:
          message: ${productName} is present in cart
          color: CYAN
      - log:
          message: "End function: cart.assertCertainProduct"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if a product is not present in cart
  # Param: ${productByName}  [Mandatory]  Name of the certain product
  - name: mx.functions.cart.assertCertainProductNotPresent
    platform: ios
    flow: 
      - verifyIdentifier:
          notPresent:    
            - identifier: mx.mappings.cart.product
      - log:
          message: "End function: cart.assertCertainProductNotPresent"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if a product in cart has stock
  # Param: ${productName}  [Mandatory]  Name of the certain product
  - name: mx.functions.cart.assertCertainProductIsAvailable
    platform: ios
    flow: 
      - log:
          message: Checking if ${productName} has stock
          color: CYAN
      - verifyIdentifier:
          present:    
            - identifier: mx.mappings.cart.productWithStock
      - log:
          message: ${productName} has stock
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if a product in cart is not in available products list
  # Param: ${productByName}  [Mandatory]  Name of the certain product
  - name: mx.functions.cart.assertCertainProductIsNotAvailable
    platform: ios
    flow: 
      - log:
          message: Checking if ${productByName} is not in the available products list
          color: CYAN
      - verifyIdentifier:
          notPresent:    
            - identifier: mx.mappings.cart.productWithStock
      - log:
          message: ${productByName} is not present in available products list
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if a product in cart is OOS
  # Param: ${productByNameOOS}  [Mandatory]  Name of the certain product
  - name: mx.functions.cart.assertCertainProductIsOOS
    platform: ios
    flow: 
      - log:
          message: Checking if ${productByNameOOS} is out of stock
          color: CYAN
      - verifyIdentifier:
          present:    
            - identifier: mx.mappings.cart.productOOS
      - log:
          message: ${productByNameOOS} is out of stock
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if a product in cart is not marked as OOS
  # Param: ${productByName}  [Mandatory]  Name of the certain product
  - name: mx.functions.cart.assertCertainProductIsNotOOS
    platform: ios
    flow: 
      - log:
          message: Checking if ${productByName} is not present in out of stock section
          color: CYAN
      - verifyIdentifier:
          notPresent:    
            - identifier: mx.mappings.cart.oosProduct
      - log:
          message: ${productByName} is not present in out of stock section
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts the price of a product
  # Param: ${productName}  [Mandatory]  Name of the certain product
  #        ${expectedUnitPrice}   [Mandatory]  Unit price
  - name: mx.functions.cart.assertProductPrice
    platform: ios
    flow: 
      - log:
          message: Checking if ${productName} price is ${expectedUnitPrice}
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.productNameLabelByProductName
              contains: "$${expectedUnitPrice}"
      - log:
          message: ${productName} price is as expected
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts the fulfillment method is pickup
  # PARAMS:  ${deliverySlot}  [Mandatory]  Expected delivery slot.
  #                                          Obtain the value to pass it into the parameter from 'mx.functions.utils.getDeliverySlot'.
  #          ${storeName}     [Mandatory]  Expected store name.
  # Author: ?????
  # Editor: Isis Tolentino (vn53dge)
  - name: mx.functions.cart.assertPickupSlotSelected
    platform: ios
    flow: 
      - log:  
          message: "Expected Delivery Method: Pickup"
          color: CYAN
      - log:  
          message: "Expected Delivery Slot: ${deliverySlot}"
          color: CYAN
      - log:  
          message: "Expected Store Name: ${storeName}"
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.fulfillmentMethod
              equals: "Pickup"
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.pickupStore
              contains: ${storeName}
      - getString:
          identifier: mx.mappings.cart.deliverySlot
          storeIn: displayedDeliverySot
      - executeNode:
          file: mx/test/helpers/delivery-slot/stringCleanerForDeliverySlotAssertion.js
          args:
            - value: ${displayedDeliverySot}
          getResponse:
            storeIn: displayedDeliverySot
      - log:
          message: "Displayed Delivery Slot: ${displayedDeliverySot}"
          color: CYAN
      - if:
          condition: ${deliverySlot} != ${displayedDeliverySot}
          then:
            - failTest:
                message: "Fail: Displayed Delivery Slot not correct (Expected Delivery Slot != Displayed Delivery Slot)"
      - log:  
          message: "End function: cart.assertPickupSlotSelected (Success: information correct)"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if reservation is expired
  - name: mx.functions.cart.assertSlotExpired
    platform: ios
    flow: 
      - log:
          message: Checking if reserve slot is expired
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.deliverySlot
              equals: "Terminó tu reservación"
      - log:
          message: Reserve slot is expired
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for discount
  # Param:  ${badgeType}            [Mandatory]   Badge type
  #         ${productByName}        [Mandatory]   Product description
  - name: mx.functions.cart.assertGenericBadge
    platform: ios
    flow: 
      - log:
          message: Checking if ${badgeType} is present in ${productByName}
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.badgeType
              equals: ${badgeType}
      - log:
          message: ${badgeType} is present in ${productByName}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for discount
  # Param:  ${productByName}   [Mandatory]   Product description 
  - name: mx.functions.cart.assertDiscountBadge
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertGenericBadge
          params:
            - name: badgeType
              string: Rebaja
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for discount
  # Param:  ${productByName}   [Mandatory]   Product description
  - name: mx.functions.cart.assertMSIBadge
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertGenericBadge
          params:
            - name: badgeType
              string: MSI
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for precio en linea
  # Param:  ${productByName}   [Mandatory]   Product description
  - name: mx.functions.cart.assertOnlinePriceBadge
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertGenericBadge
          params:
            - name: badgeType
              string: Precio en linea
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts the right side of a POS Line item
  # Param:  ${posLineItem}   [Mandatory]   Delivery Fee
  #         ${rightSideItem} [Mandatory]   Right side value
  - name: mx.functions.cart.assertRightPOSLineItem
    platform: ios
    flow: 
      - log:
          message: Checking if ${posLineItem} is ${rightSideItem}
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.rightPOSLineItem
              equals: ${rightSideItem}
      - log:
          message: ${posLineItem} is correct 
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION: Asserts whether the displayed subtotal equals the given expected subtotal.
  # PARAM:  ${expectedSubtotal}  [Mandatory]  Expected subtotal to assert. This is the value of the full subtotal without discounts.
  # AUTHOR: ???
  # EDITOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertSubtotal
    platform: ios
    flow:
      - log:
          message: "Expected Subtotal: '${expectedSubtotal}'"
          color: CYAN
      # Get displayed Subtotal.
      - getString:
          # This mapping gets the Subtotal value BEFORE discount (if there are discounts) and just the subtotal in case
          # there aren't any.
          identifier: mx.mappings.cart.subtotalValue
          storeIn: displayedSubtotal
      # Clean the subtotal obtained and log it...
      - executeNode:
           file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
           args:
             - value: ${displayedSubtotal}
           getResponse:
               storeIn: displayedSubtotal
      - log:
          message: "Displayed Subtotal: '${displayedSubtotal}'"
          color: CYAN
      # Assert expected vs displayed...
      - if:
          condition: ${displayedSubtotal} == ${expectedSubtotal}
          then:
            - log:
                message: "Successful Assertion: Displayed Subtotal is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Subtotal is incorrect"
      - log:  
          message: "End function: cart.assertSubtotal"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION:
  #   Asserts whether the displayed subtotal after discounts equals the given expected subtotal.
  # PARAM:
  #   ${expectedSubtotalAfterDiscount}  [Mandatory]   Expected subtotal after discount to assert. 
  #                                                     This is the value of the sum of all product subtotals after discounts.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertSubtotalAfterDiscount
    platform: ios
    flow:
      - log:
          message: "Expected Subtotal After Discounts: '${expectedSubtotalAfterDiscount}'"
          color: CYAN
      # Get displayed Subtotal.
      - getString:
          # This mapping gets the Subtotal value AFTER discount (if there are NO discounts function fails).
          identifier: mx.mappings.cart.subtotalValueAfterDiscount
          storeIn: displayedSubtotalAfterDiscount
      # Clean the subtotal obtained and log it...
      - executeNode:
           file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
           args:
             - value: ${displayedSubtotalAfterDiscount}
           getResponse:
               storeIn: displayedSubtotalAfterDiscount
      - log:
          message: "Displayed Subtotal: '${displayedSubtotalAfterDiscount}'"
          color: CYAN
      # Assert expected vs displayed...
      - if:
          condition: ${displayedSubtotalAfterDiscount} == ${expectedSubtotalAfterDiscount}
          then:
            - log:
                message: "Successful Assertion: Displayed Subtotal after discounts is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Subtotal after discounts is incorrect"
      - log:  
          message: "End function: cart.assertSubtotalAfterDiscount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # Description:
  #   This method retrieves the cart discount value if available, returns -0.00 if not available.
  # RETURNS:
  #   ${returnedCartDiscount}  Final cart discount value (if available, else this equals '-0.00').
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.getCartDiscount
    platform: ios
    flow:
      - log:
          message: Retrieving displayed discount value...
          color: CYAN
      - try:
          flow:
            - getString:
                identifier: mx.mappings.cart.discountValue
                storeIn: returnedCartDiscount
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
                args:
                  - value: ${returnedCartDiscount}
                getResponse:
                  storeIn: returnedCartDiscount
          catch:
            flow:
              - storeIn:
                  key: returnedCartDiscount
                  value: "-0.00"
      - log:
          message: "Cart Discount got: ${returnedCartDiscount}"
          color: CYAN
      - log:
          message: "End function: cart.getCartDiscount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # Description:  This method asserts the subtotal and identifies if cart has discounts and performs assertion on the right value.
  #                 If the discount is present, 'returnedCartSubtotalAfterDiscount' will be the final subtotal value after discount.
  #                 If the discount is not present, 'returnedCartSubtotalAfterDiscount' will be equal to '0.00' and the assertion will be skipped.
  # Param:   ${cartSubtotal}  [Mandatory]  Cart Subtotal Amount. Do not change this param name.
  # RETURNS: ${returnedCartSubtotalAfterDiscount}  Final subtotal value after discount (if available, else this equals '0.00').
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertGrandSubtotalIfCartHasDiscounts
    platform: ios
    flow:
      - log: 
          message: "Cart Subtotal: ${cartSubtotal}"
          color: CYAN
      # Checking if cart has discounts...
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.discountLabel
          then:
            - log:
                message: "Discount found, adjusting Subtotal value for final assertion..."
                color: CYAN
            # Retrieving displayed discount value...
            - log:
                message: Retrieving displayed discount value...
                color: CYAN
            - getString:
                identifier: mx.mappings.cart.discountValue
                storeIn: displayedDiscountValue
            - executeNode:
                file: mx/test/helpers/utils/removeDollarSignFromValue.js
                args:
                  - value: ${displayedDiscountValue}
                getResponse:
                  storeIn: parsedDiscountValue
            - log:
                message: "Discount got: '${parsedDiscountValue}'"
                color: CYAN
            # Calculating Subtotal value after Discount...
            - log:
                message: Calculating Subtotal value after Discount...
                color: CYAN
            - arithmetic:
                expression: ${cartSubtotal} - (${parsedDiscountValue} * (-1)) # This is because the discount value contains the minus sign.
                numberOfDecimalPlaces: 2
                storeIn: returnedCartSubtotalAfterDiscount
            - executeNode:
                file: mx/test/helpers/utils/numberToNumberWithComa.js
                args:
                  - value: ${returnedCartSubtotalAfterDiscount}
                getResponse:
                  storeIn: returnedCartSubtotalAfterDiscountWithComma
            - log:
                message: "Calculated Subtotal value after discount got: '${returnedCartSubtotalAfterDiscountWithComma}'"
                color: CYAN
            # Retrieving displayed Subtotal value after discount...
            - log:
                message: Retrieving displayed Subtotal value after discount...
                color: CYAN
            - getString:
                identifier: mx.mappings.cart.subtotalValueAfterDiscount
                storeIn: displayedSubtotalAfterDiscount
            - executeNode:
                file: mx/test/helpers/cart/iosGetSubtotalValueAfterDiscountFromTotalsSection.js
                args:
                  - value: ${displayedSubtotalAfterDiscount}
                getResponse:
                  storeIn: displayedSubtotalAfterDiscount
            - log:
                message: "Displayed Subtotal value after Discount: '${displayedSubtotalAfterDiscount}'"
                color: CYAN
            - if:
                condition: ${returnedCartSubtotalAfterDiscountWithComma} == ${displayedSubtotalAfterDiscount}
                then:
                  - log:
                      message: "Subtotal value after discount is Correct."
                      color: CYAN
                else:
                  - failTest:
                      message: "Failed: Displayed Subtotal value after discount =! expected Subtotal."
          else:
            - log:
                message: "Discount not present, flow will skip Grand Subtotal Assertion..."
                color: CYAN
            - log:
                message: "'returnedCartSubtotalAfterDiscount' = ${cartSubtotal}"
                color: CYAN
            - storeIn:
                key: returnedCartSubtotalAfterDiscount
                value: ${cartSubtotal}
      - log:
          message: "End function: cart.assertGrandSubtotalIfCartHasDiscounts"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts the total in details
  # Param:  ${totalDetails}   [Mandatory]   total
  - name: mx.functions.cart.assertEstimatedTotalFromDetail
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertRightPOSLineItem
          params:
            - name: posLineItem
              string: Totalestimado
            - name: rightSideItem
              string: $${totalDetails}
      - log: 
          message: "End function: cart.assertEstimatedTotalFromDetail"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts the product count in subtotal label.
  # Param:  ${expectedProductsCount}   [Mandatory]  Product Count.
  # AUTHOR: ?????
  # EDITOR: Isis Tolentino (vn53dge)
  - name: mx.functions.cart.assertProductsCountInSubtotalLabel
    platform: ios
    flow: 
      - log:
          message: "Expected Products Count: '${expectedProductsCount}'"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.subtotalLabel
          then:
            - verifyIdentifier:
                present:
                  - identifier: mx.mappings.cart.totalProductsCount # <--PARAM--${expectedProductsCount}
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.cart.subtotalLabel
                scrollLimit: 8
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.totalProductsCount # <--PARAM--${expectedProductsCount}
      - log:
          message: Products Count is correct
          color: CYAN
      - log: 
          message: "End function: cart.assertProductsCountInSubtotalLabel"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if a successful replacement message is displayed
  - name: mx.functions.cart.assertGreenReplacementMessage
    platform: ios
    flow: 
      - log:
          message: Checking if success replacement alert is present
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.replacementMessage
              contains: Se agregó reemplazo para
      - log:
          message: Replacement was a success
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for multisavings
  # Param:  ${productByName}   [Mandatory]   Product description
  #         ${multiSavings}    [Mandatory]   Multi savings offer
  - name: mx.functions.cart.assertMultiSavingsBadge
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertGenericBadge
          params:
            - name: badgeType
              string: ${multiSavings}
              
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method asserts if a successful replacement message is displayed
  # Param:  ${productByName}   [Mandatory]   Product description
  - name: mx.functions.cart.assertSmallStockBadge
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertGenericBadge
          params:
            - name: badgeType
              string: Pocas piezas
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method taps the change slot link
  - name: mx.functions.cart.tapChangeSlot
    platform: ios
    flow: 
      - log:
          message: Changing reserve slot
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.tapReserveSlot
          
  #-------------------------------------------------------------------------------------------------------------------- 
 
  # Description: This method get the total amount from section above Continuar button
  - name: mx.functions.cart.getEstimatedTotalFromBottom
    platform: ios
    flow: 
      - log:
          message: Extracting total from cart bottom page
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.totalBottomLabel
      - getString:
          identifier: mx.mappings.cart.totalBottomLabel
          attribute: label
          storeIn: estimatedTotalLabel
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${estimatedTotalLabel}
          getResponse:
            storeIn: totalBottom
      - log: 
          message: Fetched total is ${totalBottom}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method expand the available products details
  - name: mx.functions.cart.tapExpandAvailableProductsList
    platform: ios
    flow: 
      - log:
          message: Expanding available products list
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.cart.availableExpandCollapseCheckbox
                equals: Ampliar para ver los detalles, oculto
          then:
            - click:
                identifier: mx.mappings.cart.availableExpandCollapseCheckbox
          else:
            - log:  
                message: List is already expanded
                color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method expand the available products details
  - name: mx.functions.cart.tapCollapseAvailableProductsList
    platform: ios
    flow: 
      - log:
          message: Collapsing available products list
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.cart.availableExpandCollapseCheckbox
                equals: Ocultar botón de detalles, ampliado
          then:
            - click:
                identifier: mx.mappings.cart.availableExpandCollapseCheckbox
          else:
            - log:
                message: Available products list is already collapsed
                color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method expand the OOS products details
  - name: mx.functions.cart.tapExpandOOSProductsList
    platform: ios
    flow: 
      - log:
          message: Expanding out of stock items list
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.cart.oosExpandCollapseCheckbox
                equals: Botón de ver todos los artículos, oculto
          then:
            - click:
                identifier: mx.mappings.cart.oosExpandCollapseCheckbox
          else:
            - log:
                message: Out of stock items list is already expanded
                color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method expand the OOS products details
  - name: mx.functions.cart.tapCollapseOOSProductsList
    platform: ios
    flow: 
      - log:
          message: Collapsing out of stock items
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.cart.oosExpandCollapseCheckbox
                equals: Ocultar botón de detalles, ampliado
          then:
            - click:
                identifier: mx.mappings.cart.oosExpandCollapseCheckbox
          else:
            - log:
                message: Out of stock items list is already collapsed
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method gets the estimated total
  # Params:   ${posLineItem} [Mandatory]  Estimated total
  - name: mx.functions.cart.getEstimatedTotalFromDetail
    platform: ios
    flow: 
      - log:
          message: Extracting estimated total from details
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.getPOSLineItemRightSideString
          params: 
            - name: posLineItem
              string: Total estimado
      - storeIn:
          key: estimatedTotal
          value: ${returnedString}
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${estimatedTotal}
          getResponse:
            storeIn: estimatedTotal
      - log: 
          message: Estimated total - ${estimatedTotal}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method gets the desired string
  # Params:   ${posLineItem} [Mandatory]  POS Line Item (Subtotal, Total Estimado, Costo de envío)
  - name: mx.functions.cart.getPOSLineItemRightSideString
    platform: ios
    flow: 
      - log:
          message: Extracting ${posLineItem}
          color: CYAN
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.cart.rightPOSLineItem
      - getString:
          identifier: mx.mappings.cart.rightPOSLineItem
          attribute: value
          storeIn: returnedString
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method gets the estimated total
  # Params:   ${posLineItem} [Mandatory]  Estimated total
  - name: mx.functions.cart.getDeliveryFee
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.getPOSLineItemRightSideString
          params: 
            - name: posLineItem
              string: Costo de envío
      - storeIn:
          key: deliveryFee
          value: ${returnedString}
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${deliveryFee}
          getResponse:
            storeIn: returnedDeliveryFee
      - log: 
          message: "End function: cart.getDeliveryFee (Delivery Fee - ${returnedDeliveryFee})"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method gets the subtotal
  # Params:   ${posLineItem} [Mandatory]  Estimated subtotal
  - name: mx.functions.cart.getSubtotal
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.cart.getPOSLineItemRightSideString
          params: 
            - name: posLineItem
              string: Subtotal
      - storeIn:
          key: subtotal
          value: ${returnedString}
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${subtotal}
          getResponse:
            storeIn: subtotal
      - log: 
          message: Estimated total - ${subtotal}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method gets the product price
  # Params:   ${productName} [Mandatory]  Product name
  - name: mx.functions.cart.getProductPrice
    platform: ios
    flow: 
      - log:
          message: Extracting unit price from ${productName}
          color: CYAN
      - getString: 
          identifier: mx.mappings.cart.productNameLabelByProductName
          attribute: label
          storeIn: productNameLabel
      - log: 
           message: Extracted string - ${productNameLabel}
           color: CYAN
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromNameLabel.js
          args:
            - value: ${productNameLabel}
          getResponse:
            storeIn: productPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: returnedProductPrice
      - log: 
          message: "End function: cart.getProductPrice (Product price - ${returnedProductPrice})"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Param: ${productName} [Mandatory] Product to find
  # AUTHOR: ???
  # EDITOR: Rodrigo Pacheco (vn53p0i), Sergio Fernández (vn0t1qt)
  - name: mx.functions.cart.getProductType
    platform: ios
    flow:
      - log:
          message: "[ PARAM: Product Name: '${productName}' ]"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productUOMSelector # <--PARAM--${productName}
          then:
            - storeIn:
                key: returnedProductType
                value: Dual
          else:
            - if:
                identifier:
                  label:
                    - identifier: mx.mappings.cart.mainButtonForProduct # <--PARAM--${productName}
                      contains: g
                then:
                  - storeIn:
                      key: returnedProductType
                      value: Weighable
                else:
                  - storeIn:
                      key: returnedProductType
                      value: Pieces
      - log: 
          message: "Product Type got: '${returnedProductType}'"
          color: GREEN_BOLD
      - log: 
          message: "End function: mx.functions.cart.getProductType"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method taps the yellow message in cart for OOS items
  - name: mx.functions.cart.tapYellowOOSMessageDetails
    platform: ios
    flow: 
      - log:
          message: Expanding out of stock message details
          color: CYAN
      - click: 
          identifier: mx.mappings.cart.yellowOOSMessageButton
          
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method taps the buy similar product
  # Params:   ${productByNameOOS}  Product name
  - name: mx.functions.cart.tapBuySimilarProduct
    platform: ios
    flow: 
      - log:
          message: Expanding replacement products list from ${productByNameOOS}
          color: CYAN
      - click:
          identifier: mx.mappings.cart.buySimilarButtonByProductName
 
  #--------------------------------------------------------------------------------------------------------------------
  #
  # PARAMS:  ${productName}  [Mandatory]  Product name.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.switchProductToPieces
    platform: ios
    flow: 
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.productUOMSelector # <--${productName}
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productUOMSelectorPiecesActive # <--${productName}
          then:
            - log: 
                message: Product is already displaying quantity as pieces
                color: GREEN
          else:
            - click:
                identifier: mx.mappings.cart.UOMSelectorPiecesButton # <--${productName}
            - log:
                message: Product switched to display quantity as pieces
                color: GREEN
            - sleep:
                duration: 2000
      - verifyIdentifier: 
          present:
            - identifier: mx.mappings.cart.productUOMSelectorPiecesActive # <--${productName}
      - log:
          message: "End function: mx.functions.cart.switchProductToPieces"
          color: BLUE
                
  #--------------------------------------------------------------------------------------------------------------------
  #
  # PARAMS:  ${productName}  [Mandatory]  Product name.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.switchProductToWeight
    platform: ios
    flow:
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.productUOMSelector # <--${productName}
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productUOMSelectorPiecesActive # <--${productName}
          then:
            - click:
                identifier: mx.mappings.cart.UOMSelectorWeightButton # <--${productName}
            - log:
                message: Product switched to display quantity as weight
                color: GREEN
            - sleep:
                duration: 2000
          else:
            - log:
                message: Product is already displaying quantity as weight
                color: GREEN
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.cart.productUOMSelectorPiecesActive # <--${productName}
      - log:
          message: "End function: mx.functions.cart.switchProductToWeight"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method decreases the quantity n number
  # Params:   ${productByName}  Product name
  #           ${quantity}       Quantity
  - name: mx.functions.cart.decreaseProductQuantityBy
    platform: ios
    flow: 
      - log:
          message: Deleting ${quantity} items from ${productByName}
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.assertCertainProductIsAvailable
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.cart.productDecreaseButton
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method increases the quantity n number
  # Params:   ${productName}  Product name
  #           ${increments}       Quantity to increment
  - name: mx.functions.cart.increaseProductQuantityBy
    platform: ios
    flow: 
      - log:
          message: Adding ${increments} items to ${productName}
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.assertCertainProductIsAvailable
      - loop:
          begin: 0
          end: ${increments}
          flow:
            - click:
                identifier: mx.mappings.cart.productIncreaseButton
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method deletes a specific OOS product
  # Params:   ${productByNameOOS}  Product name
  - name: mx.functions.cart.deleteOOSProduct
    platform: ios
    flow: 
      - log:
          message: Deleting ${productByNameOOS} from out of stock list
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.assertCertainProductIsOOS
      - click:
          identifier: mx.mappings.cart.deleteOOSProductButton
   
  #--------------------------------------------------------------------------------------------------------------------
 
   # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.cart.isCartEmpty
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.emptyView
              - identifier: mx.mappings.cart.startBuyingButton
          then:
            - storeIn:
                key: returnedIsCartEmpty
                value: true
          else:
            - storeIn:
                key: returnedIsCartEmpty
                value: false
      - log:
          message: "End function: cart.isCartEmpty (${returnedIsCartEmpty})"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.emptyCart
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.cart.isCartEmpty
      - if:
          condition: ${returnedIsCartEmpty} == true
          then:
            - log:
                message: "Cart is empty already."
                color: CYAN
          else:
            - log:
                message: "Cart is not empty. Emptying cart..."
                color: CYAN
            - loop:
                begin: 1
                end: 50
                storeIndex: lapCount
                flow:
                  - log:
                      message: "Lap: ${lapCount}"
                      color: GREEN
                  - if:
                      identifier:
                        notPresent:
                          - identifier: mx.mappings.cart.emptyView
                      then:
                        - click:
                            identifier: mx.mappings.cart.deleteProductButtonGeneral
                        - sleep:
                            duration: 4000
                      else:
                        - log:
                            message: "Cart is now empty."
                            color: CYAN
                        - break: true
      - log:
          message: "End function: cart.emptyCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method clicks the close button for the opened OOS replacement list for a certain item
  # Params: ${productByName}  Name of product
  - name: mx.functions.cart.oos-replacements-list.tapClose
    platform: ios
    flow: 
      - log:
          message: Closing black pop up
          color: CYAN
      - click:
          identifier: mx.mappings.oos-replacements-list.closeButton
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if the OOS replacement list is displayed
  # Params: ${productByNameOOS} [Mandatory] OOS product
  #         ${direction}        [Mandatory] Direction to scroll
  - name: mx.functions.cart.oos-replacements-list.assertListDisplayed
    platform: ios
    flow: 
      - log:
          message: Checking if replacement products list is displayed
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.oos-replacements-list.carousel
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.oos-replacements-list.carousel
              
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method scrolls to the left to find a product
  # Params: ${productByName}    Name of product to find in replacements list
  #         ${productByNameOOS} Name of OOS product
  - name: mx.functions.cart.oos-replacements-list.scrollLeftToProduct
    platform: ios
    flow: 
      - log:
          message: Scrolling left in ${productByNameOOS} replacements carousel until ${productByName}
          color: CYAN
      - scroll:
          direction: left
          untilIdentifier: mx.mappings.cart.productByName
          withinIdentifier: mx.mappings.cart.oos-replacements-list.carousel
          position: center
          scrollLimit: 20
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method scrolls to the right to find a product
  # Params: ${productByName}    [Mandatory]   Name of product to find in replacements list
  #         ${productByNameOOS} [Mandatory]   Name of OOS product
  - name: mx.functions.cart.oos-replacements-list.scrollRightToProduct
    platform: ios
    flow: 
      - log:
          message: Scrolling right in ${productByNameOOS} replacements carousel until ${productByName}
          color: CYAN
      - scroll:
          direction: right
          untilIdentifier: mx.mappings.cart.product
          withinIdentifier: mx.mappings.cart.oos-replacements-list.carousel
          position: center
          scrollLimit: 20
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method gets the price of the OOS replacement product by position
  # Params: ${productByNameOOS}   [Mandatory]   Name of product to find in replacements list
  #         ${position}           [Mandatory]   Product position. Values from 1 to 3
  - name: mx.functions.cart.oos-replacements-list.getReplacementPriceByPosition
    platform: ios
    flow: 
      - log:
          message: Extracting unit price from similar product in position ${position} in ${productByNameOOS} replacements carousel
          color: CYAN
      - getString:
          identifier: mx.mappings.oos-replacements-list.replacementPriceByPosition
          attribute: value
          storeIn: replacementPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${replacementPrice}
          getResponse:
            storeIn: replacementPrice
      - log: 
          message: Extracted value - ${replacementPrice}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method clicks the replace button by position
  # Params: ${productByNameOOS}   [Mandatory]   Name of product to find in replacements list
  #         ${position}           [Mandatory]   Product position. Values from 1 to 3
  - name: mx.functions.cart.oos-replacements-list.tapReplaceByPosition
    platform: ios
    flow: 
      - log:
          message: Replacing ${productByNameOOS} with similar product in position number ${position}
          color: CYAN
      - click:
          identifier: mx.mappings.oos-replacements-list.replacementButtonByPosition  
   
  #--------------------------------------------------------------------------------------------------------------------
                      
  # Description: This method gets the name of the product replacement by position
  # Params:   ${productByNameOOS} [Mandatory] OOS product
  #           ${position}         [Mandatory] Product position
  - name: mx.functions.cart.oos-replacements-list.getReplacementNameByPosition
    platform: ios
    flow: 
      - log:
          message: Extracting name of ${productByNameOOS} similar product in position number ${position}
          color: CYAN
      - getString:
          identifier: mx.mappings.oos-replacements-list.replacementNameByPosition
          attribute: label
          storeIn: replacementName
      - log: 
          message: Extracted text - ${replacementName}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
                      
  # Description: This method gets the name of the product replacement by position
  # Params:   ${productByNameOOS} [Mandatory] OOS product
  #           ${productByName}    [Mandatory] Product name
  - name: mx.functions.cart.oos-replacements-list.getReplacementPrice
    platform: ios
    flow: 
      - log:
          message: Extracting unit price from ${productByName} in ${productByNameOOS} replacements list
          color: CYAN
      - getString:
          identifier: mx.mappings.oos-replacements-list.replacementPrice
          attribute: value
          storeIn: replacementPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${replacementPrice}
          getResponse:
            storeIn: replacementPrice
      - log: 
          message: Extracted value - ${replacementPrice}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method clicks the replace button by name
  # Params: ${productByNameOOS}   [Mandatory]   OOS product
  #         ${productByName}      [Mandatory]   Replacement product
  - name: mx.functions.cart.oos-replacements-list.tapReplace
    platform: ios
    flow: 
      - log:
          message: Replacing ${productByNameOOS} with ${productByName}
          color: CYAN
      - click:
          identifier: mx.mappings.oos-replacements-list.replacementButton 
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if the OOS replacement list is not displayed
  # Params: ${productByNameOOS} [Mandatory] OOS product
  - name: mx.functions.cart.slot-black-popup.assertListNotDisplayed
    platform: ios
    flow: 
      - log:
          message: Checking if replacements list for ${productByNameOOS} is not displayed
          color: CYAN
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.cart.oos-replacements-list.carousel
      - log:
          message: Replacements list for ${productByNameOOS} is not displayed
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # DESCRIPTION: Asserts the expected product's unit price for the given product name.
  # PARAMS:  ${productName}        [Mandatory]  Product name to assert for.
  #          ${expectedUnitPrice}  [Mandatory]  Expected unit price.
  - name: mx.functions.cart.assertProductUnitPrice
    platform: ios
    flow: 
      - log:  
          message: "Product Name: ${productName}"
          color: CYAN
      - log:
          message: "Expected Unit Price: ${expectedUnitPrice}"
          color: CYAN
      - getString:
          identifier: mx.mappings.cart.productNameLabelByProductName
          attribute: label
          storeIn: nameLabel
      - executeNode:
          file: mx/test/helpers/cart/getDiscountFlag.js
          args:
            - value: ${nameLabel}
          getResponse:
            storeIn: discountFlag
      - if:
          condition: ${discountFlag}
          then:
            - executeNode:
                file: mx/test/helpers/cart/getPriceFromNameLabel.js
                args:
                  - value: ${nameLabel}
                getResponse:
                  storeIn: nameLabel
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${nameLabel}
          getResponse:
            storeIn: returnedUnitPrice
      - log:
          message: "Displayed Unit Price: ${returnedUnitPrice}"
          color: CYAN
      - if:
          condition: ${returnedUnitPrice} == ${expectedUnitPrice}
          then:
            - log:
                message: "Prices match"
                color: CYAN
          else:
            - failTest:
                message: Expected and displayed unit prices are not the same
      - log:  
          message: "End function: cart.assertProductPrice (Unit Price Correct)"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # DESCRIPTION: Asserts the expected product's subtotal.
  # PARAMS:  ${productName}       [Mandatory]  Product name to assert for.
  #          ${expectedSubtotal}  [Mandatory]  Expected subtotal.
  - name: mx.functions.cart.assertProductSubtotal
    platform: ios
    flow: 
      - log:  
          message: "Product Name: ${productName}"
          color: CYAN
      - log:
          message: "Expected Subtotal: ${expectedSubtotal}"
          color: CYAN
      - executeNode:
           file: mx/test/helpers/utils/numberToNumberWithComa.js
           args:
             - value: ${expectedSubtotal}
           getResponse:
               storeIn: expectedSubtotalParsed
      - log:
          message: "Displayed Subtotal: ${expectedSubtotalParsed}"
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.productNameLabelByProductName
              contains: "Costo: $${expectedSubtotalParsed}"
      - log:  
          message: "End function: cart.assertProductSubtotal (Subtotal Correct)"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION: Workaround function to assert the product's unit price from inside the only string we can validate it.
  # PARAMS:  ${productName}        [Mandatory]  Product name to assert for.
  #          ${expectedUnitPrice}  [Mandatory]  Expected unit price. For Dual or Weighable it uses the price by kg.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertProductUnitPriceWorkaround
    platform: ios
    flow: 
      - log:
          message: '[ PARAM: Product Name: "${productName}" ]'
          color: CYAN
      - log:
          message: '[ PARAM: Expected Unit Price: "${expectedUnitPrice}" ]'
          color: CYAN
      - executeNode:
          file: mx/test/helpers/utils/numberToNumberWithComa.js
          args:
            - value: ${expectedUnitPrice}
          getResponse:
            storeIn: expectedUnitPrice
      - log:
          message: Getting Product Label to validate...
          color: GREEN_BOLD
      - getString:
          identifier: mx.mappings.cart.productNameLabelByProductName
          storeIn: productNameFullLabel
      - log:
          message: 'Product Label: "${productNameFullLabel}"'
          color: GREEN
      - log:
          message: Calculating possible values to verify...
          color: GREEN_BOLD
      - executeNode:
          file: mx/test/helpers/utils/stringContains.js
          args:
            - value: ${productNameFullLabel}
            - value: Pieza(s) 1
          getResponse:
            storeIn: isOnePiece
      - if:
          condition: ${isOnePiece} == true
          then:
            - storeIn:
                key: possibleValuesToVerify
                value: 'Costo: $${expectedUnitPrice} | Costo: ${expectedUnitPrice}'
          else:
            - storeIn:
                key: possibleValuesToVerify
                value: '$${expectedUnitPrice} | ${expectedUnitPrice}'
      - log:
          message: 'Verifying possible values are contained within the Product Label...'
          color: GREEN_BOLD
      - executeNode:
          file: mx/test/helpers/utils/stringContainsAny.js
          args:
            - value: ${productNameFullLabel}
            - value: ${possibleValuesToVerify}
          getResponse:
            storeIn: containsExpectedUnitPrice
      - if:
          condition: ${containsExpectedUnitPrice} == false
          then:
            - failTest:
                message: "Product Unit Price is Not Correct: Displayed Unit Price doesn't look like the Expected Unit Price."
      - log:
          message: Product Unit Price is Correct.
          color: GREEN_BOLD
      - log:
          message: 'End function: mx.functions.cart.assertProductUnitPriceWorkaround'
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION: Workaround function to assert the product's original unit price from inside the only string we can validate it.
  # PARAMS:  ${productName}            [Mandatory]  Product name to assert for.
  #          ${expectedOriginalPrice}  [Mandatory]  Expected original unit price when the product has a discount. For Dual or Weighable it uses the price by kg.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertProductOriginalUnitPriceWorkaround
    platform: ios
    flow: 
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected Original Unit Price: '${expectedOriginalPrice}'"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/utils/numberToNumberWithComa.js
          args:
            - value: ${expectedOriginalPrice}
          getResponse:
            storeIn: formattedExpectedOriginalPrice
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.cart.productNameLabelByProductName # <--PARAM--${productName}
              contains: "Precio anterior $${formattedExpectedOriginalPrice}"
      - log:
          message: "Product's Original Unit Price is Correct."
          color: GREEN_BOLD
      - log:
          message: "End function: cart.assertProductOriginalUnitPriceWorkaround"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION:
  #   This function gets the discount amount if the product has multi-savings promotion, if it doesn't, then the returned value will be '0.00'.
  # PARAMS:
  #   ${productName}                [Mandatory]   Product name.
  #   ${hasMultiSavingsPromotion}   [BOOLEAN]     Obtained from: mx.functions.cart.checkIfProductHasMultiSavingsPromotion
  # RETURNS:
  #   ${returnedMultiSavingsDiscountAmount}
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  # EDITOR: Osmar Juárez (vn56dce)
  - name: mx.functions.cart.getMultiSavingsDiscountAmountWorkaround
    platform: ios
    flow: 
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - if:
          condition: ${hasMultiSavingsPromotion} == true
          then:
            - log:
                message: "Multi Savings Discount found... Extracting Discount value..."
                color: GREEN_BOLD
            - getString:
                identifier: mx.mappings.cart.productNameLabelByProductName # <--PARAM--${productName}
                attribute: label
                storeIn: productDetailsFromNameLabel
            - log:
                message: "Product Details extracted from Name Label: '${productDetailsFromNameLabel}'"
                color: GREEN_BOLD
            - executeNode:
                file: mx/test/helpers/cart/iosGetMultiSavingsDiscountAmountFromNameLabel.js
                args:
                  - value: ${productDetailsFromNameLabel}
                getResponse:
                  storeIn: returnedMultiSavingsDiscountAmount
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${returnedMultiSavingsDiscountAmount}
                getResponse:
                  storeIn: returnedMultiSavingsDiscountAmount
          else:
            # In the possible case that the Multi-Savings badge is present but the product hasn't met required quantity to activate promotion...
            - log:
                message: "Multi Savings Discount Amount not found... Flow will continue as normal."
                color: GREEN_BOLD
            - storeIn:
                key: returnedMultiSavingsDiscountAmount
                value: '0.00'
      - log:
          message: "Multi Savings Discount Amount got: '${returnedMultiSavingsDiscountAmount}'"
          color: GREEN_BOLD
      - log:
          message: "End function: cart.getMultiSavingsDiscountAmountWorkaround"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # DESCRIPTION: Workaround function to assert the product's subtotal price from inside the only string we can validate it.
  # PARAMS:  ${productName}       [Mandatory]  Product name to assert for.
  #          ${expectedSubtotal}  [Mandatory]  Expected subtotal.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.assertProductSubtotalWorkaround
    platform: ios
    flow:
      - log:
          message: '[ PARAM: Product Name: "${productName}" ]'
          color: CYAN
      - log:
          message: '[ PARAM: Expected Subtotal: "${expectedSubtotal}" ]'
          color: CYAN
      - executeNode:
           file: mx/test/helpers/utils/numberToNumberWithComa.js
           args:
             - value: ${expectedSubtotal}
           getResponse:
               storeIn: expectedSubtotal
      - getString:
          identifier: mx.mappings.cart.productNameLabelByProductName # <--PARAM--${productName}
          storeIn: displayedLabel
      - log:
          message: 'Displayed Label: "${displayedLabel}"'
          color: GREEN
      - storeIn:
          key: possibleValuesToAssert
          value: 'Costo: $${expectedSubtotal} | Costo: ${expectedSubtotal}'
      - executeNode:
          file: mx/test/helpers/utils/stringContainsAny.js
          args:
            - value: ${displayedLabel}
            - value: ${possibleValuesToAssert}
          getResponse:
            storeIn: expectedSubtotalIsContained
      - if:
          condition: ${expectedSubtotalIsContained} == false
          then:
            - failTest:
                message: 'FAILED ASSERTION: Product Subtotal is not correct: Displayed label "${displayedLabel}" does not contain any of "${possibleValuesToAssert}"'
      - log:
          message: 'SUCCESSFUL ASSERTION: Product Subtotal is correct.'
          color: GREEN_BOLD
      - log:  
          message: 'End function: mx.functions.cart.assertProductSubtotalWorkaround'
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method extracts the product price and saves it in the global variable ${returnedPrice}.
  # Params:  ${productName}  [Mandatory] Product to extract its price from.
  - name: mx.functions.cart.getProductUnitPrice
    platform: ios
    flow: 
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productNameLabelByProductName
      - getString:
          identifier: mx.mappings.cart.productNameLabelByProductName
          attribute: label
          storeIn: nameLabel
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${nameLabel}
          getResponse:
            storeIn: returnedUnitPrice
      - log:
          message: "End function: cart.getProductPrice (price got: ${returnedUnitPrice})"
          color: BLUE
 
  #------------------------------------------------------------------------------------------------------------------
 
  # Description: This method extracts the delivery method displayed
  - name: mx.functions.cart.getDeliveryMethod
    platform: ios
    flow: 
      - getString:
          identifier: mx.mappings.cart.fulfillmentMethod
          attribute: value
          storeIn: returnedDeliveryMethod
      - log:
          message: "End function: cart.getDeliveryMethod (Delivery method displayed: ${returnedDeliveryMethod})"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          
            
  # Description: This method tap the reserve slot link
  - name: mx.functions.cart.tapReserveSlot
    platform: ios
    flow: 
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.cart.reserveSlotButton
                value: 'true'
          then:
            - click:
                identifier: mx.mappings.cart.reserveSlotButton
          else:
            - executeFunction:
                name: mx.functions.utils.scrollToTop
            - click:
                identifier: mx.mappings.cart.reserveSlotButton
      - log:
          message: "End function: cart.tapReserveSlot"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------
  #
  # DESCRIPTION:
  #   Returns the Discount Type of a Product based on the badges it has. This method assumes the Product is already visible
  #   in the screen.
  #
  # PARAMS:
  #   ${productName}  [Mandatory]  Name of the Product to get its Discount Type.
  #
  # RETURNS:
  #   ${returnedProductDiscountType}
  #
  #       The Discount Type of the Product.
  #
  #           Possible return values:
  #               NoDiscount   - when the Product does not have any type of discount applied.
  #               Regular      - when the Product has a regular discount, identified by the badge 'Rebaja'.
  #               MultiSavings - when the Product has multi-savings discount, identified by badges similar to '2 x $65.00'.
  #               Online       - when the Product has discount online only, identified by badge 'Precio en linea'.
  #
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  # EDITOR: -----
  - name: mx.functions.cart.getProductDiscountType
    platform: ios
    flow:
      - log:
          message: "[ PARAM: Product Name: '${productName}' ]"
          color: CYAN
      # Check if product has badges...
      - log:
          message: Checking Product's badges...
          color: GREEN_BOLD
      - numberOfChildElements:
          identifier: mx.mappings.cart.productContainerByProductName # <--${productName}
          filterBy: mx.mappings.cart.allBadgesByProductName # <--${productName}
          storeIn: numberOfBadges
      - log:
          message: ${numberOfBadges} badge(s) found
          color: GREEN_BOLD
      - if:
          condition: ${numberOfBadges} == 0
          then:
            - log:
                message: Checking if Product has discount even though it doesn't have badges...
                color: GREEN_BOLD
            - if:
                identifier:
                  label:
                    - identifier: mx.mappings.cart.productByName # <--${productName}
                      contains: Precio anterior
                then:
                  - storeIn:
                      key: returnedProductDiscountType
                      value: Regular
                else:
                  - storeIn:
                      key: returnedProductDiscountType
                      value: NoDiscount
          else:
            - log:
                message: Analyzing Product's badges...
                color: GREEN_BOLD
            - arithmetic:
                expression: ${numberOfBadges} + 1
                storeIn: loopCycles
            - loop:
                begin: 1
                end: ${loopCycles}
                storeIndex: i
                flow:
                  - log:
                      message: Checking badge ${i}...
                      color: GREEN
                  - getString:
                      identifier: mx.mappings.cart.badgeByProductNameAndIndex # <--${productName}--${i}
                      storeIn: badgeText
                  - log:
                      message: "Badge text: '${badgeText}'"
                      color: GREEN
                  - if:
                      condition: ${badgeText} == 'Precio en linea'
                      then:
                        - log:
                            message: Badge matched for Online Discount
                            color: GREEN
                        - storeIn:
                            key: returnedProductDiscountType
                            value: Online
                        - break: true
                  - if:
                      condition: ${badgeText} == 'Rebaja'
                      then:
                        - log:
                            message: Badge matched for Regular Discount
                            color: GREEN
                        - storeIn:
                            key: returnedProductDiscountType
                            value: Regular
                        - break: true
                  - storeIn:
                      key: multisavingsVerificationRegex
                      value: "^\\d+ x \\d+(\\.\\d+)?$"
                  - executeNode:
                      file: mx/test/helpers/utils/verifyRegexMatch.js
                      args:
                        - value: ${badgeText}
                        - value: ${multisavingsVerificationRegex}
                      getResponse:
                        storeIn: multisavingsMatched
                  - if:
                      condition: ${multisavingsMatched} == true
                      then:
                        - log:
                            message: Badge matched for Multisavings Discount
                            color: GREEN
                        - storeIn:
                            key: returnedProductDiscountType
                            value: MultiSavings
                        - break: true
                  - storeIn:
                      key: returnedProductDiscountType
                      value: NoDiscount
      # Return the Discount Type found...
      - log:
          message: "Discount Type got: '${returnedProductDiscountType}'"
          color: GREEN_BOLD
      - log:
          message: "End function: mx.functions.cart.getProductDiscountType"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          
  #
  # DESCRIPTION: Opens the PDP of the given product. This function assumes the product is already visible.
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to open its PDP.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.openPDP
    platform: ios
    flow:
      - log:
          message: "[ PARAM: Product Name: '${productName}' ]"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.productByName # <--PARAM--${productName}
      - log:
          message: "End function: mx.functions.cart.openPDP"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------          
  #
  # AUTHOR: Francisco Ramirez (vn53vq4)
  - name: mx.functions.cart.tapExpandProductsDetailsView
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.cart.expandProductsDetails
      - log:
          message: "End function: mx.functions.cart.tapExpandProductsDetailsView"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------          
  # AUTHOR: Francisco Ramirez (vn53vq4)
  # DESCRIPTION: Taps on a delivery address 
  - name: mx.functions.cart.tapOnAddressLink
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.cart.addressLink
      - log:
          message: "End function: cart.tapOnAddressLink"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
  # AUTHOR: Francisco Ramirez (vn53vq4)
  # DESCRIPTION: Removes SFL product(s) in cart. [max 5 remove iterations per loop]
  - name: mx.functions.cart.removeSFLProductIfDisplayed/loop
    platform: ios
    flow:
      # Scroll needed in some cases...
      - scroll:
          direction: down
          scrollLimit: 2
          wait: 20000
      - loop:
            begin: 0
            end: 5
            storeIndex: index
            flow:
            - log:
                message: Trying to remove cards ${index}...
                color: GREEN
            # Remove items if displayed
            - if:
                identifier:
                    present:
                    - identifier: mx.mappings.cart.deleteSFLProduct
                then:
                    # Remove item if any...
                    - try:
                        flow:
                            - click:
                                identifier: mx.mappings.cart.deleteSFLProduct
                            - sleep:
                                duration: 2000
                            - log:
                                message: ✓ SFL item removed. Loop will continue looking for more items to remove.
                                color: GREEN
                        catch:
                            flow:
                            - log:
                                message: "[!] No items found to remove. Process will continue."
                                color: CYAN
                else: 
                    - log:
                        message: No SFL products found to remove. Process completed! ✓
                        color: GREEN
                    - break: true
      - log:
          message: "End Function: cart.removeSFLProductIfDisplayed/loop"
          color: BLUE

   #--------------------------------------------------------------------------------------------------------------------

   # Description: This method increases the quantity of a product until it reaches the max quantity
   # Params:   ${productName}  Product name
   # RETURNS:
   #   ${returnedMaxQuantity}
   # AUTHOR: Teresa Partida (vn55epy)

  - name: mx.functions.cart.increaseProductMaxQuantity
    platform: ios
    doWhile: true
    flow:
      - verifyIdentifier:
          enabled:
            - identifier: mx.mappings.cart.productIncreaseButton
              value: true
      - click:
          identifier: mx.mappings.cart.productIncreaseButton
      - getString:
          attribute: value
          identifier: mx.mappings.cart.quantityByProductName # <--PARAM--${productName} get current product Quantity
          storeIn: currentQuantity
      - arithmetic:
          expression: ${currentQuantity} - 1
          numberOfDecimalPlaces: 0
          storeIn: returnedMaxQuantity
      - sleep:
          duration: 2000

