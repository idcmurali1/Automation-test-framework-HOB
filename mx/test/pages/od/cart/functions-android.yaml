#======================================================================================================================
#    AUTHOR: Octavio Cabrales Zárate (vn53g23)
#   CREATED: Oct/17/2022
#  REVISION: ---
#
#  Copyright © 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This method clicks on Start Buying button
  - name: mx.functions.cart.clickStartBuying
    platform: android
    flow: 
      - log:
          message: Opening home page
          color: CYAN
      - click: 
          identifier: mx.mappings.cart.startBuyingButton
      - log:
          message: "End function: cart.clickStartBuying"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method asserts if cart is empty
  - name: mx.functions.cart.assertCartIsEmpty
    platform: android
    flow: 
      - log:
          message: Checking if cart is empty
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.emptyView
            - identifier: mx.mappings.cart.startBuyingButton
      - log:
          message: Cart is empty
          color: CYAN
            
  #--------------------------------------------------------------------------------------------------------------------          
  
  # Description: This method asserts if an OOS message is present
  - name: mx.functions.cart.assertYellowOOSMessage
    platform: android
    flow: 
      - log:
          message: Checking if out of stock warning is present in cart
          color: CYAN
      - verifyIdentifier:
          present:    
            - identifier: mx.mappings.cart.oosMessage
      - log:
          message: There are items out of stock in cart
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
  
  # DESCRIPTION: Asserts if the given product name is not listed in the Available Products List.
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to assert for.
  #          ${direction}    [Mandatory]  Direction to scroll into.
  - name: mx.functions.cart.assertProductNotListedAsAvailable
    platform: android
    flow: 
      - log:  
          message: Checking if ${productName} is in out of stock section
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.productWithStock
          then:
            - scroll: 
                direction: down
                untilIdentifier: mx.mappings.cart.oosSectionHeader
                position: center
                scrollLimit: 8
            - storeIn:
                key: productNameOOS
                value: ${productName}
            - verifyIdentifier:
                present:    
                  - identifier: mx.mappings.cart.productOOS
      - log:  
          message: ${productName} is present in out of stock section
          color: CYAN
      - log:
          message: "End function: cart.assertProductNotListedAsAvailable"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # DESCRIPTION: Asserts if the given product name is listed in the OOS Products List.
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to assert for.
  #          ${direction}    [Mandatory]  Direction to scroll into.
  - name: mx.functions.cart.assertProductListedAsOOS
    platform: android
    flow: 
      - log:
          message: "cart.assertProductListedAsOOS: current function implementation is not correct, all code has been commented."
          color: YELLOW
      # - log:  
      #     message: Checking if ${productByNameOOS} is present in cart as out of stock
      #     color: CYAN
      # - executeFunction:
      #     name: mx.functions.utils.searchItemInPage
      #     params: 
      #       - name: elementToFind
      #         string: mx.mappings.cart.productOOS
      # - verifyIdentifier:
      #     present:
      #       - identifier: mx.mappings.cart.productOOS
      # - log:  
      #     message: ${productByNameOOS} is present as out of stock
      #     color: CYAN

  #--------------------------------------------------------------------------------------------------------------------          
 
  # DESCRIPTION: Asserts the expected product's unit price for the given product name.
  # PARAMS:  ${productName}        [Mandatory]  Product name to assert for.
  #          ${expectedUnitPrice}  [Mandatory]  Expected unit price.
  - name: mx.functions.cart.assertProductUnitPrice
    platform: android
    flow: 
      - log:  
          message: "Product Name: ${productName}"
          color: CYAN
      - log:
          message: "Expected Unit Price: ${expectedUnitPrice}"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productByName
      - if:
           identifier:
             present:
              - identifier: mx.mappings.cart.productPriceByProductName
           then:
             - getString:
                 identifier: mx.mappings.cart.productPriceByProductName
                 attribute: text
                 storeIn: displayedUnitPrice
             - executeNode:
                 file: mx/test/helpers/utils/getNumberFromPriceString.js
                 args:
                   - value: ${displayedUnitPrice}
                 getResponse:
                     storeIn: displayedUnitPriceParsed
           else:
             - getString:
                 identifier: mx.mappings.cart.productUnitPrice
                 attribute: text
                 storeIn: displayedUnitPrice
             - executeNode:
                 file: mx/test/helpers/utils/getNumberFromPriceString.js
                 args:
                   - value: ${displayedUnitPrice}
                 getResponse:
                     storeIn: displayedUnitPriceParsed
      - log:
          message: "Displayed Unit Price: ${displayedUnitPriceParsed}"
          color: CYAN
      - if:
           condition: $${displayedUnitPriceParsed} == $${expectedUnitPrice}
           then:
             - log: 
                message: "Displayed unit price matches expected unit price."
                color: CYAN
           else:
             - failTest:
                 message: "$${displayedUnitPriceParsed} =! $${expectedUnitPrice}"
      - log:  
          message: "End function: cart.assertProductPrice (Unit Price Correct)"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # DESCRIPTION: Asserts the expected product's subtotal.
  # PARAMS:  ${productName}       [Mandatory]  Product name to assert for.
  #          ${expectedSubtotal}  [Mandatory]  Expected subtotal.
  # AUTHOR: ??
  # EDITOR: Osmar Juárez (vn56dce)
  - name: mx.functions.cart.assertProductSubtotal
    platform: android
    flow: 
      - log:  
          message: "Product Name: ${productName}"
          color: CYAN
      - log:
          message: "Expected Subtotal: '${expectedSubtotal}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.cart.productPriceByProductName
          attribute: text
          storeIn: displayedSubtotal
      - executeNode:
           file: mx/test/helpers/utils/removeCommaFromValue.js
           args:
             - value: ${displayedSubtotal}
           getResponse:
               storeIn: displayedSubtotalParsed
      - log:
          message: "Displayed Subtotal: ${displayedSubtotalParsed}"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/utils/stringContains.js
          args:
            - value: ${displayedSubtotalParsed}
            - value: ${expectedSubtotal}
          getResponse:
            storeIn: expectedSubtotalIsContained
      - if:
          condition: ${expectedSubtotalIsContained} == false
          then:
            - failTest:
                message: 'Product Subtotal is not correct: Displayed parsed label "${displayedSubtotalParsed}" does not contain "${expectedSubtotal}"'
      - log:
          message: 'SUCCESSFUL ASSERTION: Product Subtotal is correct.'
          color: GREEN_BOLD
      - log:  
          message: "End function: cart.assertProductSubtotal"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------          
  
  # DESCRIPTION: Asserts the information is correct for the Pickup delivery method.
  # PARAMS:  ${deliverySlot}  [Mandatory]  Expected delivery slot.
  #                                          Obtain the value to pass it into the parameter from 'mx.functions.utils.getDeliverySlot'.
  #          ${storeName}     [Mandatory]  Expected store name.
  - name: mx.functions.cart.assertPickupSlotSelected
    platform: android
    flow: 
      - log:  
          message: "Expected Delivery Method: Pickup"
          color: CYAN
      - log:  
          message: "Expected Delivery Slot: ${deliverySlot}"
          color: CYAN
      - log:  
          message: "Expected Store Name: ${storeName}"
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.pickupSlot
            - identifier: mx.mappings.cart.storeName
      # Needed special process to assert the delivery slot, that's why it was not included in the previous 'verifyIdentifier' command.
      - getString:
          identifier: mx.mappings.cart.deliverySlot
          storeIn: displayedDeliverySot
      - executeNode:
          file: mx/test/helpers/delivery-slot/stringCleanerForDeliverySlotAssertion.js
          args:
            - value: ${displayedDeliverySot}
          getResponse:
            storeIn: displayedDeliverySot
      - log:
          message: "Displayed Delivery Slot: ${displayedDeliverySot}"
          color: CYAN
      - if:
          condition: ${deliverySlot} != ${displayedDeliverySot}
          then:
            - failTest:
                message: "Fail: Displayed Delivery Slot not correct (Expected Delivery Slot != Displayed Delivery Slot)"
      - log:  
          message: "End function: cart.assertPickupSlotSelected (Success: information correct)"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------          
  
  # Description: This method asserts if the slot is expired
  - name: mx.functions.cart.assertExpiredSlot
    platform: android
    flow: 
      - log:  
          message: Checking if fulfillment selection slot is expired
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.deliveryDateExpired
      - log:  
          message: Slot is expired
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts certain badge
  # Param:  ${badgeType}       [Mandatory]   Badge type
  #         ${productByName}   [Mandatory]   Product description
  - name: mx.functions.cart.assertCertainBadge
    platform: android
    flow: 
      - log:  
          message: Checking if ${badgeType} is present in ${productByName}
          color: CYAN
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.badgeType
      - log:  
          message: ${badgeType} is present in ${productByName}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for discount
  # Param:  ${productByName}   [Mandatory]   Product description
  - name: mx.functions.cart.assertDiscountBadge
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertCertainBadge
          params:
            - name: badgeType
              string: Rebaja
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for discount
  # Param:  ${productByName}   [Mandatory]   Product description   
  - name: mx.functions.cart.assertMSIBadge
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertCertainBadge
          params:
            - name: badgeType
              string: MSI
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for online price
  # Param:  ${productByName}   [Mandatory]   Product description   
  - name: mx.functions.cart.assertOnlinePriceBadge
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertCertainBadge
          params:
            - name: badgeType
              string: Precio en linea
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for multi savings
  # Param:  ${productByName}   [Mandatory]   Product description   
  #         ${multiSavings}    [Mandatory]   Multi savings description
  - name: mx.functions.cart.assertMultiSavingsBadge
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertCertainBadge
          params:
            - name: badgeType
              string: ${multiSavings}
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if badge is for small stock
  # Param:  ${productByName}   [Mandatory]   Product description   
  - name: mx.functions.cart.assertSmallStockBadge
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.cart.assertCertainBadge
          params:
            - name: badgeType
              string: Pocas piezas
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # PARAMS:  ${expectedProductsCount}  [Mandatory]  Product Count expected to be displayed.
  # AUTHOR: ?????
  # EDITOR: Isis Tolentino (vn53dge), Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertProductsCountInSubtotalLabel
    platform: android
    flow:
      - log:
          message: "Expected Product Count: ${expectedProductsCount}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.subtotalLabel
          then:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.cart.subtotalLabel
                position: center
                scrollLimit: 8
      - getString:
          identifier: mx.mappings.cart.subtotalLabel
          storeIn: displayedProductCount
      - log:
          message: "Displayed Product Count: '${displayedProductCount}'"
          color: CYAN
      - verifyIdentifier:
          text:
            - identifier: mx.mappings.cart.subtotalLabel
              contains: "(${expectedProductsCount} artículo"
      - log:
          message: "Assertion Succeeded: Products Count is correct"
          color: CYAN
      - log: 
          message: "End function: cart.assertProductsCountInSubtotalLabel"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # PARAMS: ${expectedSubtotal}  [Mandatory]  Expected subtotal to assert. This is the value of the full subtotal without discounts.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt), Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertSubtotal
    platform: android
    flow:
      - log:
          message: "Expected Subtotal: '${expectedSubtotal}'"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.subtotalValue
      # Get displayed Subtotal.
      - getString:
          # This mapping gets the Subtotal value BEFORE discount (if there are discounts) and just the subtotal in case
          # there aren't any.
          identifier: mx.mappings.cart.subtotalValue
          attribute: text # Content desc value on this mapping is empty when there are discounts.
          storeIn: displayedSubtotal
      # Clean the subtotal obtained and log it...
      - executeNode:
           file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
           args:
             - value: ${displayedSubtotal}
           getResponse:
               storeIn: displayedSubtotal
      - log:
          message: "Displayed Subtotal: '${displayedSubtotal}'"
          color: CYAN
      # Assert expected vs displayed...
      - if:
          condition: ${displayedSubtotal} == ${expectedSubtotal}
          then:
            - log:
                message: "Successful Assertion: Displayed Subtotal is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Subtotal is incorrect"
      - log:  
          message: "End function: cart.assertSubtotal"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION:
  #   Asserts whether the displayed subtotal after discounts equals the given expected subtotal.
  # PARAM:
  #   ${expectedSubtotalAfterDiscount}  [Mandatory]   Expected subtotal after discount to assert. 
  #                                                     This is the value of the sum of all product subtotals after discounts.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertSubtotalAfterDiscount
    platform: android
    flow:
      - log:
          message: "Expected Subtotal After Discounts: '${expectedSubtotalAfterDiscount}'"
          color: CYAN
      # Get displayed Subtotal.
      - getString:
          # This mapping gets the Subtotal value AFTER discount (if there are NO discounts function fails).
          identifier: mx.mappings.cart.subtotalValueAfterDiscount
          attribute: text # As of the most recent build, the attribute values 'text' and 'content-desc' are slightly different.
          # Please confirm first before making changes.
          storeIn: displayedSubtotalAfterDiscount
      # Clean the subtotal obtained and log it...
      - executeNode:
           file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
           args:
             - value: ${displayedSubtotalAfterDiscount}
           getResponse:
               storeIn: displayedSubtotalAfterDiscount
      - log:
          message: "Displayed Subtotal: '${displayedSubtotalAfterDiscount}'"
          color: CYAN
      # Assert expected vs displayed...
      - if:
          condition: ${displayedSubtotalAfterDiscount} == ${expectedSubtotalAfterDiscount}
          then:
            - log:
                message: "Successful Assertion: Displayed Subtotal after discounts is correct"
                color: CYAN
          else:
            - failTest:
                message: "Failed Assertion: Displayed Subtotal after discounts is incorrect"
      - log:  
          message: "End function: cart.assertSubtotalAfterDiscount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # Description:
  #   This method retrieves the cart discount value if available, returns -0.00 if not available.
  # RETURNS:
  #   ${returnedCartDiscount}  Final cart discount value (if available, else this equals '-0.00').
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.getCartDiscount
    platform: android
    flow:
      - log:
          message: Retrieving displayed discount value...
          color: CYAN
      - try:
          flow:
            - getString:
                identifier: mx.mappings.cart.discountLabel
                attribute: text # As of the most recent build, the attribute values 'text' and 'content-desc' are slightly different.
                # Please confirm first before making changes.
                storeIn: returnedCartDiscount
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
                args:
                  - value: ${returnedCartDiscount}
                getResponse:
                  storeIn: returnedCartDiscount
          catch:
            flow:
              - storeIn:
                  key: returnedCartDiscount
                  value: "-0.00"
      - log:
          message: "Cart Discount got: ${returnedCartDiscount}"
          color: CYAN
      - log:
          message: "End function: cart.getCartDiscount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # Description:  This method asserts the subtotal and identifies if cart has discounts and performs assertion on the right value.
  #                 If the discount is present, 'returnedCartSubtotalAfterDiscount' will be the final subtotal value after discount.
  #                 If the discount is not present, 'returnedCartSubtotalAfterDiscount' will be equal to '0.00' and the assertion will be skipped.
  # Param:   ${cartSubtotal}  [Mandatory]  Cart Subtotal Amount. Do not change this param name.
  # RETURNS: ${returnedCartSubtotalAfterDiscount}  Final subtotal value after discount (if available, else this equals '0.00').
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.cart.assertGrandSubtotalIfCartHasDiscounts
    platform: android
    flow:
      - log: 
          message: "Cart Subtotal: ${cartSubtotal}"
          color: CYAN
      # Checking if cart has discounts...
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.discountLabel
          then:
            - log:
                message: "Discount found, adjusting Subtotal value for final assertion..."
                color: CYAN
            - storeIn:
                key: isThereDiscountAmount
                value: "true"
            # Retrieving displayed discount value...
            - log:
                message: Retrieving displayed discount value...
                color: CYAN
            - getString:
                identifier: mx.mappings.cart.discountLabel
                attribute: text
                storeIn: displayedDiscountValue
            - executeNode:
                file: mx/test/helpers/utils/removeDollarSignFromValue.js
                args:
                  - value: ${displayedDiscountValue}
                getResponse:
                  storeIn: parsedDiscountValue
            - log:
                message: "Discount got: '${parsedDiscountValue}'"
                color: CYAN
            # Calculating Subtotal value after Discount...
            - log:
                message: Calculating Subtotal value after Discount...
                color: CYAN
            - arithmetic:
                expression: ${cartSubtotal} - (${parsedDiscountValue} * (-1)) # This is because the discount value contains the minus sign.
                numberOfDecimalPlaces: 2
                storeIn: returnedCartSubtotalAfterDiscount
            - executeNode:
                file: mx/test/helpers/utils/numberToNumberWithComa.js
                args:
                  - value: ${returnedCartSubtotalAfterDiscount}
                getResponse:
                  storeIn: returnedCartSubtotalAfterDiscountWithComma
            - log:
                message: "Calculated Subtotal value after discount got: '${returnedCartSubtotalAfterDiscountWithComma}'"
                color: CYAN
            # Retrieving displayed Subtotal value after discount...
            - log:
                message: Retrieving displayed Subtotal value after discount...
                color: CYAN
            - getString:
                identifier: mx.mappings.cart.subtotalAmountAfterDiscount
                attribute: text
                storeIn: displayedSubtotalAfterDiscount
            - executeNode:
                file: mx/test/helpers/utils/removeDollarSignFromValue.js
                args:
                  - value: ${displayedSubtotalAfterDiscount}
                getResponse:
                  storeIn: displayedSubtotalAfterDiscount
            - log:
                message: "Displayed Subtotal value after discount: '${displayedSubtotalAfterDiscount}'"
                color: CYAN
            - if:
                condition: ${returnedCartSubtotalAfterDiscountWithComma} == ${displayedSubtotalAfterDiscount}
                then:
                  - log:
                      message: "Subtotal value after discount is Correct."
                      color: CYAN
                else:
                  - failTest:
                      message: "Failed: Displayed Subtotal value after discount =! expected Subtotal."
          else:
            - log:
                message: "Discount not present, flow will skip Grand Subtotal Assertion..."
                color: CYAN
            - storeIn:
                  key: isThereDiscountAmount
                  value: "false"
            - storeIn:
                  key: parsedDiscountValue
                  value: "null"
            - log:
                message: "'returnedCartSubtotalAfterDiscount' = ${cartSubtotal}"
                color: CYAN
            - storeIn:
                key: returnedCartSubtotalAfterDiscount
                value: ${cartSubtotal}
      - log:
          message: "End function: cart.assertGrandSubtotalIfCartHasDiscounts"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
            
  # Description: This method tap the reserve slot link
  # Params:  ${direction}      [Mandatory]  Direction to scroll
  - name: mx.functions.cart.tapExpandAvailableProductsList
    platform: android
    flow: 
      - log:  
          message: Expand available products list
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.expandDetailsAvailableLabel
      - click:
          identifier: mx.mappings.cart.expandCollapseCheckbox
 
  #--------------------------------------------------------------------------------------------------------------------          
            
  # Description: This method tap the reserve slot link
  # Params:   ${direction}      [Mandatory]  Direction to scroll
  - name: mx.functions.cart.tapCollapseAvailableProductsList
    platform: android
    flow: 
      - log:  
          message: Collapsing available products
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.collapseDetailsAvailableLabel
      - click:
          identifier: mx.mappings.cart.expandCollapseCheckbox
          
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method tap the change slot link
  - name: mx.functions.cart.tapChangeSlot
    platform: android
    flow: 
      - log:  
          message: Changing fulfillment time slot
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.tapReserveSlot
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION: Increases the actual quantity of a product by the desired amount of increments. i.e. for a product which
  #     its current quantity is 12, if the desired amount of increments is 5, the final quantity will be 17 (assuming
  #     there was enough stock to supply the demand, otherwise, the app will cap the quantity to the max available stock).
  #
  # PARAMS:
  #     ${productName}  [Mandatory]
  #         Name of the product to increase its quantity.
  #
  #     ${increments}  [Mandatory]
  #         Amount of increments to to the actual quantity.
  #         For all products, each increment represents 1 piece, but in the case of Dual and Weighable products, where the
  #         quantity is displayed as weight, consider the weight won't be incremented gram by gram, instead, it will increment
  #         the equivalent in grams to 1 piece.
  #         i.e. for Turkey Jam which is sold by slices, where each slice weights 50 grams (according to the catalog), each
  #         increment will add 50 grams to the actual quantity/weight.
  #
  #     ${direction}  [Mandatory]
  #         Direction where to scroll to find the product. Options: [ up | down ]
  #
  #     ${ignoreClickException}  [Optional]
  #         Flag to tell the clicking action (to perform the quantity increments) to ignore the exception in case the click
  #         cannot be done. This scenario mostly happens when the product reaches the Max Quantity Limit; the increase
  #         button becomes not clickable and so and exception (and a failure) will be thrown. Use this flag only when
  #         necessary.
  #         Options: [ true | false | null ]
  #
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.increaseProductQuantityBy
    platform: android
    flow: 
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Increments: '${increments}'"
          color: CYAN
      - log:
          message: "Find Product: '${direction}'"
          color: CYAN
      - log:  
          message: "Ignore Click Exception: '${ignoreClickException}'"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productByName # <---PARAMS---${productName}
      - try:
          flow:
            - click:
                identifier: mx.mappings.cart.productIncreaseButton # <---PARAMS---${productName}
                numberOfClicks: ${increments}
                waitBetweenClicks: 1
          catch:
            flow:
              - if:
                  condition: ${ignoreClickException} == true
                  then:
                    - log:
                        message: "Increment Quantity Button not clickable, process will continue..."
                        color: GREEN
                  else:
                    - failTest:
                        message: "Increment Quantity Button not clickable, quantity cannot be incremented"
      - sleep:
          duration: 5000
      - log:  
          message: "End function: mx.functions.cart.increaseProductQuantityBy"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method tap the change slot link
  # Param  ${productByName} [Mandatory] Product to find    
  #        ${quantity}      [Mandatory] Quantity to increase
  #        ${direction}     [Mandatory] Direction to scroll
  - name: mx.functions.cart.decreaseProductQuantityBy
    platform: android
    flow: 
      - log:  
          message: Deleting ${quantity} items from ${productByName}
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productByName
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.cart.productDecreaseButton
      - log:  
          message: ${quantity} items have been deleted from ${productByName}
          color: CYAN
   
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method deletes a OOS product
  # Param  ${productByNameOOS} [Mandatory] Product to find    
  #        ${direction}        [Mandatory] Direction to scroll
  - name: mx.functions.cart.deleteOOSProduct
    platform: android
    flow: 
      - log:  
          message: Deleting ${productByNameOOS} from out of stock section
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productOOS
      - click:
          identifier: mx.mappings.cart.productOOSDeleteLink
      - log:  
          message: ${productByNameOOS} has been deleted
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method change to pieces option in cart for a dual product
  # Param  ${productName} [Mandatory] Product to find
  - name: mx.functions.cart.switchProductToPieces
    platform: android
    flow: 
      - log:
          message: "Product Name ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productUOMSelector
          then: 
            - log: 
                message: "Product has UOM selector"
                color: CYAN
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.cart.productPiecesOptionFlag
                then:
                  - log: 
                      message: "Pieces selector is already selected"
                      color: CYAN
                else:
                  - click:
                      identifier: mx.mappings.cart.productPiecesOption
                  - sleep:
                      duration: 5000
                  - log:
                      message: "End function: cart.switchProductToPieces"
                      color: BLUE
          else:  
            - failTest:
                message: "Fail: Product is not a dual product, can't change to a different UOM"
 
  #--------------------------------------------------------------------------------------------------------------------
           
  # Description: This method change to weight option in cart for a dual product
  # Params:  ${productName} [Mandatory] Product to find
  - name: mx.functions.cart.switchProductToWeight
    platform: android
    flow: 
      - log:
          message: "Product Name ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productUOMSelector
          then: 
            - log: 
                message: "Product has UOM selector"
                color: CYAN
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.cart.productWeightOptionFlag
                then:
                  - log: 
                      message: "Weight selector is already selected"
                      color: CYAN
                else:
                  - click:
                      identifier: mx.mappings.cart.productWeightOption
                  - sleep:
                      duration: 5000
                  - log:
                      message: "End function: cart.switchProductToWeight"
                      color: BLUE
          else:  
            - failTest:
                message: "Fail: Product is not a dual product, can't change to a different UOM"
      - log:
          message: "End function: cart.switchProductToWeight"
          color: BLUE
                
  #--------------------------------------------------------------------------------------------------------------------
   
  # Description: This method taps the OOS yellow message
  - name: mx.functions.cart.tapYellowOOSMessageDetails
    platform: android
    flow: 
      - log:  
          message: Opening out of stock message details
          color: CYAN
      - click:
          identifier: mx.mappings.cart.yellowOOSMessageButton
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION: Gets the original price of the given product name. If the product has discount, it returns the old price.
  #   If it does not have a discount, the regular price is returned.
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to perform the action against.
  - name: mx.functions.cart.getProductOriginalPrice
    platform: android
    flow: 
      - log:  
          message: "Product Name: ${productName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productByName
      - executeFunction:
          name: mx.functions.cart.bringProductQuantityFieldIfNotInView
          params:
            - name: productName
              string: ${productName}
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productOriginalPriceByProductName
          then:
            - getString:
                identifier: mx.mappings.cart.productOriginalPriceByProductName
                attribute: text
                storeIn: returnedOriginalPrice
            - log:
                message: "Product has discount, old price will be returned."
                color: CYAN
          else:
            - getString:
                identifier: mx.mappings.cart.productUnitPrice
                attribute: text
                storeIn: returnedOriginalPrice
            - log:
                message: "Product doesn't have discount, regular price will be returned."
                color: CYAN
      - executeNode:
          file: mx/test/helpers/utils/getNumberFromPriceString.js
          args:
            - value: ${returnedOriginalPrice}
          getResponse:
            storeIn: returnedOriginalPrice
      - log:  
          message: "End function: cart.getProductOriginalPrice (Price Got: ${returnedOriginalPrice})"
          color: BLUE
       
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method taps the buy similar product
  # Params: ${productByNameOOS}  [Mandatory] Product name
  #         ${direction}         [Mandatory] Direction to scroll
  - name: mx.functions.cart.tapBuySimilarProduct
    platform: android
    flow: 
      - log:  
          message: Clicking buy similar product button from ${productByName} 
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.buySimilarButtonByProductName
      - click:
          identifier: mx.mappings.cart.buySimilarButtonByProductName
      - log:
          message: Replacements list carousel has been opened
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method gets the subtotal
  # Params: ${direction}  [Mandatory]  Direction to scroll
  - name: mx.functions.cart.getSubtotal
    platform: android
    flow: 
      - log:
          message: Getting subtotal from cart
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.subtotalAmountNoDiscountAndBeforeDiscount
      - getString:
          identifier: mx.mappings.cart.subtotalAmountNoDiscountAndBeforeDiscount
          attribute: text
          storeIn: subtotal
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${subtotal}
          getResponse:
            storeIn: subtotal
      - log: 
          message: Extracted value - ${subtotal}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # RETURNS: ${returnedDeliveryFee}  The displayed Delivery Fee or 0.00 when there is no Delivery Fee displayed.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.getDeliveryFee
    platform: android
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.subtotalLabel
          then:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.cart.subtotalLabel
                position: center
                scrollLimit: 8
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.deliveryFee
          then:
            - getString:
                identifier: mx.mappings.cart.deliveryFee
                attribute: text
                storeIn: displayedDeliveryFee
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
                args:
                  - value: ${displayedDeliveryFee}
                getResponse:
                  storeIn: returnedDeliveryFee
          else:
            - storeIn:
                key: returnedDeliveryFee
                value: 0.00
      - log:
          message: "Cart's Delivery Fee got: '${returnedDeliveryFee}'"
          color: CYAN
      - log: 
          message: "End function: mx.functions.cart.getDeliveryFee"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------          
  
  # Description: This method gets estimated total from detail
  # Params: ${direction}  [Mandatory]  Direction to scroll
  - name: mx.functions.cart.getEstimatedTotalFromDetail
    platform: android
    flow: 
      - log:
          message: Getting total from details section
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.totalDetails
      - getString:
          identifier: mx.mappings.cart.totalDetails
          attribute: text
          storeIn: estimatedTotal
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${estimatedTotal}
          getResponse:
            storeIn: estimatedTotal
      - log: 
          message: Extracted value - ${estimatedTotal}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method gets estimated total from detail
  # Params: ${direction}  [Mandatory]  Direction to scroll
  - name: mx.functions.cart.getEstimatedTotalFromBottom
    platform: android
    flow: 
      - log:
          message: Extracting total from page bottom
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.totalBottomSection
      - getString:
          identifier: mx.mappings.cart.totalBottomSection
          attribute: text
          storeIn: estimatedTotalLabel
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${estimatedTotalLabel}
          getResponse:
            storeIn: totalBottom
      - log: 
          message: Extracted value - ${totalBottom}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # DESCRIPTION: Performs a scroll down to bring the Quantity Field of the given product name in case it is not yet loaded into the view.
  # PARAM:  ${productName}  [Mandatory]  Referenced product name to perform the action.
  - name: mx.functions.cart.bringProductQuantityFieldIfNotInView
    platform: android
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.quantityStepperElementByProductName
          then:
            - log:
                message: "Quantity field not present. 1 scroll down will be executed to bring it into view."
                color: CYAN
            - scroll:
                direction: down
                position: center
                untilIdentifier: mx.mappings.cart.quantityStepperElementByProductName
                scrollLimit: 1
                wait: 5000
            - verifyIdentifier:
                present:
                  - identifier: mx.mappings.cart.quantityStepperElementByProductName
            - log:
                message: "End function: cart.bringProductQuantityFieldIfNotInView (Quantity field brought into view)"
                color: BLUE
          else:
            - log:
                message: "End function: cart.bringProductQuantityFieldIfNotInView (Quantity field already in view)"
                color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This function get the product type, either dual, pieces or weight.
  # Params: ${productName} [Mandatory] Product to find
  #         ${direction}     [Mandatory] Direction to scroll
  - name: mx.functions.cart.getProductType
    platform: android
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.cart.bringProductQuantityFieldIfNotInView
          params:
            - name: productName
              string: ${productName}
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.productUOMSelector
          then:
            - storeIn:
                key: returnedProductType
                value: "Dual"
          else:
            - getString:
                identifier: mx.mappings.cart.productQuantity
                attribute: text
                storeIn: quantityText
            - executeNode:
                file: mx/test/helpers/utils/stringContains.js
                args:
                  - value: ${quantityText}
                  - value: "g"
                getResponse:
                  storeIn: check1
            - executeNode:
                file: mx/test/helpers/utils/stringContains.js
                args:
                  - value: ${quantityText}
                  - value: "gr"
                getResponse:
                  storeIn: check2
            - if:
                condition: ${check1} == true || ${check2} == true
                then:
                  - storeIn:
                      key: returnedProductType
                      value: "Weighable"
                else:
                  - storeIn:
                      key: returnedProductType
                      value: "Pieces"
      - log:
          message: "Product Type Got: '${returnedProductType}'"
          color: CYAN
      - log: 
          message: "End function: cart.getProductType"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if the OOS replacement list is not displayed
  - name: mx.functions.cart.oos-replacements-list.assertListNotDisplayed
    platform: android
    flow: 
      - log:
          message: Checking if out of stock item replacements carousel is not present
          color: CYAN
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.cart.oos-replacements-list.carousel
      - log:  
          message: List is not displayed
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This method scrolls left to product in replacement carousel
  # Params: ${productByNameOOS} OOS product
  #         ${productByName}    Product to be found in replacement carousel
  #         ${direction}        Scroll direction
  - name: mx.functions.cart.oos-replacements-list.scrollLeftOrRightToProduct
    platform: android
    flow: 
      - log:
          message: Scrolling ${productByName} replacements list to ${direction} until ${productByName}
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.oos-replacements-list.carousel
      - loop:
          begin: 0
          end: 20
          mode: increment
          storeIndex: i
          flow:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.cart.productByName
                then:
                  - break: true
                else:
                  - log: 
                      message: Product ${productByName} not visible, searching
                      color: CYAN
                  - scroll:
                      direction: ${direction}
                      withinIdentifier: mx.mappings.cart.oos-replacements-list.carousel 
                      position: center
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method scrolls left to product in replacement carousel
  # Params: ${productByNameOOS} OOS product
  #         ${productByName}    Product to be found in replacement carousel
  - name: mx.functions.cart.oos-replacements-list.scrollLeftToProduct
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.cart.oos-replacements-list.scrollLeftOrRightToProduct
          params:
            - name: direction
              string: left
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method scrolls right to product in replacement carousel
  # Params: ${productByNameOOS} OOS product
  #         ${productByName}    Product to be found in replacement carousel
  - name: mx.functions.cart.oos-replacements-list.scrollRightToProduct
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.cart.oos-replacements-list.scrollLeftOrRightToProduct
          params:
            - name: direction
              string: right
             
  #--------------------------------------------------------------------------------------------------------------------
                      
  # Description: This method gets the name of the product replacement by position
  # Params:   ${productByNameOOS} [Mandatory] OOS product
  #           ${position}         [Mandatory] Product position. Values from 1 to 3
  - name: mx.functions.cart.oos-replacements-list.getReplacementNameByPosition
    platform: android
    flow: 
      - log:
          message: Extracting ${productByNameOOS} replacement name from position number ${position}
          color: CYAN
      - getString:
          identifier: mx.mappings.oos-replacements-list.replacementNameByPosition
          attribute: text
          storeIn: replacementName
      - log:  
          message: Extracted text - ${replacementName}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
                      
  # Description: This method closes the OOS replacement list
  - name: mx.functions.cart.oos-replacements-list.tapClose
    platform: android
    flow: 
      - log:
          message: Closing replacement list
          color: CYAN
      - click:
          identifier: mx.mappings.oos-replacements-list.closeButton
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method gets the price of replacement
  # Params:   ${productByNameOOS} [Mandatory] OOS product
  #           ${productByName}    [Mandatory] Replacement product
  - name: mx.functions.cart.oos-replacements-list.getReplacementPrice
    platform: android
    flow: 
      - log:
          message: Extracting price from ${productByName} which is a replacement of ${productByNameOOS}
          color: CYAN
      - getString:
          identifier: mx.mappings.oos-replacements-list.replacementPrice
          attribute: text
          storeIn: replacementPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${replacementPrice}
          getResponse:
            storeIn: replacementPrice
      - log: 
          message: Extracted value - ${replacementPrice}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method gets the price of replacement
  # Params:   ${productByNameOOS} [Mandatory] OOS product
  #           ${position}         [Mandatory] Product position. Values from 1 to 3
  - name: mx.functions.cart.oos-replacements-list.getReplacementPriceByPosition
    platform: android
    flow: 
      - log:
          message: Extracting price from ${productByNameOOS} replacement item in position number ${position}
          color: CYAN
      - getString:
          identifier: mx.mappings.oos-replacements-list.replacementPriceByPosition
          attribute: text
          storeIn: replacementPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${replacementPrice}
          getResponse:
            storeIn: replacementPrice
      - log: 
          message: Extracted value - ${replacementPrice}
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------          
 
  # Description: This method asserts if the OOS replacement list is displayed
  # Params: ${productByNameOOS} [Mandatory] OOS product
  #         ${direction}        [Mandatory] Direction to scroll
  - name: mx.functions.cart.oos-replacements-list.assertListDisplayed
    platform: android
    flow: 
      - log:
          message: Checking if ${productByNameOOS} replacements list is displayed
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params: 
            - name: elementToFind
              string: mx.mappings.cart.oos-replacements-list.carousel
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.cart.oos-replacements-list.carousel
      - log:
          message: List is displayed
          color: CYAN
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method extracts the product price and saves it in the global variable ${returnedPrice}.
  # Params:  ${productName}  [Mandatory] Product to extract its price from.
  - name: mx.functions.cart.getProductPrice
    platform: android
    flow: 
      - log:  
          message: "Price of product: ${productName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productPriceByProductName
      - getString:
          identifier: mx.mappings.cart.productPriceByProductName
          attribute: text
          storeIn: returnedPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${returnedPrice}
          getResponse:
            storeIn: returnedProductPrice
      - log:
          message: "End function: cart.getProductPrice (price got: ${returnedProductPrice})"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
  # Description: This method extracts the product price and saves it in the global variable ${returnedPrice}.
  # Params:  ${productName}  [Mandatory] Product to extract its price from.
  - name: mx.functions.cart.getProductUnitPrice
    platform: android
    flow: 
      - executeFunction:
          name: mx.functions.utils.searchItemInPage
          params:
            - name: elementToFind
              string: mx.mappings.cart.productUnitPrice
      - getString:
          identifier: mx.mappings.cart.productUnitPrice
          attribute: text
          storeIn: returnedUnitPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${returnedUnitPrice}
          getResponse:
            storeIn: returnedUnitPrice
      - log:
          message: "End function: cart.getProductPrice (price got: ${returnedUnitPrice})"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # Description: This method extracts the delivery method displayed
  - name: mx.functions.cart.getDeliveryMethod
    platform: android
    flow: 
      - getString:
          identifier: mx.mappings.cart.deliverySlot
          attribute: text
          storeIn: cartDeliveryMethodDisplayed
      - log:
          message: "End function: cart.getDeliveryMethod (Delivery method displayed: ${cartDeliveryMethodDisplayed})"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  - name: mx.functions.cart.isCartEmpty
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.emptyView
              - identifier: mx.mappings.cart.startBuyingButton
          then:
            - storeIn:
                key: returnedIsCartEmpty
                value: true
          else:
            - storeIn:
                key: returnedIsCartEmpty
                value: false
      - log:
          message: "End function: cart.isCartEmpty (${returnedIsCartEmpty})"
          color: BLUE
 
  #--------------------------------------------------------------------------------------------------------------------
 
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.emptyCart
    platform: android
    flow:
      - executeFunction:
          name: mx.functions.cart.isCartEmpty
      - if:
          condition: ${returnedIsCartEmpty} == true
          then:
            - log:
                message: "Cart is empty already."
                color: CYAN
          else:
            - log:
                message: "Cart is not empty. Emptying cart..."
                color: CYAN
            - loop:
                begin: 1
                end: 50
                storeIndex: lapCount
                flow:
                  - log:
                      message: "Lap: ${lapCount}"
                      color: GREEN
                  - drag:
                      from:
                        x: 50%
                        y: 55%
                      to:
                        x: 50%
                        y: 50%
                  - if:
                      identifier:
                        present:
                          - identifier: mx.mappings.cart.deleteProductButtonGeneral
                      then:
                        - click:
                            identifier: mx.mappings.cart.deleteProductButtonGeneral
                        - sleep:
                            duration: 1000
                      else:
                        - log:
                            message: "Cart is now empty."
                            color: CYAN
                        - break: true
      - log:
          message: "End function: cart.emptyCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS: ${productName}  [Mandatory]  Name of the product to tap its Weight Selector.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.tapWeightSelectorForProduct
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.weightSelectorByProductName
      - log:
          message: "End function: cart.tapWeightSelector"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS: ${productName}  [Mandatory]  Name of the product to tap its Pieces Selector.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.tapPiecesSelectorForProduct
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.piecesSelectorByProductName
      - log:
          message: "End function: cart.tapPiecesSelector"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Gets the raw and cleansed quantity, as weight, of the given Product.
  # PARAMS:
  #   ${productName}  [Mandatory]  Name of the product to get its Quantity as weight.
  # RETURNS:
  #   ${returnedRawQuantity}      The raw quantity including the weight indicators. i.e. '176 g'.
  #   ${returnedCleanedQuantity}  The cleansed quantity without the weight indicators. i.e. '176'.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.getQuantityAsWeightOfProduct
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.cart.weightQuantityByProductName
          storeIn: returnedRawQuantity
      - executeNode:
          file: mx/test/helpers/utils/sanitizeQuantity.js
          args:
            - value: ${returnedRawQuantity}
          getResponse:
            storeIn: returnedCleanedQuantity
      - log:
          message: "Quantity Got: '${returnedRawQuantity}' (raw)"
          color: CYAN
      - log:
          message: "Quantity Got: '${returnedCleanedQuantity}' (cleaned)"
          color: CYAN
      - log:
          message: "End function: cart.getQuantityAsWeight"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # RETURNS:
  #     ${returnedCartDiscount}
  #         The Total Cart's Discount displayed from the Subtotal section. If the value is not displayed, it will return -0.00.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.cart.getTotalDiscount
    platform: android
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.cart.subtotalLabel
          then:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.cart.subtotalLabel
                position: center
                scrollLimit: 8
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.subtotalDiscountAmount
          then:
            - getString:
                identifier: mx.mappings.cart.subtotalDiscountAmount
                storeIn: displayedDiscount
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
                args:
                  - value: ${displayedDiscount}
                getResponse:
                  storeIn: returnedCartDiscount
          else:
            - storeIn:
                key: returnedCartDiscount
                value: -0.00
      - log:
          message: "Total Cart's Discount got: '${returnedCartDiscount}'"
          color: CYAN
      - log:
          message: "End function: cart.getTotalDiscount"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------          
            
  # Description: This method tap the reserve slot link
  - name: mx.functions.cart.tapReserveSlot
    platform: android
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.reserveSlotButton
          then:
            - click:
                identifier: mx.mappings.cart.reserveSlotButton
          else:
            - scroll:
                direction: up
                untilIdentifier: mx.mappings.cart.reserveSlotButton
                scrollLimit: 3
                position: center
                wait: 1000
            - click:
                identifier: mx.mappings.cart.reserveSlotButton
      - log:
          message: "End function: cart.tapReserveSlot"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:
  #   This function gets the discount amount if the product has multi-savings promotion, if it doesn't, then the returned value will be '0.00'.
  # PARAMS:
  #   ${productName}                [Mandatory]   Product name.
  #   ${hasMultiSavingsPromotion}   [BOOLEAN]     Obtained from: mx.functions.cart.checkIfProductHasMultiSavingsPromotion
  #   ${expectedProductTotal}       [Mandatory]   Product total price without discout   
  # RETURNS:
  #   ${returnedMultiSavingsDiscountAmount}
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  # EDITOR: Osmar Juárez (vn56dce)
  - name: mx.functions.cart.getMultiSavingsDiscountAmount
    platform: android
    flow: 
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected total for product without discount: '${expectedProductTotal}'"
          color: CYAN
      - if:
          condition: ${hasMultiSavingsPromotion} == true
          then:
            - log:
                message: "Multi Savings Discount found... Extracting Discount value..."
                color: GREEN_BOLD
            - getString:
                identifier: mx.mappings.cart.savedPriceByProductName # <--PARAM--${productName}
                storeIn: returnedMultiSavingsDiscountLabel
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceString.js
                args:
                  - value: ${returnedMultiSavingsDiscountLabel}
                getResponse:
                  storeIn: returnedMultiSavingsPrice
            - arithmetic:
                expression: ${expectedProductTotal} - ${returnedMultiSavingsPrice}
                storeIn: returnedMultiSavingsDiscountAmount
                numberOfDecimalPlaces: 2
          else:
            # In the possible case that the Multi-Savings badge is present but the product hasn't met required quantity to activate promotion...
            - log:
                message: "Multi Savings Discount Amount not found... Flow will continue as normal."
                color: CYAN
            - storeIn:
                key: returnedMultiSavingsDiscountAmount
                value: '0.00'
      - log:
          message: "Multi Savings Discount Amount got: '${returnedMultiSavingsDiscountAmount}'"
          color: CYAN
      - log:
          message: "End function: cart.getMultiSavingsDiscountAmount"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  # EDITOR: Guillermo Canales (g0c08aj)
  - name: mx.functions.cart.closeSnackbarIfDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.closeSnackbarButton
          then:
            - click:
                identifier: mx.mappings.cart.closeSnackbarButton
      - log:
          message: "Snack bar has been closed or did not display."
          color: CYAN
      - log:
          message: "End function: cart.closeSnackbarIfDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  #
  # DESCRIPTION: Opens the PDP of the given product. This function assumes the product is already visible.
  # PARAMS:  ${productName}  [Mandatory]  Name of the product to open its PDP.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  # EDITOR: Guillermo Canales (g0c08aj)
  - name: mx.functions.cart.openPDP
    platform: android
    flow:
      - log:
          message: "[ PARAM: Product Name: '${productName}' ]"
          color: CYAN
      - click:
          identifier: mx.mappings.cart.productName # <--PARAM--${productName}
      - log:
          message: "End function: mx.functions.cart.openPDP"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: Move product to save for later and validate product in SFL
  # Param:       ${productName}   Product name to move to save for later.
  # Author: Belén García (vn532ri)
  - name: mx.functions.cart.moveAndValidateProductToCartFromSFL
    flow:
      - executeFunction:
          name: functions.cartPage.tabMoveToCartBtn # <-- ${productName}
      - log:
          message: ✔ Item ${productName} successfully moved to cart from save for later.
          color: GREEN_BOLD
      - executeFunction:
          name: mx.functions.cart.validateProductInCart # <-- ${productName}
      - log:
          message: ✔ Item ${productName} present in cart.
          color: GREEN_BOLD
      - log:
          message: "End function: cartPage.moveAndVerifyProductMoveToSFL"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function assert the product is present in cart.
  # Param:       ${productName}   Product name to validate in cart.
  # Works for:   [ MX [✓]   MX-Bodega [✓]   US [__]   CA [__]]
  - name: mx.functions.cart.validateProductInCart
    flow:
      - log:
          message: "Validating product container"
          color: BLUE
      - if:
          identifier:
            notPresent:
              - identifier: cartPage.productContainer
          then:
            - executeFunction:
                name: mx.functions.utils.searchItemInPage
                params:
                  - name: elementToFind
                    string: cartPage.productContainer
      - verifyIdentifier:
          present:
            - identifier: cartPage.productContainer # <-- ${productName}
      - log:
          message: "Product container found"
          color: BLUE
      - drag:
          from:
            x: 50%
            y: 55%
          to:
            x: 50%
            y: 40%
      - verifyIdentifier:
          present:
            - identifier: cartPage.productQtyDecrementBtn # <-- ${productName}
            - identifier: cartPage.productQtyIncrementBtn # <-- ${productName}
      - log:
          message: "End function: cartPage.validateProductInCart"
          color: BLUE