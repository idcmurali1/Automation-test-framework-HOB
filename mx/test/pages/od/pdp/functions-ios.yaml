#======================================================================================================================
#  AUTHOR: Isis Rojas Tolentino (vn53dge)
#  CREATED: Mar/13/2023
#  REVISION: ---
#
#  Copyright Â© 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  - name: mx.functions.pdp.tapClose
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.pdp.closeButton
      - log:
          message: "End function: pdp.tapClose"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function gets the product name and stores it in the global variable ${returnedProductName}.
  - name: mx.functions.pdp.getProductNameHelper
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.utils.scrollToTop
      - getString:
          identifier: mx.mappings.pdp.productNameLabel
          attribute: label
          storeIn: returnedProductName
      - log:
          message: "Product name got: ${returnedProductName}"
          color: CYAN
      - log:
          message: "End function: pdp.getProductNameHelper"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the brand search link that appears for some products on the top left corner.
  - name: mx.functions.pdp.tapBrandSearch
    platform: ios
    flow:
      - log:
          message: "Clicking on brand search link..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.brandSearchLink

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the zoom icon to the right of the product picture.
  - name: mx.functions.pdp.tapZoom
    platform: ios
    flow:
      - log:
          message: "Clicking the zoom icon..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.zoomIcon

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.tapPicture
    platform: ios
    flow:
      - log:
          message: "Clicking the product picture..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.productPicture

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function swipes to the next picture available, a number of iteration or repeats can be assigned
  #              for multiple swipes if necessary.
  # Param:       ${repeatQuantity}  Number of swipes to be performed if necessary.
  - name: mx.functions.pdp.swipeToNextPicture
    platform: ios
    flow:
      - if:
          condition: ${repeatQuantity} == null
          then:
            - log:
                message: "Swiping to next picture..."
                color: CYAN
            - scroll:
                direction: left
                scrollLimit: 1
                withinIdentifier: mx.mappings.pdp.productPicture
                wait: 1000
          else:
            - log:
                message: "Swiping pictures (number of swipes: ${repeatQuantity})..."
                color: CYAN
            - loop:
                begin: 0
                end: ${repeatQuantity}
                mode: increment
                flow:
                  - scroll:
                      direction: left
                      withinIdentifier: mx.mappings.pdp.productPicture
                      scrollLimit: 1
                      wait: 1000

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function swipes to the previous picture available, a number of iteration or repeats can be assigned
  #              for multiple swipes if necessary.
  # Param:       ${repeatQuantity}  Number of swipes to be performed if necessary.
  - name: mx.functions.pdp.swipeToPreviousPicture
    platform: ios
    flow:
      - if:
          condition: ${repeatQuantity} == null
          then:
            - log:
                message: "Swiping to previous picture..."
                color: CYAN
            - scroll:
                direction: right
                scrollLimit: 1
                withinIdentifier: mx.mappings.pdp.productPicture
                wait: 1000
          else:
            - log:
                message: "Swiping pictures (number of swipes: ${repeatQuantity})..."
                color: CYAN
            - loop:
                begin: 0
                end: ${repeatQuantity}
                mode: increment
                flow:
                  - scroll:
                      direction: right
                      withinIdentifier: mx.mappings.pdp.productPicture
                      scrollLimit: 1
                      wait: 1000

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the quantity of pictures and stores it in the global variable ${returnedPicturesQuantity}
  - name: mx.functions.pdp.getPicturesQuantity
    platform: ios
    flow:
      - log:
          message: 'Getting the amount of available product pictures...'
          color: CYAN
      - getString:
          identifier: mx.mappings.pdp.productPicture
          attribute: label
          storeIn: productPictureName
      - executeNode:
          file: mx/test/helpers/pdp/getPicturesQuantity.js
          args:
            - value: ${productPictureName}
          getResponse:
            storeIn: returnedPicturesQuantity
      - log:
          message: 'Pictures quantity got: ${returnedPicturesQuantity}'
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.tapAddToList
    platform: ios
    flow:
      - drag:
          from:
            x: 50%
            y: 50%           
          to:
            x: 50%
            y: 25%
      - log:
          message: "Clicking the add to list button..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.addToListButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function expands the details section.
  - name: mx.functions.pdp.expandDetails
    platform: ios
    flow:
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
                value: "false"
          then:
            - click:
                identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
      - log:
          message: "Expanding product details section..."
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
                contains: collapsed
          then:
            - click:
                identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
          else:
            - log:
                message: "The product details section is already expanded."
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function contracts the details section.
  - name: mx.functions.pdp.contractDetails
    platform: ios
    flow:
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
                value: "false"
          then:
            - click:
                identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
      - log:
          message: "Expanding product details section..."
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
                contains: expanded
          then:
            - click:
                identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
          else:
            - log:
                message: "The product details section is already collapsed."
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.tapAdditionalDetails
    platform: ios
    flow:
      - log:
          message: "Clicking the additional details button..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.moreDetailsButton
          coordinates: 15%,85%

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.addToCart
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.pdp.getProductNameHelper
      - log:
          message: "Product name: ${returnedProductName}"
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.addToCartButton
      - log:
          message: "End function: pdp.addToCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the product quantity by the quantity specified on param ${quantity}.
  # Param: ${quantity}  [Mandatory]  Number of times to increase the product quantity.
  - name: mx.functions.pdp.increaseQuantityBy
    platform: ios
    flow:
      - log:
          message: "Quantity to increase: ${quantity}..."
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.pdp.increaseButton
      - log:
          message: "End function: pdp.increaseQuantityBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the product quantity by the quantity specified on param ${quantity}.
  # Helper needed on iOS platform to specify the button to click, because in this platform, all buttons are 
  # displayed, even if they are behind the PDP view.
  # Param: ${quantity}  [Mandatory]  Number of times to decrease the product quantity.
  - name: mx.functions.pdp.decreaseQuantityBy
    platform: ios
    flow:
      - log:
          message: "Decreasing product quantity by ${quantity}..."
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.pdp.decreaseButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switches the product's type to pieces. The product needs to be added to cart.
  - name: mx.functions.pdp.switchToPieces
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.pdp.getProductNameHelper
      - log:
          message: "Switching product type to pieces..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.UOMSelector
          then:
            - if:
                identifier:
                  label:
                    - identifier: mx.mappings.pdp.productAddedQuantityCounter
                      contains: "g"
                then:
                  - click:
                      identifier: mx.mappings.pdp.piecesTypeButton
                else:
                  - log:
                      message: "The product is already set to pieces."
                      color: CYAN
          else:
            - failTest:
                message: "The product is not a dual type or hasn't been added to cart yet."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switches the product's type to weight. The product needs to be added to cart.
  - name: mx.functions.pdp.switchToWeight
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.pdp.getProductNameHelper
      - log:
          message: "Switching product type to weight..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.UOMSelector
          then:
            - if:
                identifier:
                  label:
                    - identifier: mx.mappings.pdp.productAddedQuantityCounter
                      contains: "g"
                then:
                  - log:
                      message: "The product is already set to weight."
                      color: CYAN
                else:
                  - click:
                      identifier: mx.mappings.pdp.weightTypeButton
          else:
            - failTest:
                message: "The product is not a dual type or hasn't been added to cart yet."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product price and stores it in the global variable ${returnedProductPrice}.
  #              Also, this function stores only the number, it does not include '$' or '/kg'. For example: '29.00'
  - name: mx.functions.pdp.getPrice
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.utils.scrollToTop
      - if:
          identifier:
            label:
              - identifier: mx.mappings.pdp.topProductPriceLabel
                contains: "/kg"
          then:
            - getString:
                identifier: mx.mappings.pdp.topProductPriceLabel
                attribute: label
                storeIn: topProductPriceLabel
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${topProductPriceLabel}
                getResponse:
                  storeIn: returnedProductPrice
          else:
            - getString:
                identifier: mx.mappings.pdp.topProductPriceLabel
                attribute: label
                storeIn: returnedProductPrice
            - executeNode:
                file: mx/test/helpers/cart/getPriceFromLabel.js
                args:
                  - value: ${returnedProductPrice}
                getResponse:
                  storeIn: returnedProductPrice
      - log:
          message: "Price got: '${returnedProductPrice}'"
          color: GREEN_BOLD
      - log:
          message: "End function: mx.functions.pdp.getPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          
  #
  - name: mx.functions.pdp.getOriginalPrice
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.secondaryPriceLabel
          then:
            - getString:
                identifier: mx.mappings.pdp.secondaryPriceLabel
                storeIn: secondaryPriceLabel
            - executeNode:
                file: mx/test/helpers/pdp/getPriceFromSecondaryPriceLabel.js
                args:
                  - value: ${secondaryPriceLabel}
                getResponse:
                  storeIn: returnedOriginalPrice
          else:
            - executeFunction:
                name: mx.functions.pdp.getPrice
            - storeIn:
                key: returnedOriginalPrice
                value: ${returnedProductPrice}
      - log:
          message: "Original Price got: '${returnedOriginalPrice}'"
          color: GREEN_BOLD
      - log:
          message: "End function: mx.functions.pdp.getOriginalPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product type and stores it in the global variable ${returnedProductType}.
  #              It can be of type 'Dual', 'Pieces' or 'Weight'. The product does not need to be added to cart.
  - name: mx.functions.pdp.getType
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.UOMSelector
          then:
            - storeIn:
                key: returnedProductType
                value: "Dual"
            - log:
                message: "The product is of type: ${returnedProductType}."
                color: CYAN
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.pdp.finalCostByWeightLabel
                then:
                  - storeIn:
                      key: returnedProductType
                      value: "Weight"
                  - log:
                      message: "The product is of type: ${returnedProductType}."
                      color: CYAN
                else:
                  - storeIn:
                      key: returnedProductType
                      value: "Pieces"
                  - log:
                      message: "The product is of type: ${returnedProductType}."
                      color: CYAN
      - log:
          message: "End function: mx.functions.pdp.getType"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function extracts the product added quantity as pieces and stores it in the global variable:
  # ${returnedProductQuantity}. Product must be added to cart.
  - name: mx.functions.pdp.getProductQuantityAsPieces
    platform: ios
    flow:
      - log:
          message: "Extracting product added quantity as pieces..."
          color: CYAN
      - if:
          identifier: 
            label:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
                contains: "g"
          then:
            - failTest:
                message: "The product is not of type Pieces or has not been added to cart yet."
          else:
            - getString:
                identifier: mx.mappings.pdp.productAddedQuantityCounter
                attribute: label
                storeIn: returnedProductQuantity
            - log:
                message: "Quantity got: ${returnedProductQuantity}"
                color: CYAN
      - log:
          message: "End function: mx.functions.pdp.getProductQuantityAsPieces"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function extracts the product added quantity as weight and stores it in the global variable:
  # ${returnedProductQuantity}. Product must be added to cart.
  - name: mx.functions.pdp.getProductQuantityAsWeight
    platform: ios
    flow:
      - log:
          message: "Extracting product added quantity as weight..."
          color: CYAN
      - if:
          identifier: 
            label:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
                contains: "g"
          then:
            - getString:
                identifier: mx.mappings.pdp.productAddedQuantityCounter
                attribute: label
                storeIn: returnedProductQuantity
            - executeNode:
                file: mx/test/helpers/slp/splitWeightString_iOS.js
                args:
                  - value: ${returnedProductQuantity}
                getResponse:
                  storeIn: returnedProductQuantity
            - log:
                message: "Quantity got: ${returnedProductQuantity} grams."
                color: CYAN
          else:
            - failTest:
                message: "The product is not of type weight or has not been added to cart yet."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the correct product is displayed.
  # Param: ${expectedProductName}  [Mandatory]  Full expected product name to be displayed.
  - name: mx.functions.pdp.assertCorrectProductDisplayed
    platform: ios
    flow:
      - log:
          message: "Expected Product Name: ${expectedProductName}"
          color: CYAN
      - verifyIdentifier:
          label:
            - identifier: mx.mappings.pdp.productNameLabel
              contains: ${expectedProductName}
      - log:
          message: "End function: pdp.assertCorrectProductDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Rodrigo Pacheco C.
  - name: mx.functions.pdp.markAsFavorite
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.pdp.getProductNameHelper
      - log:
          message: "Product name: ${returnedProductName}"
          color: CYAN
      - if:
          identifier:
            label:
              - identifier: mx.mappings.pdp.favoriteButton
                contains: Eliminar
          then:
            - log:
                message: "Product already marked as favorite."
                color: CYAN
          else:
            - log:
                message: "Not marked. Marking product..."
                color: CYAN
            - click:
                identifier: mx.mappings.pdp.favoriteButton
      - log:
          message: "End function: pdp.markAsFavorite"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This function asserts that the product in PDP displayed has been added to cart, 
  #              by verifiying ATC button is displayed with increments or decrements buttons
  # Author: ??
  # Editor: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.pdp.assertAddedToCart
    platform: ios
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.addToCartButtonWithItemsAdded
          then:
            - log: 
                message: "Assertion success: ATC button has items added in cart"
                color: GREEN_BOLD
          else: 
            - failTest:
                message: "The product has not been added to cart."
      - log:
          message: "End function: pdp.assertAddedToCart"
          color: BLUE 
           

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as pieces.
  # Param: ${expectedQuantityAsPieces}  [Mandatory]  Quantity of pieces to assert.
  - name: mx.functions.pdp.assertQuantityAsPieces
    platform: ios
    flow: 
      - log:  
          message: "Expected quantity as pieces: ${expectedQuantityAsPieces}"
          color: CYAN
      - if:
          identifier:
            value:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
                equals: ${expectedQuantityAsPieces}
          then:
            - log:  
                message: "Expected added quantity as pieces is correct."
                color: CYAN
          else:
            - failTest:  
                message: "Expected added quantity as pieces is incorrect, product may not have been added to cart or product is not of type 'pieces'."

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function scrolls down to the carousel name title
  # AUTHOR: Gustavo Antonio LÃ³pez Cambambia (vn53g21)
  # EDITOR: 
  # Param: ${carouselName} [Mandatory]  carousel title name displayed.
  - name: mx.functions.pdp.scrollDownToCarousel
    platform: ios
    flow:
      - log:
          message: "Carousel name: '${carouselName}'"
          color: CYAN
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.pdp.carouselByName
          position: center
          scrollLimit: 10
      - log:
          message: "End function: mx.functions.pdp.scrollDownToCarousel"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function open the first product PDP from specified carousel name
  # AUTHOR: Gustavo Antonio LÃ³pez Cambambia (vn53g21)
  # EDITOR: 
  # Params: ${carouselName} 
  - name: mx.functions.pdp.carousel.openFirstPDPListed
    platform: ios
    flow:
      - log:
          message: "Opening first product from Carousel: ${carouselName}"
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.carousel.firstProductContainerOnCarouselByCarouselName
      - log:
          message: "End function: mx.functions.pdp.carousel.openFirstPDPListed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function open the first available product PDP from specified carousel name
  # AUTHOR: Gustavo Antonio LÃ³pez Cambambia (vn53g21)
  # EDITOR: 
  # Params: ${carouselName} 
  - name: mx.functions.pdp.carousel.openFirstAvailablePDPListed
    platform: ios
    flow:
      - log:
          message: "Opening first product from Carousel: ${carouselName}"
          color: CYAN
      - loop:
          begin: 1
          end: 3
          storeIndex: i
          mode: increment
          flow: 
            # - if:
            #     condition: (${i} > 2)
            #     then:
            #       - scroll:
            #           direction: left
            #           withinIdentifier: mx.mappings.pdp.carousel.productContainerByIndex
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.pdp.carousel.agotadoLabelByIndexAndCarouselName
                then:
                  - log:
                      message: "Product ${i} not available, checking next product"
                      color: CYAN
                else:
                  - click:
                      identifier: mx.mappings.pdp.carousel.productImageByIndexAndCarouselName
                  - break: true
      - log:
          message: "End function: mx.functions.pdp.carousel.openFirstPDPListed"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function verifies that no items appear in the stepps
  - name: mx.functions.pdp.assertNoItemsInStepper
    platform: ios
    flow:
      - if:
          identifier:
            present:
                - identifier: mx.mappings.pdp.addToCartButton
          then:
            - verifyIdentifier:
                label:
                  - identifier: mx.mappings.pdp.addToCartButton
                    contains: "Agregar"
            - log:
                message: "No items appear in the stepper"
                color: CYAN
          else:
            - failTest:
                message: "There was a problem while trying to obtain the product quantity of the product."
      - log:
          message: "End functions: mx.functions.pdp.assertNoItemsInStepper"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------
