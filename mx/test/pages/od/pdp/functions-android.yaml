#======================================================================================================================
#  AUTHOR: Rodrigo Pacheco Cámara (vn53p0i)
#  CREATED: Jan/17/2023
#  REVISION: ---
#
#  Copyright © 2023 Walmart. All rights reserved.
#======================================================================================================================

functions:
  
  - name: mx.functions.pdp.tapClose
    platform: android
    flow:
      - click:
          identifier: mx.mappings.pdp.closeButton
      - log:
          message: "End function: pdp.tapClose"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function gets the product name and stores it in the global variable ${returnedProductName}.
  - name: mx.functions.pdp.getProductNameHelper
    platform: android
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.pdp.productNameLabel
            timeout: 3000
          then:
            - scroll:
                direction: up
                untilIdentifier: mx.mappings.pdp.productNameLabel
                scrollLimit: 5
                wait: 1000
      - getString:
          identifier: mx.mappings.pdp.productNameLabel
          attribute: text
          storeIn: returnedProductName
      - log:
          message: "Product name got: ${returnedProductName}"
          color: CYAN
      - log:
          message: "End function: pdp.getProductNameHelper"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the brand search link that appears for some products on the top left corner.
  - name: mx.functions.pdp.tapBrandSearch
    platform: android
    flow:
      - log:
          message: "Clicking on brand search link..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.brandSearchLink

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.markAsFavorite
    platform: android
    flow:
      - if:
          identifier:
            contentDescription:
              - identifier: mx.mappings.pdp.favoriteButton
                contains: Agregar
          then:
            - click:
                identifier: mx.mappings.pdp.favoriteButton
            - verifyIdentifier:
                contentDescription:
                  - identifier: mx.mappings.pdp.favoriteButton
                    contains: Eliminar
            - log:
                message: "Product marked as favorite."
                color: CYAN
          else:
            - log:
                message: "Product already marked."
                color: CYAN
      - log:
          message: "End function: pdp.markAsFavorite"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.unmarkAsFavorite
    platform: android
    flow:
      - executeFunction:
          name: mx.functions.pdp.getProductNameHelper
      - log:
          message: "Removing the product: ${returnedProductName}, from the favorites list..."
          color: CYAN
      - if:
          identifier:
            contentDescription:
              - identifier: mx.mappings.pdp.favoriteButton
                contains: Eliminar
          then:
            - click:
                identifier: mx.mappings.pdp.favoriteButton
            - verifyIdentifier:
                contentDescription:
                  - identifier: mx.mappings.pdp.favoriteButton
                    contains: Agregar
            - log:
                message: "The product: ${returnedProductName}, has been removed from the favorites list."
                color: CYAN
          else:
            - log:
                message: "The product: ${returnedProductName}, has already been removed from the favorites list."
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the zoom icon to the right of the product picture.
  - name: mx.functions.pdp.tapZoom
    platform: android
    flow:
      - log:
          message: "Clicking the zoom icon..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.zoomIcon

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.tapPicture
    platform: android
    flow:
      - log:
          message: "Clicking the product picture..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.productPicture

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function swipes to the next picture available, a number of iteration or repeats can be assigned
  #              for multiple swipes if necessary.
  # Param:       ${repeatQuantity}  Number of swipes to be performed if necessary.
  - name: mx.functions.pdp.swipeToNextPicture
    platform: android
    flow:
      - if:
          condition: ${repeatQuantity} == null
          then:
            - log:
                message: "Swiping to next picture..."
                color: CYAN
            - scroll:
                direction: left
                scrollLimit: 1
                withinIdentifier: mx.mappings.pdp.productPicture
                wait: 1000
          else:
            - log:
                message: "Swiping pictures (number of swipes: ${repeatQuantity})..."
                color: CYAN
            - loop:
                begin: 0
                end: ${repeatQuantity}
                mode: increment
                flow:
                  - scroll:
                      direction: left
                      withinIdentifier: mx.mappings.pdp.productPicture
                      scrollLimit: 1
                      wait: 1000

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function swipes to the previous picture available, a number of iteration or repeats can be assigned
  #              for multiple swipes if necessary.
  # Param:       ${repeatQuantity}  Number of swipes to be performed if necessary.
  - name: mx.functions.pdp.swipeToPreviousPicture
    platform: android
    flow:
      - if:
          condition: ${repeatQuantity} == null
          then:
            - log:
                message: "Swiping to previous picture..."
                color: CYAN
            - scroll:
                direction: right
                scrollLimit: 1
                withinIdentifier: mx.mappings.pdp.productPicture
                wait: 1000
          else:
            - log:
                message: "Swiping pictures (number of swipes: ${repeatQuantity})..."
                color: CYAN
            - loop:
                begin: 0
                end: ${repeatQuantity}
                mode: increment
                flow:
                  - scroll:
                      direction: right
                      withinIdentifier: mx.mappings.pdp.productPicture
                      scrollLimit: 1
                      wait: 1000

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function taps the add to list button

  - name: mx.functions.pdp.tapAddToList
    platform: android
    flow:
      - log:
          message: "Clicking the add to list button..."
          color: CYAN
      - if: 
         identifier:
           notPresent:
             - identifier: mx.mappings.pdp.addToListButton
         then:
          # NOTE: uncomment scroll when R2 scroll fix is solved
          # - scroll:
          #     direction: down
          #     untilIdentifier: mx.mappings.pdp.addToListButton
          #     position: center
          #     scrollLimit: 2
          # NOTE: using drag as a workaround R2 scroll problem
          - drag:
              from:
                x: 50%
                y: 50%           
              to:
                x: 50%
                y: 25%
      - click:
          identifier: mx.mappings.pdp.addToListButton
      - log:
          message: "End function: pdp.tapAddToList"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function expands the details section.
  - name: mx.functions.pdp.expandDetails
    platform: android
    flow:
      - scroll:
          direction: up
          scrollLimit: 1
          wait: 1000
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.pdp.productDetailsSection
          scrollLimit: 1
          wait: 1000
          position: center
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.pdp.productDetailsSection
      - log:
          message: "Expanding product details section..."
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.pdp.moreDetailsButton
          then:
            - click:
                identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
          else:
            - log:
                message: "The product details section is already expanded."
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function contracts the details section.
  - name: mx.functions.pdp.contractDetails
    platform: android
    flow:
      - scroll:
          direction: up
          scrollLimit: 1
          wait: 1000
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.pdp.productDetailsSection
          scrollLimit: 1
          wait: 1000
          position: center
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.pdp.productDetailsSection
      - log:
          message: "Contracting product details section..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.moreDetailsButton
          then:
            - click:
                identifier: mx.mappings.pdp.productDetailsExpandCollapseButton
          else:
            - log:
                message: "The product details section is already collapsed."
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.tapAdditionalDetails
    platform: android
    flow:
      - log:
          message: "Clicking the additional details button..."
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.moreDetailsButton

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.addToCart
    platform: android
    flow:
      - executeFunction:
          name: mx.functions.pdp.getProductNameHelper
      - click:
          identifier: mx.mappings.pdp.addToCartButton
      - log:
          message: "End function: pdp.addToCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the product quantity by the quantity specified on param ${quantity}.
  # Param: ${quantity}  [Mandatory]  Number of times to increase the product quantity.
  - name: mx.functions.pdp.increaseQuantityBy
    platform: android
    flow:
      - log:
          message: "Increasing product quantity by ${quantity}..."
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.pdp.increaseButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the product quantity by the quantity specified on param ${quantity}.
  # Param: ${quantity}  [Mandatory]  Number of times to decrease the product quantity.
  - name: mx.functions.pdp.decreaseQuantityBy
    platform: android
    flow:
      - log:
          message: "Decreasing product quantity by ${quantity}..."
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          flow:
            - click:
                identifier: mx.mappings.pdp.decreaseButton
            - sleep:
                duration: 2000

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.switchToPieces
    platform: android
    flow:
      - log:
          message: "Switching product type to pieces..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.UOMSelector
          then:
            - if:
                identifier:
                  text:
                    - identifier: mx.mappings.pdp.productAddedQuantityCounter
                      contains: "g"
                then:
                  - click:
                      identifier: mx.mappings.pdp.piecesTypeButton
                else:
                  - log:
                      message: "The product is already set to pieces."
                      color: CYAN
          else:
            - failTest:
                message: "The product is not a dual type or hasn't been added to cart yet."

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.switchToWeight
    platform: android
    flow:
      - log:
          message: "Switching product type to weight..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.UOMSelector
          then:
            - if:
                identifier:
                  text:
                    - identifier: mx.mappings.pdp.productAddedQuantityCounter
                      contains: "g"
                then:
                  - log:
                      message: "The product is already set to weight."
                      color: CYAN
                else:
                  - click:
                      identifier: mx.mappings.pdp.weightTypeButton
          else:
            - failTest:
                message: "The product is not a dual type or hasn't been added to cart yet."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product price and stores it in the global variable ${returnedProductPrice}.
  #              Also, this function stores only the number, it does not include '$' or '/kg'. For example: '29.00'
  - name: mx.functions.pdp.getPrice
    platform: android
    flow:
      - storeIn:
          key: returnedProductPrice
          value: "null"

      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.pdp.topProductPriceLabel
          then:
            - scroll:
                direction: up
                untilIdentifier: mx.mappings.pdp.topProductPriceLabel
                scrollLimit: 8
                wait: 1000
            - verifyIdentifier:
                present:
                  - identifier: mx.mappings.pdp.topProductPriceLabel
      - log:
          message: "Retrieving product price from label..."
          color: CYAN
      - if:
          identifier:
            text:
              - identifier: mx.mappings.pdp.topProductPriceLabel
                contains: "/kg"
          then:
            - getString:
                identifier: mx.mappings.pdp.topProductPriceLabel
                attribute: text
                storeIn: topProductPriceLabel
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${topProductPriceLabel}
                getResponse:
                  storeIn: returnedProductPrice
            - log:
                message: "Price got: $${returnedProductPrice}/kg"
                color: CYAN
          else:
            - getString:
                identifier: mx.mappings.pdp.topProductPriceLabel
                attribute: text
                storeIn: returnedProductPrice
            - executeNode:
                file: mx/test/helpers/cart/getPriceFromLabel.js
                args:
                  - value: ${returnedProductPrice}
                getResponse:
                  storeIn: returnedProductPrice
            - log:
                message: "Unit price got: $${returnedProductPrice}"
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product type and stores it in the global variable ${returnedProductType}.
  #              It can be of type 'dual', 'pieces' or 'Weight'. The product does not need to be added to cart.
  - name: mx.functions.pdp.getType
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.dualTypeIdentifier
          then:
            - storeIn:
                key: returnedProductType
                value: "Dual"
            - log:
                message: "The product is of type: ${returnedProductType}."
                color: CYAN
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.pdp.finalCostByWeightLabel
                then:
                  - storeIn:
                      key: returnedProductType
                      value: "Weight"
                  - log:
                      message: "The product is of type: ${returnedProductType}."
                      color: CYAN
                else:
                  - storeIn:
                      key: returnedProductType
                      value: "Pieces"
                  - log:
                      message: "The product is of type: ${returnedProductType}."
                      color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function extracts the product added quantity as pieces and stores it in the global variable:
  # ${returnedProductQuantity}.
  - name: mx.functions.pdp.getProductQuantityAsPieces
    platform: android
    flow:
      - log:
          message: "Extracting product added quantity as pieces..."
          color: CYAN
      - if:
          identifier: 
            text:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
                contains: "g"
          then:
            - failTest:
                message: "The product is not of type Pieces or has not been added to cart yet."
          else:
            - getString:
                identifier: mx.mappings.pdp.productAddedQuantityCounter
                attribute: text
                storeIn: returnedProductQuantity
            - log:
                message: "Quantity got: ${returnedProductQuantity}"
                color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function extracts the product added quantity as weight and stores it in the global variable:
  # ${returnedProductQuantity}.
  - name: mx.functions.pdp.getProductQuantityAsWeight
    platform: android
    flow:
      - log:
          message: "Extracting product added quantity as weight..."
          color: CYAN
      - if:
          identifier: 
            present:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
          then:
            - getString:
                identifier: mx.mappings.pdp.productAddedQuantityCounter
                attribute: text
                storeIn: returnedProductQuantity
            - executeNode:
                file: mx/test/helpers/slp/splitWeightString.js
                args:
                  - value: ${returnedProductQuantity}
                getResponse:
                  storeIn: returnedProductQuantity
            - log:
                message: "Quantity got: ${returnedProductQuantity} grams."
                color: CYAN
          else:
            - failTest:
                message: "The product is not of type weight or has not been added to cart yet."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the correct product is displayed.
  # Param: ${expectedProductName}  [Mandatory]  Full expected product name to be displayed.
  - name: mx.functions.pdp.assertCorrectProductDisplayed
    platform: android
    flow:
      - log:
          message: "Product name: ${expectedProductName}"
          color: CYAN
      - verifyIdentifier:
          text:
            - identifier: mx.mappings.pdp.productNameLabel
              contains: ${expectedProductName}
      - log:
          message: "End function: pdp.assertCorrectProductDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product has been marked as favorite.
  - name: mx.functions.pdp.assertIsFavorite
    platform: android
    flow:
      - log:
          message: "Verifying if the product has been marked as favorite..."
          color: CYAN
      - if:
          identifier:
            contentDescription:
              - identifier: mx.mappings.pdp.favoriteButton
                contains: Eliminar
          then:
            - log:
                message: "The product is marked as favorite."
                color: CYAN
          else:
            - failTest:
                message: "The product is not marked as favorite."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product has not been marked as favorite.
  - name: mx.functions.pdp.assertIsNotFavorite
    platform: android
    flow:
      - log:
          message: "Verifying that the product has not been marked as favorite..."
          color: CYAN
      - if:
          identifier:
            contentDescription:
              - identifier: mx.mappings.pdp.favoriteButton
                contains: Agregar
          then:
            - log:
                message: "The product is not marked as favorite."
                color: CYAN
          else:
            - failTest:
                message: "The product is marked as favorite."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product price.
  # Param  ${expectedPrice}  [Mandatory]  Expected quantity to assert (no need to add the cash symbol "$", needs two 
  # decimals, for example: '30.15').
  - name: mx.functions.pdp.assertPrice
    platform: android
    flow:
      - log:  
          message: "Verifying if the product has the right price..."
          color: CYAN
      - if:
          identifier:
            text:
              - identifier: mx.mappings.pdp.topProductPriceLabel
                contains: '/kg'
          then:
            - verifyIdentifier:
                text:
                  - identifier: mx.mappings.pdp.topProductPriceLabel
                    equals: "$${expectedPrice}/kg"
          else:
            - verifyIdentifier:
                text:
                  - identifier: mx.mappings.pdp.topProductPriceLabel
                    equals: "$${expectedPrice}"
      - log:  
          message: "Expected product price: $${expectedPrice}, matched displayed product price."
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.pdp.assertDetailsDisplayed
    platform: android
    flow:
      - log:  
          message: "Verifying if the product details section is displayed..."
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.pdp.productDetailsSection
          then:
            - scroll:
                direction: up
                untilIdentifier: mx.mappings.pdp.productNameLabel
                scrollLimit: 5
                wait: 1000
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.pdp.productDetailsSection
                scrollLimit: 8
                position: center
                wait: 1000
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.pdp.productDetailsSection
                then:
                  - log:  
                      message: "Product details section is displayed."
                      color: CYAN
                else:
                  - failTest:
                      message: "Product details section is not displayed."
          else:
            - log:  
                message: "Product details section is displayed."
                color: CYAN

  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This function asserts that the product has been added to cart
  - name: mx.functions.pdp.assertAddedToCart
    platform: android
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.addToCartButton
          then:
            - failTest:
                message: "The product has not been added to cart."
          else:
            - log:
                message: "End function: pdp.assertAddedToCart"
                color: BLUE 

  # -------------------------------------------------------------------------------------------------------------------              
  
  # Description: This function asserts that the product has not been added to cart
  - name: mx.functions.pdp.assertNotAddedToCart
    platform: android
    flow: 
      - log:
          message: "Verifying that the product has not been added to cart..."
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.addToCartButton
          then:
            - log:
                message: "The product has not been added to cart."
                color: CYAN 
          else:
            - failTest:
                message: "The product has been added to cart."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as pieces.
  # Param: ${expectedQuantityAsPieces}  [Mandatory]  Quantity of pieces to assert.
  - name: mx.functions.pdp.assertQuantityAsPieces
    platform: android
    flow: 
      - log:  
          message: "Expected quantity as pieces: ${expectedQuantityAsPieces}"
          color: CYAN
      - if:
          identifier:
            text:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
                equals: ${expectedQuantityAsPieces}
          then:
            - log:  
                message: "Expected added quantity as pieces is correct."
                color: CYAN
          else:
            - failTest:  
                message: "Expected added quantity as pieces is incorrect, product may not have been added to cart or product is not of type 'pieces'."

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This method asserts the product quantity as weight
  # Param: ${expectedQuantityAsWeight}  [Mandatory]  Quantity to assert as weight (no need to add the "g").
  - name: mx.functions.pdp.assertQuantityAsWeight
    platform: android
    flow: 
      - log:  
          message: "Verifying the added product quantity as weight..."
          color: CYAN
      - if:
          identifier:
            text:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
                contains: "gr"
          then:
            - if:
                identifier:
                  text:
                    - identifier: mx.mappings.pdp.productAddedQuantityCounter
                      equals: "${expectedQuantityAsWeight} gr"
                then:
                  - log:
                      message: "Expected added quantity as weight: ${expectedQuantityAsWeight} grams, matched displayed added quantity."
                      color: CYAN
                else:
                  - failTest:
                      message: "Expected added quantity as weight: ${expectedQuantityAsWeight} grams, did not match displayed added quantity"
          else:
            - failTest:
                message: "The product may not have been added to cart or product is not of type 'Weight'."
      - if:
          identifier:
            text:
              - identifier: mx.mappings.pdp.productAddedQuantityCounter
                contains: "g"
          then:
            - if:
                identifier:
                  text:
                    - identifier: mx.mappings.pdp.productAddedQuantityCounter
                      equals: "${expectedQuantityAsWeight} g"
                then:
                  - log:
                      message: "Expected added quantity as weight: ${expectedQuantityAsWeight} grams, matched displayed added quantity."
                      color: CYAN
                else:
                  - failTest:
                      message: "Expected added quantity as weight: ${expectedQuantityAsWeight} grams, did not match displayed added quantity."
          else:
            - failTest:
                message: "The product may not have been added to cart or product is not of type 'Weight'."

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function scrolls down to the first carousel displayed
  - name: mx.functions.pdp.scrollDownToFirstCarouselDisplayed
    platform: android
    flow:
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.pdp.firstCarouselDisplayed
          scrollLimit: 1
          wait: 1000

  #--------------------------------------------------------------------------------------------------------------------   

    # Description: This function scrolls down to the mobile icon displayed
  - name: mx.functions.cart.scrollDownToMobileIcon
    platform: android
    flow:
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.cart.mobileIcon
          scrollLimit: 2
          wait: 1000

  #--------------------------------------------------------------------------------------------------------------------        
     

  # Description: This function clicks on add to cart button of specific product and carousel
  # Params: $carouselName [Mandatory]  carousel title name displayed.
  #         ${productName} [Mandatory] product name in carousel
  - name: mx.functions.pdp.you-may-like-carousel.addToCartFromCarousel
    platform: android
    flow:
      - click:
          identifier: mx.mappings.pdp.addToCartButton.carrouselName.addToCartButton
      - log:
          message: "End function: pdp.addToCartFromCarousel"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function gets the product price and saves it in ${returnedPrice} param
  # Params: $carouselName [Mandatory]  carousel title name displayed.
  #         ${productName} [Mandatory] product name in carousel
  - name: mx.functions.pdp.you-may-like-carousel.getProductPrice
    platform: android
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.pdp.addToCartButton.carrouselName.productPriceLabel
          attribute: text
          storeIn: returnedPrice
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${returnedPrice}
          getResponse:
            storeIn: returnedPrice
      - log:
          message: "End function: pdp.you-may-like-carousel.getProductPrice (Price Got: ${returnedPrice})"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function open the first product PDP from specified carousel name
  # Params: ${carouselName} 
  - name: mx.functions.pdp.carousel.openFirstPDPListed
    platform: android
    flow:
      - log:
          message: "Opening first product displayed on 'you may like' carousel ('Productos que podrían gustarte' carousel)"
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.carousel.firstProductContainerOnCarouselByCarouselName
      - log:
          message: "End function: mx.functions.pdp.you-may-like-carousel.openFirstProductListed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------          

  # Description: This function open the first available product PDP from specified carousel name
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  # EDITOR: 
  # Params: ${carouselName} 
  - name: mx.functions.pdp.carousel.openAvailablePDP
    platform: android
    flow:
      - log:
          message: "Opening first product from Carousel: '${carouselName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.pdp.carousel.firstAvailableProduct
      - log:
          message: "End function: mx.functions.pdp.carousel.openFirstPDPListed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:
  #   Gets the discount of the given product. It returns only the number, without '$' symbol or text at the end
  #     (like '/kg', '/pza', etc.).
  # RETURNS:
  #   ${returnedOriginalPrice} If available
  #   ${returnedDiscountAmount} This is the amount that the user will save by purchasing the product. Only if product has discount.
  # AUTHOR:
  #   Belen Garcia(vn532ri)
  - name: mx.functions.pdp.getProductDiscount
    platform: android
    flow:
      # Verifying if product has a discount...
      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.productOriginalPrice # <--VARIABLE--${productName}
          then:
            # Extraction of the Original Price...
            - log:
                message: "Discount found, extracting Original Price value..."
                color: CYAN
            - getString:
                identifier: mx.mappings.pdp.productOriginalPrice # <--VARIABLE--${productName}
                attribute: text
                storeIn: originalPrice
            - executeNode:
                file: mx/test/helpers/utils/getNumberFromPriceString.js
                args:
                  - value: ${originalPrice}
                getResponse:
                  storeIn: returnedOriginalPrice
            # Extraction of the Discount Amount (used later for Order Details)...
            - getString:
                identifier: mx.mappings.pdp.savingsBadge # <--VARIABLE--${productName}
                attribute: text
                storeIn: returnedDiscountAmount
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceString.js
                args:
                  - value: ${returnedDiscountAmount}
                getResponse:
                  storeIn: returnedDiscountAmount
          else:
            - log:
                message: "Discount not found..."
                color: CYAN
      - log:
          message: "Original Price Got: '${returnedOriginalPrice}'"
          color: GREEN_BOLD
      - log:
          message: "Discount Amount Got: '${returnedDiscountAmount}'"
          color: GREEN_BOLD
      - log:
          message: "End function: pdp.getProductDiscount"
          color: BLUE        

#--------------------------------------------------------------------------------------------------------------------
  # Description: This function verifies that no items appear in the stepps
  - name: mx.functions.pdp.assertNoItemsInStepper
    platform: android
    flow:
      - if:
          identifier:
            present:
                - identifier: mx.mappings.pdp.addToCartButton
          then:
            - verifyIdentifier:
                text:
                  - identifier: mx.mappings.pdp.addToCartButton
                    contains: "Agregar"
            - log:
                message: "No items appear in the stepper"
                color: CYAN
          else:
            - failTest:
                message: "There was a problem while trying to obtain the product quantity of the product."
      - log:
          message: "End functions: mx.functions.pdp.assertNoItemsInStepper"
          color: BLUE