#======================================================================================================================
#  AUTHOR: Gustavo Antonio Lopez Cambambia (vn53g21)
#  CREATED: OCt/17/2022
#  REVISION: ---
#
#  Copyright Â© 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This function asserts results displayed and returns the results number on ${returnedElementsResults} param
  - name: mx.functions.slp.assertResultsDisplayed
    flow:
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.slp.filtersContainer
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.slp.resultsSection
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.slp.resultsText
      - getString:
          identifier: mx.mappings.slp.resultsText
          storeIn: elementsResults
      - executeNode:
          file: mx/test/helpers/slp/getElementsResults.js
          args:
            - value: ${elementsResults}
          getResponse:
            storeIn: returnedElementsResults
      - log: 
          message: "${returnedElementsResults} results found"
          color: CYAN
      - log: 
          message: "End function: slp.assertResultsDisplayed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Params:  ${productName}  [Mandatory]  Name of the Product to return its Price.
  # RETURNS: ${returnedProductPieces}
  - name: mx.functions.slp.getProductQuantityAsPieces
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.slp.productQuantityAsPieces
          storeIn: returnedProductPieces
      - log: 
          message: "Quantity got: ${returnedProductPieces}"
          color: CYAN
      - log:
          message: "End function: slp.getProductQuantityAsPieces"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Clicks the add to cart button for the given product.
  # PARAM: ${productName}  [Mandatory]  Name of the product to be added to cart.
  - name: mx.functions.slp.addProductToCart
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.slp.addToCartButton
          then:
            - scroll:
                direction: down
                position: center
                scrollLimit: 3
                untilIdentifier: mx.mappings.slp.addToCartButton
      - click:
          identifier: mx.mappings.slp.addToCartButton
      - log:
          message: "End function: slp.tapAddToCartButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Asserts the displayed quantity of the given product is equal to the expected one. This function expects
  #   that the product quantity is already displayed as pieces. In the case of Dual products, you should switch to Pieces
  #   before executing this function, else the assertion will fail. In the case of Weighable products, the displayed
  #   quantity will never be able to be asserted as pieces.
  # PARAMS:
  #   ${productName}               [Mandatory]  Name of the Product to assert for.
  #   ${expectedQuantityAsPieces}  [Mandatory]  Expected quantity to assert against.
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.slp.assertProductQuantityAsPieces
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - log:
          message: "Expected Quantity: '${expectedQuantityAsPieces}'"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productQuantityAsPiecesOnContainer
          then:
            - log: 
                message: "Assertion Successful: Displayed Quantity is correct"
                color: CYAN
          else:
            - failTest:
                message: "Assertion Failed: Displayed Quantity is not correct or app element was not found"
      - log:
          message: "End function: slp.assertProductQuantityAsPieces"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Gets the unit price of the given product. It returns only the number, without '$' symbol or text at the end (like '/kg', '/pza', etc.).
  # PARAMS:  ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.slp.getUnitProductPrice
    flow:
      - getString:
          identifier: mx.mappings.slp.productPrice
          storeIn: productPrice
      - log:
          message: Fetched price - ${productPrice}
          color: CYAN
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromLabel.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: returnedPrice
      - log:
          message: "End function: slp.getProductPrice (Price Got: ${returnedPrice})"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: Gets the weight of the given product and saves it in the ${returnedProductWeight} global variable.
  # Params: ${productName} [Mandatory]  Name of the Product to return its Price.
  # RETURNS:
  #   ${returnedProductWeight}
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.getProductQuantityAsWeight
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.slp.productQuantityAsWeight
          storeIn: displayedProductWeight
      - log: 
          message: "Displayed Weight: '${displayedProductWeight}'"
          color: CYAN
      - executeNode:
          file: mx/test/helpers/slp/splitWeightString.js
          args:
            - value: ${displayedProductWeight}
          getResponse:
            storeIn: returnedProductWeight
      - log: 
          message: "Weight got: '${returnedProductWeight}'"
          color: CYAN
      - log:
          message: "End function: slp.getProductQuantityAsWeight"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.slp.assertPageDisplayed
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.slp.resultsText
          then:
              - executeFunction:
                  name: mx.functions.utils.scrollToTop
                  params:
                    - name: elementAtTheTop
                      string: mx.mappings.slp.filtersContainer
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.slp.resultsText
            - identifier: mx.mappings.slp.resultsSection
            - identifier: mx.mappings.slp.filtersContainer
      - log:  
          message: "End function: slp.assertPageDisplayed (Displayed)"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function verifies if the product is marked as favorite or not, and clicks the favorite icon on 
  #     SLP of a product defined on param if it isn't marked.
  # Param: ${productName}  [Mandatory]  product name to mark as favorite.
  # AUTHOR: Rodrigo Pacheco C.
  - name: mx.functions.slp.markProductAsFavorite
    flow:
      - log:
          message: "Marking product: ${productName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.slp.getHeartIconDescription
      - executeNode:
          file: mx/test/helpers/slp/getEliminarContainsFlag.js
          args:
            - value: ${heartIconContentDesc}
          getResponse:
              storeIn: containsFlag
      - if:
          condition: ${containsFlag}
          then:
            - log:
                message: "The product is already marked."
                color: CYAN
          else:
            - log:
                message: "Marking product."
                color: CYAN
            - click:
                identifier: mx.mappings.slp.heartIconByProductName
      - log:
          message: "End function: slp.markProductAsFavorite"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Scrolls up until the given product name is found in the screen (max of 20 swipes). This function is
  #   used when you need to interact with a product that is in the results list but is not yet loaded in the view.
  # PARAM:  ${productName}  [Mandatory]  Product name to scroll up into.
  - name: mx.functions.slp.scrollUpToProductByName
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.slp.productByName
          position: center
          scrollLimit: 20
      - if:
          identifier:
            present:
                - identifier: mx.mappings.slp.productByName
          then: 
            - log: 
                message: "Product Found"
                color: CYAN
          else:
            - failTest: 
                message: "Product Not Found"
      - log:
          message: "End function: slp.scrollUpToProductByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function opens a product's PDP by its name.
  # Param: ${productName}  [Mandatory]  Product to open its PDP.
  - name: mx.functions.slp.openProductDetailsByName
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - click:
          identifier: mx.mappings.slp.iconProductByName
      - log:
          message: "End function: slp.openProductDetailsByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function opens the first product listed
  - name: mx.functions.slp.openFirstPDPListed
    flow:
      - log:
          message: "Opening first product listed"
          color: CYAN
      - click:
          identifier: mx.mappings.slp.firstElementListed
      - log:
          message: "End function: mx.functions.slp.openFirstPDPListed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:
  #   This function adds to cart the first product listed.
  # AUTHOR:
  #   Isis Tolentino (vn53dge)
  - name: mx.functions.slp.addToCartFirstProductListed
    flow:
      - log:
          message: "Adding to cart first product listed"
          color: CYAN
      - click:
          identifier: mx.mappings.slp.firstAddToCartButtonListed
      - log:
          message: "End function: slp.addToCartFirstProductListed"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:
  #   This function retrieves the name of the first product listed.
  # AUTHOR:
  #   Teresa Partida (vn55epy)
  - name: mx.functions.slp.getFirstProductListedName
    flow:
      - getString:
          identifier: mx.mappings.slp.firstProductListedName
          storeIn: returnedProductName
      - log:
          message: "Product Name with value: '${returnedProductName}'"
          color: CYAN
      - log:
          message: "End function: slp.getFirstProductListedName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:
  #   This function gets two things the required quantity to activate multi savings promotion and the final price of the 
  #   products with multisavings. It is required to pass a product name with the multi savings promotion badge, otherwise 
  #   function fails. i.e. if multi savings badge contains "3 x $200" the returned values  will be "3" and "200". 
  #   This function does NOT consider if the product has already been added to cart or the actual added quantity of the product already in cart.
  # PARAM:
  #   ${productName}  [Mandatory]
  # RETURNS:
  #   ${returnedPromotionQuantity}    Quantity required to activate Multi Savings promotion once.
  #   ${returnedPromotionPrice}       Final price of the products applying multi savings discount.
  # AUTHOR:
  #   Rodrigo Pacheco (vn53p0i)
  # EDITOR:
  #   Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.slp.getInfoMultiSavingsPromotionBadge
    flow:
      - log:
          message: "[ PARAM: Product Name with Multi-Savings Promotion: '${productName}' ]"
          color: CYAN
      - getString:
          identifier: mx.mappings.slp.multiSavingsBadgeByProductName # <--[PARAM]--${productName}
          storeIn: multiSavingsBadgeText
      - executeNode:
          file: mx/test/helpers/cart/getLeftNumberFromBadge.js
          args:
            - value: ${multiSavingsBadgeText}
          getResponse:
            storeIn: returnedPromotionQuantity
      - executeNode:
          file: mx/test/helpers/cart/getPriceFromBadge.js
          args:
            - value: ${multiSavingsBadgeText}
          getResponse:
            storeIn: returnedPromotionPrice
      - log:
          message: "Promotion quantity got: '${returnedPromotionQuantity}'"
          color: GREEN_BOLD
      - log:
          message: "Promotion price got: '${returnedPromotionPrice}'"
          color: GREEN_BOLD
      - log:
          message: "End function: mx.functions.slp.getInfoMultiSavingsPromotionBadge"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.slp.tapBrandFilterButton
    flow:
      - click:
          identifier: mx.mappings.slp.brandFilterButton
      - log:
          message: "End function: slp.tapBrandFilterButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Function to assert that the filter Brand is applied or not in case is applied is necessary to indicate the number of brands selected
  # PARAMS: 
  #         ${isFilterApplied}        [Mandatory] Boolean to assert if the filter is applied or not [false|true]
  #         ${numberOfBrandsSelected} [Optional] The number of brands that were selected in filter. If 'isFilterApplied' it is 'true' this param is Mandatory
  # AUTHOR: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.slp.assertBrandFilterIsAppliedOrNot
    flow:
      - if:
         condition: ${isFilterApplied} == true
         then:
           - verifyIdentifier:
               present:
                 - identifier: mx.mappings.slp.appliedBrandFilterButton # PARAM: --${numberOfBrandsSelected}--
         else:
           - verifyIdentifier:
               present:
                 - identifier: mx.mappings.slp.notAppliedBrandFilterButton
      - log:
          message: "End function: slp.assertBrandFilterIsAppliedOrNot"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Function to assert the Brand name for N products in SLP
  # PARAMS: ${numProductsToValidate} [Mandartory] The number of products wo verify brand name [from 1 to N]
  # PARAMS: ${expectedBrand}         [Mandartory] Brand Name to assert in products
  # AUTHOR: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.slp.assertBrandNameForProducts
    flow:
      - arithmetic:
          expression: ${numProductsToValidate} + 1
          storeIn: numProductsToValidate
      - loop:
          begin: 1
          end: ${numProductsToValidate}
          storeIndex: index
          mode: increment
          flow:
            - if:
               identifier:
                 notPresent:
                   - identifier: mx.mappings.slp.brandNameTileByIndex # PARAM: --${index}--
               then:
                  - scroll:
                      direction: down
                      untilIdentifier: mx.mappings.slp.brandNameTileByIndex # PARAM: --${index}--
                      scrollLimit: 1
            - getString:
                identifier: mx.mappings.slp.brandNameTileByIndex # PARAM: --${index}--
                storeIn: displayedBrandName
            - log:
                message: "Displayed brand name in product at index '${index}': '${displayedBrandName}'"
            - verifyCondition: "${displayedBrandName} == ${expectedBrand}"
      - log:
          message: "End function: slp.assertBrandNameForProducts"
          color: BLUE

#-------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION:  This function asserts that the desired price range has been selected
  # PARAM:  ${selectedPriceRange} [Mandatory] selected price range in the price filter.
  # AUTHOR: Fernanda Peruyero (vn54e7a)
  - name: mx.functions.slp.assertSelectedPriceRange
    flow:
      - log:
          message: "Selected Price Range: ${selectedPriceRange}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.selectedPriceRange
          then:
            - log:
                message: "Assertion Succeeded: Desired price range has been selected"
                color: GREEN_BOLD
          else:
            - failTest:
                message: "Assertion Failed: Desired price range has not been selected"
      - log:
          message: "End function: mx.functions.slp.assertSelectedPriceRange"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function scrolls to the top of the SLP page, until the sort and filter mapping gets detected
  # AUTHOR: Fernanda Peruyero  (vn54e7a)
  - name: mx.functions.slp.scrollToTop
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.slp.sortAndFilterButton
      - log:
          message: "End function: 'mx.functions.slp.scrollToTop"
          color: BLUE