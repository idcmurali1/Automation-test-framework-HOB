#======================================================================================================================
#  AUTHOR: Gustavo Antonio Lopez Cambambia (vn53g21)
#  CREATED: OCt/17/2022
#  REVISION: ---
#
#  Copyright Â© 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # Description: This function clicks the weight button on SLP of a product defined on param
  # Param: ${productName}
  # AUTOR: ???
  # EDITOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.tapWeightButton
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates # --RETURNS--${x}--${y}--Coordinates-->
          params:
            - name: element
              string: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      # Adjusting element coordinates to click the Weight button relative to the collapsed main button.
      - arithmetic:
          expression: ${x} + 100
          storeIn: x1
      - arithmetic:
          expression: ${y} + 50
          storeIn: y1
      # The first click expands the button so we can show and reach the Weight button.
      - click:
          coordinates: ${x}, ${y}
      - click:
          coordinates: ${x1}, ${y1}
      - log:
          message: "End function: slp.tapWeightButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Scrolls down until the given product name is found in the screen (max of 20 swipes). This function is
  #   used when you need to interact with a product that is in the results list but is not yet loaded in the view.
  # PARAM:  ${productName}  [Mandatory]  Product name to scroll down into.
  # EDITOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.slp.scrollDownToProductByName
    platform: ios
    flow:
      - log:
          message: "Product: ${productName}"
          color: CYAN
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                value: 'true'
          then:
            - log: 
                message: "Product Found"
                color: CYAN
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                position: center
                scrollLimit: 20
                wait: 3000
            - if:
                identifier:
                  visible:
                      - identifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                        value: 'true'
                then: 
                  - log: 
                      message: "Product Found"
                      color: CYAN
                else:
                  - failTest: 
                      message: "Product Not Found"
      - log:
          message: "End function: slp.scrollDownToProductByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Same as function 'mx.functions.slp.scrollDownToProductByName' but it does not product any Tets Failure.
  #   Instead, it returns whether the Product was found or not within the results while scrolling.
  # PARAM:
  #   ${productName}  [Mandatory]  Product name to scroll down into.
  #   ${scrollLimit}  [Mandatory]  Max number of scrolls to perform.
  # RETURNS:
  #   ${returnedProductFound}  Whether or not the Product was found within the results while scrolling.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.slp.scrollDownToProductByName.withoutFailure
    platform: ios
    flow:
      - log:
          message: "Product: ${productName}"
          color: CYAN
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.slp.productByName # <--${productName}--
                value: 'true'
          then:
            - storeIn:
                key: returnedProductFound
                value: true
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.slp.productByName # <--${productName}--
                position: center
                scrollLimit: ${scrollLimit}
                wait: 2500
            - if:
                identifier:
                  visible:
                    - identifier: mx.mappings.slp.productByName # <--${productName}--
                      value: 'true'
                then:
                  - storeIn:
                      key: returnedProductFound
                      value: true
                else:
                  - storeIn:
                      key: returnedProductFound
                      value: false
      - log:
          message: Product Found? (${returnedProductFound})
          color: CYAN
      - log:
          message: "End function: mx.functions.slp.scrollDownToProductByName.withoutFailure"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Asserts the given product name is already added to Cart.
  # PARAM:  ${productName}  [Mandatory]  Product name to assert for. 
  - name: mx.functions.slp.assertProductAddedToCart
    platform: ios
    flow: 
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.addToCartMainButton
          then:
            - log:
                message: "Product added to Cart"
                color: CYAN
          else:
            - failTest:
                message: "Product not added to Cart"
      - log:
          message: "End function: slp.assertProductAddedToCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.slp.TapBackButton
    platform: ios
    flow: 
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.slp.BackButton
      - click: 
          identifier: mx.mappings.slp.BackButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function scrolls up to the specific descriptive name on SLP, the param must be especificated on the test script
  # Param: ${productName}
  - name: mx.functions.slp.ScrollUpToProductByName
    platform: ios
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.slp.ProductByName
          scrollLimit: 20
          position: center

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the add to favorites icon by product name on SLP
  # Param: ${productByName}
  - name: mx.functions.slp.unmarkProductAsFavorite
    platform: ios
    flow:
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.slp.activeAddToFavoritesIcon
      - click: 
          identifier: mx.mappings.slp.activeAddToFavoritesIcon
          
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the quantity of a product on SLP defined on param, also must specify the product name
  # Param: ${quantity}, ${productByName}
  - name: mx.functions.slp.tapDecreaseQuantityButton
    platform: ios
    flow:
      # The first click expands the button so we can show and reach the decrease button.
      - click:
          identifier: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      - loop:
           begin: 0
           end: ${quantity}
           storeIndex: i
           mode: increment
           flow:
                - click:
                    identifier: mx.mappings.slp.decreaseQuantityButton

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function clicks the product pieces button on SLP
  # Param: ${productName}
  - name: mx.functions.slp.tapPiecesButton
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates # --RETURNS--${x}--${y}--Coordinates-->
          params:
            - name: element
              string: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      # Adjusting element coordinates to click the Pieces button relative to the collapsed main button.
      - arithmetic:
          expression: ${x} + 5
          storeIn: x1
      - arithmetic:
          expression: ${y} + 40
          storeIn: y1
      # The first click expands the button so we can show and reach the Pieces button.
      - click:
          coordinates: ${x}, ${y}
      - click:
          coordinates: ${x1}, ${y1}
      - log:
          message: "End function: slp.tapPiecesButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # PARAM: 
  #   ${productName}  [Mandatory]  Name of the product.
  # RETURNS:
  #   ${returnedProductType}
  # AUTHOR:
  #   ???
  # EDITORS:
  #   Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.getProductType
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.slp.addToCartMainButton
      - if:
          identifier: 
              present: 
                - identifier: mx.mappings.slp.UOMSelectorByProductName
          then:
              - storeIn:
                  key: returnedProductType
                  value: Dual
          else:
              - if:
                  identifier:
                    present:
                        - identifier: mx.mappings.slp.weighableProduct
                  then:
                    - storeIn:
                        key: returnedProductType
                        value: Weighable
                  else:
                    - storeIn:
                        key: returnedProductType
                        value: "Pieces"
      - log:
          message: "Product type got: ${returnedProductType}"
          color: CYAN
      - log:
          message: "End function: slp.getProductType"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function asserts the search did not return any results
  - name: mx.functions.slp.assertNoResultsDisplayed
    platform: ios
    flow:
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.slp.noResultsImage
      - verifyIdentifier:
          present:  
            - identifier: mx.mappings.slp.noResultsText
      - verifyIdentifier:
          present:  
            - identifier: mx.mappings.slp.searchErrorMessage
      - verifyIdentifier:
          present:  
            - identifier: mx.mappings.slp.backToHomeButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product defined on ${productByName} param, if the product is not visible then scrolls to find the product
  # Params: ${productByName} [Mandatory]  Name of the Product
  - name: mx.functions.slp.assertProductDisplayed
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productByName
          then:
            - log: "The product was not found, scrolling down"
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.slp.productByName
                scrollLimit: 5
                position: center
                wait: 500
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.slp.productByName
                then: 
                    - log: "The product was found"
                else:
                  - log: "The product was not found"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts if the product defined on ${productByName} was not added to cart
  # Params: ${productByName} [Mandatory]  Name of the Product
  - name: mx.functions.slp.assertProductNotAddedToCart
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.agregarLabelByProductName
          then:
            - log: "The product was not added to cart"
          else:
            - failTest:
                message: "The product was added to cart"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as weight.
  # Param: ${productByName} [Mandatory]  Name of the Product
  # Param: ${expectedQuantityAsWeight} [Mandatory] quantity pieces to assert
  - name: mx.functions.slp.assertProductQuantityAsWeight
    platform: ios
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productQuantityAsWeightOnContainer
          then:
            - log: "The product got the expected weight"
          else:
            - failTest:
                message: "Check if the product was added to cart or is a pieces product"
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the quantity of a product on SLP defined on param
  # Param: ${quantity}    [Mandatory]  Number of times to increment the product quantity.
  # Param: ${productName} [Mandatory]  Name of the product to be increased.
  # AUTHOR: ???
  # EDITOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.increaseProductQuantityBy
    platform: ios
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - log:
          message: "Quantity to increase: ${quantity}"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates # --RETURNS--${x}--${y}--Coordinates-->
          params:
            - name: element
              string: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      # Adjusting element coordinates to click the increment button relative to the collapsed main button.
      - arithmetic:
          expression: ${x} + 100
          storeIn: x1
      - arithmetic:
          expression: ${y} + 10
          storeIn: y1
      # The first click expands the button so we can show and reach the increase button and the second performs the increments.
      - click:
          identifier: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      - click:
          coordinates: ${x1}, ${y1}
          numberOfClicks: ${quantity}
          waitBetweenClicks: 10
      # This waits for the button to collapse, so function can be used exactly before its decrease variation.
      - sleep:
          duration: 3000
      - log:
          message: "End function: slp.increaseProductQuantityBy"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the quantity of a product on SLP defined on param
  # Param: ${quantity}    [Mandatory]  Number of times to increment the product quantity.
  # Param: ${productName} [Mandatory]  Name of the product to be decreased.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.decreaseProductQuantityBy
    platform: ios
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - log:
          message: "Quantity to decrease: ${quantity}"
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates # --RETURNS--${x}--${y}--Coordinates-->
          params:
            - name: element
              string: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      # Adjusting element coordinates to click the decrement button relative to the collapsed main button.
      - arithmetic:
          expression: ${x} + 5
          storeIn: x1
      - arithmetic:
          expression: ${y} + 5
          storeIn: y1
      # The first click expands the button so we can show and reach the increase button and the second performs the decrements.
      - click:
          identifier: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      - click:
          coordinates: ${x1}, ${y1}
          numberOfClicks: ${quantity}
          waitBetweenClicks: 10
      # This waits for the button to collapse, so function can be used exactly before its increase variation.
      - sleep:
          duration: 3000
      - log:
          message: "End function: mx.functions.slp.decreaseProductQuantityBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the product quantity by clicking the increase button.
  # Params: ${productName}  [Mandatory]  Specific product name.
  #         ${quantity}     [Mandatory]  Quantity to increase on clicks.
  # AUTHOR: Rodrigo Pacheco C.
  # EDITO: Octavio Cabrales ZÃ¡rate (vn53g23)
  - name: mx.functions.slp.fastIncreaseProductQuantityBy
    platform: ios
    flow:
      - log:
          message: "Increase quantity: ${quantity}"
          color: CYAN
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      # The first click expands the button.
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates
          params:
            - name: element
              string: mx.mappings.slp.addToCartButton
      - storeIn:
          key: cellphoneAddToCartXDelta
          value: 70
      - arithmetic:
          expression: ${x} + ${cellphoneAddToCartXDelta}
          storeIn: x1 
      - click:
          coordinates: ${x1}, ${y}
          numberOfClicks: ${quantity}
          waitBetweenClicks: 200
      - log:
          message: "End function: slp.fastIncreaseProductQuantityBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the heart icon description
  # Params: ${productName}  [Mandatory]  Specific product name.
  # AUTHOR: Octavio Cabrales ZÃ¡rate (vn53g23)
  - name: mx.functions.slp.getHeartIconDescription
    platform: ios
    flow:
      - getString:
          identifier: mx.mappings.slp.heartIconByProductName
          storeIn: heartIconContentDesc

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Gets the price of the given product. It returns only the number, without '$' symbol or text at the end
  #                 (like '/kg', '/pza', etc.).
  # PARAMS:  ${productName}  [Mandatory]  Name of the product.
  # RETURNS:
  #   ${returnedPrice}
  #   ${returnedOriginalPrice} if available, if not, the same value as '${returnedPrice}' will be returned.
  # EDITORS: 
  #   Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.getProductPrice
    platform: ios
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.slp.productPrice # <--VARIABLE--${productName}
          storeIn: productPrice
      - executeNode:
          file: mx/test/helpers/utils/getNumberFromPriceString.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: returnedPrice
      # Verifying if product has a discount...
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.savingsBadgeByProductName # <--VARIABLE--${productName}
          then:
            - log:
                message: "Discount found, extracting Original Price value..."
                color: CYAN
            - getString:
                identifier: mx.mappings.slp.productPrice # <--VARIABLE--${productName}
                storeIn: originalPrice
            - executeNode:
                file: mx/test/helpers/slp/getOriginalPrice.js
                args:
                  - value: ${originalPrice}
                getResponse:
                  storeIn: returnedOriginalPrice
          else:
            - log:
                message: "Discount not found, returning Current Price..."
                color: CYAN
            - storeIn:
                key: returnedOriginalPrice
                value: ${returnedPrice}
      - log:
          message: "Price Got: '${returnedPrice}'"
          color: CYAN
      - log:
          message: "Original Price Got: '${returnedOriginalPrice}'"
          color: CYAN
      - log:
          message: "End function: slp.getProductPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function opens the first PDP listed that doesn't have any special badges.
  # RETURNS:  ${returnedProductName}
  # AUTHOR:   Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.slp.openPDPWithoutSpecialBadges
    platform: ios
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.slp.productNameWithoutSpecialBadges
          then:
            # Using only the scroll functionality on iOS, causes an infinite loop for some reason.
            - loop:
                begin: 1
                end: 15
                mode: increment
                flow:
                  - scroll:
                      direction: down
                      wait: 2000
                      position: center
                      scrollLimit: 1
                  - if:
                      identifier:
                        present:
                          # This mapping finds the first product on screen after the scroll with the name label visible. 
                          # The product container will not have any type of the special badges.
                          - identifier: mx.mappings.slp.productNameWithoutSpecialBadges
                      then:
                        - break: true
      # This drag action will hide the bottom menu in case it ends on top of the name label or the heart icon.
      - drag:
          from:
            x: 50%
            y: 55%
          to:
            x: 50%
            y: 50%
      - getString:
          # This mapping gets the product name when the product hasn't been marked as favorite yet.
          identifier: mx.mappings.slp.productNameWithoutSpecialBadges
          attribute: value
          storeIn: returnedProductName
      - log:
          message: "Product Name got: '${returnedProductName}'"
          color: GREEN_BOLD
      - click:
          identifier: mx.mappings.slp.productNameWithoutSpecialBadges
      - log:
          message: "End function: mx.functions.slp.openPDPWithoutSpecialBadges"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the quantity of a product on SLP until pay at delivery threshold is exceeded.
  # Param: ${productName} [Mandatory]  Name of the product to be increased.
  # AUTHOR: Isis Tolentino (vn53dge)
  - name: mx.functions.slp.increaseProductQuantityToExceedHomeDeliveryThreshold
    platform: ios
    flow:
      - log:
          message: "Increasing quantity product: ${productName}"
          color: CYAN
      - loop:
          begin: 1
          end: 10
          flow:
            - executeFunction:
                name: mx.functions.top-menu.getSubtotalFromCartIcon # --RETURNS--${returnedSummarySubtotal}-->
            - if:
                condition: ${returnedSummarySubtotal} < 3000
                then:
                  - log:
                      message: "Pay at delivery threshold is not reached yet..."
                      color: CYAN
                  - executeFunction:
                      name: mx.functions.slp.increaseProductQuantityBy
                      params:
                        - name: quantity
                          string: "1"
                        - name: productName
                          string: ${productName}
                  - sleep:
                      duration: 3000
                else:
                  - log:
                      message: "Threshold has been reached."
                      color: CYAN
                  - break: true
      - log:
          message: "End function: slp.increaseProductQuantityToExceedHomeDeliveryThreshold"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function looks for a product name (not added to cart) with the 'Multi-Savings' promotion.
  #                 Retrieves product name and promo type.
  # RETURNS:
  #     ${returnedProductNameWithMultiSavingsPromotion}   Name of the product with the 'Multi-Savings' promotion.
  #     ${returnedPromotionType}                          Type of promotion (always 'MultiSavings')
  # AUTHOR:
  #     Rodrigo Pacheco  (vn53p0i)
  - name: mx.functions.slp.getProductNameWithMultiSavingsPromotion
    platform: ios
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.slp.productNameWithMultiSavingsPromotion
          then:
            # Using only the scroll functionality on iOS, causes an infinite loop for some reason.
            - loop:
                begin: 1
                end: 15
                mode: increment
                flow:
                  - scroll:
                      direction: down
                      wait: 1000
                      position: center
                      scrollLimit: 1
                  - if:
                      identifier:
                        present:
                          # This mapping finds the first product on screen after the scroll with the "Agregar" button by text and the
                          # name label visible. The product container will have the expected promotion.
                          - identifier: mx.mappings.slp.productNameWithMultiSavingsPromotion
                      then:
                        - break: true
      - getString:
          identifier: mx.mappings.slp.productNameWithMultiSavingsPromotion
          storeIn: returnedProductNameWithMultiSavingsPromotion
      - log:
          message: "Name of the product with 'Multi-Savings' promotion got: '${returnedProductNameWithMultiSavingsPromotion}'"
          color: CYAN
      - log:
          message: "Promotion type got: '${returnedPromotionType}'"
          color: CYAN
      - log:
          message: "End function: slp.getProductNameWithMultiSavingsPromotion"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Scrolls down until the given product name is found in the screen (max of 20 swipes). This function is
  #   used when you need to interact with a product that is in the results list but is not yet loaded in the view.
  # PARAM:  ${productName}  [Mandatory]  Product name to scroll down into.
  # AUTHOR: Gustavo Antonio LÃ³pez Cambambia (vn53g21)
  - name: mx.functions.slp.scrollDownToProductWithStockByName
    platform: ios
    flow:
      - log:
          message: "Product: ${productName}"
          color: CYAN
      - if:
          identifier:
            visible:
              - identifier: mx.mappings.slp.iconProductByName # <--[VARIABLE]--${productName}
                value: 'true'
          then:
            - log: 
                message: "Product Found"
                color: CYAN
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                position: center
                scrollLimit: 20
                wait: 3000
            - if:
                identifier:
                  visible:
                      - identifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                        value: 'true'
                then: 
                  - log: 
                      message: "Product Found"
                      color: CYAN
                else:
                  - failTest: 
                      message: "Product Not Found"
      - log:
          message: "End function: slp.scrollDownToProductByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function loops through the SLP view and finds and adds a product wich price is between 2000 and 2999  .
  # PARAMS:
  #     ${minPrice}   Expected minimum price. 
  #     ${maxPrice}   Expected maximum price.
  # RETURNS:
  #     ${returnedProductNameBetweenPriceRange}   Name of the product between the expected range.
  #     ${returnedProductPriceBetweenRange}   Price of the product between the expected range.
  # AUTHOR:
  #     Rodrigo Pacheco  (vn53p0i), Isis Tolentino (vn53dge)
  - name: mx.functions.slp.getProductNameBetweenPriceRange
    platform: ios
    flow:
      # Set up of the returned variables...
      - storeIn:
          key: returnedProductNameBetweenPriceRange
          value: 'null'
      - storeIn:
          key: returnedProductPriceBetweenRange
          value: 'null'
      # This loop determines how many scrolls to perform until a product between the expected price range 
      # is found.
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.slp.productPriceByVisibleAddToCartButton
          then:
            - scroll:
                direction: down
                scrollLimit: 3
                untilIdentifier: mx.mappings.slp.productPriceByVisibleAddToCartButton
      - loop:
          begin: 1
          end: 20
          flow:
            # This loop helps to find a product with price between the range.
            - log:
                message: "Checking currently displayed Products..."
                color: CYAN
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.slp.productPriceByVisibleAddToCartButton
                then:
                  - getString:
                      identifier: mx.mappings.slp.productNameLabelByVisibleAddToCartButton
                      storeIn: productName 
                  - executeFunction:
                      name: mx.functions.slp.getProductPrice # <--VARIABLE--${productName}
                  - executeNode:
                      file: mx/test/helpers/utils/getNumberFromPriceString.js
                      args:
                        - value: ${productPrice}
                      getResponse:
                        storeIn: returnedPrice
                  - if:
                      condition: ${returnedPrice} > ${minPrice} && ${returnedPrice} < ${maxPrice}
                      then:
                        - log:
                            message: Product between expected range found!
                            color: CYAN
                        # Getting the product price...
                        - storeIn:
                            key: returnedProductPriceBetweenPriceRange
                            value: ${returnedPrice}
                        # Getting the product name...
                        - storeIn:
                            key: returnedProductNameBetweenPriceRange
                            value: ${productName}
                        - break: true
                      else:
                        - log:
                            message: Product between expected range not found, scrolling down once!
                            color: CYAN
                        # This drag action will hide the bottom menu in case it ends on top of the name label or the heart icon.
                        - drag:
                            from:
                              x: 50%
                              y: 80%
                            to:
                              x: 50%
                              y: 20%
      - if:
          condition: ${returnedProductNameBetweenPriceRange} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product with between expected price range.
          else:
            - log:
                message: "Name of the product between the expected price range: '${returnedProductNameBetweenPriceRange}'"
                color: CYAN
            - log:
                message: "Price of the product between the expected price range: '${returnedProductPriceBetweenPriceRange}'"
                color: CYAN
      - log:
          message: "End function: slp.getProductNameBetweenPriceRange"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.slp.areResultsDisplayed
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.resultsText
            timeout: 5000
          then:
            - storeIn:
                key: returnedResultsDisplayed
                value: true
          else:
            - storeIn:
                key: returnedResultsDisplayed
                value: false
      - log:
          message: Results displayed? (${returnedResultsDisplayed})
          color: CYAN
      - log:
          message: 'End function: mx.functions.slp.areResultsDisplayed'
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS: ${productName}  [Mandatory]  Name of the product to expand its main button.
  # AUTHOR: Sergio Fernandez (vn53g23)
  - name: mx.functions.slp.expandMainButton
    platform: ios
    flow:
      - log:
          message: 'Product Name: "${productName}"'
          color: CYAN
      - click:
          identifier: mx.mappings.slp.mainButtonByProductName # <--PARAMS--${productName}
      - log:
          message: 'End function: mx.functions.slp.expandMainButton'
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
 
  # AUTHOR: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.slp.tapSortAndFilterButton
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.slp.sortAndFilterButton
      - log:
          message: "End function: slp.tapSortAndFilterButton"
          color: BLUE

  #-------------------------------------------------------------------------------------------------------------------
  # AUTHOR: Fernanda Peruyero (vn54e7a)
  - name: mx.functions.slp.tapPriceFilterButton
    platform: ios
    flow:
      - click:
          identifier: mx.mappings.slp.priceFilterButton
      - log:
          message: "End function: slp.tapPriceFilterButton"
          color: BLUE
#--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function obtains the price of a poduct from the SLP according to their index 
  # PARAM: ${productTileIndex} [Mandatory]  Index of the product tile. Can go from 1 - amount of items shown in SLP 
  # RETURNS: ${returnedProductName} Name of the product according to index
  # AUTHOR: Fernanda Peruyero (vn54e7a)
  - name: mx.functions.slp.getProductPricebyIndex
    platform: ios
    flow:
      - log:
          message: "Index: ${productTileIndex}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productTileByIndex
          then:
              - getString:
                  identifier: mx.mappings.slp.productTileByIndex # <--PARAMS--${productIndex}
                  attribute: label
                  storeIn: returnedProductLabel
              - log:
                  message: "Name of the product: '${returnedProductLabel}'"
                  color: CYAN
          else:
              - scroll:
                  direction: down
              - if:
                  identifier:
                    present:
                      - identifier: mx.mappings.slp.productTileByIndex      
                  then: 
                      - getString:
                          identifier: mx.mappings.slp.productTileByIndex # <--PARAMS--${productIndex}
                          attribute: label
                          storeIn: returnedProductLabel
                      - log:
                          message: "Name of the product: '${returnedProductLabel}'"
                          color: CYAN
                  else:
                      - failTest: 
                          message: "There was a problem while trying to obtain the label of the product"
      - log:
          message: "End function: mx.functions.slp.getProductName"
          color: BLUE
        
#--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function asserts that the price of n items is ordered from lowest to highest
  # PARAMS:
  #     ${numOfProductsToCompare} [Mandatory] Number of items to compare. Can go from 2 - amount of items shown in SLP
  # AUTHOR:
  # AUTHOR: Fernanda Peruyero  (vn54e7a)

  - name: mx.functions.slp.assertPricesFromLowToHigh
    platform: ios
    flow:
     # Set up of the comparison variable
      - storeIn:
          key: previousProductPrice
          value: '0'
      - arithmetic:
          expression: ${numOfProductsToCompare} + 1
          storeIn: numOfProductsToCompare
    #This loop obtains the price of a product depending on the index and compares two prices to determine if they're in order (lowest to highest)  
      - loop:
          begin: 1
          end: ${numOfProductsToCompare}
          storeIndex: index
          flow:
            - executeFunction:
                name: mx.functions.slp.getProductPricebyIndex
                params:
                  - name: productTileIndex
                    string: ${index}
            - storeIn:
                key: productTileLabel
                value: ${returnedProductLabel}
            - executeNode:
                file: mx/test/helpers/slp/getPriceFromProductTileLabel.js
                args:
                  - value: ${productTileLabel}
                getResponse:
                  storeIn: productTilePrice
            - log: "Product # ${index} is: ${productTilePrice}"
            - if:
                condition: ${productTilePrice} >= ${previousProductPrice}
                then:
                  - log:
                      message: "Assertion Succeeded: Products are in order from lower to higher"
                      color: GREEN_BOLD
                  - storeIn: 
                      key: previousProductPrice
                      value: ${productTilePrice}
                else:
                  - failTest: Product are not in order, the price of this product is lower than the price of the previous product!                  
      - log:
          message: "End function: mx.functions.slp.assertPricesFromLowToHigh"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  #DESCRIPTION: This function gets the index of the product by using the quantity in cart
  #PARAMS: 
  # ${itemQuantity} Expected quantity of the product in cart
  #RETURNS:
  # ${returnedProductIndexPath}
  #AUTHOR: Fernanda Peruyero (vn54e7a)
  - name: mx.functions.slp.getInCartProductIndexPathByQuantity
    platform: ios
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productSectionByQuantity
          then:
            - getString:
                  identifier: mx.mappings.slp.productSectionByQuantity
                  attribute: name
                  storeIn: returnedProductIndexPath
            - log:
                message: "Product Index Path: ${returnedProductIndexPath} "
          else:
            - log:
                message: "There was a problem while trying to obtain the product index path"
      - log:
          message: "End function: 'mx.functions.slp.getInCartProductIndexPathByQuantity"
          color: BLUE
 
#--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function gets the name of a given product by its index.
  # PARAMS:
  #   ${indexPath}  [Mandatory]  Index of the product.
  # RETURNS:
  #   ${returnedProductName}
  # AUTHOR:
  #   Fernanda Peruyero (vn54e7a)
  - name: mx.functions.slp.getProductNameByIndexPath
    platform: ios
    flow:
      - try: 
          flow:
            - getString:
                identifier: mx.mappings.slp.productNameByIndexPath # <--VARIABLE--${indexPath}
                attribute: label
                storeIn: returnedProductName
            - log:
                message: "Product Name: '${returnedProductName}'"
                color: CYAN
          catch:
            flow:
              - log: "There was a problem while trying to obtain the product name"
      - log:
          message: "End function: mx.functions.slp.getProductNameByIndexPath"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function verifies the item quantity
  # Params: ${expectedQuantity}  Verify product quantity in ATC button.
  - name: mx.functions.slp.assertItemQuantity
    platform: ios
    flow:
      - log:
                message: "Expected Product quantity: '${expectedQuantity}'"
                color: CYAN
      - if:
          identifier:
            present:
                - identifier: mx.mappings.slp.inCartMainButton
          then:
            - verifyIdentifier:
                label:
                  - identifier: mx.mappings.slp.inCartMainButton
                    contains: "${expectedQuantity}"
          else:
            - failTest:
                message: "There was a problem while trying to obtain the product quantity of the product."
      - log:
          message: "End functions: mx.functions.slp.assertItemQuantity"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # Description: This function verifies that no items appear in the stepps
  # Params: ${productName} Needed to obtain the quantity of the product.
  - name: mx.functions.slp.assertNoItemsInStepper
    platform: ios
    flow:
      - log:
          message: "product name: ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
                - identifier: mx.mappings.slp.AgregarButtonByProductName
          then:
            - verifyIdentifier:
                label:
                  - identifier: mx.mappings.slp.AgregarButtonByProductName
                    contains: "Agregar"
            - log:
                message: "No items appear in the stepper"
                color: CYAN
          else:
            - failTest:
                message: "There was a problem while trying to obtain the product quantity of the product."
      - log:
          message: "End functions: mx.functions.slp.assertItemQuantity"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------

  # Params:   ${productName}  [Mandatory]  Name of the Product to return its Price.
  # RETURNS:  ${returnedQuantity}
  - name: mx.functions.slp.getProductQuantity
    platform: ios
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.slp.productQuantityByProductName #<--PARAM--${productName}
          storeIn: returnedQuantity
      - log:
          message: "Quantity got: '${returnedQuantity}'"
          color: GREEN_BOLD
      - log:
          message: "End function: slp.getProductQuantity"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # DESCRIPTION: This function scroll left in Filters container view on SLP page.
  # NOTE: Workaround iOS function since scroll left is not working well in SauceLabs Simulator 
  # PARAM: ${ShoppingExperience}    [Optional] banner [OD | EA] in which it will perform the scroll left in filters view
  # AUTHOR: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.slp.tapDeleteAllFiltersApplied
    platform: ios
    flow:
      - executeFunction:
          name: mx.functions.utils.scrollToTop
      # To perform a scroll left in filters container view is depending on the banner since filters are arragne different
      - if: # SLP EA Filters: price filter appears on the right side
          condition: "${ShoppingExperience:OD} == 'EA'"
          then:
            - drag:
                from:
                  identifier: mx.mappings.slp.priceFilterButton
                to:
                  identifier: mx.mappings.slp.sortAndFilterButton
          else: # SLP OD Filters: price filtear appears on the left side
            - drag:
                from:
                  identifier: mx.mappings.slp.sortAndFilterButton
                to:
                  identifier: mx.mappings.slp.priceFilterButton
      - click:
          identifier: mx.mappings.slp.deleteFiltersAppliedButton
      - log:
          message: "End function: slp.tapDeleteAllFiltersApplied"
          color: BLUE