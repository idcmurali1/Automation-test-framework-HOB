#======================================================================================================================
#  AUTHOR: Gustavo Antonio Lopez Cambambia (vn53g21)
#  CREATED: OCt/17/2022
#  REVISION: ---
#
#  Copyright Â© 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  - name: mx.functions.slp.tapBackButton
    platform: android
    flow:
      - click: 
          identifier: mx.mappings.slp.backButton
      - log:
          message: "End function: slp.TapBackButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Scrolls down until the given product name is found in the screen (max of 20 swipes). This function is
  #   used when you need to interact with a product that is in the results list but is not yet loaded in the view.
  # PARAM:  ${productName}  [Mandatory]  Product name to scroll down into.
  # EDITOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.slp.scrollDownToProductByName
    platform: android
    flow:
      - log:
          message: "Product: ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
          then:
            - executeFunction:
                name: mx.functions.utils.positionElementToTheCenter
                params:
                  - name: elementToPositionCenter
                    string: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                position: center
                scrollLimit: 25
                wait: 3000
            - if:
                identifier:
                  present:
                      - identifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                then: 
                  - log: 
                      message: "Product Found"
                      color: CYAN
                  - executeFunction:
                      name: mx.functions.utils.positionElementToTheCenter
                      params:
                        - name: elementToPositionCenter
                          string: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                else:
                  - failTest: 
                      message: "Product Not Found"
      - log:
          message: "End function: slp.scrollDownToProductByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function will center the product if it is displayed in the lower section of the screen so it
  #                 shows all of its elements.
  # PARAM:  ${productName}  [Mandatory]  Product name to center.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.centerProductIfDisplayedInTheLowerSectionOfTheScreen
    platform: android
    flow:
      # Extracting Max Screen Size...
      - log:
          message: "Extracting Max Screen Size..."
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates
          params:
            - name: element
              string: mx.mappings.slp.pageContainer
      - storeIn:
          key: maxScreenSize
          value: ${y2}
      - log:
          message: "Max Screen Size: '${maxScreenSize}'" # This is our 100%...
          color: CYAN
      # Getting Product Position (Height)...
      - log:
          message: "Getting Product Position (Height)..."
          color: CYAN
      - executeFunction:
          name: mx.functions.utils.extractElementCoordinates
          params:
            - name: element
              string: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
      - storeIn:
          key: productPosition
          value: ${y}
      - log:
          message: "Product Position (Height): '${productPosition}'"
          color: CYAN
      # Getting Product Position (%)...
      - log:
          message: "Getting Product Position (%)..."
          color: CYAN
      - arithmetic:
          expression: (${productPosition} * 100) / ${maxScreenSize}
          numberOfDecimalPlaces: 0
          storeIn: productPosition
      - log:
          message: "Product Position (%): '${productPosition}%'"
          color: CYAN
      - if:
          condition: ${productPosition} > 75 # If the product is displayed in the lower section of the screen...
          then:
            - log:
                message: "Product is displayed in the lower section of the screen, centering product"
                color: CYAN
            - drag:
                from:
                  x: 50%
                  y: 70%
                to:
                  x: 50%
                  y: 50%
          else:
            - log:
                message: "Product is NOT displayed in the lower section of the screen..."
                color: CYAN
      - log:
          message: "End function: slp.centerProductIfDisplayedInTheLowerSectionOfTheScreen"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Asserts the given product name is already added to Cart.
  # PARAM:  ${productName}  [Mandatory]  Product name to assert for. 
  - name: mx.functions.slp.assertProductAddedToCart
    platform: android
    flow: 
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.slp.addToCartButton
          then:
            - log:
                message: "Product added to Cart"
                color: CYAN
          else:
            - failTest:
                message: "Product not added to Cart"
      - log:
          message: "End function: slp.assertProductAddedToCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function verifies if the product is marked as favorite or not, and clicks the favorite icon on 
  #                  SLP of a product defined on param if it is marked.
  # Param: ${productName}
  - name: mx.functions.slp.unmarkProductAsFavorite
    platform: android
    flow:
      - log:
          message: "Marking product: ${productName}, as favorite..."
          color: CYAN
      - if:
          identifier:
            contentDescription:
              - identifier: mx.mappings.slp.heartIconByProductName
                contains: Agregar
          then:
            - log:
                message: "The product: ${productName}, is not marked as favorite."
                color: CYAN
          else:
            - log:
                message: "Product is marked as favorite, clicking heart icon..."
                color: CYAN
            - click:
                identifier: mx.mappings.slp.heartIconByProductName

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the quantity of a product on SLP defined on param
  # Param: ${quantity}
  - name: mx.functions.slp.tapDecreaseQuantityButton
    platform: android
    flow:
      - loop:
           begin: 0
           end: ${quantity}
           storeIndex: i
           mode: increment
           flow:
                - click:
                    identifier: mx.mappings.slp.decreaseQuantityButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the pieces button on SLP of a product defined on param
  # Param: ${productName}
  - name: mx.functions.slp.tapPiecesButton
    platform: android
    flow:
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.slp.piecesButtonByProductName
      - click:
          identifier: mx.mappings.slp.piecesButtonByProductName

  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS:  ${productName}  [Mandatory]  Product Name.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.slp.tapWeightButton
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.slp.weightButtonByProductName
      - log:
          message: "End function: mx.functions.slp.tapWeightButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # Param: ${productName}  [Mandatory]  Name of the product.
  # RETURNS:
  #   ${returnedProductType}
  # EDITORS: 
  #   Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.getProductType
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.UOMSelectorByProductName
          then:
            - storeIn:
                key: returnedProductType
                value: Dual
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.slp.weighableProduct
                then:
                  - storeIn:
                      key: returnedProductType
                      value: Weight
                else:
                  - storeIn:
                      key: returnedProductType
                      value: Pieces
      - log:
          message: "Product type got: ${returnedProductType}"
          color: CYAN
      - log:
          message: "End function: slp.getProductType"
          color: BLUE
          
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the search did not return any results
  - name: mx.functions.slp.assertNoResultsDisplayed
    platform: android
    flow:
      - verifyIdentifier:
          present: 
            - identifier: mx.mappings.slp.noResultsImage
            - identifier: mx.mappings.slp.noResultsText
            - identifier: mx.mappings.slp.searchErrorMessage
            - identifier: mx.mappings.slp.backToHomeButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product defined on ${productName} param, if the product is not visible then scrolls to find the product
  # Params: ${productName}  [Mandatory]  Partial name of the Product to assert.
  - name: mx.functions.slp.assertProductDisplayed
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productByName
          then: 
            - log: 
                message: "The product: ${productName}, is present."
                color: CYAN
          else:
            - log: 
                message: "The product: ${productName}, is not present, scrolling down to product..."
                color: CYAN
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.slp.productByName
                position: center
                scrollLimit: 20
                wait: 1000
            - if:
                identifier:
                  present:
                      - identifier: mx.mappings.slp.productByName
                then: 
                  - log: 
                      message: "The product: ${productName}, was found."
                      color: CYAN
                else:
                  - failTest: 
                      message: "The product: ${productName}, was not found."

  #-------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts if the product was not added to cart
  # Params ${productName} [Mandatory]  Name of the Product 
  - name: mx.functions.slp.assertProductNotAddedToCart
    platform: android
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.addToCartButton
          then:
            - log: "The product was not added to cart"
          else:
            - failTest:
                message: "The product was added to cart"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as weight.
  # Param: ${productName} [Mandatory]  Name of the Product
  # Param: ${expectedQuantityAsWeight} [Mandatory] quantity pieces to assert
  - name: mx.functions.slp.assertProductQuantityAsWeight
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productQuantityAsWeightOnContainer
          then:
            - log: "The product got the expected weight"
          else:
            - failTest:
                message: "Check if the product was added to cart or is a pieces product"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the quantity of a product on SLP defined on param
  # Param: ${quantity}    [Mandatory]  Number of times to increment the product quantity.
  # Param: ${productName} [Mandatory]  Name of the product to be increased.
  # EDITORS: Isis Tolentino (vn53dge), Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.increaseProductQuantityBy
    platform: android
    flow:
      - log:
          message: "Increase quantity: ${quantity}"
          color: CYAN
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      # this click keeps the main button expanded.
      - click:
          identifier: mx.mappings.slp.mainButtonByProductName
      - click:
          identifier: mx.mappings.slp.increaseQuantityButton
          numberOfClicks: ${quantity}
          waitBetweenClicks: 0250
      - log:
          message: "End function: slp.increaseProductQuantityBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the quantity of a product on SLP defined on param
  # Param: ${quantity}    [Mandatory]  Number of times to increment the product quantity.
  # Param: ${productName} [Mandatory]  Name of the product to be increased.
  # AUTHOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.decreaseProductQuantityBy
    platform: android
    flow:
      - log:
          message: "Decrease quantity: ${quantity}"
          color: CYAN
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      # This wait gives time for the button to collapse and lets the function interact with the elements without errors.
      - sleep:
          duration: 5000
      # This click keeps the main button expanded.
      - click:
          identifier: mx.mappings.slp.mainButtonByProductName # <---PARAMS---${productName}
      - click:
          identifier: mx.mappings.slp.decreaseQuantityButton # <---PARAMS---${productName}
          numberOfClicks: ${quantity}
          waitBetweenClicks: 1
      # This wait gives time for the button to collapse and lets other functions interact with the elements without errors.
      - sleep:
          duration: 5000
      - log:
          message: "End function: slp.decreaseProductQuantityBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the product quantity by clicking the increase button.
  # Params: ${productName}  [Mandatory]  Specific product name.
  #         ${quantity}     [Mandatory]  Quantity to increase on clicks.
  # AUTHOR: Rodrigo Pacheco C.
  # EDITORS: Octavio Cabrales ZÃ¡rate (vn53g23)
  - name: mx.functions.slp.fastIncreaseProductQuantityBy
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.addToCartButton
          then:
            - arithmetic:
                expression: ${quantity} - 1
                storeIn: quantity
            - storeIn:
                key: addAndIncreaseFlag
                value: true
      - executeFunction:
          name: mx.functions.slp.increaseProductQuantityBy
      - if:
          condition: ${addAndIncreaseFlag}
          then:
            - arithmetic:
                expression: ${quantity} + 1
                storeIn: quantity
      - log:
          message: "End function: slp.fastIncreaseProductQuantityBy"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the heart icon description
  # Params: ${productName}  [Mandatory]  Specific product name.
  # AUTHOR: Octavio Cabrales ZÃ¡rate (vn53g23)
  - name: mx.functions.slp.getHeartIconDescription
    platform: android
    flow:
      - getString:
          identifier: mx.mappings.slp.heartIconByProductName
          attribute: content-desc
          storeIn: heartIconContentDesc
      - log:
          message: "End function: slp.getHeartIconDescription"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS: ${productName}  [Mandatory]  Name of the product to expand its main button.
  # AUTHOR: Sergio Fernandez (vn53g23)
  - name: mx.functions.slp.expandMainButton
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - click:
          identifier: mx.mappings.slp.mainButtonByProductName # <--PARAM--${productName}
      - log:
          message: "End function: mx.functions.slp.expandMainButton"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Gets the price of the given product. It returns only the number, without '$' symbol or text at the end
  #                 (like '/kg', '/pza', etc.).
  # PARAMS:  ${productName}  [Mandatory]  Name of the product.
  # RETURNS:
  #   ${returnedPrice}
  #   ${returnedOriginalPrice} if available, if not, the same value as '${returnedPrice}' will be returned.
  # EDITORS: 
  #   Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.slp.getProductPrice
    platform: android
    flow:
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - getString:
          identifier: mx.mappings.slp.productPrice # <--VARIABLE--${productName}
          storeIn: productPrice
      - executeNode:
          file: mx/test/helpers/utils/getNumberFromPriceString.js
          args:
            - value: ${productPrice}
          getResponse:
            storeIn: returnedPrice
      # Verifying if product has a discount...
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productOriginalPrice # <--VARIABLE--${productName}
          then:
            - log:
                message: "Discount found, extracting Original Price value..."
                color: CYAN
            - getString:
                identifier: mx.mappings.slp.productOriginalPrice # <--VARIABLE--${productName}
                attribute: text
                storeIn: originalPrice
            - executeNode:
                file: mx/test/helpers/utils/getNumberFromPriceString.js
                args:
                  - value: ${originalPrice}
                getResponse:
                  storeIn: returnedOriginalPrice
          else:
            - log:
                message: "Discount not found, returning Current Price..."
                color: CYAN
            - storeIn:
                key: returnedOriginalPrice
                value: ${returnedPrice}
      - log:
          message: "Price Got: '${returnedPrice}'"
          color: CYAN
      - log:
          message: "Original Price Got: '${returnedOriginalPrice}'"
          color: CYAN
      - log:
          message: "End function: slp.getProductPrice"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function opens the first PDP listed that doesn't have any special badges.
  # PARAMS:  ${previousList}  [OPTIONAL]  In order to run this function multiple times on the same page
  #                                         it is possible to pass a List generated from a previous
  #                                         execution of this function '${returnedCheckedProductsList}'.
  #                                         Set to 'null' in order to restart the product verification process.
  # RETURNS: ${returnedCheckedProductsList}
  #          ${returnedProductName}
  # AUTHOR:   Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.slp.openPDPWithoutSpecialBadges
    platform: android
    flow:
      # This drag action will hide the bottom menu in case it ends on top of the name label or the heart icon.
      - drag:
          from:
            x: 50%
            y: 55%
          to:
            x: 50%
            y: 50%
      - executeFunction:
          name: mx.functions.slp.getProductNameWithoutSpecialBadges #--RETURNS--${returnedProductNameWithoutSpecialBadges}--${returnedCheckedProductsList}-->
          params:
            - name: previousList
              string: ${previousList}
      - executeFunction:
          name: mx.functions.slp.centerProductIfDisplayedInTheLowerSectionOfTheScreen
          params:
            - name: productName
              string: ${returnedProductNameWithoutSpecialBadges}
      - storeIn:
          key: returnedProductName
          value: ${returnedProductNameWithoutSpecialBadges}
      - log:
          message: "Product Name got: ${returnedProductName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.slp.openProductDetailsByName
          params:
            - name: productName
              string: ${returnedProductNameWithoutSpecialBadges}
      - log:
          message: "End function: mx.functions.slp.openPDPWithoutSpecialBadges"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function loops through the SLP view and retrieves all the product names displayed, if product 
  #                 has a special badge ('Discount', 'Multi-savings', 'Low Stock', etc.) that product's name goes to 
  #                 a list ('List 1' for example, this way we can assert the product has been checked later on), if all
  #                 of the visible products have special badges, flow scrolls down once and starts verifying all od the
  #                 displayed products again, if the product name is already on 'List 1' it is skipped until it finds a
  #                 product without a special badge, and if it does, its name is saved in the returned variable.
  # AUTHOR: Rodrigo Pacheco  (vn53p0i)
  # PARAMS:  ${previousList}  [OPTIONAL]                In order to run this function multiple times on the same page
  #                                                       it is possible to pass a List generated from a previous
  #                                                       execution of this function '${returnedCheckedProductsList}'.
  #                                                       Set to 'null' to restart the product verification process.
  # RETURNS: ${returnedProductNameWithoutSpecialBadges}
  #          ${returnedCheckedProductsList}
  - name: mx.functions.slp.getProductNameWithoutSpecialBadges
    platform: android
    flow:
      - if:
          condition: ${previousList} == null
          then:
            # Construct the string array of checked Product Names looping through the SLP list and returned variable...
            - storeIn:
                key: checkedProductsList
                value: ""
          else:
            # Using existing list...
            - log: 
                message: "Previous list found..."
                color: GREEN_BOLD
            - storeIn:
                key: checkedProductsList
                value: ${previousList}
      # Set up of the returned variable...
      - storeIn:
          key: returnedProductNameWithoutSpecialBadges
          value: 'null'
      # This loop determines how many scrolls to perform until a product without special badges is found, 
      # if scrolls run out, function fails.
      - loop:
          begin: 1
          end: 20
          storeIndex: scrollIndex
          flow:
            # This loop checks if any of the displayed products has a special badge.
            - log:
                message: "Checking currently displayed Products..."
                color: GREEN_BOLD
            - loop:
                begin: 0
                end: 4
                storeIndex: productIndex
                flow:
                  - try:
                      flow:
                        - getString:
                            identifier: mx.mappings.slp.productNameLabelByIndex
                            storeIn: displayedProductName
                      catch:
                        flow:
                          - log:
                              message: "Name label is not visible, returning 'Not Visible'..."
                              color: GREEN_BOLD
                          - storeIn:
                              key: displayedProductName
                              value: 'Not Visible'
                  - log:
                      message: "Displayed Name got [Index: '${productIndex}']: '${displayedProductName}'"
                      color: GREEN_BOLD
                  # Verifying if obtained product name is already on the checked products list
                  - executeNode:
                      file: mx/test/helpers/utils/stringContainsAll.js
                      args:
                        - value: ${checkedProductsList}
                        - value: ${displayedProductName}
                      getResponse:
                        storeIn: isProductChecked
                  - if:
                      condition: ${isProductChecked} == true
                      then:
                        - log:
                            message: "Product already verified, checking next Product..."
                            color: GREEN_BOLD
                      else:
                        - log:
                            message: "Product NOT verified. Checking if product contains special badges..."
                            color: GREEN_BOLD
                        # Verifying if product contains special badges...
                        - if:
                            identifier:
                              notPresent:
                                - identifier: mx.mappings.slp.productWithoutSpecialBadgesByName # <--VARIABLE--${displayedProductName}
                            then:
                              # Append name of product to 'checkedProductsList'...
                              - log:
                                  message: "Product contains special badges, adding product name to checked products list..."
                                  color: GREEN_BOLD
                              - executeNode:
                                  file: mx/test/helpers/utils/appendUniqueToStringArray.js
                                  args:
                                    - value: ${checkedProductsList}
                                    - value: ${displayedProductName}
                                  getResponse:
                                    storeIn: checkedProductsList
                            else:
                              # Product without special badges found, exiting Product Verification loop...
                              - log:
                                  message: "Product without special badges found."
                                  color: GREEN_BOLD
                              - storeIn:
                                  key: returnedProductNameWithoutSpecialBadges
                                  value: ${displayedProductName}
                              - break: true
            - if:
                condition: ${returnedProductNameWithoutSpecialBadges} != null
                then:
                  # If Product without special badges is found, exit scroll loop.
                  - log:
                      message: "Product without special badges found, exiting scroll loop..."
                      color: GREEN_BOLD
                  - break: true
                else:
                  # If desired product hasn't been found with the currently displayed products, then scroll once and repeat...
                  - log:
                      message: "Product without special badges not found, performing scroll number: ${scrollIndex}"
                      color: GREEN_BOLD
                  - drag:
                      from:
                        x: 50%
                        y: 60%
                      to:
                        x: 50%
                        y: 35%
      - if:
          condition: ${returnedProductNameWithoutSpecialBadges} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product without special badges.
          else:
            - log:
                message: "Name of the product without special badges got: '${returnedProductNameWithoutSpecialBadges}'"
                color: GREEN_BOLD
      - storeIn:
          key: returnedCheckedProductsList
          value: ${checkedProductsList}
      - log:
          message: "End function: slp.getProductNameWithoutSpecialBadges"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function loops through the SLP view and retrieves all the product names displayed, if product 
  #                 has a special badge ('Discount', 'Multi-savings', 'Low Stock', etc.) that product's name goes to 
  #                 a list ('List 1' for example, this way we can assert the product has been checked later on), if all
  #                 of the visible products have special badges, flow scrolls down once and starts verifying all od the
  #                 displayed products again, if the product name is already on 'List 1' it is skipped until it finds a
  #                 product without a special badge, and if it does, its name is saved in the returned variable.
  # AUTHOR: Rodrigo Pacheco  (vn53p0i)
  # NOTE: ONLY FOR WEIGHABLE OR DUAL PRODUCTS!!!
  # PARAMS:  ${previousList}  [OPTIONAL]                In order to run this function multiple times on the same page
  #                                                       it is possible to pass a List generated from a previous
  #                                                       execution of this function '${returnedCheckedProductsList}'.
  #                                                       Set to 'null' to restart the product verification process.
  # RETURNS: ${returnedProductNameWithoutSpecialBadges}
  #          ${returnedCheckedProductsList}
  - name: mx.functions.slp.getWeighableProductNameWithoutSpecialBadges
    platform: android
    flow:
      - if:
          condition: ${previousList} == null
          then:
            # Construct the string array of checked Product Names looping through the SLP list and returned variable...
            - storeIn:
                key: checkedProductsList
                value: ""
          else:
            # Using existing list...
            - log: 
                message: "Previous list found..."
                color: CYAN
            - storeIn:
                key: checkedProductsList
                value: ${previousList}
      # Set up of the returned variable...
      - storeIn:
          key: returnedProductNameWithoutSpecialBadges
          value: 'null'
      # This loop determines how many scrolls to perform until a product without special badges is found, 
      # if scrolls run out, function fails.
      - loop:
          begin: 1
          end: 20
          storeIndex: scrollIndex
          flow:
            # This loop checks if any of the displayed products has a special badge.
            - log:
                message: "Checking currently displayed Products..."
                color: CYAN
            - loop:
                begin: 0
                end: 4
                storeIndex: productIndex
                flow:
                  - try:
                      flow:
                        - getString:
                            identifier: mx.mappings.slp.productNameLabelByIndex
                            storeIn: displayedProductName
                      catch:
                        flow:
                          - log:
                              message: "Name label is not visible, returning 'Not Visible'..."
                              color: GREEN
                          - storeIn:
                              key: displayedProductName
                              value: 'Not Visible'
                  - log:
                      message: "Displayed Name got [Index: ['${productIndex}']: '${displayedProductName}'"
                      color: CYAN
                  # Verifying if obtained product name is already on the checked products list
                  - executeNode:
                      file: mx/test/helpers/utils/stringContainsAll.js
                      args:
                        - value: ${checkedProductsList}
                        - value: ${displayedProductName}
                      getResponse:
                        storeIn: isProductChecked
                  - if:
                      condition: ${isProductChecked} == true
                      then:
                        - log:
                            message: "Product already verified, checking next Product..."
                            color: CYAN
                      else:
                        - log:
                            message: "Product NOT verified. Checking if product contains special badges..."
                            color: CYAN
                        # Verifying if product contains special badges...
                        - if:
                            identifier:
                              notPresent:
                                - identifier: mx.mappings.slp.weighableProductWithoutSpecialBadgesByName # <--VARIABLE--${displayedProductName}
                            then:
                              # Append name of product to 'checkedProductsList'...
                              - log:
                                  message: "Product contains special badges, adding product name to checked products list..."
                                  color: CYAN
                              - executeNode:
                                  file: mx/test/helpers/utils/appendUniqueToStringArray.js
                                  args:
                                    - value: ${checkedProductsList}
                                    - value: ${displayedProductName}
                                  getResponse:
                                    storeIn: checkedProductsList
                            else:
                              # Product without special badges found, exiting Product Verification loop...
                              - log:
                                  message: "Product without special badges found."
                                  color: CYAN
                              - storeIn:
                                  key: returnedProductNameWithoutSpecialBadges
                                  value: ${displayedProductName}
                              - break: true
            - if:
                condition: ${returnedProductNameWithoutSpecialBadges} != null
                then:
                  # If Product without special badges is found, exit scroll loop.
                  - log:
                      message: "Product without special badges found, exiting scroll loop..."
                      color: CYAN
                  - break: true
                else:
                  # If desired product hasn't been found with the currently displayed products, then scroll once and repeat...
                  - log:
                      message: "Product without special badges not found, performing scroll number: ${scrollIndex}"
                      color: CYAN
                  - drag:
                      from:
                        x: 50%
                        y: 60%
                      to:
                        x: 50%
                        y: 35%
      - if:
          condition: ${returnedProductNameWithoutSpecialBadges} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product without special badges.
          else:
            - log:
                message: "Name of the product without special badges got: '${returnedProductNameWithoutSpecialBadges}'"
                color: CYAN
      - storeIn:
          key: returnedCheckedProductsList
          value: ${checkedProductsList}
      - log:
          message: "End function: slp.getWeighableProductNameWithoutSpecialBadges"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function loops through the SLP view and retrieves all the product names displayed, it looks for
  #                 a product that has the 'Multi-Savings' promotion, then that product's name goes to a list
  #                 ('List 1' for example, this way we can assert the product has been checked later on), if none
  #                 of the visible products have the 'Multi-Savings' promotion, flow scrolls down once and starts
  #                 verifying all of the displayed products again, if the product name is already on 'List 1' it is
  #                 skipped until it finds a product with the promotion, if it does, its name is saved in the returned variable.
  # NOTE:         It is recommended NOT to use this function in succession, to run again on the same page, scroll
  #                 all the way to the top, and start over.
  # RETURNS:
  #     ${returnedProductNameWithMultiSavingsPromotion}   Name of the product with the 'Multi-Savings' promotion.
  #     ${returnedPromotionType}                          Type of promotion (always 'MultiSavings')
  # AUTHOR:
  #     Rodrigo Pacheco  (vn53p0i)
  - name: mx.functions.slp.getProductNameWithMultiSavingsPromotion
    platform: android
    flow:
      # Set up of the returned variables...
      - storeIn:
          key: returnedProductNameWithMultiSavingsPromotion
          value: 'null'
      - storeIn:
          key: returnedPromotionType
          value: 'MultiSavings'
      # This loop determines how many scrolls to perform until a product the 'Multi-Savings' promotion is found, 
      # if scrolls run out, function fails.
      - loop:
          begin: 1
          end: 20
          storeIndex: scrollIndex
          flow:
            # This loop checks if any of the displayed products has the 'Multi-Savings' promotion.
            - log: "Checking currently displayed Products..."
            - loop:
                begin: 0
                end: 4
                storeIndex: productIndex
                flow:
                  - try:
                      flow:
                        - getString:
                            identifier: mx.mappings.slp.productNameLabelByIndex
                            storeIn: displayedProductName
                      catch:
                        flow:
                          - log:
                              message: "Name label is not visible, returning 'Not Visible'..."
                              color: GREEN
                          - storeIn:
                              key: displayedProductName
                              value: 'Not Visible'
                  - log:
                      message: "['${productIndex}']: '${displayedProductName}'"
                      color: CYAN
                  # Verifying if obtained product name is already on the checked products list
                  - executeNode:
                      file: mx/test/helpers/utils/stringContainsAll.js
                      args:
                        - value: ${checkedProductsList}
                        - value: ${displayedProductName}
                      getResponse:
                        storeIn: isProductChecked
                  - if:
                      condition: ${isProductChecked} == true
                      then:
                        - log:
                            message: "Product already verified, checking next Product..."
                            color: CYAN
                      else:
                        - log:
                            message: "Product NOT verified. Checking if product contains 'Multi-Savings' promotion..."
                            color: CYAN
                        # Verifying if product contains 'Multi-Savings' promotion...
                        - if:
                            identifier:
                              notPresent:
                                - identifier: mx.mappings.slp.productWithMultiSavingsPromotionByName # <--VARIABLE--${displayedProductName}
                            then:
                              # Append name of product to 'checkedProductsList'...
                              - log:
                                  message: "Product does not contain 'Multi-Savings' promotion, adding product name to checked products list..."
                                  color: CYAN
                              - executeNode:
                                  file: mx/test/helpers/utils/appendUniqueToStringArray.js
                                  args:
                                    - value: ${checkedProductsList}
                                    - value: ${displayedProductName}
                                  getResponse:
                                    storeIn: checkedProductsList
                            else:
                              # Product with 'Multi-Savings' promotion found, exiting Product Verification loop...
                              - log:
                                  message: "Product with 'Multi-Savings' promotion found."
                                  color: CYAN
                              - storeIn:
                                  key: returnedProductNameWithMultiSavingsPromotion
                                  value: ${displayedProductName}
                              - break: true
            - if:
                condition: ${returnedProductNameWithMultiSavingsPromotion} != null
                then:
                  # If Product with 'Multi-Savings' promotion is found, exit scroll loop.
                  - log:
                      message: "Product with 'Multi-Savings' promotion found, exiting scroll loop..."
                      color: CYAN
                  - break: true
                else:
                  # If desired product hasn't been found with the currently displayed products, then scroll once and repeat...
                  - log:
                      message: "Product with 'Multi-Savings' promotion not found, performing scroll number: ${scrollIndex}"
                      color: CYAN
                  - drag:
                      from:
                        x: 50%
                        y: 60%
                      to:
                        x: 50%
                        y: 35%
      - if:
          condition: ${returnedProductNameWithMultiSavingsPromotion} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product with 'Multi-Savings' promotion.
          else:
            - executeFunction:
                name: mx.functions.slp.centerProductIfDisplayedInTheLowerSectionOfTheScreen
                params:
                  - name: productName
                    string: ${returnedProductNameWithMultiSavingsPromotion}
            - log:
                message: "Name of the product with 'Multi-Savings' promotion got: '${returnedProductNameWithMultiSavingsPromotion}'"
                color: CYAN
            - log:
                message: "Promotion type got: '${returnedPromotionType}'"
                color: CYAN
      - log:
          message: "End function: slp.getProductNameWithMultiSavingsPromotion"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the quantity of a product on SLP until pay at delivery threshold is exceeded.
  # Param: ${productName} [Mandatory]  Name of the product to be increased.
  # AUTHOR: Isis Tolentino (vn53dge)
  - name: mx.functions.slp.increaseProductQuantityToExceedHomeDeliveryThreshold
    platform: android
    flow:
      - log:
          message: "Increasing quantity product: ${productName}"
          color: CYAN
      - loop:
          begin: 1
          end: 10
          flow:
            - executeFunction:
                name: mx.functions.top-menu.getSubtotalFromCartIcon # --RETURNS--${returnedSummarySubtotal}-->
            - if:
                condition: ${returnedSummarySubtotal} < 3000
                then:
                  - log:
                      message: "Pay at delivery threshold is not reached yet..."
                      color: CYAN
                  - executeFunction:
                      name: mx.functions.slp.increaseProductQuantityBy
                      params:
                        - name: quantity
                          string: "1"
                        - name: productName
                          string: ${productName}
                  - sleep:
                      duration: 3000
                else:
                  - log:
                      message: "Threshold has been reached."
                      color: CYAN
                  - break: true
      - log:
          message: "End function: slp.increaseProductQuantityToExceedHomeDeliveryThreshold"
          color: BLUE

 #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Scrolls down until the given product name is found in the screen (max of 20 swipes). This function is
  #   used when you need to interact with a product that is in the results list but is not yet loaded in the view.
  # PARAM:  ${productName}  [Mandatory]  Product name to scroll down into.
  # AUTHOR: Gustavo Antonio LÃ³pez Cambambia (vn53g21)
  - name: mx.functions.slp.scrollDownToProductWithStockByName
    platform: android
    flow:
      - log:
          message: "Product: ${productName}"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.iconProductByName # <--[VARIABLE]--${productName}
          then:
            - log: 
                message: "Product Found"
                color: CYAN
          else:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                position: center
                scrollLimit: 20
                wait: 3000
            - if:
                identifier:
                  present:
                      - identifier: mx.mappings.slp.productByName # <--[VARIABLE]--${productName}
                then: 
                  - log: 
                      message: "Product Found"
                      color: CYAN
                else:
                  - failTest: 
                      message: "Product Not Found"
      - log:
          message: "End function: mx.functions.slp.scrollDownToProductWithStockByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION:  This function loops through the SLP view and finds and adds a product wich price is between 2000 and 2999  .
  # PARAMS:
  #     ${minPrice}   Expected minimum price. 
  #     ${maxPrice}   Expected maximum price.
  # RETURNS:
  #     ${returnedProductNameBetweenPriceRange}   Name of the product between the expected range.
  #     ${returnedProductPriceBetweenRange}   Price of the product between the expected range.
  # AUTHOR:
  #     Isis Tolentino (vn53dge)
  - name: mx.functions.slp.getProductNameBetweenPriceRange
    platform: android
    flow:
      # Set up of the returned variables...
      - storeIn:
          key: returnedProductNameBetweenPriceRange
          value: 'null'
      - storeIn:
          key: returnedProductPriceBetweenRange
          value: 'null'
      # This loop determines how many scrolls to perform until a product between the expected price range 
      # is found.
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.slp.availableproductPriceByVisibleAddToCartButton
          then:
            - scroll:
                direction: down
                scrollLimit: 6
                untilIdentifier: mx.mappings.slp.availableproductPriceByVisibleAddToCartButton
      - loop:
          begin: 1
          end: 20
          flow:
            # This loop helps to find a product with price between the range.
            - log:
                message: "Checking currently displayed Products..."
                color: CYAN
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.slp.availableproductPriceByVisibleAddToCartButton
                then:
                  - getString:
                      identifier: mx.mappings.slp.availableProductNameLabelByVisibleAddToCartButton
                      storeIn: productName 
                  - executeFunction:
                      name: mx.functions.slp.getProductPrice # <--VARIABLE--${productName}
                  - executeNode:
                      file: mx/test/helpers/utils/getNumberFromPriceString.js
                      args:
                        - value: ${productPrice}
                      getResponse:
                        storeIn: returnedPrice
                  - if:
                      condition: ${returnedPrice} > ${minPrice} && ${returnedPrice} < ${maxPrice}
                      then:
                        - log:
                            message: Product between expected range found!
                            color: CYAN
                        # Getting the product price...
                        - storeIn:
                            key: returnedProductPriceBetweenPriceRange
                            value: ${returnedPrice}
                        # Getting the product name...
                        - storeIn:
                            key: returnedProductNameBetweenPriceRange
                            value: ${productName}
                        - break: true
                      else:
                        - log:
                            message: Product between expected range not found, scrolling down once!
                            color: CYAN
                        # This drag action will hide the bottom menu in case it ends on top of the name label or the heart icon.
                        - drag:
                            from:
                              x: 50%
                              y: 60%
                            to:
                              x: 50%
                              y: 35%
      - if:
          condition: ${returnedProductNameBetweenPriceRange} == null
          then:
            - failTest:
                message: There was a problem trying to retrieve the name of a product with between expected price range.
          else:
            - executeFunction:
                name: mx.functions.utils.positionElementAtTheTop
                params:
                  - name: elementToPositionUp
                    string: mx.mappings.slp.productByName # <--VARIABLE--${productName}
            - log:
                message: "Name of the product between the expected price range: '${returnedProductNameBetweenPriceRange}'"
                color: CYAN
            - log:
                message: "Price of the product between the expected price range: '${returnedProductPriceBetweenPriceRange}'"
                color: CYAN
      - log:
          message: "End function: slp.getProductNameBetweenPriceRange"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Isis Tolentino (vn53dge)
  - name: mx.functions.slp.tapSortAndFilterButton
    platform: android
    flow:
      - click:
          identifier: mx.mappings.slp.sortAndFilterButton
      - log:
          message: "End function: slp.tapSortAndFilterButton"
          color: BLUE
  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Isis Tolentino (vn53dge)
  - name: mx.functions.slp.tapPriceFilterButton
    platform: android
    flow:
      - click:
          identifier: mx.mappings.slp.priceFilterButton
      - log:
          message: "End function: slp.tapPriceFilterButton"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function asserts that the price of n items is ordered from lowest to highest
  # PARAMS:
  #     ${numOfProductsToCompare} [Mandatory] Number of items to compare. Can go from 2 - amount of items shown in SLP
  # AUTHOR:
  # AUTHOR: Fernanda Peruyero  (vn54e7a)

  - name: mx.functions.slp.assertPricesFromLowToHigh
    platform: android
    flow:
     # Set up of the comparison variable
      - storeIn:
          key: previousProductPrice
          value: '0'
      - arithmetic:
          expression: ${numOfProductsToCompare} + 1
          storeIn: numOfProductsToCompare
      - scroll:
          direction: down
    #This loop obtains the price of a product depending on the index and compares two prices to determine if they're in order (lowest to highest)  
      - loop:
          begin: 1
          end: ${numOfProductsToCompare}
          storeIndex: index
          flow:
            - executeFunction:
                name: mx.functions.slp.getProductPricebyIndex
                params:
                  - name: productTileIndex
                    string: ${index}
            - storeIn:
                key: productTilePrice
                value: ${returnedProductPrice}
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${productTilePrice}
                getResponse:
                  storeIn: productTilePrice
            - log: "Product # ${index} costs: ${productTilePrice}"
            - if:
                condition: ${productTilePrice} >= ${previousProductPrice}
                then:
                  - log:
                      message: "Assertion Succeeded: Products are in order from lower to higher"
                      color: GREEN_BOLD
                  - storeIn: 
                      key: previousProductPrice
                      value: ${productTilePrice}
                else:
                  - failTest: Product are not in order, the price of this product is lower than the price of the previous product!                  
      - log:
          message: "End function: mx.functions.slp.assertPricesFromLowToHigh"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function obtains the price of a poduct from the SLP according to their index 
  # PARAM: ${productTileIndex} [Mandatory]  Index of the product tile. Can go from 1 - amount of items shown in SLP 
  # RETURNS: ${returnedProductName} Name of the product according to index
  # AUTHOR: Fernanda Peruyero (vn54e7a)
  - name: mx.functions.slp.getProductPricebyIndex
    platform: android
    flow:
      - log:
          message: "Index: ${productTileIndex}"
          color: CYAN
      # If search is displayed as a list
      - if:
          identifier:
            present:
              - identifier: mx.mappings.slp.productTileByIndex
          then:
              - getString:
                  identifier: mx.mappings.slp.productTileByIndex # <--PARAMS--${productIndex}
                  attribute: text
                  storeIn: returnedProductPrice
              - log:
                  message: "Price of the product: '${returnedProductPrice}'"
                  color: CYAN
         # If search is displayed as a grid
          else:
            - if:
                identifier:
                  present:
                  - identifier: mx.mappings.slp.productTileByIndexGrid
                then:
                    - getString:
                        identifier: mx.mappings.slp.productTileByIndexGrid # <--PARAMS--${productIndex}
                        attribute: text
                        storeIn: returnedProductPrice
                    - log:
                        message: "Price of the product: '${returnedProductPrice}'"
                        color: CYAN
                else:
                    - failTest: 
                          message: "There was a problem while trying to obtain the price of the product"
      - log:
          message: "End function: mx.functions.slp.getProductPricebyIndex"
          color: BLUE

#--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function verifies the item quantity
  # Params: ${expectedQuantity}  Verify product quantity in ATC button.
  # Params: ${productName} Needed to obtain the quantity of the product.
  - name: mx.functions.slp.assertItemQuantity
    platform: android
    flow:
      - if:
          identifier:
            present:
                - identifier: mx.mappings.slp.mainButtonByProductName
          then:
            - log:
                message: "Expected Product quantity: '${expectedQuantity}'"
                color: CYAN
            - verifyIdentifier:
                text:
                  - identifier: mx.mappings.slp.mainButtonByProductName
                    contains: ${expectedQuantity}
          else:
            - failTest:
                message: "There was a problem while trying to obtain the product quantity of the product."
      - log:
          message: "End functions: mx.functions.slp.assertItemQuantity"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  
  # AUTHOR: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.slp.tapDeleteAllFiltersApplied
    platform: android
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.slp.filtersContainer
          scrollLimit: 2
          position: top
      - scroll:
          direction: left
          untilIdentifier: mx.mappings.slp.deleteFiltersAppliedButton
          withinIdentifier: mx.mappings.slp.filtersContainer
          scrollLimit: 2
      - click:
          identifier: mx.mappings.slp.deleteFiltersAppliedButton
      - log:
          message: "End function: slp.tapDeleteAllFiltersApplied"
          color: BLUE