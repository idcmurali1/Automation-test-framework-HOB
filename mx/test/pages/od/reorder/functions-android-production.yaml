#======================================================================================================================
#  AUTHOR: Gustavo Antonio Lopez Cambambia (vn53g21)
#  CREATED: Jul/20/2022
#  REVISION: ---
#
#  Copyright © 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  # -------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function gets the counter of all the products contained in reorder page and store it in ${returnedAllProductsQuantity}
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  - name: mx.functions.reorder.getAllProductsQuantity
    platform: android
    flow:
      - getString:
          identifier: mx.mappings.reorder.allProductsCounter
          attribute: text
          storeIn: returnedAllProductsQuantity
      - executeNode:
          file: mx/test/helpers/department-l3/getTotalFromText.js
          args:
            - value: ${returnedAllProductsQuantity}
          getResponse:
            storeIn: returnedAllProductsQuantity
      - log:
          message: "All products quantity got: ${returnedAllProductsQuantity}"
          color: BLUE
      - log:
          message: "End function: mx.functions.reorder.getAllProductsQuantity"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function add the first three products contained in reorder page and store the products names in 
  # ${returnedProductName1},${returnedProductName2} and ${returnedProductName3} with them respectives prices stored in 
  # ${returnedProductPrice1}, ${returnedProductPrice2} and ${returnedProductPrice1}
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  - name: mx.functions.reorder.addFirstThreeProductsToCart
    platform: android
    flow:
      - loop:
          begin: 1
          end: 4
          storeIndex: i
          mode: increment
          flow:
            - getString:
                identifier: mx.mappings.reorder.productNameByIndex
                attribute: text
                storeIn: returnedProductName
            - if:
                condition: ${i} == 1
                then:
                  - storeIn:
                      key: returnedProductName1
                      value: ${returnedProductName}
            - if:
                condition: ${i} == 2
                then:
                  - storeIn:
                      key: returnedProductName2
                      value: ${returnedProductName}
            - if:
                condition: ${i} == 3
                then:
                  - storeIn:
                      key: returnedProductName3
                      value: ${returnedProductName}
            - executeFunction:
                name: mx.functions.reorder.getProductUnitPriceByIndex
                params:
                  - name: i
                    string: ${i}
            - click:
                identifier: mx.mappings.reorder.addToCartButtonByIndex
            - sleep:
                duration: 5000
            - verifyIdentifier:
                notPresent:
                  - identifier: mx.mappings.reorder.addToCartButtonByIndex
            - click:
                identifier: mx.mappings.reorder.quantityTextByIndex
            
            - executeFunction:
                name: mx.functions.reorder.getProductTypeByIndex
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.reorder.UOMSelectorByIndex
                then:
                  - executeFunction:
                      name: mx.functions.reorder.switchProductToWeight
                  - storeIn:
                      key: isQuantityWeight
                      value: "true"
            - executeFunction:
                name: mx.functions.reorder.getProductQuantityByIndex
            - executeNode:
                file: mx/test/helpers/utils/calculateProductSubtotal.js
                args:
                  - value: ${returnedUnitProductPrice}
                  - value: ${returnedProductQuantity}
                  - value: "${isQuantityWeight}"
                getResponse:
                  storeIn: returnedCalculatedProductSubTotal
            - if:
                condition: ${i} == 1
                then:
                  - storeIn:
                      key: returnedProductPrice1
                      value: ${returnedCalculatedProductSubTotal}
            - if:
                condition: ${i} == 2
                then:
                  - storeIn:
                      key: returnedProductPrice2
                      value: ${returnedCalculatedProductSubTotal}
            - if:
                condition: ${i} == 3
                then:
                  - storeIn:
                      key: returnedProductPrice3
                      value: ${returnedCalculatedProductSubTotal}  
      - log:
          message: "Product name 1 got: '${returnedProductName1}' with price: '${returnedProductPrice1}'"
          color: CYAN
      - log:
          message: "Product name 1 got: '${returnedProductName2}' with price: '${returnedProductPrice2}'"
          color: CYAN
      - log:
          message: "Product name 1 got: '${returnedProductName3}' with price: '${returnedProductPrice3}'"
          color: CYAN
      - log:
          message: "End function: mx.functions.reorder.addFirstThreeProductsToCart"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function gets the product quantity especified in param
  # NOTE: The index param supports only 6 items contained in focus
  # PARAM: ${i} [Mandatory]  Product quantiy to increase
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  - name: mx.functions.reorder.getProductQuantityByIndex
    platform: android
    flow:
      - getString:
          identifier: mx.mappings.reorder.quantityTextByIndex
          attribute: text
          storeIn: returnedProductQuantity
      - executeNode:
          file: mx/test/helpers/utils/sanitizeQuantity.js
          args:
            - value: ${returnedProductQuantity}
          getResponse:
            storeIn: returnedProductQuantity
      - log:
          message: "Product quantity got: ${returnedProductQuantity}"
          color: CYAN
      - log:
          message: "End function: mx.functions.reorder.getProductQuantityByIndex"
          color: BLUE
      
  # -------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function gets the product unit price especified in param
  # NOTE: The index param supports only 6 items contained in focus
  # PARAM: ${i} [Mandatory]  Product quantiy to increase
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  - name: mx.functions.reorder.getProductUnitPriceByIndex
    platform: android
    flow: 
      - getString:
          identifier: mx.mappings.reorder.unitProductPriceByIndex
          attribute: text
          storeIn: returnedUnitProductPrice
      - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${returnedUnitProductPrice}
                getResponse:
                  storeIn: returnedUnitProductPrice
      - log:
          message: "Unit product price got: ${returnedUnitProductPrice}"
          color: CYAN
      - log:
          message: "End function: mx.functions.reorder.getProductUnitPriceByIndex"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function gets the product type especified in param
  # NOTE: The index param supports only 6 items contained in focus
  # PARAM: ${i} [Mandatory]  Product quantiy to increase
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  - name: mx.functions.reorder.getProductTypeByIndex
    platform: android
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.reorder.UOMSelectorByIndex
          then:
            - storeIn:
                key: returnedProductType
                value: Dual
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.reorder.weighableProductByIndex
                then:
                  - storeIn:
                      key: returnedProductType
                      value: Weight
                  - storeIn:
                      key: isQuantityWeight
                      value: 'true'
                else:
                  - storeIn:
                      key: returnedProductType
                      value: Pieces
                  - storeIn:
                      key: isQuantityWeight
                      value: 'false'
      - log:
          message: "Product type got: ${returnedProductType}"
          color: CYAN
      - log:
          message: "End function: mx.functions.reorder.getProductTypeByIndex"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function change the product type to weight based in the index specified in param
  # NOTE: The index param supports only 6 items contained in focus
  # PARAM: ${i} [Mandatory]  Product quantiy to increase
  # AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
  - name: mx.functions.reorder.switchProductToWeight
    platform: android
    flow: 
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.reorder.UOMSelectorByIndex
      - click:
          identifier: mx.mappings.reorder.weightButton
      - log:
          message: "End function: mx.functions.reorder.switchProductToWeight"
          color: BLUE

  # -------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function gets the product name especified in param
  # NOTE: The index param supports only 6 items contained in focus
  # PARAM: ${i} [Mandatory]  Product in grid to select
  # AUTHOR: Pablo Aguilar Huerta (vn57i2p)
  - name: mx.functions.reorder.getProductNameByIndex
    platform: android
    flow: 
      - log:
          message: Looking for product in the index ${i}
          color: CYAN
      - getString:
          identifier: mx.mappings.reorder.productNameByIndex
          attribute: text
          storeIn: returnedProductName
      - log:
          message: "Product name got: ${returnedProductName}"
          color: CYAN
      - log:
          message: "End function: mx.functions.reorder.getProductNameByIndex"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------
  # DESCRIPTION: This function receives a list of Product Names and then returns the Name of the first one that it finds
  #   it is available to be purchased by reviewing the availability of the given ones in the Re-order List.
  #
  # PARAMS:
  #   ${productNamesList}  [Mandatory]  A list of Product Names (separated by "|") which the function will look for their
  #                                     availability in the Re-order List.
  #
  # RETURNS:
  #   ${returnedAvailableProduct}  Name of the first Product, from ${productNamesList}, that is available in the Re-order
  #                                List.
  #
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.reorder.identifyWhichOfTheseProductsIsTheFirstOneAvailableToBePurchased
    platform: android
    flow:
      - log:
          message: "Product Names List: '${productNamesList}'"
          color: CYAN
      # Set default value for ${returnedAvailableProduct} (assume none is available)
      - storeIn:
          key: returnedAvailableProduct
          value: NONE
      - storeIn:
          key: productFound
          value: false
      # Check if there is at least one product in the re-order list...
      - if:
          identifier:
            present:
              - identifier: mx.mappings.reorder.anyProduct
          then: # Products are listed in the re-order list, start process...
            - log:
                message: Checking the products listed in the re-order list...
                color: GREEN
            # Loop a max number of 5 times, each loop checks the products currently displayed on screen...
            - loop:
                begin: 1
                end: 6
                storeIndex: j
                mode: increment
                flow:
                  - log:
                      message: Checking the product currently displayed on screen (attempt ${j})...
                      color: GREEN
                  - numberOfChildElements:
                      identifier: mx.mappings.reorder.productsContainer
                      storeIn: numberOfAvailableProducts
                      filterBy: mx.mappings.reorder.anyAddToCartButton
                  - log:
                      message: "Number of available products on screen: ${numberOfAvailableProducts}"
                      color: GREEN
                  - arithmetic:
                      expression: ${numberOfAvailableProducts} + 1
                      storeIn: numberOfAvailableProducts
                  # Loop through the available products on screen, checking 1 by 1...
                  - loop:
                      begin: 1
                      end: ${numberOfAvailableProducts}
                      storeIndex: i
                      mode: increment
                      flow:
                        - log:
                            message: Checking next product on screen...
                            color: GREEN_BOLD
                        - try:
                            flow:
                              - getString:
                                  identifier: mx.mappings.reorder.availableToBePurchasedProductNameByIndex
                                  storeIn: productNameToCheck
                              - log:
                                  message: "Product Name to check: '${productNameToCheck}'"
                                  color: GREEN_BOLD
                              - executeNode:
                                  file: mx/test/helpers/utils/arrayContains.js
                                  args:
                                    - value: ${productNamesList}
                                    - value: ${productNameToCheck}
                                    - value: string
                                  getResponse:
                                    storeIn: productMatchAnyOfTheProductNamesList
                              - if:
                                  condition: ${productMatchAnyOfTheProductNamesList} == true
                                  then:
                                    - log:
                                        message: This product belongs to the provided productNamesList!
                                        color: GREEN_BOLD
                                    - log:
                                        message: "First Product Available to be Purchased Found!"
                                        color: GREEN_BOLD
                                    - storeIn:
                                        key: returnedAvailableProduct
                                        value: ${productNameToCheck}
                                    - storeIn:
                                        key: productFound
                                        value: true
                                    - break: true
                            catch:
                              flow:
                                - log:
                                    message: Not able to get product name, skipping product.
                                    color: GREEN
                  - if:
                      condition: ${productFound} == true
                      then:
                        - break: true
                      else:
                        - scroll:
                            direction: down
                            wait: 3000
          else: # No products are listed in the re-order list...
            - log:
                message: There are no Products listed in the Re-order Page.
                color: GREEN
            - log:
                message: Cannot determine which of the given products is the first one available to be purchased.
                color: GREEN
      # Log the product found...
      - log:
          message: "First Product Available to be Purchased: '${returnedAvailableProduct}'."
          color: CYAN
      - log:
          message: "End function: mx.functions.reorder.identifyWhichOfTheseProductsIsTheFirstOneAvailableToBePurchased"
          color: BLUE