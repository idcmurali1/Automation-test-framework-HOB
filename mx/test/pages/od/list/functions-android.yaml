#======================================================================================================================
#  AUTHOR: Gustavo Antonio Lopez Cambambia (vn53g21)
#  CREATED: Jan/09/2023
#  REVISION: ---
#
#  Copyright Â© 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

# Description: This function scrolls down to specific product
  # Param: ${productName}  [Mandatory]  specific product name.
  - name: mx.functions.list.scrollDownToProduct
    platform: android
    flow: 
      - scroll: 
          direction: down
          untilIdentifier: mx.mappings.list.productByName
          position: center
          scrollLimit: 8
          wait: 1000

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function scrolls up to specific product
  # Param: ${productName}  [Mandatory]  specific product name.
  - name: mx.functions.list.scrollUpToProduct
    platform: android
    flow: 
      - scroll: 
          direction: up
          untilIdentifier: mx.mappings.list.productByName
          position: center
          scrollLimit: 8
          wait: 1000

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on needed quantity drop down menu and clicks on the quantity specified on param
  # Params: ${productName}  [Mandatory]  specific product name
  #         ${spinnerQuantity} [Mandatory] needed quantity of specific product
  - name: mx.functions.list.changeNeededQuantity
    platform: android
    flow:
      - log:
          message: "Clicking on ${productName} quantity spinner button"
          color: CYAN 
      - click:
          identifier: mx.mappings.list.neededQuantityButton
      - log:
          message: "Finding quantity"
          color: CYAN
      - if:
          identifier:
            present:
              - identifier: mx.mappings.list.spinnerQuantityInContainer
          then:
            - click:
                identifier: mx.mappings.list.spinnerQuantityInContainer
            - log:
                message: "Quantity found"
                color: CYAN
          else:
            - log:
                message: "Scrolling to find quantity"
                color: CYAN
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.list.spinnerQuantityInContainer
                position: center
                scrollLimit: 8
                wait: 1000
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.list.spinnerQuantityInContainer
                then:
                  - click:
                      identifier: mx.mappings.list.spinnerQuantityInContainer
                  - log:
                      message: "Quantity found"
                      color: CYAN
                else:
                  - failTest:
                      message: "Quantity not found or not present"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the product quantity by clicking on the plus button.
  # Params: ${productName}  [Mandatory]  Specific product name.
  #         ${quantity}     [Mandatory]  Quantity to increase on clicks.
  # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.list.increaseProductQuantityBy
    platform: android
    flow:
      - log:
          message: "Increase Quantity: '${quantity}'"
          color: CYAN
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          mode: increment
          flow:
            - click:
                identifier: mx.mappings.list.increaseButtonByProductName # <--PARAMS--${productName}
      - log:
          message: "End function: list.increaseProductQuantityBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function decreases the product quantity clicking on plus button.
  # Params: ${productName}  [Mandatory]  Specific product name.
  #         ${quantity}     [Mandatory]  Quantity to decrease on clicks.
  - name: mx.functions.list.decreaseProductQuantityBy
    platform: android
    flow:
      - log:
          message: "Decrease quantity: ${quantity}, for product: ${productName}"
          color: CYAN
      - loop:
          begin: 0
          end: ${quantity}
          mode: increment
          flow:
            - click:
                identifier: mx.mappings.list.decreaseButtonByProductName
      - log:
          message: "End function: list.decreaseProductQuantityBy"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the pieces button of specific product
  # Param: ${productName}  [Mandatory]  specific product name.
  - name: mx.functions.list.switchProductToPieces
    platform: android
    flow: 
      - click:
          identifier: mx.mappings.list.piecesButtonByProductName
      - log: 
          message: "${productName} pieces button clicked"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks the weight button of specific product
  # Param: ${productName}  [Mandatory]  specific product name.
  - name: mx.functions.list.switchProductToWeight
    platform: android
    flow: 
      - click:
          identifier: mx.mappings.list.weightButtonByProductName
      - log: 
          message: "${productName} weight button clicked"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function gets the product subtotal of a specific product and stores it in the global variable ${returnedProductSubTotalPrice}
  # Param: ${productName}  [Mandatory]  specific product name.
  - name: mx.functions.list.getProductSubtotal
    platform: android
    flow: 
      - getString:
          identifier: mx.mappings.list.productSubTotalPriceByProductName
          attribute: text
          storeIn: productSubTotalPrice
      - executeNode:
          file: mx/test/helpers/slp/sanitizePrice.js
          args:
            - value: ${productSubTotalPrice}
          getResponse:
            storeIn: returnedProductSubTotalPrice
      - log: 
          message: "the product: ${productName}, has a subtotal of: $${returnedProductSubTotalPrice}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product quantity of specific weighable product
  # Param: ${productName}  [Mandatory]  specific product name.
  - name: mx.functions.list.getProductQuantityAsWeight
    platform: android
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.list.piecesProductTypeByName 
          then:
            - failTest:
                message: "Cannot obtain weight, the ${productName} product is a pieces product"
          else:
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.list.weightProductTypeByName
                then:
                  - getString:
                      identifier: mx.mappings.list.weightProductTypeByName
                      attribute: text
                      storeIn: productQuantityAsWeight
                  - executeNode:
                      file: mx/test/helpers/utils/sanitizeQuantity.js
                      args:
                        - value: ${productQuantityAsWeight}
                      getResponse:
                        storeIn: returnedProductQuantityAsWeight
                  - log:
                      message: "Weight got for the product ${productName}: ${returnedProductQuantityAsWeight} grams."
                      color: CYAN
                else:
                  - if:
                      identifier:
                        present:
                          - identifier: mx.mappings.list.addToCartButtonByProductName
                      then:
                        - failTest:
                            message: "Cannot obtain the ${productName} weight, the product is not added to cart"
      - log:
          message: "End function: list.getProductQuantityAsWeight"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function gets the product name by his position number on page
  # Param: ${positionNumber}  [Mandatory]  specific product position on screen.
  - name: mx.functions.list.getProductNameByPosition
    platform: android
    flow: 
      - getString:
           identifier: mx.mappings.list.productNameByPosition
           attribute: text
           storeIn: returnedProductNameByPosition
      - log:
          message: "Product name got for the position number ${positionNumber} is: ${returnedProductNameByPosition}"
          color: CYAN

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function assert the estimated total displayed in page
  # Param: ${expectedEstimatedTotal}  [Mandatory]  specific estimated total to assert.must be include $ at the begin and include 2 decimals at the end.
  - name: mx.functions.list.assertEstimatedTotal
    platform: android
    flow: 
      - log: 
          message: Expected total - ${expectedEstimatedTotal}
          color: CYAN
      - getString:
          identifier: mx.mappings.list.estimatedTotalText
          attribute: text
          storeIn: returnedEstimatedTotal
      - log: 
          message: Extracted total - ${returnedEstimatedTotal}
          color: CYAN
      - if:
          condition: ${returnedEstimatedTotal} == '$${expectedEstimatedTotal}'
          then:
            - log:
                message: The expected estimated total is equal than displayed estimated total
                color: CYAN
          else:
            - failTest:
                message: The expected estimated total is not equal than displayed estimated total
      - log:
          message: "End function: list.assertEstimatedTotal"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function assert the total products count displayed in page
  # Param: ${expectedTotalProductsCount}  [Mandatory]  specific number to assert.
  # Author: ???
  # Param: Osmar JuÃ¡rez (vn56dce)
  - name: mx.functions.list.assertTotalProductsCount
    platform: android
    flow:
      - if:
          identifier:
            text:
              - identifier: mx.mappings.list.totalItemsCounter
                contains: "${expectedTotalProductsCount} artÃ­culo"
          then:
            - log:
                message: The expected total products count equals the displayed total product count.
                color: CYAN
          else:
            - failTest:
                message: The expected total products count does not equal the displayed total products count.

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This method asserts the items count displayed
  # Param: ${expectedProductsCount} [Mandatory] Expected products count
  - name: mx.functions.list.assertTotalProductsDisplayed
    platform: android
    flow: 
      - log:
          message: Validating that items count equals than the expected...
          color: CYAN
      - numberOfChildElements:
          identifier: mx.mappings.list.itemsContainer
          storeIn: returnedProductsCount
          filterBy: mx.mappings.list.categoryCount
      - log:
          message: The returned products count is ${returnedProductsCount}, now validating with the expected count...
          color: CYAN
      - verifyValue: 
          identifier: ${returnedProductsCount}
          equals: ${expectedProductsCount} 
      - log:
          message: The products count matched!
          color: CYAN   

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.list.delete-product-popup.tapClose
    platform: android
    flow:
      - log:
          message: "Closing popup..."
          color: CYAN
      - click:
          identifier: mx.mappings.list.delete-product-popup.closeButton

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.list.isListEmpty
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.list.emptyTitle
              - identifier: mx.mappings.list.emptySubtitle
          then:
            - storeIn:
                key: returnedIsListEmpty
                value: true
          else:
            - storeIn:
                key: returnedIsListEmpty
                value: false
      - log:
          message: "End function: list.isListEmpty (${returnedIsListEmpty})"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # AUTHOR: Rodrigo Pacheco C. (vn53p0i)
  - name: mx.functions.list.assertListIsEmpty
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.list.emptyTitle
              - identifier: mx.mappings.list.emptySubtitle
          then:
            - log:
                message: "List is Empty."
                color: CYAN
          else:
            - failTest:
                message: "Failed: List is not empty."
      - log:
          message: "End function: list.assertListIsEmpty"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  - name: mx.functions.list.emptyList
    platform: android
    flow:
      - executeFunction:
          name: mx.functions.list.isListEmpty
      - if:
          condition: ${returnedIsListEmpty} == true
          then:
            - log:
                message: "List is empty already."
                color: CYAN
          else:
            - log:
                message: "List is not empty. Emptying list..."
                color: CYAN
            - loop:
                begin: 1
                end: 50
                flow:
                  - if:
                      identifier:
                        present:
                          - identifier: mx.mappings.list.deleteButtonGeneral
                      then:
                        - click:
                            identifier: mx.mappings.list.deleteButtonGeneral
                        - click:
                            identifier: mx.mappings.list.delete-product-popup.deleteButton
                        - sleep:
                            duration: 1500
                      else:
                        - log:
                            message: "List is now empty."
                            color: CYAN
                        - break: true
      - log:
          message: "End function: list.emptyList"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function asserts a specific product is not listed.
  # PARAM: ${productName}  [Mandatory]  Product name to validate.
  # AUTHOR: ???
  # EDITOR: Rodrigo Pacheco (vn53p0i)
  - name: mx.functions.list.assertProductNotListed
    platform: android
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.lists.locationBar
          then:
            - executeFunction:
                name: mx.functions.utils.scrollToTop
                params:
                  - name: elementAtTheTop
                    string: mx.mappings.lists.locationBar
      - scroll:
          direction: down
          scrollLimit: 5
          untilIdentifier: mx.mappings.list.productByName # <--PARAMS--${productName}
      - verifyIdentifier:
          notPresent:
            - identifier: mx.mappings.list.productByName # <--PARAMS--${productName}
      - log:
          message: "End function: list.assertProductNotListed"
          color: BLUE
