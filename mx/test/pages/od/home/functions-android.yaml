#======================================================================================================================
#    AUTHOR: Isis Rojas Tolentino (vn53dge)
#   CREATED: Oct/17/2022
#  REVISION: ---
#
#  Copyright © 2022 Walmart. All rights reserved.
#======================================================================================================================

functions:

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: Scrolls up until WalmartPass section is displayed on home.
  - name: mx.functions.home.scrollUpToWPBanner
    platform: android
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.home.wpBannerContainer
          position: center
          scrollLimit: 8 

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: Scrolls down until WalmartPass section is displayed on home.
  - name: mx.functions.home.scrollDownToWPBanner
    platform: android
    flow:
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.home.wpBannerContainer
          position: center
          scrollLimit: 8

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: Scrolls up until promotions carousel is displayed on home.
  - name: mx.functions.home.scrollUpToPromotionsCarousel
    platform: android
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.home.promotionsCarouselContainer
          position: center
          scrollLimit: 8

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: Scrolls up until the given carousel name is displayed on home
  # Param: ${carouselName}  [Mandatory]  Name of the carousel to scroll into home.
  # carouselName examples:
  #     - Mi Belleza
  #     - ¡Recibe hoy mismo!
  #     - Panadería
  #     - Lácteos
  #     - Dulces y botanas
  #     - Electrónica
  #     - Hogar
  #     - Más opciones para ti
  #     - Apoyo en los básicos de tu canasta
  - name: mx.functions.home.scrollUpToCarousel
    platform: android
    flow:
      - scroll:
          direction: up
          untilIdentifier: mx.mappings.home.carouselNameTitle
          position: center
          scrollLimit: 8

  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS:
  #     ${carouselName}  [Mandatory]  Name of the carousel to scroll into.
  #         Input Values Examples:  [ Mi Belleza | ¡Recibe hoy mismo! | Panadería | Lácteos | Dulces y botanas | Tus productos | ... ]
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.home.scrollDownToCarousel
    platform: android
    flow:
      - log:
          message: "Carousel Name: '${carouselName}'"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.home.carouselNameTitle # <--PARAM--${carouselName}
          then:
            - scroll:
                direction: down
                untilIdentifier: mx.mappings.home.carouselNameTitle # <--PARAM--${carouselName}
                position: center
                scrollLimit: 12
                wait: 1000
      - verifyIdentifier:
          present:
            - identifier: mx.mappings.home.carouselNameTitle # <--PARAM--${carouselName}
      - executeFunction:
          name: mx.functions.utils.centerElementVerticallyWithinContainer
          params:
            - name: mappingOfContainer
              string: mx.mappings.home.pageContainer
            - name: mappingOfElementToCenter
              string: mx.mappings.home.carouselNameTitle # <--PARAM--${carouselName}
            - name: searchDirection
              string: down
      - log:
          message: "End function: home.scrollDownToCarousel"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: get the carousel name dispalyed in screen
  # Param returned: ${returnedCarouselName}
  # Author: Gustavo Lopez
  # Editor: Osmar Juárez (vn56dce)
  - name: mx.functions.home.getCarouselName
    platform: android
    flow:
      - getString:
          identifier: mx.mappings.home.carousel.titleContainer
          storeIn: returnedCarouselName
      - log:
          message: "Returned carousel name: '${returnedCarouselName}'"
          color: CYAN
      - log:
          message: "End function: 'mx.functions.home.getCarouselName'"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function moves up a specific section
  - name: mx.functions.home.moveSectionToTop
    platform: android
    flow:
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.home.carouselNameTitle
          position: up
          scrollLimit: 1
      - log:
          message: "End function: 'mx.functions.home.moveSectionToTop'"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Adds the first product that is able to be added to Cart which price is lower than the given pice limit.
  #   The function scrolls down up to 10 times looking for products that meet the criteria. If the function runs out of
  #   tries and no product was added, the function will fail. If the function succeeded, it will return the name and
  #   price of the product added.
  # PARAMS:
  #   ${priceLimit}  [Mandatory]  Price limit.
  # RETURNS:
  #   ${returnedProductName}   Name of the product that was added to Cart.
  #   ${returnedProductPrice}  Price of the product that was added to Cart.
  # AUTHOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.home.addFirstProductToCartByPriceLimit
    platform: android
    flow:
      - log:
          message: "Price Limit: ${priceLimit}"
          color: CYAN
      - storeIn:
          key: productAdded
          value: false
      # Scroll down up to 10 times to find the first product container...
      - scroll:
          direction: down
          untilIdentifier: mx.mappings.home.productContainer
          scrollLimit: 10
      # Iterate 10 times downwards to look for products...
      - loop:
          begin: 1
          end: 11
          flow:
            - numberOfChildElements:
                identifier: mx.mappings.home.pageContainer
                filterBy: mx.mappings.home.primaryPriceGeneric
                # filterBy: mx.mappings.home.productContainer
                storeIn: productsDisplayedCount
            # Check if products are already displayed...
            - if:
                condition: ${productsDisplayedCount} == 0
                then:
                  # If no products are displayed, just scroll down 1 time...
                  - scroll:
                      direction: down
                      scrollLimit: 1
                else:
                  - scroll:
                      direction: down
                      untilIdentifier: mx.mappings.home.primaryPriceGeneric
                      # untilIdentifier: mx.mappings.home.productContainer
                      position: center
                  # If products are displayed, iterate through them...
                  - loop:
                      begin: 1
                      end: ${productsDisplayedCount}
                      storeIndex: i
                      flow:
                        # Get product price...
                        - getString:
                            identifier: mx.mappings.home.primaryPriceByIndex
                            storeIn: priceOfProduct
                        - executeNode:
                            file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
                            args:
                              - value: ${priceOfProduct}
                            getResponse:
                              storeIn: cleanedPriceOfProduct
                        # Check if price is <= price limit...
                        - if:
                            condition: ${cleanedPriceOfProduct} <= ${priceLimit}
                            then:
                              # If price is <= price limit, check if it can be added to cart...
                              - getString:
                                  identifier: mx.mappings.home.addToCartByIndex
                                  storeIn: displayedText
                              # Check if product can be added to cart...
                              - if:
                                  condition: ${displayedText} == 'Agregar'
                                  then:
                                    # If so, add it to cart, flag product was added, and break the loop...
                                    - click:
                                        identifier: mx.mappings.home.addToCartByIndex
                                    - sleep:
                                        duration: 2000
                                    - getString:
                                        identifier: mx.mappings.home.productNameByIndex
                                        storeIn: productName
                                    - storeIn:
                                        key: productAdded
                                        value: true
                                    - break: true
                                    # If not, do nothing...
                              # If price is not <= price limit, allow the loop to continue to the next products...
                  # Once loop through products finished, check if product was added...
                  - if:
                      condition: ${productAdded} == true
                      then:
                        # If so, break the outer loop...
                        - break: true
                      else:
                        # If not, scroll down to try one more time...
                        - scroll:
                            direction: down
                            scrollLimit: 1
      # Once the outer loop finished, check if product was added..
      - if:
          condition: ${productAdded} == true
          then:
            # If so, return the name and price and close function...
            - storeIn:
                key: returnedProductName
                value: ${productName}
            - storeIn:
                key: returnedProductPrice
                value: ${cleanedPriceOfProduct}
            - log:
                message: "Product Added to Cart: ${returnedProductName}"
                color: CYAN
            - log:
                message: "Product Price: ${returnedProductPrice}"
                color: CYAN
            - log:
                message: "End function: home.addFirstProductToCartByPriceLimit"
                color: BLUE
          else:
            # If not, fail test...
            - failTest:
                message: "No product was able to be added to cart."

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function click on wp banner.
  - name: mx.functions.home.wp-banner.tapBanner
    platform: android
    flow: 
      - click: 
          identifier: mx.mappings.home.wpBannerContainer

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function click on subscribe button inside wp banner.
  - name: mx.functions.home.wp-banner.tapSubscribe
    platform: android
    flow: 
      - click: 
          identifier: mx.mappings.home.wp-banner.subscribeButton
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on the given option into "most popular" section
  # Param: ${mostPopularOption}  [Mandatory]  Name of the option to be clicked.
   # mostPopularOption examples:
  #     - Artículos para el hogar y autos
  #     - Juguetería
  #     - Electrónica
  #     - Ropa y zapatería
  #     - Carne y pescado
  #     - Farmacia
  - name: mx.functions.home.most-popular-section.tapOption
    platform: android
    flow:
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.home.most-popular-section.optionButton
      - click: 
          identifier: mx.mappings.home.most-popular-section.optionButton

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on current promotion inside Promotions Carousel.
  - name: mx.functions.home.promotions-carousel.tapCurrentPromotion
    platform: android
    flow: 
      - click: 
          identifier: mx.mappings.home.promotionsCarouselContainer

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls left inside promotions carousel.
  - name: mx.functions.home.promotions-carousel.swipeLeft
    platform: android
    flow:
      - scroll:
          direction: left
          withinIdentifier: mx.mappings.home.promotionsCarouselContainer
          scrollLimit: 1

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls right inside promotions carousel.
  - name: mx.functions.home.promotions-carousel.swipeRight
    platform: android
    flow:
      - scroll:
          direction: right
          withinIdentifier: mx.mappings.home.promotionsCarouselContainer
          scrollLimit: 1
  
   #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function gets the total number of views in the promotional carousel (Hero POV)
  #              carousel also known as "Hero POV".
  # AUTHOR: Osmar Juárez (vn56dce) 
  - name: mx.functions.home.promotions-carousel.getTotalNumberOfPromotions
    platform: android
    flow:
      - getString:
          attribute: text
          identifier: mx.mappings.home.promotionsCarouselCardView
          storeIn: promotionsCardView
      - log: 
          message: "String got 'Hero POV Card View': ${promotionsCardView}"
          color: GREEN_BOLD
      - executeNode:
          file: mx/test/helpers/utils/getNumberFromStringByIndex.js
          args:
            - value: ${promotionsCardView}
            - value: 1
          getResponse:
            storeIn: totalNumberOfPromotionsCarousel
      - log: 
          message: "RETURN: total number of promotions in carousel: ${totalNumberOfPromotionsCarousel}"
          color: GREEN_BOLD
      - log:
          message: "End function: mx.functions.home.promotions-carousel.getTotalNumberOfPromotions"
          color: BLUE
  
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the expected promotion is displayed.
  # Param: ${promotionName}  [Mandatory]  Name of the promotion expected to be displayed.
  # promotionName examples:
  #     - Cabello que luce
  #     - Envíos ilimitados
  #     - ¡Frescura y el mejor precio!
  #     - Bonificación de $100
  #     - Nuevo integrante Griego
  - name: mx.functions.home.promotions-carousel.assertPromotionDisplayed
    platform: android
    flow:
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.home.promotions-carousel.promotionTitle

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls left completely inside any carousel.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel to scroll into home.
  # carouselName examples:
  #     - Mi Belleza
  #     - Ahorrar es una realidad
  #     - ¡Recibe hoy mismo!
  #     - Panadería
  #     - Lácteos
  #     - Dulces y botanas
  #     - Electrónica
  #     - Hogar
  #     - Más opciones para ti
  #     - Los básicos del hogar
  - name: mx.functions.home.carousel.scrollLeftCompletely
    platform: android
    flow:
      - loop:
          begin: 1
          end: 6
          mode: increment
          flow:
            - scroll:
                withinIdentifier: mx.mappings.home.carousel.carouselContainerByName
                direction: right
                wait: 500

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls right completely inside any carousel.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel to scroll into home.
  # carouselName examples:
  #     - Mi Belleza
  #     - Ahorrar es una realidad
  #     - ¡Recibe hoy mismo!
  #     - Panadería
  #     - Lácteos
  #     - Dulces y botanas
  #     - Electrónica
  #     - Hogar
  #     - Más opciones para ti
  #     - Los básicos del hogar
  - name: mx.functions.home.carousel.scrollRightCompletely
    platform: android
    flow:
      - loop:
          begin: 1
          end: 6
          mode: increment
          flow:
            - scroll:
                withinIdentifier: mx.mappings.home.carousel.carouselContainerByName
                direction: left
                wait: 500

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on add to favorites button inside carousel in home.
  # Param: ${productName}  [Mandatory]  Name of the product to be added to favorites.
  - name: mx.functions.home.carousel.markProductAsFavorite
    platform: android
    flow: 
      - click: 
          identifier: mx.mappings.home.carousel.favoriteHeartButtonByName

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls right inside carousel until given product.
  # Param: ${productName}  [Mandatory]  Name of the product.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel containing the product.
  # carouselName examples:
  #     - Mi Belleza
  #     - Ahorrar es una realidad
  #     - ¡Recibe hoy mismo!
  #     - Panadería
  #     - Lácteos
  #     - Dulces y botanas
  #     - Electrónica
  #     - Hogar
  #     - Más opciones para ti
  #     - Los básicos del hogar
  - name: mx.functions.home.carousel.scrollRightToProduct
    platform: android
    flow:
      - scroll:
          direction: left
          untilIdentifier: mx.mappings.home.carousel.productContainerByName
          withinIdentifier: mx.mappings.home.carousel.carouselContainerByName
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.home.carousel.productContainerByName

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function scrolls left inside carousel until given product.
  # Param: ${productName}  [Mandatory]  Name of the product.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel containing the product.
  # carouselName examples:
  #     - Mi Belleza
  #     - Ahorrar es una realidad
  #     - ¡Recibe hoy mismo!
  #     - Panadería
  #     - Lácteos
  #     - Dulces y botanas
  #     - Electrónica
  #     - Hogar
  #     - Más opciones para ti
  #     - Los básicos del hogar
  - name: mx.functions.home.carousel.scrollLeftToProduct
    platform: android
    flow:
      - scroll:
          direction: right
          untilIdentifier: mx.mappings.home.carousel.productContainerByName
          withinIdentifier: mx.mappings.home.carousel.carouselContainerByName
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.home.carousel.productContainerByName

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function clicks on remove from favorites button inside carousel in home.
  # Param: ${productName}  [Mandatory]  Name of the product to be removed from favorites.
  - name: mx.functions.home.carousel.unmarkProductAsFavorite
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.home.carousel.markedFavoritesHeartButton
          then:
            - click:
                identifier: mx.mappings.home.carousel.favoriteHeartButtonByName
          else:
            - failTest:
                message: "Product is not already in favorites!"

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function scrolls down (only) into the given carousel and then searches to right-wise inside of
  #   that carousel for the given product to add it to the cart.
  # PARAMS:
  #     ${carouselName}  [Mandatory]  Name of the Carousel that contains the Product to be added.
  #     ${productName}   [Mandatory]  Name of the Product to be added to Cart (accepts partial name).
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.home.carousel.addProductToCart
    platform: android
    flow:
      - log:
          message: "Carousel Name: ${carouselName}"
          color: CYAN
      - log:
          message: "Product Name: ${productName}"
          color: CYAN
      - executeFunction:
          name: mx.functions.home.scrollDownToCarousel #--PARAM--${carouselName}
      # Process to scroll right and look for the product...
      - storeIn:
          key: productFound
          value: false
      - loop:
          begin: 0
          end: 10
          flow:
            - if:
                identifier:
                  notPresent:
                    - identifier: mx.mappings.home.carousel.addToCartButtonByCarouselAndProductName #--PARAMS--${carouselName}--${productName}
                then:
                  - scroll:
                      direction: left # In R2, horizontal scroll is treated as swipe, not scroll (swipe left to scroll right)
                      scrollLimit: 1
                      withinIdentifier: mx.mappings.home.carousel.horizontallyScrollableCarouselByCarouselName #--PARAM--${carouselName}
                else:
                  - storeIn:
                      key: productFound
                      value: true
                  - break: true

      # Check if product was found or not to add it to Cart...
      - if:
          condition: ${productFound} == false
          then:
            - failTest:
                message: "Function Failure: Product not found when scrolling right inside the carousel."
          else:
            - click:
                identifier: mx.mappings.home.carousel.addToCartButtonByCarouselAndProductName #--PARAMS--${carouselName}--${productName}
            - sleep:
                duration: 5000
      - log:
          message: "End function: home.carousel.addProductToCart"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function increases the quantity of a product.
  # Param: ${productName}  [Mandatory]  Name of the product to be increased.
  # Param: ${quantity} [Mandatory] number of times to increment the product quantity.
  - name:  mx.functions.home.carousel.increaseProductQuantityBy
    platform: android
    flow:
      - loop:
           begin: 0
           end: ${quantity}                  
           storeIndex: i
           mode: increment
           flow:
                - click: 
                    identifier: mx.mappings.home.carousel.mainButtonByProductName
                - click:
                    identifier: mx.mappings.home.carousel.increaseButtonByProductName

  #--------------------------------------------------------------------------------------------------------------------
  
  # Description: This function decreases the quantity of a product.
  # Param: ${productName}  [Mandatory]  Name of the product to be decreased.
  # Param: ${quantity} [Mandatory] number of times to decrease the product quantity.

  - name:  mx.functions.home.carousel.decreaseProductQuantityBy
    platform: android
    flow:
      - loop:
           begin: 0
           end: ${quantity}                  
           storeIndex: i
           mode: increment
           flow:
                - click: 
                    identifier: mx.mappings.home.carousel.mainButtonByProductName
                - click:
                    identifier: mx.mappings.home.carousel.decreaseButtonByProductName

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switches product to pieces.
  # Param: ${productName}  [Mandatory]  Name of the product to be switched to pieces.
  - name: mx.functions.home.carousel.switchProductToPieces
    platform: android
    flow: 
      - fetchPageSource: false
      - click: 
          identifier: mx.mappings.home.carousel.mainButtonByProductName
      - click: 
          identifier: mx.mappings.home.carousel.piecesButtonByProductName
      - fetchPageSource: true

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function switches product to weight.
  # Param: ${productName}  [Mandatory]  Name of the product to be switched to weight.
  - name: mx.functions.home.carousel.switchProductToWeight
    platform: android
    flow: 
      - fetchPageSource: false
      - if:
          identifier:
            text:
              - identifier: mx.mappings.home.carousel.mainButtonByProductName
                contains: g
          then:
            - log:
                message: Quantity is already in weight
                color: CYAN
          else:
            - click: 
                identifier: mx.mappings.home.carousel.mainButtonByProductName
            - if:
                identifier:
                  present:
                    - identifier: mx.mappings.home.carousel.piecesAndWeightButtonByProductName
                then:
                  - click: 
                      identifier: mx.mappings.home.carousel.weightButtonByProductName
                else:
                  - failTest:
                      message: Cannot be switched to weight
      - fetchPageSource: true

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function set the type of product selected on carousel and saves it in the global variable ${productType}
  # Param: ${productName}  [Mandatory]  Name of the product to get the price.
  - name: mx.functions.carousel.getProductType
    platform: android
    flow:
      - click:
          identifier: mx.mappings.home.carousel.mainButtonByProductName
      - if:
          identifier: 
              present: 
                - identifier: mx.mappings.home.carousel.piecesAndWeightButtonByProductName
          then:
              - storeIn:
                  key: productType
                  value: "Dual"
              - log: "The product ${productName} is ${productType}"
          else:
              - if:
                  identifier:
                    present:
                        - identifier: mx.mappings.home.carousel.labelWeightByProductName
                    notPresent:
                        - identifier: mx.mappings.home.carousel.piecesAndWeightButtonByProductName
                  then:
                      - storeIn:
                          key: productType
                          value: "Weighable"
                      - log: "The product ${productName} is ${productType}"
                  else:
                    - storeIn:
                          key: productType
                          value: "Pieces"
                    - log: "The product ${productName} is ${productType}"  

  #--------------------------------------------------------------------------------------------------------------------

  # PARAMS:  ${productName}  [Mandatory]  Name of the product to get the price from.
  #
  # RETURNS:
  #     ${returnedPrice}
  #         The price the product is displaying.
  #
  #     ${returnedHasOldPrice}
  #         Returns 'true' if the product displayed an Old Price, otherwise, 'false'.
  #
  #     ${returnedOldPrice}
  #         The Old Price the product displayed. The Old Price is the one that displays strike-through. This price usually 
  #         displays if the product has a discount. If the product doesn't display it, it returns '0.00'.
  #
  # AUTHOR: ?????
  # EDITOR: Sergio Fernandez (vn0t1qt)
  - name: mx.functions.home.carousel.getProductPrice
    platform: android
    flow:
      - log:
          message: "Product Name: '${productName}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.home.carousel.productPriceByProductName #--PARAM--${productName}
          storeIn: returnedPrice
      - executeNode:
          file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
          args:
            - value: ${returnedPrice}
          getResponse:
            storeIn: returnedPrice
      - if:
          identifier:
            present:
              - identifier: mx.mappings.home.carousel.productOldPriceByProductName #--PARAM--${productName}
          then:
            - storeIn:
                key: returnedHasOldPrice
                value: true
            - getString:
                identifier: mx.mappings.home.carousel.productOldPriceByProductName #--PARAM--${productName}
                storeIn: returnedOldPrice
            - executeNode:
                file: mx/test/helpers/utils/cleanPriceStringIncludingCommas.js
                args:
                  - value: ${returnedOldPrice}
                getResponse:
                  storeIn: returnedOldPrice
          else:
            - storeIn:
                key: returnedHasOldPrice
                value: false
            - storeIn:
                key: returnedOldPrice
                value: 0.00
      - log:
          message: "Price got: '${returnedPrice}'"
          color: CYAN
      - log:
          message: "Old Price Detected: '${returnedHasOldPrice}'"
          color: CYAN
      - log:
          message: "Old Price got: '${returnedOldPrice}'"
          color: CYAN
      - log:
          message: "End function: home.carousel.getProductPrice"
          color: BLUE
      
  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function gets the added to cart quantity as pieces.
  # Param: ${productName}  [Mandatory]  Name of the product.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel containing the product.
  # carouselName examples:
  #     - Mi Belleza
  #     - Ahorrar es una realidad
  #     - ¡Recibe hoy mismo!
  #     - Panadería
  #     - Lácteos
  #     - Dulces y botanas
  #     - Electrónica
  #     - Hogar
  #     - Más opciones para ti
  #     - Los básicos del hogar
  - name: mx.functions.home.carousel.getProductQuantityAsPieces
    platform: android
    flow:
      - getString:
          identifier: mx.mappings.home.carousel.piecesQuantity
          attribute: name
          storeIn: quantity
      - log: ${quantity} pieces of ${productName} has been added to cart

  #--------------------------------------------------------------------------------------------------------------------
                  
  # Description: This function gets the quantity as weight
  # Param: ${productName}  [Mandatory]  Name of the product.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel containing the product.
  # carouselName examples:
  #     - Mi Belleza
  #     - Ahorrar es una realidad
  #     - ¡Recibe hoy mismo!
  #     - Panadería
  #     - Lácteos
  #     - Dulces y botanas
  #     - Electrónica
  #     - Hogar
  #     - Más opciones para ti
  #     - Los básicos del hogar
  - name: mx.functions.home.carousel.getProductQuantityAsWeight
    platform: android
    flow:
      - getString:
          identifier: mx.mappings.home.carousel.weightQuantity
          attribute: name
          storeIn: quantity
      - log: ${quantity} of ${productName} has been added to cart

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts carousel displayed.
  # Param: ${carouselName}  [Mandatory]  Name of the carousel.
  - name: mx.functions.home.assertCarouselDisplayed
    platform: android
    flow:
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.home.carousel.carouselContainerByName
         
  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts products are displayed.
  - name: mx.functions.home.carousel.assertProductsDisplayed
    platform: android
    flow:
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.home.carousel.productsContainer

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts specific product displayed.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.home.carousel.assertProductDisplayed
    platform: android
    flow:
      - verifyIdentifier: 
          present: 
            - identifier: mx.mappings.home.carousel.productContainerByName

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts product is added to cart.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.home.carousel.assertProductAddedToCart
    platform: android
    flow:
      - log: 
          message: "Product to assert: ${productName}"
          color: CYAN
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.home.carousel.addToCartButtonByProductName
          then:
            - log: 
                message: "End function: home.carousel.assertProductAddedToCart"
                color: BLUE
          else:
            - failTest:
                message: "The product was not added to cart"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts product is added to cart.
  # Param: ${productName}  [Mandatory]  Name of the product.
  - name: mx.functions.home.carousel.assertProductNotAddedToCart
    platform: android
    flow: 
      - if:
          identifier:
            present:
              - identifier: mx.mappings.home.carousel.addToCartButtonByProductName
          then:
            - log: "The product was not added to cart"
          else:
            - failTest:
                message: "The product was added to cart"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as pieces.
  # Param: ${productName} [Mandatory]  Name of the Product
  # Param: ${expectedQuantityAsPieces} [Mandatory] quantity of pieces to assert
  - name: mx.functions.home.carousel.assertProductQuantityAsPieces
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.home.carousel.productQuantityAsPiecesOnContainer
          then:
            - log: "The product got the expected pieces"
          else:
            - failTest:
                message: "Verify if the product was added to cart or is a weighable product"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function asserts the product quantity as weight.
  # Param: ${productName} [Mandatory]  Name of the Product
  # Param: ${expectedQuantityAsWeight} [Mandatory] quantity weight to assert (just the number)
  - name: mx.functions.home.carousel.assertProductQuantityAsWeight
    platform: android
    flow:
      - if:
          identifier:
            present:
              - identifier: mx.mappings.home.carousel.productQuantityAsWeightOnContainer
          then:
            - log: "The product got the expected weight"
          else:
            - failTest:
                message: "Check if the product was added to cart or is a pieces product"

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function opens a product's PDP by its name.
  # Param: ${productName}  [Mandatory]  Product to open its PDP.
  - name: mx.functions.home.carousel.openProductDetailsByName
    platform: android
    flow:
      - log:
          message: "Product name: ${productName}"
          color: CYAN
      - click:
          identifier: mx.mappings.home.carousel.productContainerByName
      - log:
          message: "End function: home.openProductDetailsByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # Description: This function opens the first product's PDP of a specific carousel
  # Param: ${carouselName} [Mandatory]  Carousel name
  - name: mx.functions.home.carousel.openFirstPdpDisplayedOnCarousel
    platform: android
    flow:
      - log:
          message: "Carousel name: ${carouselName}"
          color: CYAN
      - click:
          identifier: mx.mappings.home.carousel.firstProductContainerOnCarousel
      - log:
          message: "End function: home.openProductDetailsByName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: This function gets the product name of the first product in a given carousel.
  # PARAM: ${carouselName} [Mandatory] name of the carousel in which we need to get the first porfuct name
  # RETURN: ${displayedProductNameInCarousel} first product name displayed in given carousel
  # AUTHOR: Osmar Juárez (vn56dce)
  - name: mx.functions.home.carousel.getFirstProductName
    platform: android
    flow:
      - getString:
          identifier: mx.mappings.home.carousel.productNameLabelInCarousel # PARAM: --${carouselName}--
          storeIn: displayedProductNameInCarousel
          index: 0
      - log:
          message: "First Displayed Product in caorusel '${carouselName}': '${displayedProductNameInCarousel}'"
          color: CYAN
      - log:
          message: "End function: mx.functions.home.carousel.getFirstProductName"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: this function scrolls in home until find some carousel centered at home screen. Scroll limit is 7.
  # AUTHOR: Osmar Juárez (vn56dce)
  - name: mx.functions.home.scrollDownUntilSomeCarousel
    platform: android
    flow:
      - if:
          identifier:
            notPresent:
              - identifier: mx.mappings.home.genericCarouselView
          then:
            - log:
                message: "No carousel is displayed in current view. proceed to scroll down ${scrollLimit:7} times until found"
                color: YELLOW
            - scroll:
                direction: down
                withinIdentifier: mx.mappings.home.pageContainer
                untilIdentifier: mx.mappings.home.genericCarouselView
                position: center
                scrollLimit: ${scrollLimit:7}
                wait: 1000
      - verifyIdentifier:
         displayed:
           - identifier: mx.mappings.home.genericCarouselView
             value: "true"
      - log:
          message: "End function: mx.functions.home.scrollDownUntilSomeCarousel"
          color: BLUE

  #--------------------------------------------------------------------------------------------------------------------

  # DESCRIPTION: Assert text in add to cart button of a product in Sponsored Carousel
  # PARAMS: ${expectedTextInATCButton}   Expected string to assert in ATC button.
  #         ${productIndex}              Product index to validate ATC.
  # AUTHOR: Osmar Juárez (vn56dce)
  - name: mx.functions.home.sponsored-carousel.assertTextInAddToCartButtonByIndex
    platform: android
    flow:
      - log:
          message: "Expected text in ATC button: '${expectedTextInATCButton}'"
          color: CYAN
      - getString:
          identifier: mx.mappings.home.sponsored-carousel.anyProductAddToCartButton
          storeIn: displayedTextInATCButton
          attribute: text
          index: ${productIndex}
      - log:
          message: "Current extracted displayed text in ATC button: '${displayedTextInATCButton}'"
          color: CYAN
      - verifyCondition: "${displayedTextInATCButton} == ${expectedTextInATCButton}"
      - log:
          message: "End function: sponsored-carousel.assertTextInAddToCartButtonByIndex"
          color: BLUE