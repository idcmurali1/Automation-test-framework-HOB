#======================================================================================================================
#    AUTHOR: Gustavo Antonio López Cambambia (vn53g21)
#   CREATED: Jun/19/2023
#  REVISION: ---
#
#  Copyright © 2023 Walmart. All rights reserved.
#======================================================================================================================

general:
  tags: qaa-od-sanity-production-android-015, qaa-od-sanity-production-android
  debug: true
  testCaseId: MXMOB-1358

scenarios:

  #####################################################################################################################
  #
  # TEST CASE DESCRIPTION:
  #
  #   Main Objectives:
  #     - Add "Pieces" product searching it from SLP and add it from PDP.
  #     - Add "Weight" product searching it from SLP and add it from PDP.
  #     - Add "Dual" product searching it from SLP and add it from PDP.
  #     - Place an Order to be delivered to Home.
  #     - Pay Order at Delivery.
  #
  # Flags Used:
  #   N/A
  #
  #####################################################################################################################

  - name: Main
    flow:
      - log: "TEST START: QAA - OD - PRODUCTION SANITY - OD-015"

      ##----------------------------------------------------------------------------------------------------------------
      # STEP 1-2: Navigate through Onboarding and select OD Banner... 
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 1-2: Navigate through Onboarding and select OD Banner..."
            - name: squadNames
              string: CORE | QAA
      
      - executeFunction:
          name: mx.flows.global.onboarding.navigateToHomeAsGuestUser
          params:
            - name: banner
              string: mx.data.qaa.sanity.od015.banner
            - name: zipCode
              string: mx.data.qaa.sanity.od015.zipCode

      #----------------------------------------------------------------------------------------------------------------
      ## STEP 3: Login from Profile...
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 3: Login from Profile..."
            - name: squadNames
              string: CUSTOMER | QAA
      
      - executeFunction:
          name: mx.flows.od.login.navigateToAccountAndLogin
          params:
            - name: userEmail
              string: mx.data.qaa.sanity.od015.user.email
            - name: userPassword
              string: mx.data.qaa.sanity.od015.user.password
            - name: userName
              string: mx.data.qaa.sanity.od015.user.name

      ## ----------------------------------------------------------------------------------------------------------------
      # STEP 4: Search Product by Product Name (item sold by pieces)"
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 4: Search Product by Product Name (item sold by pieces)"
            - name: squadNames
              string: PRE-PURCHASE | QAA

      - executeFunction:
          name: mx.functions.bottom-menu.tapDepartments

      # Searching pieces product
      - executeFunction:
          name: mx.flows.od.search.performSuccessfulSearch
          params:
            - name: searchTerm
              string: mx.data.qaa.sanity.od015.searchTermPiecesProduct

      #----------------------------------------------------------------------------------------------------------------
      # STEP 5: Open PDP and add items to cart
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 5: ADD PRODUCT TO CART FROM PDP"
            - name: squadNames
              string: PRE-PURCHASE | QAA

      - executeFunction:
          name: mx.functions.slp.scrollDownToProductWithStockByName
          params:
            - name: productName
              string: mx.data.qaa.sanity.od015.searchTermPiecesProduct

      - executeFunction:
          name: mx.functions.slp.openProductDetailsByName
          params:
            - name: productName
              string: mx.data.qaa.sanity.od015.searchTermPiecesProduct

      - executeFunction:
          name: mx.functions.pdp.assertPageDisplayed
      
      - executeFunction:
          name: mx.functions.pdp.addToCart

      - storeIn:
          key: piecesProductName
          value: ${returnedProductName}

      - executeFunction:
          name: mx.functions.pdp.assertAddedToCart

      - storeIn:
          key: OD_015_IS_CART_EMPTY
          value: false

      - executeFunction:
          name: mx.functions.pdp.getType

      - executeFunction:
          name: mx.functions.pdp.getPrice

      - storeIn:
          key: piecesProductPrice
          value: ${returnedProductPrice}

      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.discountIndicator
          then:
            - getString:
                identifier: mx.mappings.pdp.formerPrice
                storeIn: piecesProductOriginalPrice
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${piecesProductOriginalPrice}
                getResponse:
                  storeIn: piecesProductOriginalPrice
            - log:
                message: "Original price got: $${piecesProductOriginalPrice}"
                color: CYAN
            - arithmetic:
                expression: ${piecesProductPrice} - ${piecesProductOriginalPrice}
                storeIn: piecesProductPriceDiscount
            - log:
                message: "With discount: $${piecesProductPriceDiscount}"
                color: CYAN
          else:
            - storeIn:
                key: piecesProductOriginalPrice
                value: ${piecesProductPrice}
            - storeIn:
                key: piecesProductPriceDiscount
                value: "0.00"  

      - if:
         condition: ${returnedProductType} == 'Pieces'
         then:
           - log:
                message: "Product type expected (${returnedProductType})"
                color: CYAN
         else:
           - failTest:
               message: "Product type not expected"

      - executeFunction:
          name: mx.functions.pdp.tapClose

      - executeFunction:
          name: mx.functions.top-menu.assertCartQuantity
          params:
            - name: expectedQuantity
              string: "1"

      #----------------------------------------------------------------------------------------------------------------
      # STEP 6: Search Product by Product Name (item sold by weight)
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 6: Search Product by Product Name (item sold by weight)"
            - name: squadNames
              string: PRE-PURCHASE | QAA

      - storeIn:
          key: searchTerm1
          value: mx.data.qaa.sanity.od015.searchTermWeightProduct

      - executeFunction:
          name: mx.flows.od.search.performSuccessfulSearch
          params:
            - name: searchTerm
              string: "${searchTerm1}"

      #----------------------------------------------------------------------------------------------------------------
      # STEP 7: Open PDP and add items to cart
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 7: Open PDP and add items to cart"
            - name: squadNames
              string: PRE-PURCHASE | QAA

      - executeFunction:
          name: mx.functions.slp.openProductDetailsByName
          params:
            - name: productName
              string: mx.data.qaa.sanity.od015.secondSearchTermWeightProduct

      - executeFunction:
          name: mx.functions.pdp.assertPageDisplayed
      
      - executeFunction:
          name: mx.functions.pdp.addToCart

      - storeIn:
          key: weightProductName
          value: ${returnedProductName}

      - executeFunction:
          name: mx.functions.pdp.assertAddedToCart

      - executeFunction:
          name: mx.functions.pdp.getType

      - if:
         condition: ${returnedProductType} == 'Weight' || ${returnedProductType} == 'Weighable'
         then:
           - log:
                message: "Product type expected (${returnedProductType})"
                color: CYAN
         else:
           - failTest:
               message: "Product type not expected"

      - executeFunction:
          name: mx.functions.pdp.getPrice

      - executeFunction:
          name: mx.functions.pdp.getProductQuantityAsWeight

      - executeNode:
          file: mx/test/helpers/utils/calculateProductSubtotal.js
          args:
            - value: ${returnedProductPrice}
            - value: ${returnedProductQuantity}
            - value: "true"
          getResponse:
            storeIn: weightProductPriceWithoutRoundDecimal

      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.discountIndicator
          then:
            - getString:
                identifier: mx.mappings.pdp.formerPrice
                storeIn: weightProductOriginalPrice
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${weightProductOriginalPrice}
                getResponse:
                  storeIn: weightProductOriginalPrice
            - executeNode:
                file: mx/test/helpers/utils/calculateProductSubtotal.js
                args:
                  - value: ${weightProductOriginalPrice}
                  - value: ${returnedProductQuantity}
                  - value: "true"
                getResponse:
                  storeIn: weightProductOriginalSubtotal
            - log:
                message: "Original price got: $${weightProductOriginalPrice} and original subtotal got: ${weightProductOriginalSubtotal}"
                color: CYAN
            - arithmetic:
                expression: ${weightProductPriceWithoutRoundDecimal} - ${weightProductOriginalSubtotal}
                storeIn: weightProductPriceDiscount
            - log:
                message: "With discount: $${weightProductPriceDiscount}"
                color: CYAN
          else:
            - storeIn:
                key: weightProductOriginalSubtotal
                value: ${weightProductPriceWithoutRoundDecimal}
            - storeIn:
                key: weightProductPriceDiscount
                value: "0.00"

      - executeFunction:
          name: mx.functions.pdp.tapClose

      - executeFunction:
          name: mx.functions.top-menu.assertCartQuantity
          params:
            - name: expectedQuantity
              string: "2"

      #----------------------------------------------------------------------------------------------------------------
      # STEP 8: Search Product by Product Name (item sold by both pieces/weight)
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 8: Search Product by Product Name (item sold by both pieces/weight)"
            - name: squadNames
              string: PRE-PURCHASE | QAA

      - executeFunction:
          name: mx.flows.od.search.performSuccessfulSearch
          params:
            - name: searchTerm
              string: mx.data.qaa.sanity.od015.searchTermDualProduct

      #----------------------------------------------------------------------------------------------------------------
      # STEP 9: Open PDP and add items to cart
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 9: Open PDP and add items to cart"
            - name: squadNames
              string: PRE-PURCHASE | QAA

      - executeFunction:
          name: mx.functions.slp.openProductDetailsByName
          params:
            - name: productName
              string: mx.data.qaa.sanity.od015.searchTermDualProduct

      - executeFunction:
          name: mx.functions.pdp.assertPageDisplayed
      
      - executeFunction:
          name: mx.functions.pdp.addToCart
      
      - executeFunction:
          name: mx.functions.pdp.tapClose
    
      - executeFunction:
          name: mx.functions.slp.openProductDetailsByName
          params:
            - name: productName
              string: mx.data.qaa.sanity.od015.searchTermDualProduct
      
      - storeIn:
          key: dualProductName
          value: ${returnedProductName}

      - executeFunction:
          name: mx.functions.pdp.switchToWeight

      - executeFunction:
          name: mx.functions.pdp.getPrice

      - executeFunction:
          name: mx.functions.pdp.getProductQuantityAsWeight

      - executeNode:
          file: mx/test/helpers/utils/calculateProductSubtotal.js
          args:
            - value: ${returnedProductPrice}
            - value: ${returnedProductQuantity}
            - value: "true"
          getResponse:
            storeIn: dualProductPriceWithoutRoundDecimal

      - log: 
          message: "Calculated product subtotal: ${dualProductPriceWithoutRoundDecimal}"
          color: GREEN

      - if:
          identifier:
            present:
              - identifier: mx.mappings.pdp.discountIndicator
          then:
            - getString:
                identifier: mx.mappings.pdp.formerPrice
                storeIn: dualProductOriginalPrice
            - executeNode:
                file: mx/test/helpers/slp/sanitizePrice.js
                args:
                  - value: ${dualProductOriginalPrice}
                getResponse:
                  storeIn: dualProductOriginalPrice
            - executeNode:
                file: mx/test/helpers/utils/calculateProductSubtotal.js
                args:
                  - value: ${dualProductOriginalPrice}
                  - value: ${returnedProductQuantity}
                  - value: "true"
                getResponse:
                  storeIn: dualProductOriginalSubtotal
            - log:
                message: "Original price got: $${dualProductOriginalPrice} and original subtotal got: ${dualProductOriginalSubtotal}"
                color: CYAN
            - arithmetic:
                expression: ${dualProductPriceWithoutRoundDecimal} - ${dualProductOriginalSubtotal}
                storeIn: dualProductPriceDiscount
            - log:
                message: "With discount: $${dualProductPriceDiscount}"
                color: CYAN
          else:
            - storeIn:
                key: dualProductOriginalSubtotal
                value: ${dualProductPriceWithoutRoundDecimal}
            - storeIn:
                key: dualProductPriceDiscount
                value: "0.00"


      - executeFunction:
          name: mx.functions.pdp.assertAddedToCart

      - executeFunction:
          name: mx.functions.pdp.getType

      - if:
         condition: ${returnedProductType} == 'Dual'
         then:
           - log:
                message: "Product type expected (${returnedProductType})"
                color: CYAN
         else:
           - failTest:
               message: "Product type not expected"

      - executeFunction:
          name: mx.functions.pdp.tapClose

      - executeFunction:
          name: mx.functions.top-menu.assertCartQuantity
          params:
            - name: expectedQuantity
              string: "3"

    ##----------------------------------------------------------------------------------------------------------------
    ## STEP 10: Open Cart
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 10: Open Cart"
            - name: squadNames
              string: PURCHASE | QAA

      - executeFunction:
          name: mx.functions.top-menu.tapCartIcon

      - if:
          condition: ${APP_PLATFORM} == 'ios'
          then:
            - executeFunction:
                name: mx.functions.utils.closeBlackPopupIfDisplayed

      - executeFunction:
          name: mx.functions.cart.assertPageDisplayed

      - executeFunction:
          name: mx.functions.cart.assertCartNotEmpty
      
      - executeFunction:
          name: mx.functions.cart.assertProductListed
          params:
            - name: productName
              string: ${piecesProductName}
      
      - executeFunction:
          name: mx.functions.cart.assertProductListed
          params:
            - name: productName
              string: ${weightProductName}
      
      - executeFunction:
          name: mx.functions.cart.assertProductListed
          params:
            - name: productName
              string: ${dualProductName}
      
      - executeFunction:
          name: mx.functions.cart.assertProductsCountInSubtotalLabel
          params:
            - name: expectedProductsCount
              string: mx.data.qaa.sanity.od015.totalProductsNumber

      - executeFunction:
          name: mx.functions.utils.scrollToTop
          params:
            - name: elementAtTheTop
              string: mx.mappings.cart.reserveSlotButton

      - executeFunction:
          name: mx.functions.cart.assertProductSubtotal
          params:
            - name: productName
              string: ${piecesProductName}
            - name: expectedSubtotal
              string: ${piecesProductPrice}

      - executeFunction:
          name: mx.functions.cart.assertProductSubtotal
          params:
            - name: productName
              string: ${weightProductName}
            - name: expectedSubtotal
              string: ${weightProductPriceWithoutRoundDecimal}

      - executeFunction:
          name: mx.functions.cart.assertProductSubtotal
          params:
            - name: productName
              string: ${dualProductName}
            - name: expectedSubtotal
              string: ${dualProductPriceWithoutRoundDecimal}

      #----------------------------------------------------------------------------------------------------------------
      - log: "STEP 11: Hit 'Reservar un horario'"
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 11: Hit 'Reservar un horario'"
            - name: squadNames
              string: PURCHASE | QAA

      - executeFunction:
          name: mx.functions.cart.tapReserveSlot

      - executeFunction:
          name: mx.functions.reserve-slot.address-message-popup.closePopupIfDisplayed

      - executeFunction:
          name: mx.functions.reserve-slot.assertPageDisplayed

      #----------------------------------------------------------------------------------------------------------------
      - log: "STEP 12: Select 'Envio a Domicilio' and select an express time slot"
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 12: Select 'Envio a Domicilio' and select an express time slot"
            - name: squadNames
              string: PURCHASE | QAA

      - executeFunction:
          name: mx.functions.reserve-slot.tapHomeDeliveryMethod

      - sleep:
          duration: 3000

      - executeFunction:
          name: mx.functions.reserve-slot.address-message-popup.closePopupIfDisplayed

      - executeFunction:
          name: mx.functions.reserve-slot.tapChange

      - executeFunction:
          name: mx.functions.address-selector-popup.assertPageDisplayed

      - executeFunction:
          name: mx.functions.address-selector-popup.selectAddressByPosition
          params:
            - name: addressPosition
              string: "1"

      - executeFunction:
          name: mx.functions.address-selector-popup.getSelectedAddress

      - executeFunction:
          name: mx.functions.address-selector-popup.getSelectedAddressName

      - executeFunction:
          name: mx.functions.address-selector-popup.tapSave

      - executeFunction:
          name: mx.functions.reserve-slot.assertPageDisplayed

      - executeFunction:
          name: mx.functions.reserve-slot.getSelectedDaySlot

      - executeFunction:
          name: mx.functions.reserve-slot.selectTimeSlotIfExpressDeliveryIsNotPresent

      - executeFunction:
          name: mx.functions.reserve-slot.getSelectedTimeSlot

      - executeFunction:
          name: mx.functions.reserve-slot.getSelectedTimeSlotDeliveryFee

      - executeFunction:
          name: mx.functions.reserve-slot.tapReserve

      - executeFunction:
          name: mx.functions.utils.getDeliverySlot
          params:
            - name: forPage
              string: 'Cart'
            - name: selectedDaySlot
              string: ${returnedSelectedDaySlot}
            - name: selectedTimeSlot
              string: ${returnedSelectedTimeSlot}

      - scroll:
          direction: up
          scrollLimit: 1

      - executeFunction:
          name: mx.functions.cart.assertDeliveryMethod
          params:
            - name: deliveryMethod
              string: "HomeDelivery"

      - executeFunction:
          name: mx.functions.cart.assertHomeSlotAddressByIndividualValues
          params:
            - name: streetName
              string: ${returnedStreetName}
            - name: exteriorNumber
              string: ${returnedExteriorNumber}

      - executeFunction:
          name: mx.functions.cart.assertHomeSlotDeliveryFee
          params:
            - name: expectedDeliveryFee
              string: ${returnedDeliveryFee}

      - scroll:
          direction: down
          untilIdentifier: mx.mappings.cart.estimatedTotalInDetailsSection
          position: down
          scrollLimit: 3

      - if:
          identifier:
            present:
              - identifier: mx.mappings.cart.discountLabel
          then:
            - arithmetic:
                expression: ${piecesProductOriginalPrice} + ${dualProductOriginalSubtotal} + ${weightProductOriginalSubtotal}
                storeIn: subtotal
          else:
            - arithmetic:
                expression: ${piecesProductPrice} + ${weightProductPriceWithoutRoundDecimal} + ${dualProductPriceWithoutRoundDecimal}
                storeIn: subtotal

      - executeFunction:
          name: mx.functions.cart.assertGrandSubtotalIfCartHasDiscounts
          params:
            - name: cartSubtotal
              string: ${subtotal}

      - log:
          message: "Express Home Delivery Method Assertions Pending"
          color: YELLOW

      #----------------------------------------------------------------------------------------------------------------
      ## STEP 13: Continue Checkout
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 13: Continue Checkout"
            - name: squadNames
              string: PURCHASE | QAA

      - executeFunction:
          name: mx.functions.cart.tapContinue

      - if:
          identifier:
              present:
                - identifier: mx.mappings.utils.something-went-wrong-popup.popupTitle
          then:
            - executeFunction:
                name: mx.functions.utils.something-went-wrong-popup.tapRetryIfPopupDisplayed

      - executeFunction:
          name: mx.functions.missing-something.continueWithoutSelectionIfPageDisplayed

      - executeFunction:
          name: mx.functions.review-order.assertPageDisplayed

      - executeFunction:
          name: mx.functions.utils.getDeliverySlot
          params:
            - name: forPage
              string: 'ReviewOrder'
            - name: selectedDaySlot
              string: ${returnedSelectedDaySlot}
            - name: selectedTimeSlot
              string: ${returnedSelectedTimeSlot}

      - executeFunction:
          name: mx.functions.review-order.assertDeliverySlot
          params:
            - name: deliverySlot
              string: ${returnedDeliverySlot}

      - executeFunction:
          name: mx.functions.review-order.assertHomeDeliveryAddressByIndividualValues
          params:
            - name: streetName
              string: ${returnedStreetName}
            - name: exteriorNumber
              string: ${returnedExteriorNumber}
            - name: city
              string: ${returnedCity}
            - name: state
              string: ${returnedState}
            - name: zipCode
              string: ${returnedZipCode}

      - executeFunction:
          name: mx.functions.review-order.tapAddDeliveryInstructions

      - executeFunction:
          name: mx.functions.general-comments-pop-up.assertPageDisplayed

      - executeFunction:
          name: mx.functions.general-comments-pop-up.enterTestOrderDisclaimer

      - executeFunction:
          name: mx.functions.general-comments-pop-up.tapSave

      - executeFunction:
          name: mx.functions.review-order.scrollDownToSection
          params:
            - name: sectionName
              string: Subtotal

      - executeFunction:
          name: mx.functions.review-order.assertSubtotal
          params:
            - name: direction
              string: down
            - name: subtotal
              string: ${returnedCartSubtotalAfterDiscount}

      - executeFunction:
          name: mx.functions.review-order.assertDeliveryFee
          params:
            - name: deliveryFee
              string: ${returnedDeliveryFee}
            - name: posLineItem
              string: Costo de envío
            - name: rightSideItem
              string: ${returnedDeliveryFee}

      - arithmetic:
          expression: ${subtotal} + ${returnedDeliveryFee}
          storeIn: estimatedTotalFromBottom

      - executeFunction:
          name: mx.functions.review-order.assertEstimatedTotal
          params:
            - name: posLineItem
              string: Total estimado
            - name: rightSideItem
              string: ${estimatedTotalFromBottom}
            - name: estimatedTotalFromBottom
              string: ${estimatedTotalFromBottom}

      - executeFunction:
          name: mx.functions.review-order.assertEstimatedTotalFromButton
          params:
            - name: estimatedTotalFromButton
              string: ${estimatedTotalFromBottom}

      # #----------------------------------------------------------------------------------------------------------------
      # ## STEP 14: Select Pay at Delivery
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 14: Select Pay at Delivery"
            - name: squadNames
              string: PURCHASE | QAA

      - executeFunction:
          name: mx.functions.review-order.scrollUpToWallet

      - executeFunction:
          name: mx.flows.od.review-order.forceSelectPayAtDeliveryMethod
          params:
            - name: payAtDeliveryOption
              string: cash

      #----------------------------------------------------------------------------------------------------------------
      ## STEP 15: Place Order
      - executeFunction: 
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 15: Place Order"
            - name: squadNames
              string: PURCHASE | QAA

      - executeFunction:
          name: mx.functions.review-order.tapPlaceOrder

      - storeIn:
          key: OD_015_IS_CART_EMPTY
          value: true

      - if:
          condition: ${APP_PLATFORM} == 'ios'
          then:
            - executeFunction:
                name: mx.functions.utils.closeRateWalmartPopupIfDisplayed

      - executeFunction:
          name: mx.functions.order-confirmation.assertPageDisplayed
        
      - log:
          message: "Warning: Express delivery assertion pending, using instead 'HomeDelivery'"
          color: YELLOW

      - executeFunction:
          name: mx.functions.order-confirmation.assertDeliveryMethod
          params:
            - name: expectedDeliveryMethod
              string: HomeDelivery

      - executeFunction:
          name: mx.functions.order-confirmation.assertHomeDeliveryAddressByIndividualValues
          params:
            - name: streetName
              string: ${returnedStreetName}
            - name: exteriorNumber
              string: ${returnedExteriorNumber}
            - name: city
              string: ${returnedCity}
            - name: state
              string: ${returnedState}
            - name: zipCode
              string: ${returnedZipCode}

      - executeFunction:
          name: mx.functions.order-confirmation.getOrderNumber

      - storeIn:
          key: tc_OrderNumber
          value: ${returnedOrderNumber}

      - executeFunction:
          name: mx.functions.utils.getDeliverySlot
          params:
            - name: forPage
              string: 'OrderConfirmation'
            - name: selectedDaySlot
              string: ${returnedSelectedDaySlot}
            - name: selectedTimeSlot
              string: ${returnedSelectedTimeSlot}

      - if:
          condition: ${APP_PLATFORM} == 'ios'
          then:
            - getString:
                identifier: mx.mappings.order-confirmation.homeAddress
                storeIn: returnedShortAddressWithCommas
          else:
            - getString:
                identifier: mx.mappings.cart.userShortAddress
                storeIn: returnedShortAddressWithCommas

      - executeFunction:
          name: mx.functions.order-confirmation.assertDeliverySlot
          params:
            - name: expectedDeliverySlot
              string: ${returnedDeliverySlot}

    ##----------------------------------------------------------------------------------------------------------------
      # ## STEP 16: Hit 'Descubrir mas productos' button
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 16: Hit 'Descubrir mas productos' button"
            - name: squadNames
              string: PURCHASE | QAA

      - executeFunction:
          name: mx.functions.order-confirmation.tapFindMoreProducts

      - sleep:
          duration: 3000

      - executeFunction:
          name: mx.functions.home.scrollUpToLocationBanner

      - executeFunction:
          name: mx.functions.home.assertPageLoaded

      # #----------------------------------------------------------------------------------------------------------------
      # ## "STEP 17: Go to Profile screen and select 'Pedidos'"
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 17: Go to Profile screen and select 'Pedidos'"
            - name: squadNames
              string: CUSTOMER | QAA

      - executeFunction:
          name: mx.functions.bottom-menu.tapAccount
      
      - executeFunction:
          name: mx.functions.account.assertPageDisplayed
      
      - executeFunction:
          name: mx.functions.account.openOrdersHistory

      - executeFunction:
          name: mx.functions.orders-history.assertPageDisplayed

      #----------------------------------------------------------------------------------------------------------------
      #- log: "STEP 18: Select the newest placed order"
      - executeFunction:
          name: mx.squad-reporting.setTestCaseStep
          params:
            - name: step
              string: "STEP 18: Select the newest placed order"
            - name: squadNames
              string: POST-PURCHASE | QAA
      
      - executeFunction:
          name: mx.functions.orders-history.tapOrderDetailsByPosition
          params:
            - name: position
              string: "1"

      - executeFunction:
          name: mx.functions.order-details.assertCorrectOrderDisplayed
          params:
            - name: expectedOrderNumber
              string: ${tc_OrderNumber}

      - scroll:
          direction: up
          untilIdentifier: mx.mappings.order-details.orderNumber
          position: up
          scrollLimit: 3

      - executeFunction:
          name: mx.functions.order-details.expandProductsDetailsIfNotExpanded

  #----------------------------------------------------------------------------------------------------------------

      - storeIn:
          key: OD_015_SUCCESSFUL_EXECUTION
          value: true

      - log: "TEST END: QAA - OD - PRODUCTION SANITY - OD-015"

  #####################################################################################################################

  - name: Before
    before: true
    flow:
      - log: "BEFORE SCENARIO START: Initial Config..."
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - log:
                message: "WORKAROUND: RELAUNCHING APP TO FIX ISSUE REGARDING INTERNAL APP FLAGS"
                color: YELLOW
            - executeFunction:
                name: mx.functions.utils.relaunchApp
      - storeIn:
          key: OD_015_SUCCESSFUL_EXECUTION
          value: false
      - executeFunction:
          name: mx.squad-reporting.setTestCaseName
          params:
            - name: testCaseName
              string: GMX_OD_Sanity_PROD_Android_015
      - log: "BEFORE SCENARIO END"

#####################################################################################################################

  - name: After
    after: true
    flow:
      - executeFunction:
          name: mx.squad-reporting.logTestCaseFailure
          params:
            - name: testCaseExecutionStatus
              string: ${OD_015_SUCCESSFUL_EXECUTION}
      - if:
          condition: ${OD_015_SUCCESSFUL_EXECUTION} != true
          then:
            - executeFunction:
                name: mx.flows.od.after-scenario-exclusive.emptyCart
                params:
                  - name: userEmail
                    string: mx.data.e2e-regression.od-015.userEmail
                  - name: userPassword
                    string: mx.data.e2e-regression.od-015.userPassword
                  - name: isCartEmpty
                    string: ${OD_015_IS_CART_EMPTY}
            - failTest:
                message: "Main Scenario Failed: the After Scenario will propagate the failure to ensure SauceLabs run shows correct execution status."
          else:
            - log:
                message: "Main Scenario ended Successfully, no need to reset data."
                color: CYAN
      - log: "AFTER SCENARIO END"