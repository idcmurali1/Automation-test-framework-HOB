inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

envs:
  global:
    variables:
      MARKET: sellerCenter
      APP_PLATFORM: android
      POST_TO_ES: true
      USE_TEST_REPORT: true
      SAUCE_APP: 'storage:filename=sc-development-latest.apk'
      SLACK_CHANNEL: sc-app-automation-result
      APP_BUILD_BRANCH: development-latest
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: sellerCenter/e2e-tests/dependencies/android/android-default.yaml
      APPLITOOLS_API_KEY: ENC[Rt+/oXg4fNf9b2Pq2MQ47frfGB42KVDp7l7/tQ/1na985VV7Ia42QMgDDOppIoaDTWfXJmsQW0Imo7rpXjXaQQ==]
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"

  # Environment profiles can be specified here with specific environment variable values.
  env_android_teflon:
    variables:
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon
      TEST_TAGS: sc-e2e
      DEPENDENCY_PROFILE: looper-teflon

  env_android_prod_on_teflon:
    variables:
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon
      TEST_TAGS: p1-sc-prod-e2e
      DEPENDENCY_PROFILE: looper-teflon

  # Environment profiles can be specified here with specific environment variable values.
  env_android_prod:
    variables:
      GLASS_ENV: production
      MAPPING_LABELS: production
      TEST_TAGS: p1-sc-prod-e2e
      DEPENDENCY_PROFILE: looper
      # EMAIL_SUBJECT: Apps android E2E Seller center Test Complete - Build ${BUILD_ID}
      # EMAIL_MESSAGE:
      #   "Test Results:
      #   https://e2e-grafana.walmart.com/d/adonyf5ojjwu8e/apps-e2e-test-results-sellercenter?orgId=1&from=now-7d&to=now&var-platform=${APP_PLATFORM}&var-profile=development-latest&var-buildId=${BUILD_ID}&var-testTag=p1-sc-prod-e2e"

flows:

  setup:
    - hygieia.publishBuild()
    - shell (name Remove node_modules): |
        rm -frv node_modules
    - shell (name npm cache clear): |
        npm cache clear --force
    - shell (name sleep 10): |
        sleep 10
    - shell (name npm install): |
        npm install
    - if: |
        %{USE_CUSTOM_R2_JAR == 'false'}
      then:
        - shell (name download r2 binary): |
            npm run download-r2
      else:
        - shell: echo Using custom R2 jar

  run_tests_teflon:
    - call: build_tunnel(env_android_teflon)

  run_tests_prod_on_teflon:
    - call: build_tunnel(env_android_prod_on_teflon)

  run_tests_prod:
    - call: build_tunnel(env_android_prod)

  build_tunnel:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - shell: npm i -g saucelabs@7.2.2
              - call: start_sc
          - call: execute_test
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - call: stop_sc
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          # - if: |
          #     %{GLASS_ENV == 'production'}
          #   then:
          #     - call: slack_test_run_helper
          - call: post_test_results_json_to_es
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: post_email(email)

  start_sc:
    - shell:
        sl sc --region us-west-1 --no-autodetect --tunnel-name "sc-sauce-tunnel-${BUILD_ID}" > sc.log 2>&1 &
    - shell: sleep 30s
    - shell: cat sc.log

  stop_sc:
    try:
      - shell: pkill -f '/bin/sc'
    catch:
      - echo "Stop Sauce Connect Tunnel failed - $flowErrorMessage"
