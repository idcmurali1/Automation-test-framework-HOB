functions:

  ###########################################################################################
  # Description : Function to issue refund for an item with in full or based on given qty   #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]    ${refundQty}      - [For partial refund, qty of items to be refunded]     #
  #                                   [default '1']                                         #
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in return details page                                        #
  ###########################################################################################
  - name: sc.functions.returns.issueRefund
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.itemDetails.issueRefund
      - click:
          identifier: sc.mappings.returns.itemDetails.issueRefund
      - sleep:
          duration: 3000
      - if:
          identifier:
            present:
              - identifier: sc.mappings.returns.itemDetails.issueRefund.count
          then:
            - if:
                condition: ${refundQty} == null
                then:
                  - storeIn:
                      key: refundQty
                      value: 1
            - loop:
                begin: 0
                end: ${refundQty}
                flow:
                  - click:
                      identifier: sc.mappings.returns.itemDetails.issueRefund.incrementCount
                  - sleep:
                      duration: 1000
            - click:
                identifier: sc.mappings.returns.itemDetails.issueRefund.refundNow
      - storeIn:
          key: refundQty
          value: 'null'

  ###########################################################################################
  # Description : Function to select the first return tile from the list                    #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]  ${validateData}   - true/false [Default false].                             #
  #                                 If true, rma is mandatory.                              #
  # [optional]  ${rma}            - [Previously fetched RMA number to be validated against] #
  ###########################################################################################
  - name: sc.functions.returns.selectFirstReturnRecord
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.firstReturnCard
      - sleep:
          duration: 5000
      - if:
          condition: ${validateData}
          then:
            - storeIn:
                key: index
                value: 1
            - if:
                condition: ${APP_PLATFORM} == 'android'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: sc.mappings.returns.nthReturnCard
                          contains: ${rma}
                else:
                  - getString:
                      identifier: sc.mappings.returns.nthReturnCard
                      attribute: name
                      storeIn: rmaNumber
                  - verifyValue:
                      identifier: ${rmaNumber}
                      contains: ${rma}
      - click:
          identifier: sc.mappings.returns.firstReturnCard
      - sleep:
          duration: 3000
      - executeFunction:
          name: sc.functions.reloadPage
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.returnDetails.header
      - storeIn:
          key: validateData
          value: 'null'

  ###########################################################################################
  # Description : Function to verify if the searched return RMA is displayed or not         #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]  ${validateData}  - true/false [Default false].                              #
  #                                 If true, RMA & itemId is mandatory.                     #
  # [optional]  ${rma}      - [Previously fetched RMA number to be validated against]       #
  # [optional]  ${itemId}   - [Previously fetched Item Id to be validated against]          #
  ###########################################################################################
  - name: sc.functions.returns.verifyReturnDetails
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.returnDetails.header
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.returnDetails.returnTitle
      - executeFunction:
          name: sc.functions.returns.verifyReturnDetailsPage
    
  ###########################################################################################
  # Description : Function to verify return details page display of a specifc return        #
  ###########################################################################################
  - name: sc.functions.returns.verifyReturnDetailsPage
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.returnDetails.orderLink
            - identifier: sc.mappings.returns.returnDetails.rmaValue
      - if:
          condition: ${validateData}
          then:
            - if:
                condition: ${APP_PLATFORM} == 'android'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: sc.mappings.returns.returnDetails.rmaValue
                          equals: ${rma}
                        - identifier: sc.mappings.returns.itemDetails.items.itemIdValue
                          equals: ${itemId}
                else:
                  - verifyIdentifier:
                      label:
                        - identifier: sc.mappings.returns.returnDetails.rmaValue
                          equals: ${rma}
                        - identifier: sc.mappings.returns.itemDetails.items.itemIdValue
                          equals: ${itemId}
      - storeIn:
          key: validateData
          value: 'null'

  ###########################################################################################
  # Description : Function to apply filters for returns display                             #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]  ${initiatedChannel} - In store/Customer Care/My Account/Carrier/Seller      #
  # [optional]  ${currentStatus}    - Initiated/In transit/Delivered/Invoiced/Cancelled     #
  #                                            /Received/Action needed                      #
  # NOTE : ANY ONE OF THE ABOVE FILTER IS MANDATORY                                         #
  ###########################################################################################
  - name: sc.functions.returns.filterReturns
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.filterButton
      - click:
          identifier: sc.mappings.returns.filterButton
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.filters.filterTitle
      - if:
          identifier:
            present:
              - identifier: sc.mappings.returns.filters.resetButton
          then:
            - click:
                identifier: sc.mappings.returns.filters.resetButton
      - if:
          condition: ${initiatedChannel} != null
          then:
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.returns.filters.initiatedChannel
            - click:
                identifier: sc.mappings.returns.filters.initiatedChannel
      - if:
          condition: ${currentStatus} != null
          then:
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.returns.filters.currentStatus
            - click:
                identifier: sc.mappings.returns.filters.currentStatus
      - click:
          identifier: sc.mappings.orders.filters.viewResults
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.firstReturnCardOrNoResult
      - sleep:
          duration: 5000
      - storeIn:
          key: initiatedChannel
          value: 'null'
      - storeIn:
          key: currentStatus
          value: 'null'

  ###########################################################################################
  # Description : Function to select quick filter                                           #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${quickFilter}   - Initiated / Received / Completed / Action Needed / All  #
  ###########################################################################################
  - name: sc.functions.returns.quickFilterReturns
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.quickFilterSection
      - if:
          identifier:
            notPresent:
              - identifier: sc.mappings.returns.quickFilters
          then:
            - scroll:
                direction: left
                withinIdentifier: sc.mappings.returns.quickFilterSection
                untilIdentifier: sc.mappings.returns.quickFilters
            - sleep:
                duration: 1000
      - click:
          identifier: sc.mappings.returns.quickFilters
      - verifyIdentifier:
          notPresent:
            - identifier: sc.mappings.navigation.spinner
      - executeFunction:
          name: sc.functions.reloadPage
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.firstReturnCardOrNoResult
            - identifier: sc.mappings.returns.selectedQuickFilter

  ###########################################################################################
  # Description : Function to verify if quick filter selection is proper                    #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]   ${quickFilter}          - Initiated / Received / Completed                #
  #                                                   / Action Needed / All                 #
  # [optional]    ${validateReturn}        - true/false [default false]                     #
  #                                         [If true, validates the return status as well]  #
  # [optional]    ${validateReturnIndexes} - [default 1] Indexes of orders to be verified   # 
  ###########################################################################################
  - name: sc.functions.returns.verifyQuickFilters
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.selectedQuickFilter
      - if:
          condition: ${validateReturn}
          then:
            - if:
                condition: ${validateReturnIndexes} == null
                then:
                  - storeIn:
                      key: validateReturnIndexes
                      value: 1
            - executeNode:
                file: sellerCenter/e2e-tests/helpers/generateR2Array.js
                args:
                  - value: ${validateReturnIndexes}
                getResponse:
                  storeIn: indexesToBeValidated
            - loop:
                each: ${indexesToBeValidated}
                storeElement: index
                flow:                
                  - executeFunction:
                      name: sc.functions.returns.fetchReturnStatus
                  - executeFunction:
                      name: sc.functions.returns.verifySingleReturnStatus
                      params:
                        - name: returnStatus
                          string: ${returnStatus}
                        - name: quickFilter
                          string: ${quickFilter}
      - storeIn:
          key: validateReturn
          value: false

  ###########################################################################################
  # Description : Function to verify return status                                          #
  # --------------------------------------------------------------------------------------- #
  # [mandatory]   ${quickFilter}          - Initiated / Received / Completed                #
  #                                                   / Action Needed / All                 #
  # [mandatory]   ${returnStatus}         - Fetched return status of an entry               #
  ###########################################################################################  
  - name: sc.functions.returns.verifySingleReturnStatus
    flow:
      - storeIn:
          key: expectedStatus
          value: 'null'
      - if:
          condition: ${quickFilter} == 'All'
          then:
            - log: Skipping status validations for quickFilter 'All'
          else:
            - if:
                condition: ${quickFilter} == 'Initiated'
                then:
                  - if:
                      condition: ${returnStatus} == ${quickFilter} || ${returnStatus} == '2 statuses'
                      then:
                        - log: Return status is proper. It is in status '${returnStatus}'.
                      else:
                        - storeIn:
                            key: expectedStatus
                            value: '${quickFilter} or 2 statuses'
                else:
                  - if:
                      condition: ${quickFilter} == 'Received'
                      then:
                        - try:
                            flow:
                              - verifyValue:
                                  identifier: ${returnStatus}
                                  contains: Refund Now
                            catch:
                              flow:
                                - verifyValue:
                                    identifier: ${returnStatus}
                                    contains: hours to refund
                        - log: Return status is proper. It is in status '${returnStatus}'.
                      else:
                        - if:
                            condition: ${quickFilter} == 'Completed'
                            then:
                              - if:
                                  condition: ${returnStatus} == 'Refunded' || ${returnStatus} == '2 statuses'
                                  then:
                                    - log: Return status is proper. It is in status '${returnStatus}'.
                                  else:
                                    - storeIn:
                                        key: expectedStatus
                                        value: 'Refunded or 2 statuses'
      - if:
          condition: ${expectedStatus} != null
          then:
            - failTest:
                message: Return status supposed to be in status ${expectedStatus} but in status '${returnStatus}'

  ###########################################################################################
  # Description : Function to fetch status of a Return entry                                #
  # --------------------------------------------------------------------------------------- #
  # [optional]    ${index}                - [ Default 1 ] (entry index to fetch status)     #
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in return list page either with search or quick filter results#
  ###########################################################################################
  - name: sc.functions.returns.fetchReturnStatus
    flow:
      - if:
          condition: ${index} == null
          then:
            - storeIn:
                key: index
                value: 1
      - if:
          identifier:
            notPresent:
              - identifier: sc.mappings.returns.returnCard
          then:
            - scroll:
                direction: down
                untilIdentifier: sc.mappings.returns.returnCard
                scrollLimit: 10
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - getString:
                identifier: sc.mappings.returns.returnCard
                storeIn: returnStatus
          else:
            - getString:
                identifier: sc.mappings.returns.returnCard
                attribute: label
                storeIn: returnStatus
            - executeNode:
                file: sellerCenter/e2e-tests/helpers/stringModules.js
                args:
                  - value: ${returnStatus}
                  - value: ','
                getResponse:
                  storeIn: returnStatus
      - log: ${returnStatus}
      - storeIn:
          key: index
          value: 'null'

  ###########################################################################################
  # Description : Function to fetch return details data and store it from details page      #
  #               To be used for any search or filter validations as required               #
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in return details page of a return record                     #
  ###########################################################################################
  - name: sc.functions.returns.returnDetails.fetchReturnData
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.returnDetails.header
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - getString:
                identifier: sc.mappings.returns.returnDetails.rmaValue
                attribute: text
                storeIn: rma
            - getString:
                identifier: sc.mappings.returns.itemDetails.items.itemIdValue
                attribute: text
                storeIn: itemId
          else:
            - getString:
                identifier: sc.mappings.returns.returnDetails.rmaValue
                attribute: label
                storeIn: rma
            - getString:
                identifier: sc.mappings.returns.itemDetails.items.itemIdValue
                attribute: label
                storeIn: itemId
      - log: RMA - ${rma} / Item Id - ${itemId}

  - name: sc.functions.createOrder
    flow:
      # # Fetch stock available items using fetch API
      # - executeFunction:
      #     name: sc.functions.utils.getSearchableItem
      #     params:
      #       - name: source
      #         string: astro
      #       - name: storeId
      #         string: 32144
      #       - name: itemType
      #         string: STORE_SCHEDULED_DELIVERY
      #       - name: backupItem
      #         string: 591794662
      #       - name: itemFilter
      #         string: mpproseller

      # - storeIn:
      #     key: item1
      #     value: $itemFetched

      - storeIn:
          key: item1
          value: 5014996115

      - executeFunction:
          name: sc.functions.utils.astro.createOrder
          params:
            - name: payload
              string: sc.data.createOrderPayload

      - executeFunction:
          name: sc.functions.utils.astro.getOrderStatus

      # - storeIn:
      #       key: orderNo
      #       value: 100000504098407

      - executeFunction:
          name: sc.functions.utils.astro.setOrderStatus
          params:
            - name: orderNo
              string: ${orderNo}
            - name: orderType
              string: MP_DELIVERY
            - name: status
              string: Delivered

      - sleep:
          duration: 5000

      - executeFunction:
          name: sc.functions.utils.astro.triggerDriverreturnedstatus
          params:
            - name: orderNo
              string: ${orderNo}
            - name: orderType
              string: STORE_SCHEDULED_DELIVERY
            - name: status
              string: Returned

  ###########################################################################################
  # Description : Common Function to save the values and select the card in returns        #
  # * This is common function for both ios and android
  ###########################################################################################
  - name: sc.functions.returns.saveItemDetailsAndSelect
    flow:
      # index is needed to select the n-th item from the list
      - if:
          condition: ${index} == null
          then:
            - storeIn:
                key: index
                value: 1
      - getString:
          identifier: sc.mappings.returnsListView.listItems.rmaWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: rmaValue
      # To replace the RMA text from the number with empty value
      - executeNode:
          file: sellerCenter/e2e-tests/helpers/stringParsing.js
          args:
            - value: ${rmaValue}
            - value: replace
            - value: 1
            - value: "RMA #: "
          getResponse:
            storeIn: rmaValue
      - getString:
          identifier: sc.mappings.returnsListView.listItems.priceWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: priceValue
      - getString:
          identifier: sc.mappings.returnsListView.listItems.itemNameWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: itemNameValue
      - getString:
          identifier: sc.mappings.returnsListView.listItems.reasonWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: reasonValue
      - getString:
          identifier: sc.mappings.returnsListView.listItems.qtyWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: qtyValue
      - executeFunction:
          name: sc.functions.items.selectFirstItem

  ###########################################################################################
  # Description : Common Function to validate the item details page details section         #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function
  # [mandatory]  ${itemNameValue} - comes from previous function where first tiem is selected
  ###########################################################################################
  - name: sc.functions.returns.item.validateItemDetails
    flow:
      - log: test ${itemNameValue}

      - executeFunction:
          name: sc.functions.returns.item.itemDetails.details

      - executeFunction:
          name: sc.functions.returns.item.itemDetails.items

      - executeFunction:
          name: sc.functions.returns.item.itemDetails.refund

  ###########################################################################################
  # Description : Function to validate the details section in return details page           #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function
  ###########################################################################################
  - name: sc.functions.returns.item.itemDetails.details
    flow:
      - executeFunction:
          name: sc.functions.resetFailedString
      - log: "details: validate RMA"
      - executeFunction:
          name: sc.functions.validateText.contains
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.details.rmaTitle
            - name: expectedValue
              string: RMA
            - name: identifierName
              string: RMA Title
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.returnDetails.rmaValue
            - name: expectedValue
              string: ${rmaValue}
            - name: identifierName
              string: RMA Value
      - log: "details: validate Reason"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.details.reasonTitle
            - name: expectedValue
              string: Reason
            - name: identifierName
              string: reason Title
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.details.reasonValue
            - name: expectedValue
              string: ${reasonValue}
            - name: identifierName
              string: Reason Value
      - log: "details: validate Initiated Channel"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.details.initiatedTitle
            - name: expectedValue
              string: Origin of return
            - name: identifierName
              string: Origin Return
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.details.initiatedValue
            - name: expectedValue
              string: "My Account"
            - name: identifierName
              string: Initiated Channel Value
      - log: "details: validate Status"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.details.statusTitle
            - name: expectedValue
              string: Status
            - name: identifierName
              string: Status Title
      - executeFunction:
          name: sc.functions.validateText.matchesWith
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.details.statusValue
            - name: expectedValue
              string: ${itemStatusValue}
            - name: identifierName
              string: Status Value (User Check)
      - executeFunction:
          name: sc.functions.validatedFailedString

  ###########################################################################################
  # Description : Function to validate the items section in return details page             #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function
  ###########################################################################################
  - name: sc.functions.returns.item.itemDetails.items
    flow:
      - executeFunction:
          name: sc.functions.resetFailedString
      - log: "items: validate Items section title"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.title
            - name: expectedValue
              string: Items
            - name: identifierName
              string: Items Title
      - log: "items: validate Item Name"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.itemName
            - name: expectedValue
              string: ${itemNameValue}
            - name: identifierName
              string: Item Name
      - log: "items: validate Price"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.priceTitle
            - name: expectedValue
              string: Price
            - name: identifierName
              string: Price Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.priceValue
            - name: identifierName
              string: Price Value
      - log: "items: validate Condition"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.conditionTitle
            - name: expectedValue
              string: Condition
            - name: identifierName
              string: Condition Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.conditionValue
            - name: identifierName
              string: Condition Value
      - log: "items: validate Item ID"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.itemIdTitle
            - name: expectedValue
              string: Item ID
            - name: identifierName
              string: Item ID Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.itemIdValue
            - name: identifierName
              string: Item ID Value
      - log: "items: validate Qty"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.qtyTitle
            - name: expectedValue
              string: Qty
            - name: identifierName
              string: Qty Title
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.qtyValue
            - name: expectedValue
              string: ${qtyValue}
            - name: identifierName
              string: Qty Value
      - log: "items: validate Status"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.statusTitle
            - name: expectedValue
              string: Status
            - name: identifierName
              string: Status Title
      - executeFunction:
          name: sc.functions.validateText.matchesWith
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.items.statusValue
            - name: expectedValue
              string: ${itemStatusValue}
            - name: identifierName
              string: Status Value (User Check)
      - executeFunction:
          name: sc.functions.validatedFailedString

  ###########################################################################################
  # Description : Function to validate the items section in return details page             #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function
  ###########################################################################################
  - name: sc.functions.returns.item.itemDetails.refund
    flow:
      - executeFunction:
          name: sc.functions.resetFailedString

      - log: "items: validate Refund section title"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.refund.title
            - name: expectedValue
              string: Refund
            - name: identifierName
              string: Refund Title

      - log: "items: validate Status"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.refund.statusTitle
            - name: expectedValue
              string: Status
            - name: identifierName
              string: Status Title
      - if:
          condition: ${refundStatusValue} != null && ${refundStatusValue} != 'null'
          then:
            - executeFunction:
                name: sc.functions.validateText.equals
                params:
                  - name: identifier
                    string: sc.mappings.returns.itemDetails.refund.statusValue
                  - name: expectedValue
                    string: ${refundStatusValue}
                  - name: identifierName
                    string: Status Value

      - log: "items: validate Shipping"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.refund.shippingTitle
            - name: expectedValue
              string: Shipping
            - name: identifierName
              string: Shipping Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.refund.shippingValue
            - name: identifierName
              string: Shipping Value

      - log: "items: validate Taxes"
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.refund.taxesTitle
            - name: expectedValue
              string: Taxes
            - name: identifierName
              string: Taxes Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.returns.itemDetails.refund.taxesValue
            - name: identifierName
              string: Taxes Value

      - executeFunction:
          name: sc.functions.validatedFailedString


  ###########################################################################################
  # Description : Function to select refund quanitity for selected item and issue refund    #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${refundType} - full/partial  - according to the value refund qty is selected
  ###########################################################################################  
  - name: sc.functions.returns.item.issueRefund
    flow:
      - executeNode:
          file: sellerCenter/e2e-tests/helpers/castString.js
          args:
            - value: ${qtyValue}
            - value: int
          getResponse:
            storeIn: returnQuantity

      - if:
          condition: ${returnQuantity} == 1
          then:
            - if:
                condition: ${issueRefund} != null && ${issueRefund} == true
                then:
                - click:
                    identifier: sc.mappings.returns.itemDetails.issueRefund
          else:
            - click:
                identifier: sc.mappings.returns.itemDetails.issueRefund
            - if:
                condition: ${refundType} == 'full'
                then:
                  - storeIn:
                      key: refundQuantity
                      value: ${returnQuantity}
                else:
                  - arithmetic:
                      expression: ${returnQuantity} - 1
                      storeIn: refundQuantity
            - loop:
                begin: 0
                end: ${refundQuantity}
                storeIndex: index
                mode: increment
                flow:
                  - click:
                      identifier: sc.mappings.returns.itemDetails.issueRefund.incrementCount
                  - sleep:
                      duration: 1000
            - getString:
                identifier: sc.mappings.returns.itemDetails.issueRefund.count
                attribute: ${identifierTextAttribute}
                storeIn: maxRefundQuantity
            - if: 
                condition: ${APP_PLATFORM} == 'android'
                then:
                  - storeIn:
                      key: maxRefundQuantity
                      value: "${maxRefundQuantity} of ${returnQuantity}"
            - if:
                condition: ${refundType} == 'full'
                then:
                  - if:
                      condition: ${maxRefundQuantity} != 'Max ${returnQuantity} of ${returnQuantity}'
                      then:
                        - failTest:
                            message: "Max Quantity - Expected: ${returnQuantity}, Actual: ${maxRefundQuantity}"
                else:
                  - if:
                      condition: ${maxRefundQuantity} == 'Max ${returnQuantity} of ${returnQuantity}'
                      then:
                        - failTest:
                            message: "Max Quantity - Expected: ${returnQuantity} should not equal Actual: ${maxRefundQuantity}"            
            - if:
                condition: ${issueRefund} != null && ${issueRefund} == true
                then:
                  - click:
                      identifier: sc.mappings.returns.itemDetails.issueRefund.refundNow
            - verifyIdentifier:
                timeout: 10000
                present:
                  - identifier: sc.mappings.returns.returnDetails.refundSnackBar

  ###########################################################################################
  # Description : Function to verify if Issue Refund button is not present in return        #
  # details page                                                                            #
  # * This is common function for both ios and android                                      #
  ###########################################################################################  
  - name: sc.functions.return.item.validateRefundOption.isNotPresent
    flow:
      - verifyIdentifier:
          timeout: 1000
          notPresent:
            - identifier: sc.mappings.returns.itemDetails.issueRefund

  ###########################################################################################
  # Description : Function to verify if status is shown as Refunded in return details page  #
  # * This is common function for both ios and android                                      #
  ###########################################################################################  
  - name: sc.functions.returns.returnDetails.verifyRedundedStatus
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.returns.returnDetails.refundedStatus
