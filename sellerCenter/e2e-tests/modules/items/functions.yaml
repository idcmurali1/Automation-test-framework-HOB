functions:

  ###########################################################################################
  # Description : Function to search for a specific item                                    #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${searchValue}          - Item ID, SKU ..to be searched                    #
  ###########################################################################################
  - name: sc.functions.items.searchItem
    flow:
      - if:
          identifier:
            present: 
              - identifier: sc.mappings.items.search
          then:
            - click:
                identifier: sc.mappings.items.search
          # else:
          #   - click:
          #       identifier: sc.mappings.items.searchBar
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.searchField
      - enterText:
          identifier: sc.mappings.items.searchField
          string: ${searchValue}
          clearField: true
          pressEnter: true
      - if:
          condition: ${APP_PLATFORM} == 'ios'
          then:
            - click:
                identifier: sc.mappings.items.searchFieldIcon
      - sleep:
          duration: 5000
      - if:
          condition: ${selectItem} == true
          then:
            - executeFunction:
                name: sc.functions.items.selectFirstItem


  ###########################################################################################
  # Description : Function to select the first item from the list                           #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]  ${validateData}   - true/false [Default false].                             #
  #                                 If true, itemSKU is mandatory.                          #
  # [optional]  ${itemSKU}        - [Previously fetched itemSKU to be validated against]    #
  ###########################################################################################
  - name: sc.functions.items.selectFirstItem
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.firstItemCard
      - sleep:
          duration: 5000
      - if:
          condition: ${validateData}
          then:
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.item.nthItemCardSKU
      - click:
          identifier: sc.mappings.items.firstItemCard
      - sleep:
          duration: 3000
      - executeFunction:
          name: sc.functions.reloadPage
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.header
      - storeIn:
          key: validateData
          value: 'null'

  ###########################################################################################
  # Description : Function to verify if the searched item is displayed or not               #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]  ${validateData}   - true/false [Default false].                             #
  #                                 If true, itemSKU & itemId are mandatory.                #
  # [optional]  ${itemSKU}        - [Previously fetched item Id to be validated against]    #
  # [optional]  ${itemId}         - [Previously fetched item SKU to be validated against]   #
  ###########################################################################################
  - name: sc.functions.items.verifyItem
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.header
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.itemTitle
      - executeFunction:
          name: sc.functions.items.verifyItemDetailsPage

  ###########################################################################################
  # Description : Function to verify item details page display of a specifc item            #
  ###########################################################################################
  - name: sc.functions.items.verifyItemDetailsPage
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.itemId
            - identifier: sc.mappings.items.itemDetails.sku
      - if:
          condition: ${quickFilter} != null
          then:
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.items.itemDetails.status
      - if:
          condition: ${validateData}
          then:
            - if:
                condition: ${APP_PLATFORM} == 'android'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: sc.mappings.items.itemDetails.itemId
                          equals: ${itemId}
                        - identifier: sc.mappings.items.itemDetails.sku
                          equals: ${itemSKU}
                else:
                  - verifyIdentifier:
                      label:
                        - identifier: sc.mappings.items.itemDetails.itemId
                          equals: ${itemId}
                        - identifier: sc.mappings.items.itemDetails.sku
                          equals: ${itemSKU}
      - storeIn:
          key: validateData
          value: 'null'

  ###########################################################################################
  # Description : Function to apply filters for item display                                #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]  ${inventoryType}        - Available / Out of stock / Out of stock today     #
  # [optional]  ${fulfillmentType}      - Seller fulfilled / WFS / WFS eligible             #
  # [optional]  ${minPrice}             - Item minimum price ...                            #
  # [optional]  ${maxPrice}             - Item maximum price ...                            #
  # NOTE : Any one of the above filter is mandatory                                         #
  ###########################################################################################
  - name: sc.functions.items.filterItems
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.filter
      - click:
          identifier: sc.mappings.items.filter
      - if:
          identifier:
            present:
              - identifier: sc.mappings.items.filters.resetButton
          then:
            - click:
                identifier: sc.mappings.items.filters.resetButton
      - executeFunction:
          name: sc.functions.items.filters.setMinMaxPrice
      - if:
          condition: ${inventoryType} != null
          then:
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.items.filters.inventory
            - click:
                identifier: sc.mappings.items.filters.inventory
      - if:
          condition: ${fulfillmentType} != null
          then:
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.items.filters.fulfillments
            - click:
                identifier: sc.mappings.items.filters.fulfillments
      - click:
          identifier: sc.mappings.items.filters.viewResults
      - sleep:
          duration: 15000
      - verifyIdentifier:
          timeout: 120000
          present:
            - identifier: sc.mappings.items.firstItemCardOrNoResult
      - storeIn:
          key: minPrice
          value: 'null'
      - storeIn:
          key: maxPrice
          value: 'null'
      - storeIn:
          key: inventoryType
          value: 'null'
      - storeIn:
          key: fulfillmentType
          value: 'null'   

  ###########################################################################################
  # Description : Function to select quick filter                                           #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${quickFilter}       - Unpublished / Draft / Error / Published / Precessing#
  ###########################################################################################
  - name: sc.functions.items.quickFilterItems
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.quickFilterSection
      - if:
          identifier:
            notPresent:
              - identifier: sc.mappings.items.quickFilters
          then:
            - scroll:
                direction: left
                withinIdentifier: sc.mappings.items.quickFilterSection
            - sleep:
                duration: 1000
      - click:
          identifier: sc.mappings.items.quickFilters
      - sleep:
          duration: 5000
      - executeFunction:
          name: sc.functions.reloadPage
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.firstItemCardOrNoResult
            - identifier: sc.mappings.items.selectedQuickFilter

  ###########################################################################################
  # Description : Function to verify if quick filter selection is proper                    #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]   ${quickFilter}          - Unpublished / Error / Published                 #
  #                                                     / Processing / Draft                #
  # [optional]    ${validateItem}         - true/false [default false]                      #
  #                                         [If true, validates the item status as well]    #
  # [optional]    ${validateItemIndexes}  - [default 1] Indexes of items to be verified     # 
  ###########################################################################################
  - name: sc.functions.items.verifyQuickFilters
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.selectedQuickFilter
      - if:
          condition: ${validateItem}
          then:
            - if:
                condition: ${validateItemIndexes} == null
                then:
                  - storeIn:
                      key: validateItemIndexes
                      value: 1
            - executeNode:
                file: sellerCenter/e2e-tests/helpers/generateR2Array.js
                args:
                  - value: ${validateItemIndexes}
                getResponse:
                  storeIn: indexesToBeValidated
            - loop:
                each: ${indexesToBeValidated}
                storeElement: index
                flow:                
                  - executeFunction:
                      name: sc.functions.items.fetchItemStatus
                  - executeFunction:
                      name: sc.functions.items.verifySingleItemStatus
                      params:
                        - name: itemStatus
                          string: ${itemStatus}
                        - name: quickFilter
                          string: ${quickFilter}
      - storeIn:
          key: validateItem
          value: false

  ###########################################################################################
  # Description : Function to navigate to edit inventory page                               #
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in item details page of an item                               #
  ###########################################################################################
  - name: sc.functions.items.navigateTo.editInventory
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.itemTitle
      - click:
          identifier: sc.mappings.items.itemDetails.editInventory
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.inventory.title

  ###########################################################################################
  # Description : Function to add new seller fulfillment for an item                        #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]  ${fulfillmentCenterName}  - Name of fulfillment center to increase inventory#
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in item details page of an item                               #
  ###########################################################################################
  - name: sc.functions.items.AddNewItemSellerFulfillment
    flow:
      - executeFunction:
          name: sc.functions.items.navigateTo.editInventory
      - sleep:
          duration: 5000
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.inventory.addFulfillmentCenter
      - click:
          identifier: sc.mappings.items.inventory.addFulfillmentCenter
      - sleep:
          duration: 5000
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.inventory.addFulfillmentCenter.header
      - executeFunction:
          name: sc.functions.items.selectSellerFulfillment
      - click:
          identifier: sc.mappings.items.inventory.addFulfillmentCenter.nextButton
      - try:
          flow:
            - verifyIdentifier:
                timeout: 1000
                notPresent:
                  - identifier: sc.mappings.items.inventory.fcAlreadySelectedMessage
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.items.inventory.fulfillmentCenterName
          catch:
            flow:
              - verifyIdentifier:
                  present:
                    - identifier: sc.mappings.items.inventory.fulfillmentCenterName

  ###########################################################################################
  # Description : Function to verify item status of an item                                 #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${quickFilter}           - Unpublished / Published / Error                 #
  #                                                    / Processing / Draft                 #
  # [mandatory]  ${itemStatus}            - Fetched item status of an item                  #
  ###########################################################################################  
  - name: sc.functions.items.verifySingleItemStatus
    flow:
      - storeIn:
          key: expectedStatus
          value: 'null'
      - if:
          condition: ${quickFilter} != 'All' && ${quickFilter} != 'Draft'
          then:
            - if:
                condition: ${itemStatus} == ${quickFilter}
                then:
                  - log: Item status is proper. It is in status '${itemStatus}'.
                else:
                  - storeIn:
                      key: expectedStatus
                      value: ${quickFilter}
          else:
            - if:
                condition: ${quickFilter} == 'Draft'
                then:
                  - if:
                      condition: ${itemStatus} == 'Draft' || ${itemStatus} == 'Processing'
                      then:
                        - log: Item status is proper. It is in status '${itemStatus}'.
                      else:
                        - storeIn:
                            key: expectedStatus
                            value: 'Draft or Processing'
      - if:
          condition: ${expectedStatus} != null
          then:
            - failTest:
                message: Item status supposed to be in status ${expectedStatus} but in status '${itemStatus}'

  ###########################################################################################
  # Description : Function to fetch status of an Item. By default will fetch for 1st item   #
  # ---------------------------------------- Params --------------------------------------- #
  # [optional]    ${index}                - [ Default 1 ] (item index to fetch status)      #
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in item list page either with search or quick filter results  #
  ###########################################################################################
  - name: sc.functions.items.fetchItemStatus
    flow:
      - if:
          condition: ${index} == null
          then:
            - storeIn:
                key: index
                value: 1
      - if:
          identifier:
            notPresent:
              - identifier: sc.mappings.items.itemCard
          then:
            - scroll:
                direction: down
                untilIdentifier: sc.mappings.items.itemCard
                scrollLimit: 10
      - getString:
          identifier: sc.mappings.items.itemCard
          storeIn: itemStatus
      - log: ${itemStatus}
      - storeIn:
          key: index
          value: 'null'

  ###########################################################################################
  # Description : Function to fetch item details data and store it from details page        #
  #               To be used for any search or filter validations as required               #
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in item details page of an item                               #
  ###########################################################################################
  - name: sc.functions.items.itemDetails.fetchItemData
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.header
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - scroll:
                direction: down
            - getString:
                identifier: sc.mappings.items.itemDetails.itemId
                attribute: text
                storeIn: itemId
            - getString:
                identifier: sc.mappings.items.itemDetails.sku
                attribute: text
                storeIn: itemSKU
            - getString:
                identifier: sc.mappings.items.itemDetails.upc
                attribute: text
                storeIn: itemUPC
            - getString:
                identifier: sc.mappings.items.itemDetails.gtin
                attribute: text
                storeIn: itemGTIN
          else:
            - getString:
                identifier: sc.mappings.items.itemDetails.itemId
                attribute: label
                storeIn: itemId
            - getString:
                identifier: sc.mappings.items.itemDetails.sku
                attribute: label
                storeIn: itemSKU
            - getString:
                identifier: sc.mappings.items.itemDetails.upc
                attribute: label
                storeIn: itemUPC
            - getString:
                identifier: sc.mappings.items.itemDetails.gtin
                attribute: label
                storeIn: itemGTIN
      - log: Item id - ${itemId} / Item SKU - ${itemSKU} / Item UPC - ${itemUPC} / Item GTIN - ${itemGTIN}

  ###########################################################################################
  # Description : Function to add item (ISBM) from existing item details                    #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]    ${searchValue}                - item UPC/GTIN ... to be used for isbm    #
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in item list page                                             #
  ###########################################################################################
  - name: sc.functions.items.isbm.addItem
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.moreOptions
      - click:
          identifier: sc.mappings.items.moreOptions
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.isbm.link
      - click:
          identifier: sc.mappings.items.isbm.link
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.isbm.title
      - enterText:
          identifier: sc.mappings.items.isbm.search
          string: ${searchValue}
          pressEnter: true
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.isbm.firstCard
      - click:
          identifier: sc.mappings.items.isbm.firstCard
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.isbm.addItemButton
      - click:
          identifier: sc.mappings.items.isbm.addItemButton
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.isbm.itemImage
      - scroll:
          direction: down
      - click:
          identifier: sc.mappings.items.isbm.itemCondition.dropdown
      - click:
          identifier: sc.mappings.items.isbm.itemCondition.select
      - enterText:
          identifier: sc.mappings.items.isbm.SKU
          string: ${__randomalphanum:12}
      - enterText:
          identifier: sc.mappings.items.isbm.sellingPrice
          string: '10'
      - enterText:
          identifier: sc.mappings.items.isbm.shippingWeight
          string: '10'
      - click:
          identifier: sc.mappings.items.isbm.submit
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.isbm.verifyAddition

  - name: sc.functions.items.addItemFromHomePageValidations
    flow:
      - executeFunction:
          name: sc.functions.home.navigation.toShortcut
          params:
            - name: shortcut
              string: Add item
            - name: expectedTab
              string: Add item
      - click:
          identifier: sc.mappings.navigation.backButton
      - sleep:
          duration: 5000
      - try:
          flow:
            - verifyIdentifier:
                text:
                  - identifier: sc.mappings.navigation.currentTabTitle
                    contains: Catalog
          catch:
            flow:
              # For IOS

  - name: sc.functions.items.itemDetails.validateErrorMessageDisplay
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.header
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.errorSection
      - click:
          identifier: sc.mappings.items.itemDetails.errorSectionLink
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.errors.title
            - identifier: sc.mappings.items.itemDetails.errors.subTitle
      - click:
          identifier: sc.mappings.items.itemDetails.errors.close

  - name: sc.functions.items.itemDetails.validateErrorAlertOnPriceEdit
    flow:
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.header
            - identifier: sc.mappings.items.itemDetails.editPrice.link
      - click:
          identifier: sc.mappings.items.itemDetails.editPrice.link
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.editPrice.pageTitle
      - getString:
          identifier: sc.mappings.items.itemDetails.editPrice.currentPrice
          attribute: text
          storeIn: currentItemPrice
      - arithmetic:
          expression: (${currentItemPrice} * 2) + 1
          storeIn: newSellingPrice
      - enterText:
          identifier: sc.mappings.items.itemDetails.editPrice.sellingPrice
          string: ${newSellingPrice}
      - click:
          identifier: sc.mappings.items.itemDetails.editPrice.confirmButton
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.items.itemDetails.editPrice.priceAlertImage
            - identifier: sc.mappings.items.itemDetails.editPrice.priceAlertMessage
            - identifier: sc.mappings.items.itemDetails.editPrice.confirmButton
      - verifyIdentifier:
          text:
            - identifier: sc.mappings.items.itemDetails.editPrice.confirmButton
              contains: Confirm
      - click:
          identifier: sc.mappings.items.itemDetails.editPrice.close

  ###########################################################################################
  # Description : Function to validate if the items list page displays                      #
  # 1. Validates the presense of app bar title and its contents
  # 2. Validates facets sections exists
  # 3. Validates the list view section loaded
  # --------------------------------------------------------------------------------------- #
  # Pre-requisite : Should be in items page selected from the menu                          #
  ###########################################################################################
  - name: sc.functions.catalog.validateItemListPageDisplays
    flow:
      - log: Verifying the nav bar items in the ${tabName} list page
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.itemsView.navBar.title
            - identifier: sc.mappings.itemsView.navBar.search
            - identifier: sc.mappings.itemsView.navBar.filter
      - executeFunction:
          name: sc.functions.resetFailedString
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.itemsView.navBar.title
            - name: expectedValue
              string: ${tabName}
            - name: identifierName
              string: Items Page Title
      - executeFunction:
          name: sc.functions.validatedFailedString

      - log: Verifying the list tile items section in the ${tabName} list page

      - if: 
          condition: ${tabName} == 'Catalog'
          then:
            - executeFunction:
                name: sc.functions.items.validateFacetAndSectionsLoaded
                params:
                  - name: section
                    string: sc.mappings.items.firstItemCardOrNoResult

      - if: 
          condition: ${tabName} == 'Orders'
          then:
            - executeFunction:
                name: sc.functions.items.validateFacetAndSectionsLoaded
                params:
                  - name: section
                    string: sc.mappings.orders.firstOrderCardOrNoResult

      - if: 
          condition: ${tabName} == 'Returns'
          then:
            - executeFunction:
                name: sc.functions.items.validateFacetAndSectionsLoaded
                params:
                  - name: section
                    string: sc.mappings.returnsListView.listItemsSection    


  - name: sc.functions.items.validateFacetAndSectionsLoaded
    flow:
      - log: Verifying the facets section in the ${tabName} list page

      - verifyIdentifier:
          timeout: 10000
          present:
            - identifier: sc.mappings.itemsView.facets
      - verifyIdentifier:
          timeout: 10000
          present:
            - identifier: ${section}
      - if:
          condition: ${facetName} != null
          then:
            - verifyIdentifier:
                timeout: 3000
                present:
                  - identifier: sc.mappings.itemsView.facetSelected                  


  ###########################################################################################
  # Description : Function to select the facet from the list                                #
  # --------------------------------------------------------------------------------------- #
  # [mandatory] : ${facetName}
  ###########################################################################################
  - name: sc.functions.catalog.selectFacet
    flow:
      - log: Checking for the facet ${facetName}
      - storeIn:
          key: facet
          value: ${facetName}
      - if:
          identifier:
            timeout: 1000
            notPresent:
              - identifier: sc.mappings.itemsView.facet 
          then:
            - storeIn:
                key: facet
                value: All
            - scroll:
                direction: right
                untilIdentifier: sc.mappings.itemsView.facet
                withinIdentifier: sc.mappings.itemsView.facets
            - storeIn:
                key: facet
                value: ${facetName}
            - if:
                identifier:
                  timeout: 1000
                  notPresent:
                    - identifier: sc.mappings.itemsView.facet
                then:
                  - scroll:
                      direction: left
                      untilIdentifier: sc.mappings.itemsView.facet
                      withinIdentifier: sc.mappings.itemsView.facets
      - log: Selecting the facet ${facetName}
      - click:
          identifier: sc.mappings.itemsView.facet
      - verifyIdentifier:
          timeout: 3000
          present:
            - identifier: sc.mappings.itemsView.facetSelected
      - sleep:
          duration: 3000
      - log: Facet '${facetName}' has been selected


  ###########################################################################################
  # Description : Function to validate the content in the list card for different facets    #
  # * This function selects the facet and validate the contents of each card in the catalog 
  #   section.
  # --------------------------------------------------------------------------------------- #
  # [mandatory] : ${facetName}
  ###########################################################################################
  - name: sc.functions.catalog.validateFacetViewContent
    flow:
      - executeFunction: 
          name: sc.functions.catalog.selectFacet
      - loop:
          begin: 1
          end: 4
          storeIndex: index
          mode: increment
          flow:
            - log: ${facetName} - loop - ${index}
            - if:
                condition: ${index} == 1
                then:
                  - if:
                      identifier:
                        present:
                          - identifier: us.mappings.cart.loadingImage
                      then:
                        - sleep:
                            duration: 5000
                        - log: loop count $i - waiting 5 secs for loading image to disappear

            - log: Validating if all the elements are present or not
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.catalogListView.listItems.itemNameWithIndex
                  - identifier: sc.mappings.catalogListView.listItems.skuTitleWithIndex
                  - identifier: sc.mappings.catalogListView.listItems.skuValueWithIndex
                  - identifier: sc.mappings.catalogListView.listItems.priceTitleWithIndex
                  - identifier: sc.mappings.catalogListView.listItems.priceValueWithIndex
                  - identifier: sc.mappings.catalogListView.listItems.tagWithIndex
            - log: Validate if the sku title value
            - verifyIdentifier:
                text:
                  - identifier: sc.mappings.catalogListView.listItems.skuTitleWithIndex
                    contains: sc.tab.catalog.item.skuTitle
            - log: Validate the price title value
            - verifyIdentifier:
                text:
                  - identifier: sc.mappings.catalogListView.listItems.priceTitleWithIndex
                    contains: sc.tab.catalog.item.priceTitle
            - log: Validate the tag value
            - if:
                condition: ${facetName} != 'All'
                then:
                  - verifyIdentifier:
                      text:
                        - identifier: sc.mappings.catalogListView.listItems.tagWithIndex
                          contains: ${facetName}
            - executeFunction:
                name: sc.functions.catalog.validateFacetCardValues


  ###########################################################################################
  # Description : Common Function to validate the values in the cart for title, sku, price  #
  # * This function validates the contents loaded in each card (Item Name, SKU, Price values)
  #   are loaded properly. Validating if the contents are not empty.
  # * This is common function for both ios and android
  ###########################################################################################
  - name: sc.functions.catalog.validateFacetCardValuesCommon
    flow:
      - storeIn:
          key: validationFailedString
          value: 'null'
      - log: Validate if the values in the card is not empty
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalogListView.listItems.itemNameWithIndex
            - name: identifierName
              string: Item Name
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalogListView.listItems.skuValueWithIndex
            - name: identifierName
              string: SKU Value
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalogListView.listItems.priceValueWithIndex
            - name: identifierName
              string: Price Value 
      - if:
          condition: ${validationFailedString} != null
          then:
            - failTest:
                message: ${validationFailedString}


  ###########################################################################################
  # Description : Common Function to save the values title, sku, price and select the card  #
  # * This is common function for both ios and android
  ###########################################################################################
  - name: sc.functions.catalog.saveItemDetailsAndSelectCommon 
    flow:
      # index is needed to select the n-th item from the list
      - storeIn:
          key: index
          value: 1
      - getString:
          identifier: sc.mappings.catalogListView.listItems.itemNameWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: itemNameValue
      - getString:
          identifier: sc.mappings.catalogListView.listItems.skuValueWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: skuValue
      - getString:
          identifier: sc.mappings.catalogListView.listItems.priceValueWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: priceValue
      - getString:
          identifier: sc.mappings.catalogListView.listItems.tagWithIndex
          attribute: ${identifierTextAttribute}
          storeIn: itemStatusValue
          
      - executeFunction:
          name: sc.functions.items.selectFirstItem


  ###########################################################################################
  # Description : Common Function to validate the item details page price, inventory,       #
  # details section                                                                         #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function 'sc.functions.catalog.item.validateItemDetails'
  # [mandatory]  ${itemNameValue} - comes from previous function where first tiem is selected
  ###########################################################################################
  - name: sc.functions.catalog.item.validateItemDetailsCommon
    flow:
      - log: test ${itemNameValue}
      - getString:
          identifier: sc.mappings.items.itemDetails.itemTitle
          attribute: ${identifierTextAttribute}
          storeIn: itemDetailsNameValue
      - if:
          condition: ${itemNameValue} != ${itemDetailsNameValue}
          then:
            - failTest:
                message: "Expected title: ${itemNameValue}, Actual Title: ${itemDetailsNameValue}"

      - executeFunction:
          name: sc.functions.catalog.item.itemDetails.price
      
      - executeFunction:
          name: sc.functions.catalog.item.itemDetails.inventory
      
      - executeFunction:
          name: sc.functions.catalog.item.itemDetails.details

  ###########################################################################################
  # Description : Function to validate the price section in item details page               #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function 'sc.functions.catalog.item.validateItemDetails'
  ###########################################################################################
  - name: sc.functions.catalog.item.itemDetails.price
    flow:
      - log: Validating price section details are present
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.catalog.itemDetails.price.title
            - identifier: sc.mappings.catalog.itemDetails.price.sellingPriceTitle
            - identifier: sc.mappings.catalog.itemDetails.price.sellingPriceValue
      - log: Validating price section details are not empty
      - executeFunction:
          name: sc.functions.resetFailedString
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.price.title
            - name: expectedValue
              string: Price
            - name: identifierName
              string: Price Section Title
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.price.sellingPriceTitle
            - name: expectedValue
              string: Selling price
            - name: identifierName
              string: Selling Price
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.price.sellingPriceValue
            - name: identifierName
              string: Selling Price Value
      - executeFunction:
          name: sc.functions.validatedFailedString
      - log: Validating selling price value matches with the selected list item
      - getString:
          identifier: sc.mappings.catalog.itemDetails.price.sellingPriceValue
          attribute: ${identifierTextAttribute}
          storeIn: itemDetailsSellingPriceValue
      - if:
          condition: ${priceValue} != ${itemDetailsSellingPriceValue}
          then:
            - failTest:
                message: "Expected price: ${priceValue}, Actual price: ${itemDetailsSellingPriceValue}"
      

  ###########################################################################################
  # Description : Function to validate the inventory section in item details page           #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function 'sc.functions.catalog.item.validateItemDetails'
  ###########################################################################################
  - name: sc.functions.catalog.item.itemDetails.inventory
    flow:
      - log: Validating price section details are present
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.catalog.itemDetails.inventory.title
            - identifier: sc.mappings.catalog.itemDetails.inventory.availableTitle
            - identifier: sc.mappings.catalog.itemDetails.inventory.availableCountValue
      - executeFunction:
          name: sc.functions.resetFailedString
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.inventory.title
            - name: expectedValue
              string: Inventory
            - name: identifierName
              string: Inventory Section Title
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.inventory.availableTitle
            - name: expectedValue
              string: Available
            - name: identifierName
              string: Available Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.inventory.availableCountValue
            - name: identifierName
              string: Available Count
      - executeFunction:
          name: sc.functions.validatedFailedString

  ###########################################################################################
  # Description : Function to validate the details section in item details page             #
  # * This is common function for both ios and android                                      #
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifierTextAttribute} - comes from parent function 'sc.functions.catalog.item.validateItemDetails'
  ###########################################################################################
  - name: sc.functions.catalog.item.itemDetails.details
    flow:
      - log: Validating details section details are present
      - verifyIdentifier:
          present:
            - identifier: sc.mappings.catalog.itemDetails.details.title
            - identifier: sc.mappings.catalog.itemDetails.details.fulfilmentTitle
            - identifier: sc.mappings.catalog.itemDetails.details.fulfilmentValue
            - identifier: sc.mappings.catalog.itemDetails.details.lifecycleTitle
            - identifier: sc.mappings.catalog.itemDetails.details.lifecycleValue
            - identifier: sc.mappings.catalog.itemDetails.details.lastModifiedTitle
            - identifier: sc.mappings.catalog.itemDetails.details.lastModifiedValue
            - identifier: sc.mappings.catalog.itemDetails.details.upcTitle
            - identifier: sc.mappings.catalog.itemDetails.details.upcValue
            - identifier: sc.mappings.catalog.itemDetails.details.conditionTitle
            - identifier: sc.mappings.catalog.itemDetails.details.conditionValue
            - identifier: sc.mappings.catalog.itemDetails.details.gtinTitle
            - identifier: sc.mappings.catalog.itemDetails.details.gtinValue
            - identifier: sc.mappings.catalog.itemDetails.details.skuTitle
            - identifier: sc.mappings.catalog.itemDetails.details.skuValue
            - identifier: sc.mappings.catalog.itemDetails.details.itemIdTitle
            - identifier: sc.mappings.catalog.itemDetails.details.itemIdValue
            - identifier: sc.mappings.catalog.itemDetails.details.statusTitle
            - identifier: sc.mappings.catalog.itemDetails.details.statusValue          

      - executeFunction:
          name: sc.functions.resetFailedString
      - log: 'details: validate Title'
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.title
            - name: expectedValue
              string: Details
            - name: identifierName
              string: Details Section Title
      - log: 'details: validate Fullfilment'
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.fulfilmentTitle
            - name: expectedValue
              string: Fulfilled by
            - name: identifierName
              string: Fulfillment Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.fulfilmentValue
            - name: identifierName
              string: Fulfillment Value
      - log: 'details: validate Lifecycle'
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.lifecycleTitle
            - name: expectedValue
              string: Lifecycle
            - name: identifierName
              string: Lifecycle Title   
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.lifecycleValue
            - name: identifierName
              string: Lifecycle Value 
      - log: 'details: validate Last Modified'        
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.lastModifiedTitle
            - name: expectedValue
              string: Last Modified
            - name: identifierName
              string: Last Modified Title   
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.lastModifiedValue
            - name: identifierName
              string: Last Modified Value 
      - log: 'details: validate UPC'        
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.upcTitle
            - name: expectedValue
              string: UPC
            - name: identifierName
              string: UPC Title   
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.upcValue
            - name: identifierName
              string: UPC Value     
      - log: 'details: validate Condition'        
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.conditionTitle
            - name: expectedValue
              string: Condition
            - name: identifierName
              string: Condition Title   
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.conditionValue
            - name: identifierName
              string: Condition Value 
      - log: 'details: validate GTIN'        
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.gtinTitle
            - name: expectedValue
              string: GTIN
            - name: identifierName
              string: GTIN Title   
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.gtinValue
            - name: identifierName
              string: GTIN Value   
      - log: 'details: validate SKU'        
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.skuTitle
            - name: expectedValue
              string: SKU
            - name: identifierName
              string: SKU Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.skuValue
            - name: identifierName
              string: SKU Value
      - log: 'details: validate Item ID'        
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.itemIdTitle
            - name: expectedValue
              string: Item ID
            - name: identifierName
              string: Item ID Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.itemIdValue
            - name: identifierName
              string: Item ID Value
      - log: 'details: validate Status'        
      - executeFunction:
          name: sc.functions.validateText.equals
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.statusTitle
            - name: expectedValue
              string: Status
            - name: identifierName
              string: Status Title
      - executeFunction:
          name: sc.functions.checkIdentifier.isNotEmpty
          params:
            - name: identifier
              string: sc.mappings.catalog.itemDetails.details.statusValue
            - name: identifierName
              string: Status Value
      - executeFunction:
          name: sc.functions.validatedFailedString
      - log: Validating sku value matches with the selected list item
      - getString:
          identifier: sc.mappings.catalog.itemDetails.details.skuValue
          attribute: ${identifierTextAttribute}
          storeIn: itemDetailsSkuValue
      - if:
          condition: ${skuValue} != ${itemDetailsSkuValue}
          then:
            - failTest:
                message: "Expected sku: ${skuValue}, Actual sku: ${itemDetailsSSkuValue}"
      - log: Validating status value matches with the selected list item
      - getString:
          identifier: sc.mappings.catalog.itemDetails.details.statusValue
          attribute: ${identifierTextAttribute}
          storeIn: itemDetailsStatusValue
      - if:
          condition: ${itemStatusValue} != ${itemDetailsStatusValue}
          then:
            - failTest:
                message: "Expected sku: ${itemStatusValue}, Actual sku: ${itemDetailsStatusValue}"

  ###########################################################################################
  # Description : Function to validate if the selling price can be updated                  #
  # * This is common function for both ios and android                                      #
  #---------------------------------------- Params -----------------------------------------#
  # [Optional]  ${updatePriceMoreThanDouble} - true or false based on price to be updated   #
  ###########################################################################################
  - name: sc.functions.catalog.item.idemDetails.updateSellingPrice
    flow:
      - getString:
          identifier: sc.mappings.catalog.itemDetails.price.sellingPriceValue
          attribute: ${identifierAttribute}
          extractNumbers: true
          storeIn: currentPrice
      - if:
          condition: ${updatePriceMoreThanDouble} == true
          then:
            - arithmetic:
                expression: ${currentPrice} * 2 + 1
                storeIn: newPriceValue
          else:
            - arithmetic:
                expression: ${currentPrice} * 2 - 1
                storeIn: newPriceValue
      - executeNode:
          file: sellerCenter/e2e-tests/helpers/castString.js
          args:
            - value: ${newPriceValue}
            - value: toCommaString
          getResponse:
            storeIn: newPriceValueString
      - click:
          identifier: sc.mappings.catalog.itemDetails.price.sellingPriceEdit      
      - enterText:
          identifier: sc.mappings.catalog.itemDetails.price.sellingPrice.edit.newPrice
          string: "${newPriceValue}00"
      - click:
          identifier: sc.mappings.catalog.itemDetails.price.sellingPrice.edit.updatePrice
      - if:
          condition: ${updatePriceMoreThanDouble} == true
          then:
            - verifyIdentifier:
                present:
                  - identifier: sc.mappings.items.itemDetails.editPrice.priceAlertImage
                  - identifier: sc.mappings.items.itemDetails.editPrice.priceAlertMessage
            - if:
                identifier:
                  present:
                    - identifier: sc.mappings.catalog.itemDetails.price.updatePrice.confirmButton
                then:
                  - click:
                      identifier: sc.mappings.catalog.itemDetails.price.updatePrice.confirmButton
                  - storeIn:
                      key: updatedWithAlert
                      value: true
                else:
                  - failTest:
                      message: "Confirmation Alert not shown for updating more than double price"
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - verifyIdentifier:
                timeout: 15000
                text:
                  - identifier: sc.mappings.catalog.itemDetails.snackbarText
                    equals: Your price update to $${newPriceValueString} was saved, and will appear on Walmart.com in about 15 minutes.
          else:
            - verifyIdentifier:
                timeout: 15000
                label:
                  - identifier: sc.mappings.catalog.itemDetails.snackbarText
                    equals: Your price update to $${newPriceValueString} was saved, and will appear on Walmart.com in about 15 minutes.