functions:

  - name: sc.functions.fetchItemDetails
    flow:
      - executeNode:
          file: sellerCenter/scripts/getItemDetails.js
          args:
            - value: ${itemStatus}
            - value: ${requestType}
            - value: ${searchType}
          getResponse:
            storeIn: itemDetails

  - name: sc.functions.updateFailedString
    flow:
      - if:
          condition: ${validationFailedString} == null
          then:
          - storeIn:
              key: validationFailedString
              value: ${contentString}
          else:
          - storeIn:
              key: validationFailedString
              value: ${validationFailedString}, ${contentString}

  - name: us.functions.global.navigation.goToDeepLink
    platform: ios
    flow:
      - verifyValue:
          identifier: $deepLinkUrl
          contains: 'sellercenter://'
      - openLink: ${deepLinkUrl}
      - executeFunction:
          name: us.functions.global.navigation.openDeepLink

  # Intended only to be used by us.functions.global.navigation.goToDeepLink
  - name: us.functions.global.navigation.openDeepLink
    platform: ios
    flow:
      - try:
          flow:
            - verifyIdentifier:
                timeout: 0
                present:
                  - identifier: Open in “Walmart”?
            - click:
                identifier: Open
          catch:
            flow:
              - log: Deeplink pop up not displayed

  - name: sc.functions.resetFailedString
    flow:
       - storeIn:
          key: validationFailedString
          value: 'null'

  - name: sc.functions.validatedFailedString
    flow:
      - if:
          condition: ${validationFailedString} != null
          then:
            - failTest:
                message: ${validationFailedString}

  - name: sc.functions.checkIdentifier.isNotEmpty
    flow:
      - getString:
          identifier: ${identifier}
          attribute: ${identifierTextAttribute}
          storeIn: identifierValue
      - executeNode:
          file: sellerCenter/e2e-tests/helpers/stringParsing.js
          args:
            - value: ${identifierValue}
            - value: lengthValidate
            - value: gt
            - value: 0
          getResponse:
            storeIn: identifierValueValidate
      - log: ${identifierValueValidate}
      - if:
          condition: ${identifierValueValidate} == true
          then:
            - log: "${identifierName} is not empty"
          else:
            - executeFunction:
                name: sc.functions.updateFailedString
                params:
                  - name: contentString
                    string: "${identifierName} is empty"

  
  - name: sc.functions.validateText.contains
    flow:
      - getString:
          identifier: ${identifier}
          attribute: ${identifierTextAttribute}
          storeIn: actualValue
      - executeNode:
          file: sellerCenter/e2e-tests/helpers/stringParsing.js
          args:
            - value: ${actualValue}
            - value: textValidate
            - value: contains
            - value: ${expectedValue}
          getResponse:
            storeIn: result
      - log: ${result}
      - if:
          condition: ${result} == true
          then:
            - log: "${actualValue} contains ${expectedValue}"
          else:
            - executeFunction:
                name: sc.functions.updateFailedString
                params:
                  - name: contentString
                    string: "${actualValue} does not contain ${expectedValue}"


  - name: sc.functions.validateText.matchesWith
    flow:
      - getString:
          identifier: ${identifier}
          attribute: ${identifierTextAttribute}
          storeIn: actualValue
      - executeNode:
          file: sellerCenter/e2e-tests/helpers/stringParsing.js
          args:
            - value: ${actualValue}
            - value: presentInList
            - value: null
            - value: ${expectedValue}
          getResponse:
            storeIn: result
      - log: ${result}
      - if:
          condition: ${result} == true
          then:
            - log: "${actualValue} contains ${expectedValue}"
          else:
            - executeFunction:
                name: sc.functions.updateFailedString
                params:
                  - name: contentString
                    string: "${actualValue} does not present in ${expectedValue}"                    


  - name: sc.functions.utils.getActualAttributeValue
    flow:
      - log: ${identifier}
      - if:
          condition: ${storeValue} == null
          then:
            - storeIn:
                key: storeValue
                value: actualValue
      - if:
          condition: ${identifierAttribute} == null
          then:
            - getString:
                identifier: "${identifier}"
                attribute: ${identifierTextAttribute}
                storeIn: ${storeValue}
          else:
            - getString:
                identifier: ${identifier}
                attribute: ${identifierAttribute}
                storeIn: ${storeValue}
      - storeIn:
          key: identifierAttribute
          value: 'null'
      - storeIn:
          key: storeValue
          value: 'null'


  - name: sc.functions.utils.resetAttribute
    flow:
      - storeIn:
          key: identifierAttribute
          value: "null"
  

  - name: sc.functions.validateText.equalsJS
    flow:
      - executeFunction: 
          name: sc.functions.utils.getActualAttributeValue
          params:
            - name: identifier
              string: ${identifier}
      - executeNode:
          file: sellerCenter/e2e-tests/helpers/stringParsing.js
          args:
            - value: ${actualValue}
            - value: textValidate
            - value: equals
            - value: ${expectedValue}
          getResponse:
            storeIn: result
      - log: "String equals actual: ${actualValue}, expected: ${expectedValue} result: ${result}"
      - if:
          condition: ${result} == true
          then:
            - log: "${actualValue} equals ${expectedValue}"
          else:
            - executeFunction:
                name: sc.functions.updateFailedString
                params:
                  - name: contentString
                    string: "${actualValue} does not contain ${expectedValue}"
            - if:
                condition: ${failTest} == true
                then:
                  - executeFunction:
                      name: sc.functions.validatedFailedString
      - executeFunction: 
          name: sc.functions.utils.resetAttribute


  ###########################################################################################
  # Description : To validate if the identifier attribute text matches with the input value
  # ---------------------------------------- Params --------------------------------------- #
  # [mandatory]  ${identifier} - sc.mappings.android.ios
  # [mandatory]  ${identifierTextAttribute} - label, text, name etc
  # [mandatory]  ${identifierName} - Text that saves against the error
  # [mandatory]  ${expectedValue} - Price, Inventory etc
  ###########################################################################################
  - name: sc.functions.validateText.equals
    flow:
      - getString:
          identifier: ${identifier}
          attribute: ${identifierTextAttribute}
          storeIn: actualValue
      - if:
          condition: ${expectedValue} != ${actualValue}
          then:
            - executeFunction:
                name: sc.functions.updateFailedString
                params:
                  - name: contentString
                    string: "${identifierName} - Expected: ${expectedValue} & Actual: ${actualValue}"


  - name: sc.functions.utils.textOrLabelEquals
    flow:
      - if:
          condition: ${APP_PLATFORM} == 'android'
          then:
            - verifyIdentifier:
                text:
                  - identifier: ${identifier}
                    equals: ${value}
          else:
            - verifyIdentifier:
                label:
                  - identifier: ${identifier}
                    equals: ${value}


  - name: sc.functions.utils.isChecked
    platform: android
    flow:
      - log: isChecked - android
      - getString:
          identifier: ${identifier}
          attribute: checked
          storeIn: actualValue
      - if:
          condition: ${actualValue} == "true"
          then:
            - log: "Element is checked"
          else:
            - executeFunction:
                name: sc.functions.updateFailedString
                params:
                  - name: contentString
                    string: "Element is unchecked"


  - name: sc.functions.utils.isChecked
    platform: ios
    flow:
      - log: isChecked - ios
      - log: ${identifier}
      - getString:
          identifier: ${identifier}
          attribute: value
          storeIn: actualValue
      - if:
          condition: ${actualValue} == "1"
          then:
            - log: "Element is checked"
          else:
            - executeFunction:
                name: sc.functions.updateFailedString
                params:
                  - name: contentString
                    string: "Element is unchecked"


  - name: sc.functions.utils.searchInput
    flow:
      - enterText:      
          identifier: ${identifier}
          string: ${value}
          clearField: true
          pressEnter: true
      - if:
          condition: ${APP_PLATFORM} != 'android'
          then:
            - if:
                identifier:
                  present:
                    - identifier: sc.mappings.global.search.searchButton
                then:
                  - click:
                      identifier: sc.mappings.global.search.searchButton
                  - sleep:
                      duration: 3000


  - name: sc.functions.utils.afterSteps
    flow:
      - if:
          condition: "${testStatus} == 'passed'"
          then:
            - log: "Test passed"
          else:
            - log: "Test failed"
