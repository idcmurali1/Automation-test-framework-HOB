inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - pr: disabled
      - push:
          manualOnly: true

      - manual:
          name: E2E [Dev build][STAGING]
          call: run_tests_teflon(SAUCE_APP = 'storage:filename=sc-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'sc-e2e', DEPENDENCY_PROFILE = 'looper-teflon')

      - cron:
          spec: "0 10,20 * * *"
          call: run_tests_teflon(SAUCE_APP = 'storage:filename=sc-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'sc-e2e', DEPENDENCY_PROFILE = 'looper-teflon')

      - manual:
          name: E2E [Dev build][PRODUCTION]
          call: run_tests_prod(SAUCE_APP = 'storage:filename=sc-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-sc-prod-e2e', DEPENDENCY_PROFILE = 'looper')

      - cron:
          spec: "0 23 * * *"
          call: run_tests_prod(SAUCE_APP = 'storage:filename=sc-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-sc-prod-e2e', DEPENDENCY_PROFILE = 'looper')

      - manual:
          name: E2E [Dev build][PRODUCTION in teflon]
          call: run_tests_teflon(SAUCE_APP = 'storage:filename=sc-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-sc-prod-e2e', DEPENDENCY_PROFILE = 'looper-teflon')

      - cron:
          spec: "0 13 * * *"
          call: run_tests_teflon(SAUCE_APP = 'storage:filename=sc-development-latest.zip', APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'p1-sc-prod-e2e', DEPENDENCY_PROFILE = 'looper-teflon')

      - manual:
          name: E2E [Feature build][STAGING]
          call: run_tests_teflon_feature(APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'sc-staging-feature-build', DEPENDENCY_PROFILE = 'looper')

      - manual:
          name: E2E [Feature build][PRODUCTION]
          call: run_tests_prod_feature(APP_BUILD_BRANCH = 'development-latest', TEST_TAGS = 'sc-prod-feature-build', DEPENDENCY_PROFILE = 'looper')

envs:
  global:
    variables:
      MARKET: sellerCenter
      APP_PLATFORM: ios
      POST_TO_ES: true
      POST_TO_ANIVIA: true
      USE_TEST_REPORT: true
      SLACK_CHANNEL: sc-app-automation-result
      APPLITOOLS_API_KEY: ENC[Rt+/oXg4fNf9b2Pq2MQ47frfGB42KVDp7l7/tQ/1na985VV7Ia42QMgDDOppIoaDTWfXJmsQW0Imo7rpXjXaQQ==]
      SLACK_TEST_RUN_MESSAGE: "${TEST_PLAN_STATUS}\n>>> *Branch*: ${TRIGGER_BRANCH}\n
              *App Build*: ${SAUCE_APP}\n
              *Build Link*: ${BUILD_URL}\n
              *Test Report*: ${SLACK_TEST_REPORT_MESSAGE}\n
              *Report Link*: ${REPORT_URL}"

  # Environment profiles can be specified here with specific environment variable values.
  env_ios_teflon:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: sellerCenter/e2e-tests/dependencies/ios/ios-default.yaml
    #   DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon

  env_ios_teflon_feature:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: sellerCenter/e2e-tests/dependencies/ios/ios-default.yaml
    #   DEPENDENCY_PROFILE: looper
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon
      SAUCE_APP: storage:filename=${SAUCE_APP_FILE_NAME}
      SAUCE_FILE_NAME: ${SAUCE_APP_FILE_NAME}
      FILE_TYPE: zip

  env_ios_prod:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: sellerCenter/e2e-tests/dependencies/ios/ios-default.yaml
    #   DEPENDENCY_PROFILE: looper
      GLASS_ENV: production
      MAPPING_LABELS: production
      EMAIL_SUBJECT: Apps iOS E2E Seller center Test Complete - Build ${BUILD_ID}
      EMAIL_MESSAGE:
        "Test Results:
        https://e2e-grafana.walmart.com/d/adonyf5ojjwu8e/apps-e2e-test-results-sellercenter?orgId=1&from=now-7d&to=now&var-platform=${APP_PLATFORM}&var-profile=development-latest&var-buildId=${BUILD_ID}&var-testTag=p1-sc-prod-e2e"

  env_ios_prod_feature:
    variables:
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'
      DEPENDENCY_FILE_NAME: sellerCenter/e2e-tests/dependencies/ios/ios-default.yaml
    #   DEPENDENCY_PROFILE: looper
      GLASS_ENV: production
      MAPPING_LABELS: production
      SAUCE_APP: storage:filename=${SAUCE_APP_FILE_NAME}
      SAUCE_FILE_NAME: ${SAUCE_APP_FILE_NAME}
      FILE_TYPE: zip

flows:

  setup:
    - hygieia.publishBuild()
    - shell (name Remove node_modules): |
        rm -frv node_modules
    - shell (name npm cache clear): |
        npm cache clear --force
    - shell (name sleep 10): |
        sleep 10
    - shell (name npm install): |
        npm install
    - if: |
        %{USE_CUSTOM_R2_JAR == 'false'}
      then:
        - shell (name download r2 binary): |
            npm run download-r2
      else:
        - shell: echo Using custom R2 jar

  run_tests_teflon:
    - call: build_tunnel(env_ios_teflon)

  run_tests_prod:
    - call: build_tunnel(env_ios_prod)

  run_tests_prod_feature:
    - call: upload_build_to_sauce_labs(env_ios_prod_feature)
    - call: build_tunnel(env_ios_prod_feature)

  run_tests_teflon_feature:
    - call: upload_build_to_sauce_labs(env_ios_teflon_feature)
    - call: build_tunnel(env_ios_teflon_feature)

  download_build:
    - shell (name Download App Build): |
        sh sellerCenter/scripts/download_build_looper.sh

  upload_build:
    - shell (name Upload Build to Sauce Labs): |
        sh sellerCenter/scripts/upload_build_looper.sh

  upload_build_to_sauce_labs:
    - node(label = linux, isolation = except_project, ws = exclusive):
        try:
          # - declare(APP_BRANCH)
          - declare(APP_VERSION)
          # - call: get_app_branch
          - if: $APP_VERSION
            then:
              - shell (Using manually specified APP_VERSION):
                  echo $APP_VERSION
            else:
              - call: get_app_version
          - (name Environment dump) printenv|sort
          - call: download_build
          - call: upload_build
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1

  build_tunnel:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - shell: npm i -g saucelabs@7.2.2
              - call: start_sc
          - call: execute_test
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - call: stop_sc
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: slack_test_run_helper
          - call: post_test_results_json_to_es
          - if: |
              %{GLASS_ENV == 'production'}
            then:
              - call: post_email(email)

  start_sc:
    - shell:
        sl sc --region us-west-1 --no-autodetect --tunnel-name "sc-sauce-tunnel-${BUILD_ID}" > sc.log 2>&1 &
    - shell: sleep 30s
    - shell: cat sc.log

  stop_sc:
    try:
      - shell: pkill -f '/bin/sc'
    catch:
      - echo "Stop Sauce Connect Tunnel failed - $flowErrorMessage"

#Refer https://dx.walmart.com/nextgenci/documentation/confluence/10-Build-Parameters-2324980504 to setup password parameters
parameters:
  - SAUCE_USERNAME: {type: string, defaultValue: "ce-r2", label: ""}
  - APP_BUILD_URL: {type: string, defaultValue: "", label: "[MANDATORY ONLY FOR FEATURE BUILDS]
Provide artifactory download link for any feature build to be uploaded into saucelabs.
e.g : https://mvn.ci.artifacts.walmart.com/artifactory/walmart-android-mvn-snapshots-local/com/walmart/android/glass/seller-feature/glass-seller-apk-debug/24.31-debug--SNAPSHOT/glass-seller-apk-debug-24.31-debug--20240826.135444-225.apk"}
  - SAUCE_APP_FILE_NAME: {type: string, defaultValue: "", label: "[MANDATORY ONLY FOR FEATURE BUILDS]
OPTIONAL: Add file name of the feature build to be uploaded to sauce labs with extension (.apk or .zip)"}
  - EMAIL_TO: {type: string, defaultValue: "preetham.bhaskara@walmart.com", label: "Comma separated email Ids"}
  - SAUCE_ACCESS_KEY: {type: password, defaultValue: "", label: ""}

