inherit: 'job:///glass-mobile-app-automation/looper-base:.looper.yml'

gitShallowDepth: 10

branches:
  - spec: development
    scheduling: concurrent

    triggers:
      - pr: disabled
      - push:
          manualOnly: true

      - manual:
          name: iOS functional[Dev build][STAGING]
          call: run_tests_teflon_ios(TEST_TAGS = 'sc-staging-functional-test')

      - manual:
          name: Android functional[Dev build][STAGING]
          call: run_tests_teflon_android(TEST_TAGS = 'sc-staging-functional-test')

envs:
  global:
    variables:
      MARKET: sellerCenter
      POST_TO_ES: true
      USE_TEST_REPORT: true
      GLASS_ENV: teflon
      MAPPING_LABELS: teflon-functional
      DEPENDENCY_PROFILE: looper-teflon
      APP_BUILD_BRANCH: development-latest
      TEST_SESSION_ID: '%{(Math.abs(new(java.util.Random).nextInt()) % 100000000 + 1)}'

  # Environment profiles can be specified here with specific environment variable values.
  env_teflon_ios:
    variables:
      APP_PLATFORM: ios
      DEPENDENCY_FILE_NAME: sellerCenter/functional-tests/dependencies/ios/ios-default.yaml
      SAUCE_APP: 'storage:filename=sc-development-latest.zip'

  env_teflon_android:
    variables:
      APP_PLATFORM: android
      DEPENDENCY_FILE_NAME: sellerCenter/functional-tests/dependencies/android/android-default.yaml
      SAUCE_APP: 'storage:filename=sc-development-latest.apk'

flows:

  setup:
    - hygieia.publishBuild()
    - shell (name Remove node_modules): |
        rm -frv node_modules
    - shell (name npm cache clear): |
        npm cache clear --force
    - shell (name sleep 10): |
        sleep 10
    - shell (name npm install): |
        npm install
    - if: |
        %{USE_CUSTOM_R2_JAR == 'false'}
      then:
        - shell (name download r2 binary): |
            npm run download-r2
      else:
        - shell: echo Using custom R2 jar

  run_tests_teflon_ios:
    - call: build_tunnel(env_teflon_ios)

  run_tests_teflon_android:
    - call: build_tunnel(env_teflon_android)

  build_tunnel:
    - node(label = linux, isolation = except_project, ws = exclusive, group = '${APP_PLATFORM} - ${TEST_TAGS}'):
        try:
          - declare(APP_VERSION)
          - call: setup
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - shell: npm i -g saucelabs@7.2.2
              - call: start_sc
          - call: execute_test
          - if: |
              %{GLASS_ENV == 'teflon'}
            then:
              - call: stop_sc
          - call: generate_sauce_labs_build_url
          - call: publish_report
          - call: get_test_failures
          - var(TEST_RUN_STATUS = $TEST_RUN_PASSED)
        catch:
          - var(TEST_RUN_STATUS = $TEST_RUN_FAILED)
          - shell: exit 1
        finally:
          - call: post_test_results_json_to_es

  start_sc:
    - shell:
        sl sc --region us-west-1 --no-autodetect --tunnel-name "sc-sauce-tunnel-${BUILD_ID}" > sc.log 2>&1 &
    - shell: sleep 30s
    - shell: cat sc.log

  stop_sc:
    try:
      - shell: pkill -f '/bin/sc'
    catch:
      - echo "Stop Sauce Connect Tunnel failed - $flowErrorMessage"
